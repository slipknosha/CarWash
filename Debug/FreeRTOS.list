
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c848  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  0800c9d8  0800c9d8  0001c9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d058  0800d058  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d058  0800d058  0001d058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d060  0800d060  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d060  0800d060  0001d060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d064  0800d064  0001d064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800d068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048d8  20000094  0800d0fc  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000496c  0800d0fc  0002496c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029b9b  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000052b4  00000000  00000000  00049c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f78  00000000  00000000  0004ef18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d70  00000000  00000000  00050e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002824e  00000000  00000000  00052c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001da30  00000000  00000000  0007ae4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df197  00000000  00000000  0009887e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00177a15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008668  00000000  00000000  00177a90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c9c0 	.word	0x0800c9c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800c9c0 	.word	0x0800c9c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0

}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
return 0;
 80004f2:	2300      	movs	r3, #0
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
	...

08000500 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	4a07      	ldr	r2, [pc, #28]	; (800052c <vApplicationGetIdleTaskMemory+0x2c>)
 8000510:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	4a06      	ldr	r2, [pc, #24]	; (8000530 <vApplicationGetIdleTaskMemory+0x30>)
 8000516:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	200000b0 	.word	0x200000b0
 8000530:	20000110 	.word	0x20000110

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b092      	sub	sp, #72	; 0x48
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053a:	f001 fb53 	bl	8001be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f857 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000542:	f000 f995 	bl	8000870 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000546:	f000 f8d5 	bl	80006f4 <MX_I2C1_Init>
  MX_I2S3_Init();
 800054a:	f000 f901 	bl	8000750 <MX_I2S3_Init>
  MX_SPI1_Init();
 800054e:	f000 f92f 	bl	80007b0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000552:	f000 f963 	bl	800081c <MX_USART2_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  osSemaphoreDef(Sem);
 8000556:	2300      	movs	r3, #0
 8000558:	643b      	str	r3, [r7, #64]	; 0x40
 800055a:	2300      	movs	r3, #0
 800055c:	647b      	str	r3, [r7, #68]	; 0x44
  SemHandle = osSemaphoreCreate(osSemaphore(Sem), 1);
 800055e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000562:	2101      	movs	r1, #1
 8000564:	4618      	mov	r0, r3
 8000566:	f009 fa26 	bl	80099b6 <osSemaphoreCreate>
 800056a:	4602      	mov	r2, r0
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <main+0xa0>)
 800056e:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of USART_Queue */
  osMessageQDef(USART_Queue, 16, uint16_t);
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <main+0xa4>)
 8000572:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000576:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000578:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  USART_QueueHandle = osMessageCreate(osMessageQ(USART_Queue), NULL);
 800057c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f009 fa80 	bl	8009a88 <osMessageCreate>
 8000588:	4602      	mov	r2, r0
 800058a:	4b14      	ldr	r3, [pc, #80]	; (80005dc <main+0xa8>)
 800058c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  osMessageQDef(pushnumber, 1, uint16_t);
 800058e:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <main+0xac>)
 8000590:	f107 0420 	add.w	r4, r7, #32
 8000594:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000596:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  pushNumber = osMessageCreate(osMessageQ(pushnumber), NULL);
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f009 fa71 	bl	8009a88 <osMessageCreate>
 80005a6:	4602      	mov	r2, r0
 80005a8:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <main+0xb0>)
 80005aa:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1280);
 80005ac:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <main+0xb4>)
 80005ae:	1d3c      	adds	r4, r7, #4
 80005b0:	461d      	mov	r5, r3
 80005b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f009 f98b 	bl	80098de <osThreadCreate>
 80005c8:	4602      	mov	r2, r0
 80005ca:	4b08      	ldr	r3, [pc, #32]	; (80005ec <main+0xb8>)
 80005cc:	601a      	str	r2, [r3, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ce:	f009 f96f 	bl	80098b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <main+0x9e>
 80005d4:	200040f8 	.word	0x200040f8
 80005d8:	0800c9d8 	.word	0x0800c9d8
 80005dc:	200040f4 	.word	0x200040f4
 80005e0:	0800c9e8 	.word	0x0800c9e8
 80005e4:	200040e8 	.word	0x200040e8
 80005e8:	0800ca04 	.word	0x0800ca04
 80005ec:	20004078 	.word	0x20004078

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b098      	sub	sp, #96	; 0x60
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f00c f91b 	bl	800c83a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	4b31      	ldr	r3, [pc, #196]	; (80006ec <SystemClock_Config+0xfc>)
 8000628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062a:	4a30      	ldr	r2, [pc, #192]	; (80006ec <SystemClock_Config+0xfc>)
 800062c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000630:	6413      	str	r3, [r2, #64]	; 0x40
 8000632:	4b2e      	ldr	r3, [pc, #184]	; (80006ec <SystemClock_Config+0xfc>)
 8000634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <SystemClock_Config+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a2a      	ldr	r2, [pc, #168]	; (80006f0 <SystemClock_Config+0x100>)
 8000648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064c:	6013      	str	r3, [r2, #0]
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <SystemClock_Config+0x100>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065a:	2301      	movs	r3, #1
 800065c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800065e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000662:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000668:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800066e:	2308      	movs	r3, #8
 8000670:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000672:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000676:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800067c:	2307      	movs	r3, #7
 800067e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000684:	4618      	mov	r0, r3
 8000686:	f004 f8e5 	bl	8004854 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000690:	f001 f829 	bl	80016e6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	2105      	movs	r1, #5
 80006b2:	4618      	mov	r0, r3
 80006b4:	f004 fb3e 	bl	8004d34 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006be:	f001 f812 	bl	80016e6 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006c2:	2301      	movs	r3, #1
 80006c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80006c6:	23c0      	movs	r3, #192	; 0xc0
 80006c8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 fd52 	bl	800517c <HAL_RCCEx_PeriphCLKConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80006de:	f001 f802 	bl	80016e6 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3760      	adds	r7, #96	; 0x60
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_I2C1_Init+0x50>)
 80006fa:	4a13      	ldr	r2, [pc, #76]	; (8000748 <MX_I2C1_Init+0x54>)
 80006fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_I2C1_Init+0x50>)
 8000700:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_I2C1_Init+0x58>)
 8000702:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_I2C1_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_I2C1_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_I2C1_Init+0x50>)
 8000712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000716:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <MX_I2C1_Init+0x50>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_I2C1_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <MX_I2C1_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_I2C1_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000730:	4804      	ldr	r0, [pc, #16]	; (8000744 <MX_I2C1_Init+0x50>)
 8000732:	f003 fab7 	bl	8003ca4 <HAL_I2C_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800073c:	f000 ffd3 	bl	80016e6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	2000408c 	.word	0x2000408c
 8000748:	40005400 	.word	0x40005400
 800074c:	000186a0 	.word	0x000186a0

08000750 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000754:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_I2S3_Init+0x54>)
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <MX_I2S3_Init+0x58>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_I2S3_Init+0x54>)
 800075c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000760:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_I2S3_Init+0x54>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_I2S3_Init+0x54>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <MX_I2S3_Init+0x54>)
 8000770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000774:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_I2S3_Init+0x54>)
 8000778:	4a0c      	ldr	r2, [pc, #48]	; (80007ac <MX_I2S3_Init+0x5c>)
 800077a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_I2S3_Init+0x54>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_I2S3_Init+0x54>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_I2S3_Init+0x54>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_I2S3_Init+0x54>)
 8000790:	f003 fbc0 	bl	8003f14 <HAL_I2S_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800079a:	f000 ffa4 	bl	80016e6 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20004230 	.word	0x20004230
 80007a8:	40003c00 	.word	0x40003c00
 80007ac:	00017700 	.word	0x00017700

080007b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_SPI1_Init+0x64>)
 80007b6:	4a18      	ldr	r2, [pc, #96]	; (8000818 <MX_SPI1_Init+0x68>)
 80007b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_SPI1_Init+0x64>)
 80007bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_SPI1_Init+0x64>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_SPI1_Init+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_SPI1_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_SPI1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_SPI1_Init+0x64>)
 80007dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_SPI1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <MX_SPI1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_SPI1_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <MX_SPI1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_SPI1_Init+0x64>)
 80007fc:	220a      	movs	r2, #10
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_SPI1_Init+0x64>)
 8000802:	f004 fdf9 	bl	80053f8 <HAL_SPI_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800080c:	f000 ff6b 	bl	80016e6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20004190 	.word	0x20004190
 8000818:	40013000 	.word	0x40013000

0800081c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000822:	4a12      	ldr	r2, [pc, #72]	; (800086c <MX_USART2_UART_Init+0x50>)
 8000824:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000854:	f005 f872 	bl	800593c <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800085e:	f000 ff42 	bl	80016e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200041f0 	.word	0x200041f0
 800086c:	40004400 	.word	0x40004400

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	; 0x30
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	4b75      	ldr	r3, [pc, #468]	; (8000a60 <MX_GPIO_Init+0x1f0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a74      	ldr	r2, [pc, #464]	; (8000a60 <MX_GPIO_Init+0x1f0>)
 8000890:	f043 0310 	orr.w	r3, r3, #16
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b72      	ldr	r3, [pc, #456]	; (8000a60 <MX_GPIO_Init+0x1f0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0310 	and.w	r3, r3, #16
 800089e:	61bb      	str	r3, [r7, #24]
 80008a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	4b6e      	ldr	r3, [pc, #440]	; (8000a60 <MX_GPIO_Init+0x1f0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a6d      	ldr	r2, [pc, #436]	; (8000a60 <MX_GPIO_Init+0x1f0>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b6b      	ldr	r3, [pc, #428]	; (8000a60 <MX_GPIO_Init+0x1f0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b67      	ldr	r3, [pc, #412]	; (8000a60 <MX_GPIO_Init+0x1f0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a66      	ldr	r2, [pc, #408]	; (8000a60 <MX_GPIO_Init+0x1f0>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b64      	ldr	r3, [pc, #400]	; (8000a60 <MX_GPIO_Init+0x1f0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b60      	ldr	r3, [pc, #384]	; (8000a60 <MX_GPIO_Init+0x1f0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a5f      	ldr	r2, [pc, #380]	; (8000a60 <MX_GPIO_Init+0x1f0>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b5d      	ldr	r3, [pc, #372]	; (8000a60 <MX_GPIO_Init+0x1f0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	4b59      	ldr	r3, [pc, #356]	; (8000a60 <MX_GPIO_Init+0x1f0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a58      	ldr	r2, [pc, #352]	; (8000a60 <MX_GPIO_Init+0x1f0>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b56      	ldr	r3, [pc, #344]	; (8000a60 <MX_GPIO_Init+0x1f0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b52      	ldr	r3, [pc, #328]	; (8000a60 <MX_GPIO_Init+0x1f0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a51      	ldr	r2, [pc, #324]	; (8000a60 <MX_GPIO_Init+0x1f0>)
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b4f      	ldr	r3, [pc, #316]	; (8000a60 <MX_GPIO_Init+0x1f0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0308 	and.w	r3, r3, #8
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2108      	movs	r1, #8
 8000932:	484c      	ldr	r0, [pc, #304]	; (8000a64 <MX_GPIO_Init+0x1f4>)
 8000934:	f001 fc88 	bl	8002248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2101      	movs	r1, #1
 800093c:	484a      	ldr	r0, [pc, #296]	; (8000a68 <MX_GPIO_Init+0x1f8>)
 800093e:	f001 fc83 	bl	8002248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000942:	2200      	movs	r2, #0
 8000944:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000948:	4848      	ldr	r0, [pc, #288]	; (8000a6c <MX_GPIO_Init+0x1fc>)
 800094a:	f001 fc7d 	bl	8002248 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800094e:	2308      	movs	r3, #8
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	483f      	ldr	r0, [pc, #252]	; (8000a64 <MX_GPIO_Init+0x1f4>)
 8000966:	f001 fad5 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800096a:	2301      	movs	r3, #1
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4839      	ldr	r0, [pc, #228]	; (8000a68 <MX_GPIO_Init+0x1f8>)
 8000982:	f001 fac7 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000986:	2308      	movs	r3, #8
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000996:	2305      	movs	r3, #5
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4831      	ldr	r0, [pc, #196]	; (8000a68 <MX_GPIO_Init+0x1f8>)
 80009a2:	f001 fab7 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009aa:	4b31      	ldr	r3, [pc, #196]	; (8000a70 <MX_GPIO_Init+0x200>)
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009ae:	2302      	movs	r3, #2
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	482e      	ldr	r0, [pc, #184]	; (8000a74 <MX_GPIO_Init+0x204>)
 80009ba:	f001 faab 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009be:	2304      	movs	r3, #4
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4829      	ldr	r0, [pc, #164]	; (8000a78 <MX_GPIO_Init+0x208>)
 80009d2:	f001 fa9f 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e8:	2305      	movs	r3, #5
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	4821      	ldr	r0, [pc, #132]	; (8000a78 <MX_GPIO_Init+0x208>)
 80009f4:	f001 fa8e 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009f8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009fc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4816      	ldr	r0, [pc, #88]	; (8000a6c <MX_GPIO_Init+0x1fc>)
 8000a12:	f001 fa7f 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a16:	2320      	movs	r3, #32
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4810      	ldr	r0, [pc, #64]	; (8000a6c <MX_GPIO_Init+0x1fc>)
 8000a2a:	f001 fa73 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_GPIO_Init+0x20c>)
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4808      	ldr	r0, [pc, #32]	; (8000a64 <MX_GPIO_Init+0x1f4>)
 8000a42:	f001 fa67 	bl	8001f14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2006      	movs	r0, #6
 8000a4c:	f001 fa08 	bl	8001e60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a50:	2006      	movs	r0, #6
 8000a52:	f001 fa21 	bl	8001e98 <HAL_NVIC_EnableIRQ>

}
 8000a56:	bf00      	nop
 8000a58:	3730      	adds	r7, #48	; 0x30
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40020800 	.word	0x40020800
 8000a6c:	40020c00 	.word	0x40020c00
 8000a70:	10110000 	.word	0x10110000
 8000a74:	40020000 	.word	0x40020000
 8000a78:	40020400 	.word	0x40020400
 8000a7c:	10120000 	.word	0x10120000

08000a80 <Foam1>:

/* USER CODE BEGIN 4 */
void Foam1(void const * argument)
{
 8000a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a82:	b08b      	sub	sp, #44	; 0x2c
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 8000a88:	f008 ff19 	bl	80098be <osKernelSysTick>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
		sprintf(str1, "Foam applied to the first car, it took 30 sec\r\n");
 8000a90:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <Foam1+0x9c>)
 8000a92:	4a23      	ldr	r2, [pc, #140]	; (8000b20 <Foam1+0xa0>)
 8000a94:	4614      	mov	r4, r2
 8000a96:	469c      	mov	ip, r3
 8000a98:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000a9c:	4665      	mov	r5, ip
 8000a9e:	4626      	mov	r6, r4
 8000aa0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000aa2:	6028      	str	r0, [r5, #0]
 8000aa4:	6069      	str	r1, [r5, #4]
 8000aa6:	60aa      	str	r2, [r5, #8]
 8000aa8:	60eb      	str	r3, [r5, #12]
 8000aaa:	3410      	adds	r4, #16
 8000aac:	f10c 0c10 	add.w	ip, ip, #16
 8000ab0:	4574      	cmp	r4, lr
 8000ab2:	d1f3      	bne.n	8000a9c <Foam1+0x1c>
		osDelayUntil(&tickcount, 30000);
 8000ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab8:	f247 5130 	movw	r1, #30000	; 0x7530
 8000abc:	4618      	mov	r0, r3
 8000abe:	f009 f8c1 	bl	8009c44 <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
	   // {
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000ac2:	2006      	movs	r0, #6
 8000ac4:	f001 f9f6 	bl	8001eb4 <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 8000ac8:	4814      	ldr	r0, [pc, #80]	; (8000b1c <Foam1+0x9c>)
 8000aca:	f7ff fb81 	bl	80001d0 <strlen>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	b29c      	uxth	r4, r3
 8000ad2:	4812      	ldr	r0, [pc, #72]	; (8000b1c <Foam1+0x9c>)
 8000ad4:	f7ff fb7c 	bl	80001d0 <strlen>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	3301      	adds	r3, #1
 8000adc:	4622      	mov	r2, r4
 8000ade:	490f      	ldr	r1, [pc, #60]	; (8000b1c <Foam1+0x9c>)
 8000ae0:	4810      	ldr	r0, [pc, #64]	; (8000b24 <Foam1+0xa4>)
 8000ae2:	f004 ff78 	bl	80059d6 <HAL_UART_Transmit>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ae6:	2006      	movs	r0, #6
 8000ae8:	f001 f9d6 	bl	8001e98 <HAL_NVIC_EnableIRQ>
		//}
	   // osSemaphoreRelease(SemHandle);
		osThreadDef(brushes1, Brushes1, osPriorityNormal, 0, 128);
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <Foam1+0xa8>)
 8000aee:	f107 0408 	add.w	r4, r7, #8
 8000af2:	461d      	mov	r5, r3
 8000af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000afc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		Brushes1Handle = osThreadCreate(osThread(brushes1), NULL);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f008 fee9 	bl	80098de <osThreadCreate>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <Foam1+0xac>)
 8000b10:	601a      	str	r2, [r3, #0]
		osThreadTerminate(NULL);
 8000b12:	2000      	movs	r0, #0
 8000b14:	f008 ff2f 	bl	8009976 <osThreadTerminate>
	{
 8000b18:	e7ba      	b.n	8000a90 <Foam1+0x10>
 8000b1a:	bf00      	nop
 8000b1c:	200040fc 	.word	0x200040fc
 8000b20:	0800ca20 	.word	0x0800ca20
 8000b24:	200041f0 	.word	0x200041f0
 8000b28:	0800ca5c 	.word	0x0800ca5c
 8000b2c:	20004080 	.word	0x20004080

08000b30 <Foam2>:
	}
}

void Foam2(void const * argument)
{
 8000b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b32:	b08b      	sub	sp, #44	; 0x2c
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 8000b38:	f008 fec1 	bl	80098be <osKernelSysTick>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
		sprintf(str1, "Foam applied to the second car, it took 30 sec\r\n");
 8000b40:	4b24      	ldr	r3, [pc, #144]	; (8000bd4 <Foam2+0xa4>)
 8000b42:	4a25      	ldr	r2, [pc, #148]	; (8000bd8 <Foam2+0xa8>)
 8000b44:	4614      	mov	r4, r2
 8000b46:	469c      	mov	ip, r3
 8000b48:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000b4c:	4665      	mov	r5, ip
 8000b4e:	4626      	mov	r6, r4
 8000b50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b52:	6028      	str	r0, [r5, #0]
 8000b54:	6069      	str	r1, [r5, #4]
 8000b56:	60aa      	str	r2, [r5, #8]
 8000b58:	60eb      	str	r3, [r5, #12]
 8000b5a:	3410      	adds	r4, #16
 8000b5c:	f10c 0c10 	add.w	ip, ip, #16
 8000b60:	4574      	cmp	r4, lr
 8000b62:	d1f3      	bne.n	8000b4c <Foam2+0x1c>
 8000b64:	4663      	mov	r3, ip
 8000b66:	4622      	mov	r2, r4
 8000b68:	7812      	ldrb	r2, [r2, #0]
 8000b6a:	701a      	strb	r2, [r3, #0]
		osDelayUntil(&tickcount, 30000);
 8000b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b70:	f247 5130 	movw	r1, #30000	; 0x7530
 8000b74:	4618      	mov	r0, r3
 8000b76:	f009 f865 	bl	8009c44 <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
	   // {
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000b7a:	2006      	movs	r0, #6
 8000b7c:	f001 f99a 	bl	8001eb4 <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 8000b80:	4814      	ldr	r0, [pc, #80]	; (8000bd4 <Foam2+0xa4>)
 8000b82:	f7ff fb25 	bl	80001d0 <strlen>
 8000b86:	4603      	mov	r3, r0
 8000b88:	b29c      	uxth	r4, r3
 8000b8a:	4812      	ldr	r0, [pc, #72]	; (8000bd4 <Foam2+0xa4>)
 8000b8c:	f7ff fb20 	bl	80001d0 <strlen>
 8000b90:	4603      	mov	r3, r0
 8000b92:	3301      	adds	r3, #1
 8000b94:	4622      	mov	r2, r4
 8000b96:	490f      	ldr	r1, [pc, #60]	; (8000bd4 <Foam2+0xa4>)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <Foam2+0xac>)
 8000b9a:	f004 ff1c 	bl	80059d6 <HAL_UART_Transmit>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b9e:	2006      	movs	r0, #6
 8000ba0:	f001 f97a 	bl	8001e98 <HAL_NVIC_EnableIRQ>
		//}
	   //osSemaphoreRelease(SemHandle);
		osThreadDef(brushes2, Brushes2, osPriorityNormal, 0, 128);
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <Foam2+0xb0>)
 8000ba6:	f107 0408 	add.w	r4, r7, #8
 8000baa:	461d      	mov	r5, r3
 8000bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		Brushes2Handle = osThreadCreate(osThread(brushes2), NULL);
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f008 fe8d 	bl	80098de <osThreadCreate>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <Foam2+0xb4>)
 8000bc8:	601a      	str	r2, [r3, #0]
		osThreadTerminate(NULL);
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f008 fed3 	bl	8009976 <osThreadTerminate>
	{
 8000bd0:	e7b6      	b.n	8000b40 <Foam2+0x10>
 8000bd2:	bf00      	nop
 8000bd4:	200040fc 	.word	0x200040fc
 8000bd8:	0800ca78 	.word	0x0800ca78
 8000bdc:	200041f0 	.word	0x200041f0
 8000be0:	0800cab8 	.word	0x0800cab8
 8000be4:	2000418c 	.word	0x2000418c

08000be8 <Foam3>:
	}
}

void Foam3(void const * argument)
{
 8000be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bea:	b08b      	sub	sp, #44	; 0x2c
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 8000bf0:	f008 fe65 	bl	80098be <osKernelSysTick>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
		sprintf(str1, "Foam applied to the third car, it took 30 sec\r\n");
 8000bf8:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <Foam3+0x9c>)
 8000bfa:	4a23      	ldr	r2, [pc, #140]	; (8000c88 <Foam3+0xa0>)
 8000bfc:	4614      	mov	r4, r2
 8000bfe:	469c      	mov	ip, r3
 8000c00:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000c04:	4665      	mov	r5, ip
 8000c06:	4626      	mov	r6, r4
 8000c08:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c0a:	6028      	str	r0, [r5, #0]
 8000c0c:	6069      	str	r1, [r5, #4]
 8000c0e:	60aa      	str	r2, [r5, #8]
 8000c10:	60eb      	str	r3, [r5, #12]
 8000c12:	3410      	adds	r4, #16
 8000c14:	f10c 0c10 	add.w	ip, ip, #16
 8000c18:	4574      	cmp	r4, lr
 8000c1a:	d1f3      	bne.n	8000c04 <Foam3+0x1c>
		osDelayUntil(&tickcount, 30000);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	f247 5130 	movw	r1, #30000	; 0x7530
 8000c24:	4618      	mov	r0, r3
 8000c26:	f009 f80d 	bl	8009c44 <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
	   // {
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000c2a:	2006      	movs	r0, #6
 8000c2c:	f001 f942 	bl	8001eb4 <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 8000c30:	4814      	ldr	r0, [pc, #80]	; (8000c84 <Foam3+0x9c>)
 8000c32:	f7ff facd 	bl	80001d0 <strlen>
 8000c36:	4603      	mov	r3, r0
 8000c38:	b29c      	uxth	r4, r3
 8000c3a:	4812      	ldr	r0, [pc, #72]	; (8000c84 <Foam3+0x9c>)
 8000c3c:	f7ff fac8 	bl	80001d0 <strlen>
 8000c40:	4603      	mov	r3, r0
 8000c42:	3301      	adds	r3, #1
 8000c44:	4622      	mov	r2, r4
 8000c46:	490f      	ldr	r1, [pc, #60]	; (8000c84 <Foam3+0x9c>)
 8000c48:	4810      	ldr	r0, [pc, #64]	; (8000c8c <Foam3+0xa4>)
 8000c4a:	f004 fec4 	bl	80059d6 <HAL_UART_Transmit>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c4e:	2006      	movs	r0, #6
 8000c50:	f001 f922 	bl	8001e98 <HAL_NVIC_EnableIRQ>
		//}
	    //osSemaphoreRelease(SemHandle);
	    osThreadDef(brushes3, Brushes3, osPriorityNormal, 0, 128);
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <Foam3+0xa8>)
 8000c56:	f107 0408 	add.w	r4, r7, #8
 8000c5a:	461d      	mov	r5, r3
 8000c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	    Brushes3Handle = osThreadCreate(osThread(brushes3), NULL);
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f008 fe35 	bl	80098de <osThreadCreate>
 8000c74:	4602      	mov	r2, r0
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <Foam3+0xac>)
 8000c78:	601a      	str	r2, [r3, #0]
	    osThreadTerminate(NULL);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f008 fe7b 	bl	8009976 <osThreadTerminate>
	{
 8000c80:	e7ba      	b.n	8000bf8 <Foam3+0x10>
 8000c82:	bf00      	nop
 8000c84:	200040fc 	.word	0x200040fc
 8000c88:	0800cad4 	.word	0x0800cad4
 8000c8c:	200041f0 	.word	0x200041f0
 8000c90:	0800cb10 	.word	0x0800cb10
 8000c94:	2000417c 	.word	0x2000417c

08000c98 <Foam4>:
	}
}

void Foam4(void const * argument)
{
 8000c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c9a:	b08b      	sub	sp, #44	; 0x2c
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 8000ca0:	f008 fe0d 	bl	80098be <osKernelSysTick>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
		sprintf(str1, "Foam applied to the fourth car, it took 30 sec\r\n");
 8000ca8:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <Foam4+0xa4>)
 8000caa:	4a25      	ldr	r2, [pc, #148]	; (8000d40 <Foam4+0xa8>)
 8000cac:	4614      	mov	r4, r2
 8000cae:	469c      	mov	ip, r3
 8000cb0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000cb4:	4665      	mov	r5, ip
 8000cb6:	4626      	mov	r6, r4
 8000cb8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000cba:	6028      	str	r0, [r5, #0]
 8000cbc:	6069      	str	r1, [r5, #4]
 8000cbe:	60aa      	str	r2, [r5, #8]
 8000cc0:	60eb      	str	r3, [r5, #12]
 8000cc2:	3410      	adds	r4, #16
 8000cc4:	f10c 0c10 	add.w	ip, ip, #16
 8000cc8:	4574      	cmp	r4, lr
 8000cca:	d1f3      	bne.n	8000cb4 <Foam4+0x1c>
 8000ccc:	4663      	mov	r3, ip
 8000cce:	4622      	mov	r2, r4
 8000cd0:	7812      	ldrb	r2, [r2, #0]
 8000cd2:	701a      	strb	r2, [r3, #0]
		osDelayUntil(&tickcount, 30000);
 8000cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd8:	f247 5130 	movw	r1, #30000	; 0x7530
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f008 ffb1 	bl	8009c44 <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
	   // {
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000ce2:	2006      	movs	r0, #6
 8000ce4:	f001 f8e6 	bl	8001eb4 <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 8000ce8:	4814      	ldr	r0, [pc, #80]	; (8000d3c <Foam4+0xa4>)
 8000cea:	f7ff fa71 	bl	80001d0 <strlen>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	b29c      	uxth	r4, r3
 8000cf2:	4812      	ldr	r0, [pc, #72]	; (8000d3c <Foam4+0xa4>)
 8000cf4:	f7ff fa6c 	bl	80001d0 <strlen>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	4622      	mov	r2, r4
 8000cfe:	490f      	ldr	r1, [pc, #60]	; (8000d3c <Foam4+0xa4>)
 8000d00:	4810      	ldr	r0, [pc, #64]	; (8000d44 <Foam4+0xac>)
 8000d02:	f004 fe68 	bl	80059d6 <HAL_UART_Transmit>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d06:	2006      	movs	r0, #6
 8000d08:	f001 f8c6 	bl	8001e98 <HAL_NVIC_EnableIRQ>
		//}
		//osSemaphoreRelease(SemHandle);
	    osThreadDef(brushes4, Brushes4, osPriorityNormal, 0, 128);
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <Foam4+0xb0>)
 8000d0e:	f107 0408 	add.w	r4, r7, #8
 8000d12:	461d      	mov	r5, r3
 8000d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	    Brushes4Handle = osThreadCreate(osThread(brushes4), NULL);
 8000d20:	f107 0308 	add.w	r3, r7, #8
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f008 fdd9 	bl	80098de <osThreadCreate>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <Foam4+0xb4>)
 8000d30:	601a      	str	r2, [r3, #0]
	    osThreadTerminate(NULL);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f008 fe1f 	bl	8009976 <osThreadTerminate>
	{
 8000d38:	e7b6      	b.n	8000ca8 <Foam4+0x10>
 8000d3a:	bf00      	nop
 8000d3c:	200040fc 	.word	0x200040fc
 8000d40:	0800cb2c 	.word	0x0800cb2c
 8000d44:	200041f0 	.word	0x200041f0
 8000d48:	0800cb6c 	.word	0x0800cb6c
 8000d4c:	200041ec 	.word	0x200041ec

08000d50 <Brushes1>:
	}
}

void Brushes1(void const * argument)
{
 8000d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d52:	b08b      	sub	sp, #44	; 0x2c
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 8000d58:	f008 fdb1 	bl	80098be <osKernelSysTick>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
		sprintf(str1, "Brushing the first car is completed it took 30 sec\r\n");
 8000d60:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <Brushes1+0xa8>)
 8000d62:	4a26      	ldr	r2, [pc, #152]	; (8000dfc <Brushes1+0xac>)
 8000d64:	4614      	mov	r4, r2
 8000d66:	469c      	mov	ip, r3
 8000d68:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000d6c:	4665      	mov	r5, ip
 8000d6e:	4626      	mov	r6, r4
 8000d70:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d72:	6028      	str	r0, [r5, #0]
 8000d74:	6069      	str	r1, [r5, #4]
 8000d76:	60aa      	str	r2, [r5, #8]
 8000d78:	60eb      	str	r3, [r5, #12]
 8000d7a:	3410      	adds	r4, #16
 8000d7c:	f10c 0c10 	add.w	ip, ip, #16
 8000d80:	4574      	cmp	r4, lr
 8000d82:	d1f3      	bne.n	8000d6c <Brushes1+0x1c>
 8000d84:	4663      	mov	r3, ip
 8000d86:	4622      	mov	r2, r4
 8000d88:	6810      	ldr	r0, [r2, #0]
 8000d8a:	6018      	str	r0, [r3, #0]
 8000d8c:	7912      	ldrb	r2, [r2, #4]
 8000d8e:	711a      	strb	r2, [r3, #4]
		osDelayUntil(&tickcount, 30000);
 8000d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d94:	f247 5130 	movw	r1, #30000	; 0x7530
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f008 ff53 	bl	8009c44 <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
		//{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000d9e:	2006      	movs	r0, #6
 8000da0:	f001 f888 	bl	8001eb4 <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 8000da4:	4814      	ldr	r0, [pc, #80]	; (8000df8 <Brushes1+0xa8>)
 8000da6:	f7ff fa13 	bl	80001d0 <strlen>
 8000daa:	4603      	mov	r3, r0
 8000dac:	b29c      	uxth	r4, r3
 8000dae:	4812      	ldr	r0, [pc, #72]	; (8000df8 <Brushes1+0xa8>)
 8000db0:	f7ff fa0e 	bl	80001d0 <strlen>
 8000db4:	4603      	mov	r3, r0
 8000db6:	3301      	adds	r3, #1
 8000db8:	4622      	mov	r2, r4
 8000dba:	490f      	ldr	r1, [pc, #60]	; (8000df8 <Brushes1+0xa8>)
 8000dbc:	4810      	ldr	r0, [pc, #64]	; (8000e00 <Brushes1+0xb0>)
 8000dbe:	f004 fe0a 	bl	80059d6 <HAL_UART_Transmit>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000dc2:	2006      	movs	r0, #6
 8000dc4:	f001 f868 	bl	8001e98 <HAL_NVIC_EnableIRQ>
		//}
		//osSemaphoreRelease(SemHandle);
		osThreadDef(washing1, Washing1, osPriorityNormal, 0, 128);
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <Brushes1+0xb4>)
 8000dca:	f107 0408 	add.w	r4, r7, #8
 8000dce:	461d      	mov	r5, r3
 8000dd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		Washing1Handle = osThreadCreate(osThread(washing1), NULL);
 8000ddc:	f107 0308 	add.w	r3, r7, #8
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f008 fd7b 	bl	80098de <osThreadCreate>
 8000de8:	4602      	mov	r2, r0
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <Brushes1+0xb8>)
 8000dec:	601a      	str	r2, [r3, #0]
		osThreadTerminate(NULL);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f008 fdc1 	bl	8009976 <osThreadTerminate>
	{
 8000df4:	e7b4      	b.n	8000d60 <Brushes1+0x10>
 8000df6:	bf00      	nop
 8000df8:	200040fc 	.word	0x200040fc
 8000dfc:	0800cb88 	.word	0x0800cb88
 8000e00:	200041f0 	.word	0x200041f0
 8000e04:	0800cbcc 	.word	0x0800cbcc
 8000e08:	20004084 	.word	0x20004084

08000e0c <Brushes2>:
	}
}

void Brushes2(void const * argument)
{
 8000e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e0e:	b08b      	sub	sp, #44	; 0x2c
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 8000e14:	f008 fd53 	bl	80098be <osKernelSysTick>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
		sprintf(str1, "Brushing the second car is completed it took 30 sec\r\n");
 8000e1c:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <Brushes2+0xa8>)
 8000e1e:	4a26      	ldr	r2, [pc, #152]	; (8000eb8 <Brushes2+0xac>)
 8000e20:	4614      	mov	r4, r2
 8000e22:	469c      	mov	ip, r3
 8000e24:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000e28:	4665      	mov	r5, ip
 8000e2a:	4626      	mov	r6, r4
 8000e2c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e2e:	6028      	str	r0, [r5, #0]
 8000e30:	6069      	str	r1, [r5, #4]
 8000e32:	60aa      	str	r2, [r5, #8]
 8000e34:	60eb      	str	r3, [r5, #12]
 8000e36:	3410      	adds	r4, #16
 8000e38:	f10c 0c10 	add.w	ip, ip, #16
 8000e3c:	4574      	cmp	r4, lr
 8000e3e:	d1f3      	bne.n	8000e28 <Brushes2+0x1c>
 8000e40:	4663      	mov	r3, ip
 8000e42:	4622      	mov	r2, r4
 8000e44:	6810      	ldr	r0, [r2, #0]
 8000e46:	6018      	str	r0, [r3, #0]
 8000e48:	8892      	ldrh	r2, [r2, #4]
 8000e4a:	809a      	strh	r2, [r3, #4]
		osDelayUntil(&tickcount, 30000);
 8000e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e50:	f247 5130 	movw	r1, #30000	; 0x7530
 8000e54:	4618      	mov	r0, r3
 8000e56:	f008 fef5 	bl	8009c44 <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
		//{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000e5a:	2006      	movs	r0, #6
 8000e5c:	f001 f82a 	bl	8001eb4 <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 8000e60:	4814      	ldr	r0, [pc, #80]	; (8000eb4 <Brushes2+0xa8>)
 8000e62:	f7ff f9b5 	bl	80001d0 <strlen>
 8000e66:	4603      	mov	r3, r0
 8000e68:	b29c      	uxth	r4, r3
 8000e6a:	4812      	ldr	r0, [pc, #72]	; (8000eb4 <Brushes2+0xa8>)
 8000e6c:	f7ff f9b0 	bl	80001d0 <strlen>
 8000e70:	4603      	mov	r3, r0
 8000e72:	3301      	adds	r3, #1
 8000e74:	4622      	mov	r2, r4
 8000e76:	490f      	ldr	r1, [pc, #60]	; (8000eb4 <Brushes2+0xa8>)
 8000e78:	4810      	ldr	r0, [pc, #64]	; (8000ebc <Brushes2+0xb0>)
 8000e7a:	f004 fdac 	bl	80059d6 <HAL_UART_Transmit>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e7e:	2006      	movs	r0, #6
 8000e80:	f001 f80a 	bl	8001e98 <HAL_NVIC_EnableIRQ>
		//}
		//osSemaphoreRelease(SemHandle);
		osThreadDef(washing2, Washing2, osPriorityNormal, 0, 128);
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <Brushes2+0xb4>)
 8000e86:	f107 0408 	add.w	r4, r7, #8
 8000e8a:	461d      	mov	r5, r3
 8000e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		Washing2Handle = osThreadCreate(osThread(washing2), NULL);
 8000e98:	f107 0308 	add.w	r3, r7, #8
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f008 fd1d 	bl	80098de <osThreadCreate>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <Brushes2+0xb8>)
 8000ea8:	601a      	str	r2, [r3, #0]
		osThreadTerminate(NULL);
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f008 fd63 	bl	8009976 <osThreadTerminate>
	{
 8000eb0:	e7b4      	b.n	8000e1c <Brushes2+0x10>
 8000eb2:	bf00      	nop
 8000eb4:	200040fc 	.word	0x200040fc
 8000eb8:	0800cbe8 	.word	0x0800cbe8
 8000ebc:	200041f0 	.word	0x200041f0
 8000ec0:	0800cc2c 	.word	0x0800cc2c
 8000ec4:	2000407c 	.word	0x2000407c

08000ec8 <Brushes3>:
	}
}


void Brushes3(void const * argument)
{
 8000ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eca:	b08b      	sub	sp, #44	; 0x2c
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 8000ed0:	f008 fcf5 	bl	80098be <osKernelSysTick>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
		sprintf(str1, "Brushing the third car is completed it took 30 sec\r\n");
 8000ed8:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <Brushes3+0xa8>)
 8000eda:	4a26      	ldr	r2, [pc, #152]	; (8000f74 <Brushes3+0xac>)
 8000edc:	4614      	mov	r4, r2
 8000ede:	469c      	mov	ip, r3
 8000ee0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000ee4:	4665      	mov	r5, ip
 8000ee6:	4626      	mov	r6, r4
 8000ee8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000eea:	6028      	str	r0, [r5, #0]
 8000eec:	6069      	str	r1, [r5, #4]
 8000eee:	60aa      	str	r2, [r5, #8]
 8000ef0:	60eb      	str	r3, [r5, #12]
 8000ef2:	3410      	adds	r4, #16
 8000ef4:	f10c 0c10 	add.w	ip, ip, #16
 8000ef8:	4574      	cmp	r4, lr
 8000efa:	d1f3      	bne.n	8000ee4 <Brushes3+0x1c>
 8000efc:	4663      	mov	r3, ip
 8000efe:	4622      	mov	r2, r4
 8000f00:	6810      	ldr	r0, [r2, #0]
 8000f02:	6018      	str	r0, [r3, #0]
 8000f04:	7912      	ldrb	r2, [r2, #4]
 8000f06:	711a      	strb	r2, [r3, #4]
		osDelayUntil(&tickcount, 30000);
 8000f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0c:	f247 5130 	movw	r1, #30000	; 0x7530
 8000f10:	4618      	mov	r0, r3
 8000f12:	f008 fe97 	bl	8009c44 <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
		//{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000f16:	2006      	movs	r0, #6
 8000f18:	f000 ffcc 	bl	8001eb4 <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 8000f1c:	4814      	ldr	r0, [pc, #80]	; (8000f70 <Brushes3+0xa8>)
 8000f1e:	f7ff f957 	bl	80001d0 <strlen>
 8000f22:	4603      	mov	r3, r0
 8000f24:	b29c      	uxth	r4, r3
 8000f26:	4812      	ldr	r0, [pc, #72]	; (8000f70 <Brushes3+0xa8>)
 8000f28:	f7ff f952 	bl	80001d0 <strlen>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	3301      	adds	r3, #1
 8000f30:	4622      	mov	r2, r4
 8000f32:	490f      	ldr	r1, [pc, #60]	; (8000f70 <Brushes3+0xa8>)
 8000f34:	4810      	ldr	r0, [pc, #64]	; (8000f78 <Brushes3+0xb0>)
 8000f36:	f004 fd4e 	bl	80059d6 <HAL_UART_Transmit>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f3a:	2006      	movs	r0, #6
 8000f3c:	f000 ffac 	bl	8001e98 <HAL_NVIC_EnableIRQ>
		//}
		//osSemaphoreRelease(SemHandle);
		osThreadDef(washing3, Washing3, osPriorityNormal, 0, 128);
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <Brushes3+0xb4>)
 8000f42:	f107 0408 	add.w	r4, r7, #8
 8000f46:	461d      	mov	r5, r3
 8000f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		Washing3Handle = osThreadCreate(osThread(washing3), NULL);
 8000f54:	f107 0308 	add.w	r3, r7, #8
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f008 fcbf 	bl	80098de <osThreadCreate>
 8000f60:	4602      	mov	r2, r0
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <Brushes3+0xb8>)
 8000f64:	601a      	str	r2, [r3, #0]
		osThreadTerminate(NULL);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f008 fd05 	bl	8009976 <osThreadTerminate>
	{
 8000f6c:	e7b4      	b.n	8000ed8 <Brushes3+0x10>
 8000f6e:	bf00      	nop
 8000f70:	200040fc 	.word	0x200040fc
 8000f74:	0800cc48 	.word	0x0800cc48
 8000f78:	200041f0 	.word	0x200041f0
 8000f7c:	0800cc8c 	.word	0x0800cc8c
 8000f80:	20004184 	.word	0x20004184

08000f84 <Brushes4>:
	}
}


void Brushes4(void const * argument)
{
 8000f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f86:	b08b      	sub	sp, #44	; 0x2c
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 8000f8c:	f008 fc97 	bl	80098be <osKernelSysTick>
 8000f90:	4603      	mov	r3, r0
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
		sprintf(str1, "Brushing the forth car is completed it took 30 sec\r\n");
 8000f94:	4b27      	ldr	r3, [pc, #156]	; (8001034 <Brushes4+0xb0>)
 8000f96:	4a28      	ldr	r2, [pc, #160]	; (8001038 <Brushes4+0xb4>)
 8000f98:	4614      	mov	r4, r2
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000fa0:	4665      	mov	r5, ip
 8000fa2:	4626      	mov	r6, r4
 8000fa4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000fa6:	6028      	str	r0, [r5, #0]
 8000fa8:	6069      	str	r1, [r5, #4]
 8000faa:	60aa      	str	r2, [r5, #8]
 8000fac:	60eb      	str	r3, [r5, #12]
 8000fae:	3410      	adds	r4, #16
 8000fb0:	f10c 0c10 	add.w	ip, ip, #16
 8000fb4:	4574      	cmp	r4, lr
 8000fb6:	d1f3      	bne.n	8000fa0 <Brushes4+0x1c>
 8000fb8:	4663      	mov	r3, ip
 8000fba:	4622      	mov	r2, r4
 8000fbc:	6810      	ldr	r0, [r2, #0]
 8000fbe:	6018      	str	r0, [r3, #0]
 8000fc0:	7912      	ldrb	r2, [r2, #4]
 8000fc2:	711a      	strb	r2, [r3, #4]
		osDelayUntil(&tickcount, 30000);
 8000fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc8:	f247 5130 	movw	r1, #30000	; 0x7530
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f008 fe39 	bl	8009c44 <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
		//{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000fd2:	2006      	movs	r0, #6
 8000fd4:	f000 ff6e 	bl	8001eb4 <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 8000fd8:	4816      	ldr	r0, [pc, #88]	; (8001034 <Brushes4+0xb0>)
 8000fda:	f7ff f8f9 	bl	80001d0 <strlen>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	b29c      	uxth	r4, r3
 8000fe2:	4814      	ldr	r0, [pc, #80]	; (8001034 <Brushes4+0xb0>)
 8000fe4:	f7ff f8f4 	bl	80001d0 <strlen>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	3301      	adds	r3, #1
 8000fec:	4622      	mov	r2, r4
 8000fee:	4911      	ldr	r1, [pc, #68]	; (8001034 <Brushes4+0xb0>)
 8000ff0:	4812      	ldr	r0, [pc, #72]	; (800103c <Brushes4+0xb8>)
 8000ff2:	f004 fcf0 	bl	80059d6 <HAL_UART_Transmit>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ff6:	2006      	movs	r0, #6
 8000ff8:	f000 ff4e 	bl	8001e98 <HAL_NVIC_EnableIRQ>
		//}
		osSemaphoreRelease(SemHandle);
 8000ffc:	4b10      	ldr	r3, [pc, #64]	; (8001040 <Brushes4+0xbc>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f008 fd0b 	bl	8009a1c <osSemaphoreRelease>
		osThreadDef(washing4, Washing4, osPriorityNormal, 0, 128);
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <Brushes4+0xc0>)
 8001008:	f107 0408 	add.w	r4, r7, #8
 800100c:	461d      	mov	r5, r3
 800100e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001010:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001012:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001016:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		Washing4Handle = osThreadCreate(osThread(washing4), NULL);
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f008 fc5c 	bl	80098de <osThreadCreate>
 8001026:	4602      	mov	r2, r0
 8001028:	4b07      	ldr	r3, [pc, #28]	; (8001048 <Brushes4+0xc4>)
 800102a:	601a      	str	r2, [r3, #0]
		osThreadTerminate(NULL);
 800102c:	2000      	movs	r0, #0
 800102e:	f008 fca2 	bl	8009976 <osThreadTerminate>
	{
 8001032:	e7af      	b.n	8000f94 <Brushes4+0x10>
 8001034:	200040fc 	.word	0x200040fc
 8001038:	0800cca8 	.word	0x0800cca8
 800103c:	200041f0 	.word	0x200041f0
 8001040:	200040f8 	.word	0x200040f8
 8001044:	0800ccec 	.word	0x0800ccec
 8001048:	200040e4 	.word	0x200040e4

0800104c <Washing1>:
	}
}


void Washing1(void const * argument)
{
 800104c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104e:	b08b      	sub	sp, #44	; 0x2c
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 8001054:	f008 fc33 	bl	80098be <osKernelSysTick>
 8001058:	4603      	mov	r3, r0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
		sprintf(str1, "Washing the first car is completed it took 60 sec\r\n");
 800105c:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <Washing1+0xa4>)
 800105e:	4a25      	ldr	r2, [pc, #148]	; (80010f4 <Washing1+0xa8>)
 8001060:	4614      	mov	r4, r2
 8001062:	469c      	mov	ip, r3
 8001064:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001068:	4665      	mov	r5, ip
 800106a:	4626      	mov	r6, r4
 800106c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800106e:	6028      	str	r0, [r5, #0]
 8001070:	6069      	str	r1, [r5, #4]
 8001072:	60aa      	str	r2, [r5, #8]
 8001074:	60eb      	str	r3, [r5, #12]
 8001076:	3410      	adds	r4, #16
 8001078:	f10c 0c10 	add.w	ip, ip, #16
 800107c:	4574      	cmp	r4, lr
 800107e:	d1f3      	bne.n	8001068 <Washing1+0x1c>
 8001080:	4663      	mov	r3, ip
 8001082:	4622      	mov	r2, r4
 8001084:	6810      	ldr	r0, [r2, #0]
 8001086:	6018      	str	r0, [r3, #0]
		osDelayUntil(&tickcount, 60000);
 8001088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108c:	f64e 2160 	movw	r1, #60000	; 0xea60
 8001090:	4618      	mov	r0, r3
 8001092:	f008 fdd7 	bl	8009c44 <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
		//{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001096:	2006      	movs	r0, #6
 8001098:	f000 ff0c 	bl	8001eb4 <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 800109c:	4814      	ldr	r0, [pc, #80]	; (80010f0 <Washing1+0xa4>)
 800109e:	f7ff f897 	bl	80001d0 <strlen>
 80010a2:	4603      	mov	r3, r0
 80010a4:	b29c      	uxth	r4, r3
 80010a6:	4812      	ldr	r0, [pc, #72]	; (80010f0 <Washing1+0xa4>)
 80010a8:	f7ff f892 	bl	80001d0 <strlen>
 80010ac:	4603      	mov	r3, r0
 80010ae:	3301      	adds	r3, #1
 80010b0:	4622      	mov	r2, r4
 80010b2:	490f      	ldr	r1, [pc, #60]	; (80010f0 <Washing1+0xa4>)
 80010b4:	4810      	ldr	r0, [pc, #64]	; (80010f8 <Washing1+0xac>)
 80010b6:	f004 fc8e 	bl	80059d6 <HAL_UART_Transmit>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010ba:	2006      	movs	r0, #6
 80010bc:	f000 feec 	bl	8001e98 <HAL_NVIC_EnableIRQ>
		//}
		//osSemaphoreRelease(SemHandle);
		osThreadDef(drying1, Drying1, osPriorityNormal, 0, 128);
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <Washing1+0xb0>)
 80010c2:	f107 0408 	add.w	r4, r7, #8
 80010c6:	461d      	mov	r5, r3
 80010c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		Drying1Handle = osThreadCreate(osThread(drying1), NULL);
 80010d4:	f107 0308 	add.w	r3, r7, #8
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f008 fbff 	bl	80098de <osThreadCreate>
 80010e0:	4602      	mov	r2, r0
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <Washing1+0xb4>)
 80010e4:	601a      	str	r2, [r3, #0]
		osThreadTerminate(NULL);
 80010e6:	2000      	movs	r0, #0
 80010e8:	f008 fc45 	bl	8009976 <osThreadTerminate>
	{
 80010ec:	e7b6      	b.n	800105c <Washing1+0x10>
 80010ee:	bf00      	nop
 80010f0:	200040fc 	.word	0x200040fc
 80010f4:	0800cd08 	.word	0x0800cd08
 80010f8:	200041f0 	.word	0x200041f0
 80010fc:	0800cd44 	.word	0x0800cd44
 8001100:	200040e0 	.word	0x200040e0

08001104 <Washing2>:
	}
}

void Washing2(void const * argument)
{
 8001104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001106:	b08b      	sub	sp, #44	; 0x2c
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 800110c:	f008 fbd7 	bl	80098be <osKernelSysTick>
 8001110:	4603      	mov	r3, r0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
		sprintf(str1, "Washing the second car is completed it took 60 sec\r\n");
 8001114:	4b25      	ldr	r3, [pc, #148]	; (80011ac <Washing2+0xa8>)
 8001116:	4a26      	ldr	r2, [pc, #152]	; (80011b0 <Washing2+0xac>)
 8001118:	4614      	mov	r4, r2
 800111a:	469c      	mov	ip, r3
 800111c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001120:	4665      	mov	r5, ip
 8001122:	4626      	mov	r6, r4
 8001124:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001126:	6028      	str	r0, [r5, #0]
 8001128:	6069      	str	r1, [r5, #4]
 800112a:	60aa      	str	r2, [r5, #8]
 800112c:	60eb      	str	r3, [r5, #12]
 800112e:	3410      	adds	r4, #16
 8001130:	f10c 0c10 	add.w	ip, ip, #16
 8001134:	4574      	cmp	r4, lr
 8001136:	d1f3      	bne.n	8001120 <Washing2+0x1c>
 8001138:	4663      	mov	r3, ip
 800113a:	4622      	mov	r2, r4
 800113c:	6810      	ldr	r0, [r2, #0]
 800113e:	6018      	str	r0, [r3, #0]
 8001140:	7912      	ldrb	r2, [r2, #4]
 8001142:	711a      	strb	r2, [r3, #4]
		osDelayUntil(&tickcount, 60000);
 8001144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001148:	f64e 2160 	movw	r1, #60000	; 0xea60
 800114c:	4618      	mov	r0, r3
 800114e:	f008 fd79 	bl	8009c44 <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
		//{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001152:	2006      	movs	r0, #6
 8001154:	f000 feae 	bl	8001eb4 <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 8001158:	4814      	ldr	r0, [pc, #80]	; (80011ac <Washing2+0xa8>)
 800115a:	f7ff f839 	bl	80001d0 <strlen>
 800115e:	4603      	mov	r3, r0
 8001160:	b29c      	uxth	r4, r3
 8001162:	4812      	ldr	r0, [pc, #72]	; (80011ac <Washing2+0xa8>)
 8001164:	f7ff f834 	bl	80001d0 <strlen>
 8001168:	4603      	mov	r3, r0
 800116a:	3301      	adds	r3, #1
 800116c:	4622      	mov	r2, r4
 800116e:	490f      	ldr	r1, [pc, #60]	; (80011ac <Washing2+0xa8>)
 8001170:	4810      	ldr	r0, [pc, #64]	; (80011b4 <Washing2+0xb0>)
 8001172:	f004 fc30 	bl	80059d6 <HAL_UART_Transmit>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001176:	2006      	movs	r0, #6
 8001178:	f000 fe8e 	bl	8001e98 <HAL_NVIC_EnableIRQ>
		//}
		//osSemaphoreRelease(SemHandle);
		osThreadDef(drying2, Drying2, osPriorityNormal, 0, 128);
 800117c:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <Washing2+0xb4>)
 800117e:	f107 0408 	add.w	r4, r7, #8
 8001182:	461d      	mov	r5, r3
 8001184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001188:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800118c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		Drying2Handle = osThreadCreate(osThread(drying2), NULL);
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f008 fba1 	bl	80098de <osThreadCreate>
 800119c:	4602      	mov	r2, r0
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <Washing2+0xb8>)
 80011a0:	601a      	str	r2, [r3, #0]
		osThreadTerminate(NULL);
 80011a2:	2000      	movs	r0, #0
 80011a4:	f008 fbe7 	bl	8009976 <osThreadTerminate>
	{
 80011a8:	e7b4      	b.n	8001114 <Washing2+0x10>
 80011aa:	bf00      	nop
 80011ac:	200040fc 	.word	0x200040fc
 80011b0:	0800cd60 	.word	0x0800cd60
 80011b4:	200041f0 	.word	0x200041f0
 80011b8:	0800cda0 	.word	0x0800cda0
 80011bc:	20004178 	.word	0x20004178

080011c0 <Washing3>:
	}
}

void Washing3(void const * argument)
{
 80011c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c2:	b08b      	sub	sp, #44	; 0x2c
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 80011c8:	f008 fb79 	bl	80098be <osKernelSysTick>
 80011cc:	4603      	mov	r3, r0
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
		sprintf(str1, "Washing the third car is completed it took 60 sec\r\n");
 80011d0:	4b24      	ldr	r3, [pc, #144]	; (8001264 <Washing3+0xa4>)
 80011d2:	4a25      	ldr	r2, [pc, #148]	; (8001268 <Washing3+0xa8>)
 80011d4:	4614      	mov	r4, r2
 80011d6:	469c      	mov	ip, r3
 80011d8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80011dc:	4665      	mov	r5, ip
 80011de:	4626      	mov	r6, r4
 80011e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011e2:	6028      	str	r0, [r5, #0]
 80011e4:	6069      	str	r1, [r5, #4]
 80011e6:	60aa      	str	r2, [r5, #8]
 80011e8:	60eb      	str	r3, [r5, #12]
 80011ea:	3410      	adds	r4, #16
 80011ec:	f10c 0c10 	add.w	ip, ip, #16
 80011f0:	4574      	cmp	r4, lr
 80011f2:	d1f3      	bne.n	80011dc <Washing3+0x1c>
 80011f4:	4663      	mov	r3, ip
 80011f6:	4622      	mov	r2, r4
 80011f8:	6810      	ldr	r0, [r2, #0]
 80011fa:	6018      	str	r0, [r3, #0]
		osDelayUntil(&tickcount, 60000);
 80011fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001200:	f64e 2160 	movw	r1, #60000	; 0xea60
 8001204:	4618      	mov	r0, r3
 8001206:	f008 fd1d 	bl	8009c44 <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
		//{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800120a:	2006      	movs	r0, #6
 800120c:	f000 fe52 	bl	8001eb4 <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 8001210:	4814      	ldr	r0, [pc, #80]	; (8001264 <Washing3+0xa4>)
 8001212:	f7fe ffdd 	bl	80001d0 <strlen>
 8001216:	4603      	mov	r3, r0
 8001218:	b29c      	uxth	r4, r3
 800121a:	4812      	ldr	r0, [pc, #72]	; (8001264 <Washing3+0xa4>)
 800121c:	f7fe ffd8 	bl	80001d0 <strlen>
 8001220:	4603      	mov	r3, r0
 8001222:	3301      	adds	r3, #1
 8001224:	4622      	mov	r2, r4
 8001226:	490f      	ldr	r1, [pc, #60]	; (8001264 <Washing3+0xa4>)
 8001228:	4810      	ldr	r0, [pc, #64]	; (800126c <Washing3+0xac>)
 800122a:	f004 fbd4 	bl	80059d6 <HAL_UART_Transmit>
	    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800122e:	2006      	movs	r0, #6
 8001230:	f000 fe32 	bl	8001e98 <HAL_NVIC_EnableIRQ>
		//}
		//osSemaphoreRelease(SemHandle);
		osThreadDef(drying3, Drying3, osPriorityNormal, 0, 128);
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <Washing3+0xb0>)
 8001236:	f107 0408 	add.w	r4, r7, #8
 800123a:	461d      	mov	r5, r3
 800123c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800123e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001240:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001244:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		Drying3Handle = osThreadCreate(osThread(drying3), NULL);
 8001248:	f107 0308 	add.w	r3, r7, #8
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f008 fb45 	bl	80098de <osThreadCreate>
 8001254:	4602      	mov	r2, r0
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <Washing3+0xb4>)
 8001258:	601a      	str	r2, [r3, #0]
		osThreadTerminate(NULL);
 800125a:	2000      	movs	r0, #0
 800125c:	f008 fb8b 	bl	8009976 <osThreadTerminate>
	{
 8001260:	e7b6      	b.n	80011d0 <Washing3+0x10>
 8001262:	bf00      	nop
 8001264:	200040fc 	.word	0x200040fc
 8001268:	0800cdbc 	.word	0x0800cdbc
 800126c:	200041f0 	.word	0x200041f0
 8001270:	0800cdf8 	.word	0x0800cdf8
 8001274:	200040f0 	.word	0x200040f0

08001278 <Washing4>:
	}
}

void Washing4(void const * argument)
{
 8001278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127a:	b08b      	sub	sp, #44	; 0x2c
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 8001280:	f008 fb1d 	bl	80098be <osKernelSysTick>
 8001284:	4603      	mov	r3, r0
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
		sprintf(str1, "Washing the fourth car is completed it took 60 sec\r\n");
 8001288:	4b25      	ldr	r3, [pc, #148]	; (8001320 <Washing4+0xa8>)
 800128a:	4a26      	ldr	r2, [pc, #152]	; (8001324 <Washing4+0xac>)
 800128c:	4614      	mov	r4, r2
 800128e:	469c      	mov	ip, r3
 8001290:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001294:	4665      	mov	r5, ip
 8001296:	4626      	mov	r6, r4
 8001298:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800129a:	6028      	str	r0, [r5, #0]
 800129c:	6069      	str	r1, [r5, #4]
 800129e:	60aa      	str	r2, [r5, #8]
 80012a0:	60eb      	str	r3, [r5, #12]
 80012a2:	3410      	adds	r4, #16
 80012a4:	f10c 0c10 	add.w	ip, ip, #16
 80012a8:	4574      	cmp	r4, lr
 80012aa:	d1f3      	bne.n	8001294 <Washing4+0x1c>
 80012ac:	4663      	mov	r3, ip
 80012ae:	4622      	mov	r2, r4
 80012b0:	6810      	ldr	r0, [r2, #0]
 80012b2:	6018      	str	r0, [r3, #0]
 80012b4:	7912      	ldrb	r2, [r2, #4]
 80012b6:	711a      	strb	r2, [r3, #4]
		osDelayUntil(&tickcount, 60000);
 80012b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012bc:	f64e 2160 	movw	r1, #60000	; 0xea60
 80012c0:	4618      	mov	r0, r3
 80012c2:	f008 fcbf 	bl	8009c44 <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
		//{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80012c6:	2006      	movs	r0, #6
 80012c8:	f000 fdf4 	bl	8001eb4 <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 80012cc:	4814      	ldr	r0, [pc, #80]	; (8001320 <Washing4+0xa8>)
 80012ce:	f7fe ff7f 	bl	80001d0 <strlen>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b29c      	uxth	r4, r3
 80012d6:	4812      	ldr	r0, [pc, #72]	; (8001320 <Washing4+0xa8>)
 80012d8:	f7fe ff7a 	bl	80001d0 <strlen>
 80012dc:	4603      	mov	r3, r0
 80012de:	3301      	adds	r3, #1
 80012e0:	4622      	mov	r2, r4
 80012e2:	490f      	ldr	r1, [pc, #60]	; (8001320 <Washing4+0xa8>)
 80012e4:	4810      	ldr	r0, [pc, #64]	; (8001328 <Washing4+0xb0>)
 80012e6:	f004 fb76 	bl	80059d6 <HAL_UART_Transmit>
	    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80012ea:	2006      	movs	r0, #6
 80012ec:	f000 fdd4 	bl	8001e98 <HAL_NVIC_EnableIRQ>
		//}
		//osSemaphoreRelease(SemHandle);
		osThreadDef(drying4, Drying4, osPriorityNormal, 0, 128);
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <Washing4+0xb4>)
 80012f2:	f107 0408 	add.w	r4, r7, #8
 80012f6:	461d      	mov	r5, r3
 80012f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001300:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		Drying4Handle = osThreadCreate(osThread(drying4), NULL);
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f008 fae7 	bl	80098de <osThreadCreate>
 8001310:	4602      	mov	r2, r0
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <Washing4+0xb8>)
 8001314:	601a      	str	r2, [r3, #0]
		osThreadTerminate(NULL);
 8001316:	2000      	movs	r0, #0
 8001318:	f008 fb2d 	bl	8009976 <osThreadTerminate>
	{
 800131c:	e7b4      	b.n	8001288 <Washing4+0x10>
 800131e:	bf00      	nop
 8001320:	200040fc 	.word	0x200040fc
 8001324:	0800ce14 	.word	0x0800ce14
 8001328:	200041f0 	.word	0x200041f0
 800132c:	0800ce54 	.word	0x0800ce54
 8001330:	200040ec 	.word	0x200040ec

08001334 <Drying1>:
	}
}

void Drying1(void const * argument)
{
 8001334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 800133c:	f008 fabf 	bl	80098be <osKernelSysTick>
 8001340:	4603      	mov	r3, r0
 8001342:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		sprintf(str1, "Drying the first car is completed it took 30 sec\r\n");
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <Drying1+0x80>)
 8001346:	4a1c      	ldr	r2, [pc, #112]	; (80013b8 <Drying1+0x84>)
 8001348:	4614      	mov	r4, r2
 800134a:	469c      	mov	ip, r3
 800134c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001350:	4665      	mov	r5, ip
 8001352:	4626      	mov	r6, r4
 8001354:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001356:	6028      	str	r0, [r5, #0]
 8001358:	6069      	str	r1, [r5, #4]
 800135a:	60aa      	str	r2, [r5, #8]
 800135c:	60eb      	str	r3, [r5, #12]
 800135e:	3410      	adds	r4, #16
 8001360:	f10c 0c10 	add.w	ip, ip, #16
 8001364:	4574      	cmp	r4, lr
 8001366:	d1f3      	bne.n	8001350 <Drying1+0x1c>
 8001368:	4663      	mov	r3, ip
 800136a:	4622      	mov	r2, r4
 800136c:	8811      	ldrh	r1, [r2, #0]
 800136e:	7892      	ldrb	r2, [r2, #2]
 8001370:	8019      	strh	r1, [r3, #0]
 8001372:	709a      	strb	r2, [r3, #2]
		osDelayUntil(&tickcount, 30000);
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	f247 5130 	movw	r1, #30000	; 0x7530
 800137c:	4618      	mov	r0, r3
 800137e:	f008 fc61 	bl	8009c44 <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
		//{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001382:	2006      	movs	r0, #6
 8001384:	f000 fd96 	bl	8001eb4 <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 8001388:	480a      	ldr	r0, [pc, #40]	; (80013b4 <Drying1+0x80>)
 800138a:	f7fe ff21 	bl	80001d0 <strlen>
 800138e:	4603      	mov	r3, r0
 8001390:	b29c      	uxth	r4, r3
 8001392:	4808      	ldr	r0, [pc, #32]	; (80013b4 <Drying1+0x80>)
 8001394:	f7fe ff1c 	bl	80001d0 <strlen>
 8001398:	4603      	mov	r3, r0
 800139a:	3301      	adds	r3, #1
 800139c:	4622      	mov	r2, r4
 800139e:	4905      	ldr	r1, [pc, #20]	; (80013b4 <Drying1+0x80>)
 80013a0:	4806      	ldr	r0, [pc, #24]	; (80013bc <Drying1+0x88>)
 80013a2:	f004 fb18 	bl	80059d6 <HAL_UART_Transmit>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013a6:	2006      	movs	r0, #6
 80013a8:	f000 fd76 	bl	8001e98 <HAL_NVIC_EnableIRQ>
		//}
		//osSemaphoreRelease(SemHandle);
		osThreadTerminate(NULL);
 80013ac:	2000      	movs	r0, #0
 80013ae:	f008 fae2 	bl	8009976 <osThreadTerminate>
		sprintf(str1, "Drying the first car is completed it took 30 sec\r\n");
 80013b2:	e7c7      	b.n	8001344 <Drying1+0x10>
 80013b4:	200040fc 	.word	0x200040fc
 80013b8:	0800ce70 	.word	0x0800ce70
 80013bc:	200041f0 	.word	0x200041f0

080013c0 <Drying2>:
	}
}

void Drying2(void const * argument)
{
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 80013c8:	f008 fa79 	bl	80098be <osKernelSysTick>
 80013cc:	4603      	mov	r3, r0
 80013ce:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		sprintf(str1, "Drying the second car is completed it took 30 sec\r\n");
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <Drying2+0x7c>)
 80013d2:	4a1b      	ldr	r2, [pc, #108]	; (8001440 <Drying2+0x80>)
 80013d4:	4614      	mov	r4, r2
 80013d6:	469c      	mov	ip, r3
 80013d8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80013dc:	4665      	mov	r5, ip
 80013de:	4626      	mov	r6, r4
 80013e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013e2:	6028      	str	r0, [r5, #0]
 80013e4:	6069      	str	r1, [r5, #4]
 80013e6:	60aa      	str	r2, [r5, #8]
 80013e8:	60eb      	str	r3, [r5, #12]
 80013ea:	3410      	adds	r4, #16
 80013ec:	f10c 0c10 	add.w	ip, ip, #16
 80013f0:	4574      	cmp	r4, lr
 80013f2:	d1f3      	bne.n	80013dc <Drying2+0x1c>
 80013f4:	4663      	mov	r3, ip
 80013f6:	4622      	mov	r2, r4
 80013f8:	6810      	ldr	r0, [r2, #0]
 80013fa:	6018      	str	r0, [r3, #0]
		osDelayUntil(&tickcount, 30000);
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	f247 5130 	movw	r1, #30000	; 0x7530
 8001404:	4618      	mov	r0, r3
 8001406:	f008 fc1d 	bl	8009c44 <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
		//{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800140a:	2006      	movs	r0, #6
 800140c:	f000 fd52 	bl	8001eb4 <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 8001410:	480a      	ldr	r0, [pc, #40]	; (800143c <Drying2+0x7c>)
 8001412:	f7fe fedd 	bl	80001d0 <strlen>
 8001416:	4603      	mov	r3, r0
 8001418:	b29c      	uxth	r4, r3
 800141a:	4808      	ldr	r0, [pc, #32]	; (800143c <Drying2+0x7c>)
 800141c:	f7fe fed8 	bl	80001d0 <strlen>
 8001420:	4603      	mov	r3, r0
 8001422:	3301      	adds	r3, #1
 8001424:	4622      	mov	r2, r4
 8001426:	4905      	ldr	r1, [pc, #20]	; (800143c <Drying2+0x7c>)
 8001428:	4806      	ldr	r0, [pc, #24]	; (8001444 <Drying2+0x84>)
 800142a:	f004 fad4 	bl	80059d6 <HAL_UART_Transmit>
	    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800142e:	2006      	movs	r0, #6
 8001430:	f000 fd32 	bl	8001e98 <HAL_NVIC_EnableIRQ>
		//}
		//osSemaphoreRelease(SemHandle);
		osThreadTerminate(NULL);
 8001434:	2000      	movs	r0, #0
 8001436:	f008 fa9e 	bl	8009976 <osThreadTerminate>
		sprintf(str1, "Drying the second car is completed it took 30 sec\r\n");
 800143a:	e7c9      	b.n	80013d0 <Drying2+0x10>
 800143c:	200040fc 	.word	0x200040fc
 8001440:	0800cea4 	.word	0x0800cea4
 8001444:	200041f0 	.word	0x200041f0

08001448 <Drying3>:
	}
}

void Drying3(void const * argument)
{
 8001448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 8001450:	f008 fa35 	bl	80098be <osKernelSysTick>
 8001454:	4603      	mov	r3, r0
 8001456:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		sprintf(str1, "Drying the third car is completed it took 30 sec\r\n");
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <Drying3+0x80>)
 800145a:	4a1c      	ldr	r2, [pc, #112]	; (80014cc <Drying3+0x84>)
 800145c:	4614      	mov	r4, r2
 800145e:	469c      	mov	ip, r3
 8001460:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001464:	4665      	mov	r5, ip
 8001466:	4626      	mov	r6, r4
 8001468:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800146a:	6028      	str	r0, [r5, #0]
 800146c:	6069      	str	r1, [r5, #4]
 800146e:	60aa      	str	r2, [r5, #8]
 8001470:	60eb      	str	r3, [r5, #12]
 8001472:	3410      	adds	r4, #16
 8001474:	f10c 0c10 	add.w	ip, ip, #16
 8001478:	4574      	cmp	r4, lr
 800147a:	d1f3      	bne.n	8001464 <Drying3+0x1c>
 800147c:	4663      	mov	r3, ip
 800147e:	4622      	mov	r2, r4
 8001480:	8811      	ldrh	r1, [r2, #0]
 8001482:	7892      	ldrb	r2, [r2, #2]
 8001484:	8019      	strh	r1, [r3, #0]
 8001486:	709a      	strb	r2, [r3, #2]
		osDelayUntil(&tickcount, 30000);
 8001488:	f107 030c 	add.w	r3, r7, #12
 800148c:	f247 5130 	movw	r1, #30000	; 0x7530
 8001490:	4618      	mov	r0, r3
 8001492:	f008 fbd7 	bl	8009c44 <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
		//{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001496:	2006      	movs	r0, #6
 8001498:	f000 fd0c 	bl	8001eb4 <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 800149c:	480a      	ldr	r0, [pc, #40]	; (80014c8 <Drying3+0x80>)
 800149e:	f7fe fe97 	bl	80001d0 <strlen>
 80014a2:	4603      	mov	r3, r0
 80014a4:	b29c      	uxth	r4, r3
 80014a6:	4808      	ldr	r0, [pc, #32]	; (80014c8 <Drying3+0x80>)
 80014a8:	f7fe fe92 	bl	80001d0 <strlen>
 80014ac:	4603      	mov	r3, r0
 80014ae:	3301      	adds	r3, #1
 80014b0:	4622      	mov	r2, r4
 80014b2:	4905      	ldr	r1, [pc, #20]	; (80014c8 <Drying3+0x80>)
 80014b4:	4806      	ldr	r0, [pc, #24]	; (80014d0 <Drying3+0x88>)
 80014b6:	f004 fa8e 	bl	80059d6 <HAL_UART_Transmit>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80014ba:	2006      	movs	r0, #6
 80014bc:	f000 fcec 	bl	8001e98 <HAL_NVIC_EnableIRQ>
		//}
		//osSemaphoreRelease(SemHandle);
		osThreadTerminate(NULL);
 80014c0:	2000      	movs	r0, #0
 80014c2:	f008 fa58 	bl	8009976 <osThreadTerminate>
		sprintf(str1, "Drying the third car is completed it took 30 sec\r\n");
 80014c6:	e7c7      	b.n	8001458 <Drying3+0x10>
 80014c8:	200040fc 	.word	0x200040fc
 80014cc:	0800ced8 	.word	0x0800ced8
 80014d0:	200041f0 	.word	0x200041f0

080014d4 <Drying4>:
	}
}

void Drying4(void const * argument)
{
 80014d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 80014dc:	f008 f9ef 	bl	80098be <osKernelSysTick>
 80014e0:	4603      	mov	r3, r0
 80014e2:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		sprintf(str1, "Drying the fouth car is completed it took 30 sec\r\n");
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <Drying4+0x80>)
 80014e6:	4a1c      	ldr	r2, [pc, #112]	; (8001558 <Drying4+0x84>)
 80014e8:	4614      	mov	r4, r2
 80014ea:	469c      	mov	ip, r3
 80014ec:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80014f0:	4665      	mov	r5, ip
 80014f2:	4626      	mov	r6, r4
 80014f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014f6:	6028      	str	r0, [r5, #0]
 80014f8:	6069      	str	r1, [r5, #4]
 80014fa:	60aa      	str	r2, [r5, #8]
 80014fc:	60eb      	str	r3, [r5, #12]
 80014fe:	3410      	adds	r4, #16
 8001500:	f10c 0c10 	add.w	ip, ip, #16
 8001504:	4574      	cmp	r4, lr
 8001506:	d1f3      	bne.n	80014f0 <Drying4+0x1c>
 8001508:	4663      	mov	r3, ip
 800150a:	4622      	mov	r2, r4
 800150c:	8811      	ldrh	r1, [r2, #0]
 800150e:	7892      	ldrb	r2, [r2, #2]
 8001510:	8019      	strh	r1, [r3, #0]
 8001512:	709a      	strb	r2, [r3, #2]
		osDelayUntil(&tickcount, 30000);
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	f247 5130 	movw	r1, #30000	; 0x7530
 800151c:	4618      	mov	r0, r3
 800151e:	f008 fb91 	bl	8009c44 <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
		//{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001522:	2006      	movs	r0, #6
 8001524:	f000 fcc6 	bl	8001eb4 <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 8001528:	480a      	ldr	r0, [pc, #40]	; (8001554 <Drying4+0x80>)
 800152a:	f7fe fe51 	bl	80001d0 <strlen>
 800152e:	4603      	mov	r3, r0
 8001530:	b29c      	uxth	r4, r3
 8001532:	4808      	ldr	r0, [pc, #32]	; (8001554 <Drying4+0x80>)
 8001534:	f7fe fe4c 	bl	80001d0 <strlen>
 8001538:	4603      	mov	r3, r0
 800153a:	3301      	adds	r3, #1
 800153c:	4622      	mov	r2, r4
 800153e:	4905      	ldr	r1, [pc, #20]	; (8001554 <Drying4+0x80>)
 8001540:	4806      	ldr	r0, [pc, #24]	; (800155c <Drying4+0x88>)
 8001542:	f004 fa48 	bl	80059d6 <HAL_UART_Transmit>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001546:	2006      	movs	r0, #6
 8001548:	f000 fca6 	bl	8001e98 <HAL_NVIC_EnableIRQ>
		//}
		//osSemaphoreRelease(SemHandle);
		osThreadTerminate(NULL);
 800154c:	2000      	movs	r0, #0
 800154e:	f008 fa12 	bl	8009976 <osThreadTerminate>
		sprintf(str1, "Drying the fouth car is completed it took 30 sec\r\n");
 8001552:	e7c7      	b.n	80014e4 <Drying4+0x10>
 8001554:	200040fc 	.word	0x200040fc
 8001558:	0800cf0c 	.word	0x0800cf0c
 800155c:	200041f0 	.word	0x200041f0

08001560 <EXTI0_IRQHandler>:
	}
}

void EXTI0_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001564:	2006      	movs	r0, #6
 8001566:	f000 fca5 	bl	8001eb4 <HAL_NVIC_DisableIRQ>
	  HAL_UART_Transmit(&huart2,"p\r\n",3,5);
 800156a:	2305      	movs	r3, #5
 800156c:	2203      	movs	r2, #3
 800156e:	490c      	ldr	r1, [pc, #48]	; (80015a0 <EXTI0_IRQHandler+0x40>)
 8001570:	480c      	ldr	r0, [pc, #48]	; (80015a4 <EXTI0_IRQHandler+0x44>)
 8001572:	f004 fa30 	bl	80059d6 <HAL_UART_Transmit>
	  if (buttonPush == 4) buttonPush = 0;
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <EXTI0_IRQHandler+0x48>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b04      	cmp	r3, #4
 800157c:	d102      	bne.n	8001584 <EXTI0_IRQHandler+0x24>
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <EXTI0_IRQHandler+0x48>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
	  buttonPush++;
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <EXTI0_IRQHandler+0x48>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	3301      	adds	r3, #1
 800158a:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <EXTI0_IRQHandler+0x48>)
 800158c:	6013      	str	r3, [r2, #0]
	  status = 1;
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <EXTI0_IRQHandler+0x4c>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001594:	2001      	movs	r0, #1
 8001596:	f000 fe71 	bl	800227c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	0800cf40 	.word	0x0800cf40
 80015a4:	200041f0 	.word	0x200041f0
 80015a8:	200041e8 	.word	0x200041e8
 80015ac:	20004278 	.word	0x20004278

080015b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80015b0:	b5b0      	push	{r4, r5, r7, lr}
 80015b2:	b09e      	sub	sp, #120	; 0x78
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80015b8:	f00a fdf8 	bl	800c1ac <MX_USB_HOST_Init>
	  /* Infinite loop */
  	 // osEvent event;
	  for(;;)
	  {
		 // event = osMessageGet(USART_QueueHandle, 100);
		  if (status)
 80015bc:	4b38      	ldr	r3, [pc, #224]	; (80016a0 <StartDefaultTask+0xf0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d068      	beq.n	8001696 <StartDefaultTask+0xe6>
		  {
			  status = 0;
 80015c4:	4b36      	ldr	r3, [pc, #216]	; (80016a0 <StartDefaultTask+0xf0>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
			  osDelay(30);
 80015ca:	201e      	movs	r0, #30
 80015cc:	f008 f9df 	bl	800998e <osDelay>
			  switch(buttonPush)
 80015d0:	4b34      	ldr	r3, [pc, #208]	; (80016a4 <StartDefaultTask+0xf4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d85f      	bhi.n	800169a <StartDefaultTask+0xea>
 80015da:	a201      	add	r2, pc, #4	; (adr r2, 80015e0 <StartDefaultTask+0x30>)
 80015dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e0:	080015f1 	.word	0x080015f1
 80015e4:	0800161f 	.word	0x0800161f
 80015e8:	08001647 	.word	0x08001647
 80015ec:	0800166f 	.word	0x0800166f
			  {
			  	  case 1: ;
			  	  	  osThreadDef(foam1, Foam1, osPriorityNormal, 0, 128);
 80015f0:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <StartDefaultTask+0xf8>)
 80015f2:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80015f6:	461d      	mov	r5, r3
 80015f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001600:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			  	  	  Foam1Handle = osThreadCreate(osThread(foam1), NULL);
 8001604:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f008 f967 	bl	80098de <osThreadCreate>
 8001610:	4602      	mov	r2, r0
 8001612:	4b26      	ldr	r3, [pc, #152]	; (80016ac <StartDefaultTask+0xfc>)
 8001614:	601a      	str	r2, [r3, #0]
			  	  	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001616:	2006      	movs	r0, #6
 8001618:	f000 fc3e 	bl	8001e98 <HAL_NVIC_EnableIRQ>
			  	  	  break;
 800161c:	e03e      	b.n	800169c <StartDefaultTask+0xec>
			  	  case 2: ;
			  	  	  osThreadDef(foam2, Foam2, osPriorityNormal, 0, 128);
 800161e:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <StartDefaultTask+0x100>)
 8001620:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001624:	461d      	mov	r5, r3
 8001626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800162a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800162e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			  	  	  Foam2Handle = osThreadCreate(osThread(foam2), NULL);
 8001632:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001636:	2100      	movs	r1, #0
 8001638:	4618      	mov	r0, r3
 800163a:	f008 f950 	bl	80098de <osThreadCreate>
 800163e:	4602      	mov	r2, r0
 8001640:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <StartDefaultTask+0x104>)
 8001642:	601a      	str	r2, [r3, #0]
			  	  	  break;
 8001644:	e02a      	b.n	800169c <StartDefaultTask+0xec>
			  	  case 3: ;
			  	  	  osThreadDef(foam3, Foam3, osPriorityNormal, 0, 128);
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <StartDefaultTask+0x108>)
 8001648:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800164c:	461d      	mov	r5, r3
 800164e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001652:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001656:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			  	  	  Foam3Handle = osThreadCreate(osThread(foam3), NULL);
 800165a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f008 f93c 	bl	80098de <osThreadCreate>
 8001666:	4602      	mov	r2, r0
 8001668:	4b14      	ldr	r3, [pc, #80]	; (80016bc <StartDefaultTask+0x10c>)
 800166a:	601a      	str	r2, [r3, #0]
			  	  	  break;
 800166c:	e016      	b.n	800169c <StartDefaultTask+0xec>
			  	  case 4: ;
			  	  	  osThreadDef(foam4, Foam4, osPriorityNormal, 0, 128);
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <StartDefaultTask+0x110>)
 8001670:	f107 0408 	add.w	r4, r7, #8
 8001674:	461d      	mov	r5, r3
 8001676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800167a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800167e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			  	  	  Foam4Handle = osThreadCreate(osThread(foam4), NULL);
 8001682:	f107 0308 	add.w	r3, r7, #8
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f008 f928 	bl	80098de <osThreadCreate>
 800168e:	4602      	mov	r2, r0
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <StartDefaultTask+0x114>)
 8001692:	601a      	str	r2, [r3, #0]
			  	  	  break;
 8001694:	e002      	b.n	800169c <StartDefaultTask+0xec>
			  	  default: ;
			  	  	  break;
			 	}
		  }
 8001696:	bf00      	nop
 8001698:	e790      	b.n	80015bc <StartDefaultTask+0xc>
			  	  	  break;
 800169a:	bf00      	nop
		  if (status)
 800169c:	e78e      	b.n	80015bc <StartDefaultTask+0xc>
 800169e:	bf00      	nop
 80016a0:	20004278 	.word	0x20004278
 80016a4:	200041e8 	.word	0x200041e8
 80016a8:	0800cf4c 	.word	0x0800cf4c
 80016ac:	20004088 	.word	0x20004088
 80016b0:	0800cf70 	.word	0x0800cf70
 80016b4:	20004188 	.word	0x20004188
 80016b8:	0800cf94 	.word	0x0800cf94
 80016bc:	20004180 	.word	0x20004180
 80016c0:	0800cfb8 	.word	0x0800cfb8
 80016c4:	20004174 	.word	0x20004174

080016c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d8:	d101      	bne.n	80016de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016da:	f000 faa5 	bl	8001c28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_MspInit+0x4c>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	4a0f      	ldr	r2, [pc, #60]	; (8001740 <HAL_MspInit+0x4c>)
 8001704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001708:	6453      	str	r3, [r2, #68]	; 0x44
 800170a:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <HAL_MspInit+0x4c>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_MspInit+0x4c>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a08      	ldr	r2, [pc, #32]	; (8001740 <HAL_MspInit+0x4c>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_MspInit+0x4c>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800

08001744 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	; 0x28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a19      	ldr	r2, [pc, #100]	; (80017c8 <HAL_I2C_MspInit+0x84>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d12c      	bne.n	80017c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <HAL_I2C_MspInit+0x88>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a17      	ldr	r2, [pc, #92]	; (80017cc <HAL_I2C_MspInit+0x88>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_I2C_MspInit+0x88>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001782:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001788:	2312      	movs	r3, #18
 800178a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800178c:	2301      	movs	r3, #1
 800178e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001794:	2304      	movs	r3, #4
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	480c      	ldr	r0, [pc, #48]	; (80017d0 <HAL_I2C_MspInit+0x8c>)
 80017a0:	f000 fbb8 	bl	8001f14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <HAL_I2C_MspInit+0x88>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	4a07      	ldr	r2, [pc, #28]	; (80017cc <HAL_I2C_MspInit+0x88>)
 80017ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017b2:	6413      	str	r3, [r2, #64]	; 0x40
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <HAL_I2C_MspInit+0x88>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017c0:	bf00      	nop
 80017c2:	3728      	adds	r7, #40	; 0x28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40005400 	.word	0x40005400
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020400 	.word	0x40020400

080017d4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a28      	ldr	r2, [pc, #160]	; (8001894 <HAL_I2S_MspInit+0xc0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d14a      	bne.n	800188c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	4b27      	ldr	r3, [pc, #156]	; (8001898 <HAL_I2S_MspInit+0xc4>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a26      	ldr	r2, [pc, #152]	; (8001898 <HAL_I2S_MspInit+0xc4>)
 8001800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001804:	6413      	str	r3, [r2, #64]	; 0x40
 8001806:	4b24      	ldr	r3, [pc, #144]	; (8001898 <HAL_I2S_MspInit+0xc4>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <HAL_I2S_MspInit+0xc4>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a1f      	ldr	r2, [pc, #124]	; (8001898 <HAL_I2S_MspInit+0xc4>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <HAL_I2S_MspInit+0xc4>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_I2S_MspInit+0xc4>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a18      	ldr	r2, [pc, #96]	; (8001898 <HAL_I2S_MspInit+0xc4>)
 8001838:	f043 0304 	orr.w	r3, r3, #4
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <HAL_I2S_MspInit+0xc4>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800184a:	2310      	movs	r3, #16
 800184c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800185a:	2306      	movs	r3, #6
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4619      	mov	r1, r3
 8001864:	480d      	ldr	r0, [pc, #52]	; (800189c <HAL_I2S_MspInit+0xc8>)
 8001866:	f000 fb55 	bl	8001f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800186a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800186e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800187c:	2306      	movs	r3, #6
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4619      	mov	r1, r3
 8001886:	4806      	ldr	r0, [pc, #24]	; (80018a0 <HAL_I2S_MspInit+0xcc>)
 8001888:	f000 fb44 	bl	8001f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800188c:	bf00      	nop
 800188e:	3728      	adds	r7, #40	; 0x28
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40003c00 	.word	0x40003c00
 8001898:	40023800 	.word	0x40023800
 800189c:	40020000 	.word	0x40020000
 80018a0:	40020800 	.word	0x40020800

080018a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a19      	ldr	r2, [pc, #100]	; (8001928 <HAL_SPI_MspInit+0x84>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d12b      	bne.n	800191e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <HAL_SPI_MspInit+0x88>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a17      	ldr	r2, [pc, #92]	; (800192c <HAL_SPI_MspInit+0x88>)
 80018d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_SPI_MspInit+0x88>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_SPI_MspInit+0x88>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a10      	ldr	r2, [pc, #64]	; (800192c <HAL_SPI_MspInit+0x88>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_SPI_MspInit+0x88>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80018fe:	23e0      	movs	r3, #224	; 0xe0
 8001900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800190e:	2305      	movs	r3, #5
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	4805      	ldr	r0, [pc, #20]	; (8001930 <HAL_SPI_MspInit+0x8c>)
 800191a:	f000 fafb 	bl	8001f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800191e:	bf00      	nop
 8001920:	3728      	adds	r7, #40	; 0x28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40013000 	.word	0x40013000
 800192c:	40023800 	.word	0x40023800
 8001930:	40020000 	.word	0x40020000

08001934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a1d      	ldr	r2, [pc, #116]	; (80019c8 <HAL_UART_MspInit+0x94>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d133      	bne.n	80019be <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <HAL_UART_MspInit+0x98>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	4a1b      	ldr	r2, [pc, #108]	; (80019cc <HAL_UART_MspInit+0x98>)
 8001960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001964:	6413      	str	r3, [r2, #64]	; 0x40
 8001966:	4b19      	ldr	r3, [pc, #100]	; (80019cc <HAL_UART_MspInit+0x98>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <HAL_UART_MspInit+0x98>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a14      	ldr	r2, [pc, #80]	; (80019cc <HAL_UART_MspInit+0x98>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_UART_MspInit+0x98>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800198e:	230c      	movs	r3, #12
 8001990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199a:	2303      	movs	r3, #3
 800199c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800199e:	2307      	movs	r3, #7
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	4809      	ldr	r0, [pc, #36]	; (80019d0 <HAL_UART_MspInit+0x9c>)
 80019aa:	f000 fab3 	bl	8001f14 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	2026      	movs	r0, #38	; 0x26
 80019b4:	f000 fa54 	bl	8001e60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019b8:	2026      	movs	r0, #38	; 0x26
 80019ba:	f000 fa6d 	bl	8001e98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019be:	bf00      	nop
 80019c0:	3728      	adds	r7, #40	; 0x28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40004400 	.word	0x40004400
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020000 	.word	0x40020000

080019d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08c      	sub	sp, #48	; 0x30
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80019e4:	2200      	movs	r2, #0
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	201c      	movs	r0, #28
 80019ea:	f000 fa39 	bl	8001e60 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019ee:	201c      	movs	r0, #28
 80019f0:	f000 fa52 	bl	8001e98 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <HAL_InitTick+0xa8>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	4a1f      	ldr	r2, [pc, #124]	; (8001a7c <HAL_InitTick+0xa8>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6413      	str	r3, [r2, #64]	; 0x40
 8001a04:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <HAL_InitTick+0xa8>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a10:	f107 0210 	add.w	r2, r7, #16
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 fb7c 	bl	8005118 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001a20:	f003 fb52 	bl	80050c8 <HAL_RCC_GetPCLK1Freq>
 8001a24:	4603      	mov	r3, r0
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2c:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <HAL_InitTick+0xac>)
 8001a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a32:	0c9b      	lsrs	r3, r3, #18
 8001a34:	3b01      	subs	r3, #1
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_InitTick+0xb0>)
 8001a3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <HAL_InitTick+0xb0>)
 8001a42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a46:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001a48:	4a0e      	ldr	r2, [pc, #56]	; (8001a84 <HAL_InitTick+0xb0>)
 8001a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <HAL_InitTick+0xb0>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_InitTick+0xb0>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001a5a:	480a      	ldr	r0, [pc, #40]	; (8001a84 <HAL_InitTick+0xb0>)
 8001a5c:	f003 fd30 	bl	80054c0 <HAL_TIM_Base_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d104      	bne.n	8001a70 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001a66:	4807      	ldr	r0, [pc, #28]	; (8001a84 <HAL_InitTick+0xb0>)
 8001a68:	f003 fd5f 	bl	800552a <HAL_TIM_Base_Start_IT>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	e000      	b.n	8001a72 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3730      	adds	r7, #48	; 0x30
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	431bde83 	.word	0x431bde83
 8001a84:	2000427c 	.word	0x2000427c

08001a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <HardFault_Handler+0x4>

08001a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <MemManage_Handler+0x4>

08001aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa6:	e7fe      	b.n	8001aa6 <BusFault_Handler+0x4>

08001aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <UsageFault_Handler+0x4>

08001aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <TIM2_IRQHandler+0x10>)
 8001ac2:	f003 fd56 	bl	8005572 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	2000427c 	.word	0x2000427c

08001ad0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <USART2_IRQHandler+0x10>)
 8001ad6:	f004 f817 	bl	8005b08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200041f0 	.word	0x200041f0

08001ae4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <OTG_FS_IRQHandler+0x10>)
 8001aea:	f000 fe79 	bl	80027e0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200046a4 	.word	0x200046a4

08001af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b00:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <_sbrk+0x5c>)
 8001b02:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <_sbrk+0x60>)
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b0c:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <_sbrk+0x64>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d102      	bne.n	8001b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b14:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <_sbrk+0x64>)
 8001b16:	4a12      	ldr	r2, [pc, #72]	; (8001b60 <_sbrk+0x68>)
 8001b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b1a:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <_sbrk+0x64>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d207      	bcs.n	8001b38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b28:	f00a fe42 	bl	800c7b0 <__errno>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	230c      	movs	r3, #12
 8001b30:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295
 8001b36:	e009      	b.n	8001b4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <_sbrk+0x64>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b3e:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <_sbrk+0x64>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	4a05      	ldr	r2, [pc, #20]	; (8001b5c <_sbrk+0x64>)
 8001b48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20020000 	.word	0x20020000
 8001b58:	00000400 	.word	0x00000400
 8001b5c:	20000310 	.word	0x20000310
 8001b60:	20004970 	.word	0x20004970

08001b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <SystemInit+0x28>)
 8001b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b6e:	4a07      	ldr	r2, [pc, #28]	; (8001b8c <SystemInit+0x28>)
 8001b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <SystemInit+0x28>)
 8001b7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b7e:	609a      	str	r2, [r3, #8]
#endif
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b96:	e003      	b.n	8001ba0 <LoopCopyDataInit>

08001b98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b9e:	3104      	adds	r1, #4

08001ba0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ba0:	480b      	ldr	r0, [pc, #44]	; (8001bd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ba4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ba6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ba8:	d3f6      	bcc.n	8001b98 <CopyDataInit>
  ldr  r2, =_sbss
 8001baa:	4a0b      	ldr	r2, [pc, #44]	; (8001bd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bac:	e002      	b.n	8001bb4 <LoopFillZerobss>

08001bae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bb0:	f842 3b04 	str.w	r3, [r2], #4

08001bb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bb8:	d3f9      	bcc.n	8001bae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bba:	f7ff ffd3 	bl	8001b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bbe:	f00a fdfd 	bl	800c7bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc2:	f7fe fcb7 	bl	8000534 <main>
  bx  lr    
 8001bc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bc8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001bcc:	0800d068 	.word	0x0800d068
  ldr  r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bd4:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8001bd8:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8001bdc:	2000496c 	.word	0x2000496c

08001be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be0:	e7fe      	b.n	8001be0 <ADC_IRQHandler>
	...

08001be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <HAL_Init+0x40>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0d      	ldr	r2, [pc, #52]	; (8001c24 <HAL_Init+0x40>)
 8001bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_Init+0x40>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <HAL_Init+0x40>)
 8001bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_Init+0x40>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <HAL_Init+0x40>)
 8001c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f000 f91c 	bl	8001e4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c12:	2000      	movs	r0, #0
 8001c14:	f7ff fede 	bl	80019d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c18:	f7ff fd6c 	bl	80016f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023c00 	.word	0x40023c00

08001c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_IncTick+0x20>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_IncTick+0x24>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <HAL_IncTick+0x24>)
 8001c3a:	6013      	str	r3, [r2, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000008 	.word	0x20000008
 8001c4c:	200042bc 	.word	0x200042bc

08001c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return uwTick;
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_GetTick+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	200042bc 	.word	0x200042bc

08001c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c70:	f7ff ffee 	bl	8001c50 <HAL_GetTick>
 8001c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c80:	d005      	beq.n	8001c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_Delay+0x40>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c8e:	bf00      	nop
 8001c90:	f7ff ffde 	bl	8001c50 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d8f7      	bhi.n	8001c90 <HAL_Delay+0x28>
  {
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000008 	.word	0x20000008

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cde:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	60d3      	str	r3, [r2, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	db0b      	blt.n	8001d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	f003 021f 	and.w	r2, r3, #31
 8001d28:	4907      	ldr	r1, [pc, #28]	; (8001d48 <__NVIC_EnableIRQ+0x38>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	2001      	movs	r0, #1
 8001d32:	fa00 f202 	lsl.w	r2, r0, r2
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000e100 	.word	0xe000e100

08001d4c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	db10      	blt.n	8001d80 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	f003 021f 	and.w	r2, r3, #31
 8001d64:	4909      	ldr	r1, [pc, #36]	; (8001d8c <__NVIC_DisableIRQ+0x40>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d72:	3320      	adds	r3, #32
 8001d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d7c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000e100 	.word	0xe000e100

08001d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	db0a      	blt.n	8001dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	490c      	ldr	r1, [pc, #48]	; (8001ddc <__NVIC_SetPriority+0x4c>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	0112      	lsls	r2, r2, #4
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	440b      	add	r3, r1
 8001db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db8:	e00a      	b.n	8001dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4908      	ldr	r1, [pc, #32]	; (8001de0 <__NVIC_SetPriority+0x50>)
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	3b04      	subs	r3, #4
 8001dc8:	0112      	lsls	r2, r2, #4
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	440b      	add	r3, r1
 8001dce:	761a      	strb	r2, [r3, #24]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000e100 	.word	0xe000e100
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f1c3 0307 	rsb	r3, r3, #7
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	bf28      	it	cs
 8001e02:	2304      	movcs	r3, #4
 8001e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d902      	bls.n	8001e14 <NVIC_EncodePriority+0x30>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3b03      	subs	r3, #3
 8001e12:	e000      	b.n	8001e16 <NVIC_EncodePriority+0x32>
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43da      	mvns	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	401a      	ands	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43d9      	mvns	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	4313      	orrs	r3, r2
         );
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3724      	adds	r7, #36	; 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ff2a 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
 8001e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e72:	f7ff ff3f 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	68b9      	ldr	r1, [r7, #8]
 8001e7c:	6978      	ldr	r0, [r7, #20]
 8001e7e:	f7ff ffb1 	bl	8001de4 <NVIC_EncodePriority>
 8001e82:	4602      	mov	r2, r0
 8001e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e88:	4611      	mov	r1, r2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff ff80 	bl	8001d90 <__NVIC_SetPriority>
}
 8001e90:	bf00      	nop
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff ff32 	bl	8001d10 <__NVIC_EnableIRQ>
}
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ff42 	bl	8001d4c <__NVIC_DisableIRQ>
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d004      	beq.n	8001eee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2280      	movs	r2, #128	; 0x80
 8001ee8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00c      	b.n	8001f08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2205      	movs	r2, #5
 8001ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0201 	bic.w	r2, r2, #1
 8001f04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	; 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	e16b      	b.n	8002208 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f30:	2201      	movs	r2, #1
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	f040 815a 	bne.w	8002202 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d00b      	beq.n	8001f6e <HAL_GPIO_Init+0x5a>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d007      	beq.n	8001f6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f62:	2b11      	cmp	r3, #17
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b12      	cmp	r3, #18
 8001f6c:	d130      	bne.n	8001fd0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	2203      	movs	r2, #3
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	f003 0201 	and.w	r2, r3, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	2203      	movs	r2, #3
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0xfc>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b12      	cmp	r3, #18
 800200e:	d123      	bne.n	8002058 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	08da      	lsrs	r2, r3, #3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3208      	adds	r2, #8
 8002018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800201c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	220f      	movs	r2, #15
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	08da      	lsrs	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3208      	adds	r2, #8
 8002052:	69b9      	ldr	r1, [r7, #24]
 8002054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	2203      	movs	r2, #3
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0203 	and.w	r2, r3, #3
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 80b4 	beq.w	8002202 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	4b5f      	ldr	r3, [pc, #380]	; (800221c <HAL_GPIO_Init+0x308>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	4a5e      	ldr	r2, [pc, #376]	; (800221c <HAL_GPIO_Init+0x308>)
 80020a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020a8:	6453      	str	r3, [r2, #68]	; 0x44
 80020aa:	4b5c      	ldr	r3, [pc, #368]	; (800221c <HAL_GPIO_Init+0x308>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020b6:	4a5a      	ldr	r2, [pc, #360]	; (8002220 <HAL_GPIO_Init+0x30c>)
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3302      	adds	r3, #2
 80020be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	220f      	movs	r2, #15
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a51      	ldr	r2, [pc, #324]	; (8002224 <HAL_GPIO_Init+0x310>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d02b      	beq.n	800213a <HAL_GPIO_Init+0x226>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a50      	ldr	r2, [pc, #320]	; (8002228 <HAL_GPIO_Init+0x314>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d025      	beq.n	8002136 <HAL_GPIO_Init+0x222>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4f      	ldr	r2, [pc, #316]	; (800222c <HAL_GPIO_Init+0x318>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d01f      	beq.n	8002132 <HAL_GPIO_Init+0x21e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a4e      	ldr	r2, [pc, #312]	; (8002230 <HAL_GPIO_Init+0x31c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d019      	beq.n	800212e <HAL_GPIO_Init+0x21a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4d      	ldr	r2, [pc, #308]	; (8002234 <HAL_GPIO_Init+0x320>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d013      	beq.n	800212a <HAL_GPIO_Init+0x216>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4c      	ldr	r2, [pc, #304]	; (8002238 <HAL_GPIO_Init+0x324>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00d      	beq.n	8002126 <HAL_GPIO_Init+0x212>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4b      	ldr	r2, [pc, #300]	; (800223c <HAL_GPIO_Init+0x328>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d007      	beq.n	8002122 <HAL_GPIO_Init+0x20e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4a      	ldr	r2, [pc, #296]	; (8002240 <HAL_GPIO_Init+0x32c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d101      	bne.n	800211e <HAL_GPIO_Init+0x20a>
 800211a:	2307      	movs	r3, #7
 800211c:	e00e      	b.n	800213c <HAL_GPIO_Init+0x228>
 800211e:	2308      	movs	r3, #8
 8002120:	e00c      	b.n	800213c <HAL_GPIO_Init+0x228>
 8002122:	2306      	movs	r3, #6
 8002124:	e00a      	b.n	800213c <HAL_GPIO_Init+0x228>
 8002126:	2305      	movs	r3, #5
 8002128:	e008      	b.n	800213c <HAL_GPIO_Init+0x228>
 800212a:	2304      	movs	r3, #4
 800212c:	e006      	b.n	800213c <HAL_GPIO_Init+0x228>
 800212e:	2303      	movs	r3, #3
 8002130:	e004      	b.n	800213c <HAL_GPIO_Init+0x228>
 8002132:	2302      	movs	r3, #2
 8002134:	e002      	b.n	800213c <HAL_GPIO_Init+0x228>
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <HAL_GPIO_Init+0x228>
 800213a:	2300      	movs	r3, #0
 800213c:	69fa      	ldr	r2, [r7, #28]
 800213e:	f002 0203 	and.w	r2, r2, #3
 8002142:	0092      	lsls	r2, r2, #2
 8002144:	4093      	lsls	r3, r2
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800214c:	4934      	ldr	r1, [pc, #208]	; (8002220 <HAL_GPIO_Init+0x30c>)
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	089b      	lsrs	r3, r3, #2
 8002152:	3302      	adds	r3, #2
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800215a:	4b3a      	ldr	r3, [pc, #232]	; (8002244 <HAL_GPIO_Init+0x330>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800217e:	4a31      	ldr	r2, [pc, #196]	; (8002244 <HAL_GPIO_Init+0x330>)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002184:	4b2f      	ldr	r3, [pc, #188]	; (8002244 <HAL_GPIO_Init+0x330>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021a8:	4a26      	ldr	r2, [pc, #152]	; (8002244 <HAL_GPIO_Init+0x330>)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ae:	4b25      	ldr	r3, [pc, #148]	; (8002244 <HAL_GPIO_Init+0x330>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021d2:	4a1c      	ldr	r2, [pc, #112]	; (8002244 <HAL_GPIO_Init+0x330>)
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021d8:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <HAL_GPIO_Init+0x330>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021fc:	4a11      	ldr	r2, [pc, #68]	; (8002244 <HAL_GPIO_Init+0x330>)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	3301      	adds	r3, #1
 8002206:	61fb      	str	r3, [r7, #28]
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	2b0f      	cmp	r3, #15
 800220c:	f67f ae90 	bls.w	8001f30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002210:	bf00      	nop
 8002212:	3724      	adds	r7, #36	; 0x24
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40023800 	.word	0x40023800
 8002220:	40013800 	.word	0x40013800
 8002224:	40020000 	.word	0x40020000
 8002228:	40020400 	.word	0x40020400
 800222c:	40020800 	.word	0x40020800
 8002230:	40020c00 	.word	0x40020c00
 8002234:	40021000 	.word	0x40021000
 8002238:	40021400 	.word	0x40021400
 800223c:	40021800 	.word	0x40021800
 8002240:	40021c00 	.word	0x40021c00
 8002244:	40013c00 	.word	0x40013c00

08002248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	807b      	strh	r3, [r7, #2]
 8002254:	4613      	mov	r3, r2
 8002256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002258:	787b      	ldrb	r3, [r7, #1]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800225e:	887a      	ldrh	r2, [r7, #2]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002264:	e003      	b.n	800226e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002266:	887b      	ldrh	r3, [r7, #2]
 8002268:	041a      	lsls	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	619a      	str	r2, [r3, #24]
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	4013      	ands	r3, r2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d006      	beq.n	80022a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002292:	4a05      	ldr	r2, [pc, #20]	; (80022a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002294:	88fb      	ldrh	r3, [r7, #6]
 8002296:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f806 	bl	80022ac <HAL_GPIO_EXTI_Callback>
  }
}
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40013c00 	.word	0x40013c00

080022ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80022c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022c4:	b08f      	sub	sp, #60	; 0x3c
 80022c6:	af0a      	add	r7, sp, #40	; 0x28
 80022c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e054      	b.n	800237e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f009 ffb0 	bl	800c254 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2203      	movs	r2, #3
 80022f8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002304:	2b00      	cmp	r3, #0
 8002306:	d102      	bne.n	800230e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f004 fa70 	bl	80067f8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	603b      	str	r3, [r7, #0]
 800231e:	687e      	ldr	r6, [r7, #4]
 8002320:	466d      	mov	r5, sp
 8002322:	f106 0410 	add.w	r4, r6, #16
 8002326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800232a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800232c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800232e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002332:	e885 0003 	stmia.w	r5, {r0, r1}
 8002336:	1d33      	adds	r3, r6, #4
 8002338:	cb0e      	ldmia	r3, {r1, r2, r3}
 800233a:	6838      	ldr	r0, [r7, #0]
 800233c:	f004 f9ea 	bl	8006714 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2101      	movs	r1, #1
 8002346:	4618      	mov	r0, r3
 8002348:	f004 fa67 	bl	800681a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	603b      	str	r3, [r7, #0]
 8002352:	687e      	ldr	r6, [r7, #4]
 8002354:	466d      	mov	r5, sp
 8002356:	f106 0410 	add.w	r4, r6, #16
 800235a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800235c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800235e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002362:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002366:	e885 0003 	stmia.w	r5, {r0, r1}
 800236a:	1d33      	adds	r3, r6, #4
 800236c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800236e:	6838      	ldr	r0, [r7, #0]
 8002370:	f004 fb7a 	bl	8006a68 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002386 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002386:	b590      	push	{r4, r7, lr}
 8002388:	b089      	sub	sp, #36	; 0x24
 800238a:	af04      	add	r7, sp, #16
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	4608      	mov	r0, r1
 8002390:	4611      	mov	r1, r2
 8002392:	461a      	mov	r2, r3
 8002394:	4603      	mov	r3, r0
 8002396:	70fb      	strb	r3, [r7, #3]
 8002398:	460b      	mov	r3, r1
 800239a:	70bb      	strb	r3, [r7, #2]
 800239c:	4613      	mov	r3, r2
 800239e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_HCD_HC_Init+0x28>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e07f      	b.n	80024ae <HAL_HCD_HC_Init+0x128>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80023b6:	78fa      	ldrb	r2, [r7, #3]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	440b      	add	r3, r1
 80023c4:	333d      	adds	r3, #61	; 0x3d
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80023ca:	78fa      	ldrb	r2, [r7, #3]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	440b      	add	r3, r1
 80023d8:	3338      	adds	r3, #56	; 0x38
 80023da:	787a      	ldrb	r2, [r7, #1]
 80023dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80023de:	78fa      	ldrb	r2, [r7, #3]
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	440b      	add	r3, r1
 80023ec:	3340      	adds	r3, #64	; 0x40
 80023ee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80023f0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80023f2:	78fa      	ldrb	r2, [r7, #3]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	3339      	adds	r3, #57	; 0x39
 8002402:	78fa      	ldrb	r2, [r7, #3]
 8002404:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002406:	78fa      	ldrb	r2, [r7, #3]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	440b      	add	r3, r1
 8002414:	333f      	adds	r3, #63	; 0x3f
 8002416:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800241a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800241c:	78fa      	ldrb	r2, [r7, #3]
 800241e:	78bb      	ldrb	r3, [r7, #2]
 8002420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002424:	b2d8      	uxtb	r0, r3
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	440b      	add	r3, r1
 8002432:	333a      	adds	r3, #58	; 0x3a
 8002434:	4602      	mov	r2, r0
 8002436:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002438:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800243c:	2b00      	cmp	r3, #0
 800243e:	da0a      	bge.n	8002456 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002440:	78fa      	ldrb	r2, [r7, #3]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	440b      	add	r3, r1
 800244e:	333b      	adds	r3, #59	; 0x3b
 8002450:	2201      	movs	r2, #1
 8002452:	701a      	strb	r2, [r3, #0]
 8002454:	e009      	b.n	800246a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002456:	78fa      	ldrb	r2, [r7, #3]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	440b      	add	r3, r1
 8002464:	333b      	adds	r3, #59	; 0x3b
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800246a:	78fa      	ldrb	r2, [r7, #3]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	440b      	add	r3, r1
 8002478:	333c      	adds	r3, #60	; 0x3c
 800247a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800247e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	787c      	ldrb	r4, [r7, #1]
 8002486:	78ba      	ldrb	r2, [r7, #2]
 8002488:	78f9      	ldrb	r1, [r7, #3]
 800248a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800248c:	9302      	str	r3, [sp, #8]
 800248e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002492:	9301      	str	r3, [sp, #4]
 8002494:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	4623      	mov	r3, r4
 800249c:	f004 fc66 	bl	8006d6c <USB_HC_Init>
 80024a0:	4603      	mov	r3, r0
 80024a2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd90      	pop	{r4, r7, pc}

080024b6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b084      	sub	sp, #16
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	460b      	mov	r3, r1
 80024c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_HCD_HC_Halt+0x1e>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e00f      	b.n	80024f4 <HAL_HCD_HC_Halt+0x3e>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f004 fea2 	bl	800722e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	4608      	mov	r0, r1
 8002506:	4611      	mov	r1, r2
 8002508:	461a      	mov	r2, r3
 800250a:	4603      	mov	r3, r0
 800250c:	70fb      	strb	r3, [r7, #3]
 800250e:	460b      	mov	r3, r1
 8002510:	70bb      	strb	r3, [r7, #2]
 8002512:	4613      	mov	r3, r2
 8002514:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002516:	78fa      	ldrb	r2, [r7, #3]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	440b      	add	r3, r1
 8002524:	333b      	adds	r3, #59	; 0x3b
 8002526:	78ba      	ldrb	r2, [r7, #2]
 8002528:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800252a:	78fa      	ldrb	r2, [r7, #3]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	440b      	add	r3, r1
 8002538:	333f      	adds	r3, #63	; 0x3f
 800253a:	787a      	ldrb	r2, [r7, #1]
 800253c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800253e:	7c3b      	ldrb	r3, [r7, #16]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d114      	bne.n	800256e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	440b      	add	r3, r1
 8002552:	3342      	adds	r3, #66	; 0x42
 8002554:	2203      	movs	r2, #3
 8002556:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	440b      	add	r3, r1
 8002566:	333d      	adds	r3, #61	; 0x3d
 8002568:	7f3a      	ldrb	r2, [r7, #28]
 800256a:	701a      	strb	r2, [r3, #0]
 800256c:	e009      	b.n	8002582 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800256e:	78fa      	ldrb	r2, [r7, #3]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	440b      	add	r3, r1
 800257c:	3342      	adds	r3, #66	; 0x42
 800257e:	2202      	movs	r2, #2
 8002580:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002582:	787b      	ldrb	r3, [r7, #1]
 8002584:	2b03      	cmp	r3, #3
 8002586:	f200 80d6 	bhi.w	8002736 <HAL_HCD_HC_SubmitRequest+0x23a>
 800258a:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <HAL_HCD_HC_SubmitRequest+0x94>)
 800258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002590:	080025a1 	.word	0x080025a1
 8002594:	08002721 	.word	0x08002721
 8002598:	0800260d 	.word	0x0800260d
 800259c:	08002697 	.word	0x08002697
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80025a0:	7c3b      	ldrb	r3, [r7, #16]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	f040 80c9 	bne.w	800273a <HAL_HCD_HC_SubmitRequest+0x23e>
 80025a8:	78bb      	ldrb	r3, [r7, #2]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f040 80c5 	bne.w	800273a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80025b0:	8b3b      	ldrh	r3, [r7, #24]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d109      	bne.n	80025ca <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80025b6:	78fa      	ldrb	r2, [r7, #3]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	440b      	add	r3, r1
 80025c4:	3351      	adds	r3, #81	; 0x51
 80025c6:	2201      	movs	r2, #1
 80025c8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	440b      	add	r3, r1
 80025d8:	3351      	adds	r3, #81	; 0x51
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10a      	bne.n	80025f6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	440b      	add	r3, r1
 80025ee:	3342      	adds	r3, #66	; 0x42
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80025f4:	e0a1      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025f6:	78fa      	ldrb	r2, [r7, #3]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	440b      	add	r3, r1
 8002604:	3342      	adds	r3, #66	; 0x42
 8002606:	2202      	movs	r2, #2
 8002608:	701a      	strb	r2, [r3, #0]
      break;
 800260a:	e096      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800260c:	78bb      	ldrb	r3, [r7, #2]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d120      	bne.n	8002654 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002612:	78fa      	ldrb	r2, [r7, #3]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	440b      	add	r3, r1
 8002620:	3351      	adds	r3, #81	; 0x51
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10a      	bne.n	800263e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	440b      	add	r3, r1
 8002636:	3342      	adds	r3, #66	; 0x42
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800263c:	e07e      	b.n	800273c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800263e:	78fa      	ldrb	r2, [r7, #3]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	440b      	add	r3, r1
 800264c:	3342      	adds	r3, #66	; 0x42
 800264e:	2202      	movs	r2, #2
 8002650:	701a      	strb	r2, [r3, #0]
      break;
 8002652:	e073      	b.n	800273c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002654:	78fa      	ldrb	r2, [r7, #3]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	440b      	add	r3, r1
 8002662:	3350      	adds	r3, #80	; 0x50
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10a      	bne.n	8002680 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800266a:	78fa      	ldrb	r2, [r7, #3]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	440b      	add	r3, r1
 8002678:	3342      	adds	r3, #66	; 0x42
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
      break;
 800267e:	e05d      	b.n	800273c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002680:	78fa      	ldrb	r2, [r7, #3]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	440b      	add	r3, r1
 800268e:	3342      	adds	r3, #66	; 0x42
 8002690:	2202      	movs	r2, #2
 8002692:	701a      	strb	r2, [r3, #0]
      break;
 8002694:	e052      	b.n	800273c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002696:	78bb      	ldrb	r3, [r7, #2]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d120      	bne.n	80026de <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	440b      	add	r3, r1
 80026aa:	3351      	adds	r3, #81	; 0x51
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10a      	bne.n	80026c8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	440b      	add	r3, r1
 80026c0:	3342      	adds	r3, #66	; 0x42
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80026c6:	e039      	b.n	800273c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	440b      	add	r3, r1
 80026d6:	3342      	adds	r3, #66	; 0x42
 80026d8:	2202      	movs	r2, #2
 80026da:	701a      	strb	r2, [r3, #0]
      break;
 80026dc:	e02e      	b.n	800273c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	440b      	add	r3, r1
 80026ec:	3350      	adds	r3, #80	; 0x50
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10a      	bne.n	800270a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026f4:	78fa      	ldrb	r2, [r7, #3]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	440b      	add	r3, r1
 8002702:	3342      	adds	r3, #66	; 0x42
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
      break;
 8002708:	e018      	b.n	800273c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800270a:	78fa      	ldrb	r2, [r7, #3]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	440b      	add	r3, r1
 8002718:	3342      	adds	r3, #66	; 0x42
 800271a:	2202      	movs	r2, #2
 800271c:	701a      	strb	r2, [r3, #0]
      break;
 800271e:	e00d      	b.n	800273c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002720:	78fa      	ldrb	r2, [r7, #3]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	440b      	add	r3, r1
 800272e:	3342      	adds	r3, #66	; 0x42
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
      break;
 8002734:	e002      	b.n	800273c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002736:	bf00      	nop
 8002738:	e000      	b.n	800273c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800273a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800273c:	78fa      	ldrb	r2, [r7, #3]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	440b      	add	r3, r1
 800274a:	3344      	adds	r3, #68	; 0x44
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002750:	78fa      	ldrb	r2, [r7, #3]
 8002752:	8b39      	ldrh	r1, [r7, #24]
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4403      	add	r3, r0
 8002760:	3348      	adds	r3, #72	; 0x48
 8002762:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002764:	78fa      	ldrb	r2, [r7, #3]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	440b      	add	r3, r1
 8002772:	335c      	adds	r3, #92	; 0x5c
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002778:	78fa      	ldrb	r2, [r7, #3]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	440b      	add	r3, r1
 8002786:	334c      	adds	r3, #76	; 0x4c
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800278c:	78fa      	ldrb	r2, [r7, #3]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	440b      	add	r3, r1
 800279a:	3339      	adds	r3, #57	; 0x39
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80027a0:	78fa      	ldrb	r2, [r7, #3]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	440b      	add	r3, r1
 80027ae:	335d      	adds	r3, #93	; 0x5d
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6818      	ldr	r0, [r3, #0]
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	3338      	adds	r3, #56	; 0x38
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	18d1      	adds	r1, r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	f004 fbd6 	bl	8006f80 <USB_HC_StartXfer>
 80027d4:	4603      	mov	r3, r0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop

080027e0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f004 f8f3 	bl	80069e2 <USB_GetMode>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b01      	cmp	r3, #1
 8002800:	f040 80ef 	bne.w	80029e2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f004 f8d7 	bl	80069bc <USB_ReadInterrupts>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80e5 	beq.w	80029e0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f004 f8ce 	bl	80069bc <USB_ReadInterrupts>
 8002820:	4603      	mov	r3, r0
 8002822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002826:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800282a:	d104      	bne.n	8002836 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002834:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f004 f8be 	bl	80069bc <USB_ReadInterrupts>
 8002840:	4603      	mov	r3, r0
 8002842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800284a:	d104      	bne.n	8002856 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002854:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f004 f8ae 	bl	80069bc <USB_ReadInterrupts>
 8002860:	4603      	mov	r3, r0
 8002862:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002866:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800286a:	d104      	bne.n	8002876 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002874:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f004 f89e 	bl	80069bc <USB_ReadInterrupts>
 8002880:	4603      	mov	r3, r0
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b02      	cmp	r3, #2
 8002888:	d103      	bne.n	8002892 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2202      	movs	r2, #2
 8002890:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f004 f890 	bl	80069bc <USB_ReadInterrupts>
 800289c:	4603      	mov	r3, r0
 800289e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028a6:	d115      	bne.n	80028d4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80028b0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d108      	bne.n	80028d4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f009 fd44 	bl	800c350 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2101      	movs	r1, #1
 80028ce:	4618      	mov	r0, r3
 80028d0:	f004 f986 	bl	8006be0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f004 f86f 	bl	80069bc <USB_ReadInterrupts>
 80028de:	4603      	mov	r3, r0
 80028e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028e8:	d102      	bne.n	80028f0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f001 f966 	bl	8003bbc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f004 f861 	bl	80069bc <USB_ReadInterrupts>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b08      	cmp	r3, #8
 8002902:	d106      	bne.n	8002912 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f009 fd07 	bl	800c318 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2208      	movs	r2, #8
 8002910:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f004 f850 	bl	80069bc <USB_ReadInterrupts>
 800291c:	4603      	mov	r3, r0
 800291e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002922:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002926:	d138      	bne.n	800299a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f004 fc6d 	bl	800720c <USB_HC_ReadInterrupt>
 8002932:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	e025      	b.n	8002986 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	fa22 f303 	lsr.w	r3, r2, r3
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d018      	beq.n	8002980 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	015a      	lsls	r2, r3, #5
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4413      	add	r3, r2
 8002956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002964:	d106      	bne.n	8002974 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	4619      	mov	r1, r3
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f8cf 	bl	8002b10 <HCD_HC_IN_IRQHandler>
 8002972:	e005      	b.n	8002980 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	4619      	mov	r1, r3
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fcfd 	bl	800337a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	3301      	adds	r3, #1
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	429a      	cmp	r2, r3
 800298e:	d3d4      	bcc.n	800293a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002998:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f004 f80c 	bl	80069bc <USB_ReadInterrupts>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	2b10      	cmp	r3, #16
 80029ac:	d101      	bne.n	80029b2 <HAL_HCD_IRQHandler+0x1d2>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <HAL_HCD_IRQHandler+0x1d4>
 80029b2:	2300      	movs	r3, #0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d014      	beq.n	80029e2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699a      	ldr	r2, [r3, #24]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0210 	bic.w	r2, r2, #16
 80029c6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f001 f84b 	bl	8003a64 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	699a      	ldr	r2, [r3, #24]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0210 	orr.w	r2, r2, #16
 80029dc:	619a      	str	r2, [r3, #24]
 80029de:	e000      	b.n	80029e2 <HAL_HCD_IRQHandler+0x202>
      return;
 80029e0:	bf00      	nop
    }
  }
}
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_HCD_Start+0x16>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e013      	b.n	8002a26 <HAL_HCD_Start+0x3e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f003 fee3 	bl	80067d6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2101      	movs	r1, #1
 8002a16:	4618      	mov	r0, r3
 8002a18:	f004 f946 	bl	8006ca8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d101      	bne.n	8002a44 <HAL_HCD_Stop+0x16>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e00d      	b.n	8002a60 <HAL_HCD_Stop+0x32>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f004 fd27 	bl	80074a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f004 f8ed 	bl	8006c54 <USB_ResetPort>
 8002a7a:	4603      	mov	r3, r0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	440b      	add	r3, r1
 8002a9e:	335c      	adds	r3, #92	; 0x5c
 8002aa0:	781b      	ldrb	r3, [r3, #0]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002aba:	78fa      	ldrb	r2, [r7, #3]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	440b      	add	r3, r1
 8002ac8:	334c      	adds	r3, #76	; 0x4c
 8002aca:	681b      	ldr	r3, [r3, #0]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f004 f92f 	bl	8006d48 <USB_GetCurrentFrame>
 8002aea:	4603      	mov	r3, r0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f004 f90a 	bl	8006d1a <USB_GetHostSpeed>
 8002b06:	4603      	mov	r3, r0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d119      	bne.n	8002b74 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	2304      	movs	r3, #4
 8002b50:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	0151      	lsls	r1, r2, #5
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	440a      	add	r2, r1
 8002b68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b6c:	f043 0302 	orr.w	r3, r3, #2
 8002b70:	60d3      	str	r3, [r2, #12]
 8002b72:	e0ce      	b.n	8002d12 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b8a:	d12c      	bne.n	8002be6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	440b      	add	r3, r1
 8002bae:	335d      	adds	r3, #93	; 0x5d
 8002bb0:	2207      	movs	r2, #7
 8002bb2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	0151      	lsls	r1, r2, #5
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	440a      	add	r2, r1
 8002bca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bce:	f043 0302 	orr.w	r3, r3, #2
 8002bd2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	4611      	mov	r1, r2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f004 fb25 	bl	800722e <USB_HC_Halt>
 8002be4:	e095      	b.n	8002d12 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0320 	and.w	r3, r3, #32
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	d109      	bne.n	8002c10 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c08:	461a      	mov	r2, r3
 8002c0a:	2320      	movs	r3, #32
 8002c0c:	6093      	str	r3, [r2, #8]
 8002c0e:	e080      	b.n	8002d12 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d134      	bne.n	8002c90 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	0151      	lsls	r1, r2, #5
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	440a      	add	r2, r1
 8002c3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	440b      	add	r3, r1
 8002c54:	335d      	adds	r3, #93	; 0x5d
 8002c56:	2205      	movs	r2, #5
 8002c58:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c66:	461a      	mov	r2, r3
 8002c68:	2310      	movs	r3, #16
 8002c6a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	015a      	lsls	r2, r3, #5
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c78:	461a      	mov	r2, r3
 8002c7a:	2308      	movs	r3, #8
 8002c7c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f004 fad0 	bl	800722e <USB_HC_Halt>
 8002c8e:	e040      	b.n	8002d12 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca6:	d134      	bne.n	8002d12 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	0151      	lsls	r1, r2, #5
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	440a      	add	r2, r1
 8002cbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cc2:	f043 0302 	orr.w	r3, r3, #2
 8002cc6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f004 faab 	bl	800722e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	2310      	movs	r3, #16
 8002ce8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	440b      	add	r3, r1
 8002cf8:	335d      	adds	r3, #93	; 0x5d
 8002cfa:	2208      	movs	r2, #8
 8002cfc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	015a      	lsls	r2, r3, #5
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4413      	add	r3, r2
 8002d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d10:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d28:	d122      	bne.n	8002d70 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	0151      	lsls	r1, r2, #5
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	440a      	add	r2, r1
 8002d40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d44:	f043 0302 	orr.w	r3, r3, #2
 8002d48:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f004 fa6a 	bl	800722e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d66:	461a      	mov	r2, r3
 8002d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d6c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002d6e:	e300      	b.n	8003372 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	015a      	lsls	r2, r3, #5
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4413      	add	r3, r2
 8002d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	f040 80fd 	bne.w	8002f82 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01b      	beq.n	8002dc8 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	440b      	add	r3, r1
 8002d9e:	3348      	adds	r3, #72	; 0x48
 8002da0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	0159      	lsls	r1, r3, #5
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	440b      	add	r3, r1
 8002daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002db4:	1ad1      	subs	r1, r2, r3
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	4403      	add	r3, r0
 8002dc4:	334c      	adds	r3, #76	; 0x4c
 8002dc6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	440b      	add	r3, r1
 8002dd6:	335d      	adds	r3, #93	; 0x5d
 8002dd8:	2201      	movs	r2, #1
 8002dda:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	440b      	add	r3, r1
 8002dea:	3358      	adds	r3, #88	; 0x58
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	2301      	movs	r3, #1
 8002e00:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	440b      	add	r3, r1
 8002e10:	333f      	adds	r3, #63	; 0x3f
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	440b      	add	r3, r1
 8002e26:	333f      	adds	r3, #63	; 0x3f
 8002e28:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d121      	bne.n	8002e72 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	0151      	lsls	r1, r2, #5
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	440a      	add	r2, r1
 8002e44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e48:	f043 0302 	orr.w	r3, r3, #2
 8002e4c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	4611      	mov	r1, r2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f004 f9e8 	bl	800722e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	2310      	movs	r3, #16
 8002e6e:	6093      	str	r3, [r2, #8]
 8002e70:	e070      	b.n	8002f54 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	440b      	add	r3, r1
 8002e80:	333f      	adds	r3, #63	; 0x3f
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d12a      	bne.n	8002ede <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	0151      	lsls	r1, r2, #5
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	440a      	add	r2, r1
 8002e9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ea2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ea6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	335c      	adds	r3, #92	; 0x5c
 8002eb8:	2201      	movs	r2, #1
 8002eba:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	b2d8      	uxtb	r0, r3
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	440b      	add	r3, r1
 8002ece:	335c      	adds	r3, #92	; 0x5c
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	4601      	mov	r1, r0
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f009 fa48 	bl	800c36c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002edc:	e03a      	b.n	8002f54 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	440b      	add	r3, r1
 8002eec:	333f      	adds	r3, #63	; 0x3f
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d12f      	bne.n	8002f54 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	440b      	add	r3, r1
 8002f02:	335c      	adds	r3, #92	; 0x5c
 8002f04:	2201      	movs	r2, #1
 8002f06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	440b      	add	r3, r1
 8002f16:	3350      	adds	r3, #80	; 0x50
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	f083 0301 	eor.w	r3, r3, #1
 8002f1e:	b2d8      	uxtb	r0, r3
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3350      	adds	r3, #80	; 0x50
 8002f30:	4602      	mov	r2, r0
 8002f32:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	b2d8      	uxtb	r0, r3
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	440b      	add	r3, r1
 8002f46:	335c      	adds	r3, #92	; 0x5c
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4601      	mov	r1, r0
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f009 fa0c 	bl	800c36c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	440b      	add	r3, r1
 8002f62:	3350      	adds	r3, #80	; 0x50
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	f083 0301 	eor.w	r3, r3, #1
 8002f6a:	b2d8      	uxtb	r0, r3
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	440b      	add	r3, r1
 8002f7a:	3350      	adds	r3, #80	; 0x50
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	701a      	strb	r2, [r3, #0]
}
 8002f80:	e1f7      	b.n	8003372 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	f040 811a 	bne.w	80031ce <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	0151      	lsls	r1, r2, #5
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	440a      	add	r2, r1
 8002fb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fb4:	f023 0302 	bic.w	r3, r3, #2
 8002fb8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	440b      	add	r3, r1
 8002fc8:	335d      	adds	r3, #93	; 0x5d
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d10a      	bne.n	8002fe6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	440b      	add	r3, r1
 8002fde:	335c      	adds	r3, #92	; 0x5c
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	701a      	strb	r2, [r3, #0]
 8002fe4:	e0d9      	b.n	800319a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	440b      	add	r3, r1
 8002ff4:	335d      	adds	r3, #93	; 0x5d
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d10a      	bne.n	8003012 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	440b      	add	r3, r1
 800300a:	335c      	adds	r3, #92	; 0x5c
 800300c:	2205      	movs	r2, #5
 800300e:	701a      	strb	r2, [r3, #0]
 8003010:	e0c3      	b.n	800319a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	440b      	add	r3, r1
 8003020:	335d      	adds	r3, #93	; 0x5d
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b06      	cmp	r3, #6
 8003026:	d00a      	beq.n	800303e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	440b      	add	r3, r1
 8003036:	335d      	adds	r3, #93	; 0x5d
 8003038:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800303a:	2b08      	cmp	r3, #8
 800303c:	d156      	bne.n	80030ec <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	440b      	add	r3, r1
 800304c:	3358      	adds	r3, #88	; 0x58
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	1c59      	adds	r1, r3, #1
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4613      	mov	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4403      	add	r3, r0
 8003060:	3358      	adds	r3, #88	; 0x58
 8003062:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	440b      	add	r3, r1
 8003072:	3358      	adds	r3, #88	; 0x58
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b03      	cmp	r3, #3
 8003078:	d914      	bls.n	80030a4 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	440b      	add	r3, r1
 8003088:	3358      	adds	r3, #88	; 0x58
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	440b      	add	r3, r1
 800309c:	335c      	adds	r3, #92	; 0x5c
 800309e:	2204      	movs	r2, #4
 80030a0:	701a      	strb	r2, [r3, #0]
 80030a2:	e009      	b.n	80030b8 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	440b      	add	r3, r1
 80030b2:	335c      	adds	r3, #92	; 0x5c
 80030b4:	2202      	movs	r2, #2
 80030b6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030ce:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030d6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e4:	461a      	mov	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	e056      	b.n	800319a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	440b      	add	r3, r1
 80030fa:	335d      	adds	r3, #93	; 0x5d
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d123      	bne.n	800314a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	440b      	add	r3, r1
 8003110:	335c      	adds	r3, #92	; 0x5c
 8003112:	2202      	movs	r2, #2
 8003114:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	4413      	add	r3, r2
 800311e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800312c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003134:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4413      	add	r3, r2
 800313e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003142:	461a      	mov	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	e027      	b.n	800319a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	440b      	add	r3, r1
 8003158:	335d      	adds	r3, #93	; 0x5d
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b07      	cmp	r3, #7
 800315e:	d11c      	bne.n	800319a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	440b      	add	r3, r1
 800316e:	3358      	adds	r3, #88	; 0x58
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	1c59      	adds	r1, r3, #1
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4403      	add	r3, r0
 8003182:	3358      	adds	r3, #88	; 0x58
 8003184:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	440b      	add	r3, r1
 8003194:	335c      	adds	r3, #92	; 0x5c
 8003196:	2204      	movs	r2, #4
 8003198:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a6:	461a      	mov	r2, r3
 80031a8:	2302      	movs	r3, #2
 80031aa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	b2d8      	uxtb	r0, r3
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	440b      	add	r3, r1
 80031be:	335c      	adds	r3, #92	; 0x5c
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	4601      	mov	r1, r0
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f009 f8d0 	bl	800c36c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80031cc:	e0d1      	b.n	8003372 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e0:	2b80      	cmp	r3, #128	; 0x80
 80031e2:	d13e      	bne.n	8003262 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	0151      	lsls	r1, r2, #5
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	440a      	add	r2, r1
 80031fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031fe:	f043 0302 	orr.w	r3, r3, #2
 8003202:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	440b      	add	r3, r1
 8003212:	3358      	adds	r3, #88	; 0x58
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	1c59      	adds	r1, r3, #1
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4403      	add	r3, r0
 8003226:	3358      	adds	r3, #88	; 0x58
 8003228:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	440b      	add	r3, r1
 8003238:	335d      	adds	r3, #93	; 0x5d
 800323a:	2206      	movs	r2, #6
 800323c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f003 fff0 	bl	800722e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	4413      	add	r3, r2
 8003256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325a:	461a      	mov	r2, r3
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	6093      	str	r3, [r2, #8]
}
 8003260:	e087      	b.n	8003372 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4413      	add	r3, r2
 800326a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b10      	cmp	r3, #16
 8003276:	d17c      	bne.n	8003372 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	440b      	add	r3, r1
 8003286:	333f      	adds	r3, #63	; 0x3f
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b03      	cmp	r3, #3
 800328c:	d122      	bne.n	80032d4 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	440b      	add	r3, r1
 800329c:	3358      	adds	r3, #88	; 0x58
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	0151      	lsls	r1, r2, #5
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	440a      	add	r2, r1
 80032b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032bc:	f043 0302 	orr.w	r3, r3, #2
 80032c0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	4611      	mov	r1, r2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f003 ffae 	bl	800722e <USB_HC_Halt>
 80032d2:	e045      	b.n	8003360 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	440b      	add	r3, r1
 80032e2:	333f      	adds	r3, #63	; 0x3f
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	440b      	add	r3, r1
 80032f8:	333f      	adds	r3, #63	; 0x3f
 80032fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d12f      	bne.n	8003360 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	440b      	add	r3, r1
 800330e:	3358      	adds	r3, #88	; 0x58
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d121      	bne.n	8003360 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	440b      	add	r3, r1
 800332a:	335d      	adds	r3, #93	; 0x5d
 800332c:	2203      	movs	r2, #3
 800332e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	0151      	lsls	r1, r2, #5
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	440a      	add	r2, r1
 8003346:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800334a:	f043 0302 	orr.w	r3, r3, #2
 800334e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	4611      	mov	r1, r2
 800335a:	4618      	mov	r0, r3
 800335c:	f003 ff67 	bl	800722e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4413      	add	r3, r2
 8003368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336c:	461a      	mov	r2, r3
 800336e:	2310      	movs	r3, #16
 8003370:	6093      	str	r3, [r2, #8]
}
 8003372:	bf00      	nop
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b086      	sub	sp, #24
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	460b      	mov	r3, r1
 8003384:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4413      	add	r3, r2
 800339c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d119      	bne.n	80033de <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b6:	461a      	mov	r2, r3
 80033b8:	2304      	movs	r3, #4
 80033ba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	015a      	lsls	r2, r3, #5
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	4413      	add	r3, r2
 80033c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	0151      	lsls	r1, r2, #5
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	440a      	add	r2, r1
 80033d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033d6:	f043 0302 	orr.w	r3, r3, #2
 80033da:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80033dc:	e33e      	b.n	8003a5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 0320 	and.w	r3, r3, #32
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d141      	bne.n	8003478 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003400:	461a      	mov	r2, r3
 8003402:	2320      	movs	r3, #32
 8003404:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	440b      	add	r3, r1
 8003414:	333d      	adds	r3, #61	; 0x3d
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b01      	cmp	r3, #1
 800341a:	f040 831f 	bne.w	8003a5c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	440b      	add	r3, r1
 800342c:	333d      	adds	r3, #61	; 0x3d
 800342e:	2200      	movs	r2, #0
 8003430:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	440b      	add	r3, r1
 8003440:	335c      	adds	r3, #92	; 0x5c
 8003442:	2202      	movs	r2, #2
 8003444:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4413      	add	r3, r2
 800344e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	0151      	lsls	r1, r2, #5
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	440a      	add	r2, r1
 800345c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003460:	f043 0302 	orr.w	r3, r3, #2
 8003464:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	4611      	mov	r1, r2
 8003470:	4618      	mov	r0, r3
 8003472:	f003 fedc 	bl	800722e <USB_HC_Halt>
}
 8003476:	e2f1      	b.n	8003a5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4413      	add	r3, r2
 8003480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348a:	2b40      	cmp	r3, #64	; 0x40
 800348c:	d13f      	bne.n	800350e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	440b      	add	r3, r1
 800349c:	335d      	adds	r3, #93	; 0x5d
 800349e:	2204      	movs	r2, #4
 80034a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	440b      	add	r3, r1
 80034b0:	333d      	adds	r3, #61	; 0x3d
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4613      	mov	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	440b      	add	r3, r1
 80034c4:	3358      	adds	r3, #88	; 0x58
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	0151      	lsls	r1, r2, #5
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	440a      	add	r2, r1
 80034e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034e4:	f043 0302 	orr.w	r3, r3, #2
 80034e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	4611      	mov	r1, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f003 fe9a 	bl	800722e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	015a      	lsls	r2, r3, #5
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	4413      	add	r3, r2
 8003502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003506:	461a      	mov	r2, r3
 8003508:	2340      	movs	r3, #64	; 0x40
 800350a:	6093      	str	r3, [r2, #8]
}
 800350c:	e2a6      	b.n	8003a5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4413      	add	r3, r2
 8003516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003524:	d122      	bne.n	800356c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	015a      	lsls	r2, r3, #5
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4413      	add	r3, r2
 800352e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	0151      	lsls	r1, r2, #5
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	440a      	add	r2, r1
 800353c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003540:	f043 0302 	orr.w	r3, r3, #2
 8003544:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	4611      	mov	r1, r2
 8003550:	4618      	mov	r0, r3
 8003552:	f003 fe6c 	bl	800722e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	4413      	add	r3, r2
 800355e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003562:	461a      	mov	r2, r3
 8003564:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003568:	6093      	str	r3, [r2, #8]
}
 800356a:	e277      	b.n	8003a5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	4413      	add	r3, r2
 8003574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b01      	cmp	r3, #1
 8003580:	d135      	bne.n	80035ee <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	440b      	add	r3, r1
 8003590:	3358      	adds	r3, #88	; 0x58
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	4413      	add	r3, r2
 800359e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	0151      	lsls	r1, r2, #5
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	440a      	add	r2, r1
 80035ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035b0:	f043 0302 	orr.w	r3, r3, #2
 80035b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	4611      	mov	r1, r2
 80035c0:	4618      	mov	r0, r3
 80035c2:	f003 fe34 	bl	800722e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d2:	461a      	mov	r2, r3
 80035d4:	2301      	movs	r3, #1
 80035d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	440b      	add	r3, r1
 80035e6:	335d      	adds	r3, #93	; 0x5d
 80035e8:	2201      	movs	r2, #1
 80035ea:	701a      	strb	r2, [r3, #0]
}
 80035ec:	e236      	b.n	8003a5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b08      	cmp	r3, #8
 8003602:	d12b      	bne.n	800365c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	4413      	add	r3, r2
 800360c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003610:	461a      	mov	r2, r3
 8003612:	2308      	movs	r3, #8
 8003614:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4413      	add	r3, r2
 800361e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	0151      	lsls	r1, r2, #5
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	440a      	add	r2, r1
 800362c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003630:	f043 0302 	orr.w	r3, r3, #2
 8003634:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	4611      	mov	r1, r2
 8003640:	4618      	mov	r0, r3
 8003642:	f003 fdf4 	bl	800722e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	440b      	add	r3, r1
 8003654:	335d      	adds	r3, #93	; 0x5d
 8003656:	2205      	movs	r2, #5
 8003658:	701a      	strb	r2, [r3, #0]
}
 800365a:	e1ff      	b.n	8003a5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4413      	add	r3, r2
 8003664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b10      	cmp	r3, #16
 8003670:	d155      	bne.n	800371e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	440b      	add	r3, r1
 8003680:	3358      	adds	r3, #88	; 0x58
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	440b      	add	r3, r1
 8003694:	335d      	adds	r3, #93	; 0x5d
 8003696:	2203      	movs	r2, #3
 8003698:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	440b      	add	r3, r1
 80036a8:	333d      	adds	r3, #61	; 0x3d
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d114      	bne.n	80036da <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	440b      	add	r3, r1
 80036be:	333c      	adds	r3, #60	; 0x3c
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d109      	bne.n	80036da <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	440b      	add	r3, r1
 80036d4:	333d      	adds	r3, #61	; 0x3d
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	0151      	lsls	r1, r2, #5
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	440a      	add	r2, r1
 80036f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036f4:	f043 0302 	orr.w	r3, r3, #2
 80036f8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f003 fd92 	bl	800722e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	4413      	add	r3, r2
 8003712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003716:	461a      	mov	r2, r3
 8003718:	2310      	movs	r3, #16
 800371a:	6093      	str	r3, [r2, #8]
}
 800371c:	e19e      	b.n	8003a5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	4413      	add	r3, r2
 8003726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003730:	2b80      	cmp	r3, #128	; 0x80
 8003732:	d12b      	bne.n	800378c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	4413      	add	r3, r2
 800373c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	0151      	lsls	r1, r2, #5
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	440a      	add	r2, r1
 800374a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800374e:	f043 0302 	orr.w	r3, r3, #2
 8003752:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	4611      	mov	r1, r2
 800375e:	4618      	mov	r0, r3
 8003760:	f003 fd65 	bl	800722e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	440b      	add	r3, r1
 8003772:	335d      	adds	r3, #93	; 0x5d
 8003774:	2206      	movs	r2, #6
 8003776:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	4413      	add	r3, r2
 8003780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003784:	461a      	mov	r2, r3
 8003786:	2380      	movs	r3, #128	; 0x80
 8003788:	6093      	str	r3, [r2, #8]
}
 800378a:	e167      	b.n	8003a5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	4413      	add	r3, r2
 8003794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a2:	d135      	bne.n	8003810 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	0151      	lsls	r1, r2, #5
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	440a      	add	r2, r1
 80037ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037be:	f043 0302 	orr.w	r3, r3, #2
 80037c2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	4611      	mov	r1, r2
 80037ce:	4618      	mov	r0, r3
 80037d0:	f003 fd2d 	bl	800722e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e0:	461a      	mov	r2, r3
 80037e2:	2310      	movs	r3, #16
 80037e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f2:	461a      	mov	r2, r3
 80037f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	440b      	add	r3, r1
 8003808:	335d      	adds	r3, #93	; 0x5d
 800380a:	2208      	movs	r2, #8
 800380c:	701a      	strb	r2, [r3, #0]
}
 800380e:	e125      	b.n	8003a5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4413      	add	r3, r2
 8003818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b02      	cmp	r3, #2
 8003824:	f040 811a 	bne.w	8003a5c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	4413      	add	r3, r2
 8003830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	0151      	lsls	r1, r2, #5
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	440a      	add	r2, r1
 800383e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003842:	f023 0302 	bic.w	r3, r3, #2
 8003846:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	440b      	add	r3, r1
 8003856:	335d      	adds	r3, #93	; 0x5d
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d137      	bne.n	80038ce <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	440b      	add	r3, r1
 800386c:	335c      	adds	r3, #92	; 0x5c
 800386e:	2201      	movs	r2, #1
 8003870:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	440b      	add	r3, r1
 8003880:	333f      	adds	r3, #63	; 0x3f
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b02      	cmp	r3, #2
 8003886:	d00b      	beq.n	80038a0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	440b      	add	r3, r1
 8003896:	333f      	adds	r3, #63	; 0x3f
 8003898:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800389a:	2b03      	cmp	r3, #3
 800389c:	f040 80c5 	bne.w	8003a2a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	440b      	add	r3, r1
 80038ae:	3351      	adds	r3, #81	; 0x51
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	f083 0301 	eor.w	r3, r3, #1
 80038b6:	b2d8      	uxtb	r0, r3
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	440b      	add	r3, r1
 80038c6:	3351      	adds	r3, #81	; 0x51
 80038c8:	4602      	mov	r2, r0
 80038ca:	701a      	strb	r2, [r3, #0]
 80038cc:	e0ad      	b.n	8003a2a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4613      	mov	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	440b      	add	r3, r1
 80038dc:	335d      	adds	r3, #93	; 0x5d
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d10a      	bne.n	80038fa <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	4613      	mov	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	440b      	add	r3, r1
 80038f2:	335c      	adds	r3, #92	; 0x5c
 80038f4:	2202      	movs	r2, #2
 80038f6:	701a      	strb	r2, [r3, #0]
 80038f8:	e097      	b.n	8003a2a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4613      	mov	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	440b      	add	r3, r1
 8003908:	335d      	adds	r3, #93	; 0x5d
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b04      	cmp	r3, #4
 800390e:	d10a      	bne.n	8003926 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	440b      	add	r3, r1
 800391e:	335c      	adds	r3, #92	; 0x5c
 8003920:	2202      	movs	r2, #2
 8003922:	701a      	strb	r2, [r3, #0]
 8003924:	e081      	b.n	8003a2a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	440b      	add	r3, r1
 8003934:	335d      	adds	r3, #93	; 0x5d
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b05      	cmp	r3, #5
 800393a:	d10a      	bne.n	8003952 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	440b      	add	r3, r1
 800394a:	335c      	adds	r3, #92	; 0x5c
 800394c:	2205      	movs	r2, #5
 800394e:	701a      	strb	r2, [r3, #0]
 8003950:	e06b      	b.n	8003a2a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	440b      	add	r3, r1
 8003960:	335d      	adds	r3, #93	; 0x5d
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b06      	cmp	r3, #6
 8003966:	d00a      	beq.n	800397e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4613      	mov	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	440b      	add	r3, r1
 8003976:	335d      	adds	r3, #93	; 0x5d
 8003978:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800397a:	2b08      	cmp	r3, #8
 800397c:	d155      	bne.n	8003a2a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	440b      	add	r3, r1
 800398c:	3358      	adds	r3, #88	; 0x58
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	1c59      	adds	r1, r3, #1
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	4403      	add	r3, r0
 80039a0:	3358      	adds	r3, #88	; 0x58
 80039a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	440b      	add	r3, r1
 80039b2:	3358      	adds	r3, #88	; 0x58
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	d914      	bls.n	80039e4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4613      	mov	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	440b      	add	r3, r1
 80039c8:	3358      	adds	r3, #88	; 0x58
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4613      	mov	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	440b      	add	r3, r1
 80039dc:	335c      	adds	r3, #92	; 0x5c
 80039de:	2204      	movs	r2, #4
 80039e0:	701a      	strb	r2, [r3, #0]
 80039e2:	e009      	b.n	80039f8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	440b      	add	r3, r1
 80039f2:	335c      	adds	r3, #92	; 0x5c
 80039f4:	2202      	movs	r2, #2
 80039f6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a0e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a16:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a24:	461a      	mov	r2, r3
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a36:	461a      	mov	r2, r3
 8003a38:	2302      	movs	r3, #2
 8003a3a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	b2d8      	uxtb	r0, r3
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	440b      	add	r3, r1
 8003a4e:	335c      	adds	r3, #92	; 0x5c
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	4601      	mov	r1, r0
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f008 fc88 	bl	800c36c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003a5c:	bf00      	nop
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08a      	sub	sp, #40	; 0x28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	0c5b      	lsrs	r3, r3, #17
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a98:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d003      	beq.n	8003aa8 <HCD_RXQLVL_IRQHandler+0x44>
 8003aa0:	2b05      	cmp	r3, #5
 8003aa2:	f000 8082 	beq.w	8003baa <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003aa6:	e083      	b.n	8003bb0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d07f      	beq.n	8003bae <HCD_RXQLVL_IRQHandler+0x14a>
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	440b      	add	r3, r1
 8003abc:	3344      	adds	r3, #68	; 0x44
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d074      	beq.n	8003bae <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6818      	ldr	r0, [r3, #0]
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	440b      	add	r3, r1
 8003ad6:	3344      	adds	r3, #68	; 0x44
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	b292      	uxth	r2, r2
 8003ade:	4619      	mov	r1, r3
 8003ae0:	f002 ff43 	bl	800696a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	440b      	add	r3, r1
 8003af2:	3344      	adds	r3, #68	; 0x44
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	18d1      	adds	r1, r2, r3
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4403      	add	r3, r0
 8003b08:	3344      	adds	r3, #68	; 0x44
 8003b0a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	440b      	add	r3, r1
 8003b1a:	334c      	adds	r3, #76	; 0x4c
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	18d1      	adds	r1, r2, r3
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4403      	add	r3, r0
 8003b30:	334c      	adds	r3, #76	; 0x4c
 8003b32:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b40:	691a      	ldr	r2, [r3, #16]
 8003b42:	4b1d      	ldr	r3, [pc, #116]	; (8003bb8 <HCD_RXQLVL_IRQHandler+0x154>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d031      	beq.n	8003bae <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	015a      	lsls	r2, r3, #5
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b60:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b68:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b76:	461a      	mov	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	440b      	add	r3, r1
 8003b8a:	3350      	adds	r3, #80	; 0x50
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	f083 0301 	eor.w	r3, r3, #1
 8003b92:	b2d8      	uxtb	r0, r3
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	440b      	add	r3, r1
 8003ba2:	3350      	adds	r3, #80	; 0x50
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	701a      	strb	r2, [r3, #0]
      break;
 8003ba8:	e001      	b.n	8003bae <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003baa:	bf00      	nop
 8003bac:	e000      	b.n	8003bb0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003bae:	bf00      	nop
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	3728      	adds	r7, #40	; 0x28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	1ff80000 	.word	0x1ff80000

08003bbc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003be8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d10b      	bne.n	8003c0c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d102      	bne.n	8003c04 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f008 fb98 	bl	800c334 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f043 0302 	orr.w	r3, r3, #2
 8003c0a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d132      	bne.n	8003c7c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f043 0308 	orr.w	r3, r3, #8
 8003c1c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d126      	bne.n	8003c76 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d113      	bne.n	8003c58 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003c36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c3a:	d106      	bne.n	8003c4a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2102      	movs	r1, #2
 8003c42:	4618      	mov	r0, r3
 8003c44:	f002 ffcc 	bl	8006be0 <USB_InitFSLSPClkSel>
 8003c48:	e011      	b.n	8003c6e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2101      	movs	r1, #1
 8003c50:	4618      	mov	r0, r3
 8003c52:	f002 ffc5 	bl	8006be0 <USB_InitFSLSPClkSel>
 8003c56:	e00a      	b.n	8003c6e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d106      	bne.n	8003c6e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c66:	461a      	mov	r2, r3
 8003c68:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003c6c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f008 fb8e 	bl	800c390 <HAL_HCD_PortEnabled_Callback>
 8003c74:	e002      	b.n	8003c7c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f008 fb98 	bl	800c3ac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	d103      	bne.n	8003c8e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f043 0320 	orr.w	r3, r3, #32
 8003c8c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c94:	461a      	mov	r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6013      	str	r3, [r2, #0]
}
 8003c9a:	bf00      	nop
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e11f      	b.n	8003ef6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d106      	bne.n	8003cd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7fd fd3a 	bl	8001744 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2224      	movs	r2, #36	; 0x24
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0201 	bic.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cf6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d08:	f001 f9de 	bl	80050c8 <HAL_RCC_GetPCLK1Freq>
 8003d0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	4a7b      	ldr	r2, [pc, #492]	; (8003f00 <HAL_I2C_Init+0x25c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d807      	bhi.n	8003d28 <HAL_I2C_Init+0x84>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4a7a      	ldr	r2, [pc, #488]	; (8003f04 <HAL_I2C_Init+0x260>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	bf94      	ite	ls
 8003d20:	2301      	movls	r3, #1
 8003d22:	2300      	movhi	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	e006      	b.n	8003d36 <HAL_I2C_Init+0x92>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4a77      	ldr	r2, [pc, #476]	; (8003f08 <HAL_I2C_Init+0x264>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	bf94      	ite	ls
 8003d30:	2301      	movls	r3, #1
 8003d32:	2300      	movhi	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e0db      	b.n	8003ef6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4a72      	ldr	r2, [pc, #456]	; (8003f0c <HAL_I2C_Init+0x268>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	0c9b      	lsrs	r3, r3, #18
 8003d48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	4a64      	ldr	r2, [pc, #400]	; (8003f00 <HAL_I2C_Init+0x25c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d802      	bhi.n	8003d78 <HAL_I2C_Init+0xd4>
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	3301      	adds	r3, #1
 8003d76:	e009      	b.n	8003d8c <HAL_I2C_Init+0xe8>
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d7e:	fb02 f303 	mul.w	r3, r2, r3
 8003d82:	4a63      	ldr	r2, [pc, #396]	; (8003f10 <HAL_I2C_Init+0x26c>)
 8003d84:	fba2 2303 	umull	r2, r3, r2, r3
 8003d88:	099b      	lsrs	r3, r3, #6
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6812      	ldr	r2, [r2, #0]
 8003d90:	430b      	orrs	r3, r1
 8003d92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	4956      	ldr	r1, [pc, #344]	; (8003f00 <HAL_I2C_Init+0x25c>)
 8003da8:	428b      	cmp	r3, r1
 8003daa:	d80d      	bhi.n	8003dc8 <HAL_I2C_Init+0x124>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	1e59      	subs	r1, r3, #1
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dba:	3301      	adds	r3, #1
 8003dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	bf38      	it	cc
 8003dc4:	2304      	movcc	r3, #4
 8003dc6:	e04f      	b.n	8003e68 <HAL_I2C_Init+0x1c4>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d111      	bne.n	8003df4 <HAL_I2C_Init+0x150>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	1e58      	subs	r0, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6859      	ldr	r1, [r3, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	440b      	add	r3, r1
 8003dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de2:	3301      	adds	r3, #1
 8003de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	bf0c      	ite	eq
 8003dec:	2301      	moveq	r3, #1
 8003dee:	2300      	movne	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	e012      	b.n	8003e1a <HAL_I2C_Init+0x176>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	1e58      	subs	r0, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6859      	ldr	r1, [r3, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	0099      	lsls	r1, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	bf0c      	ite	eq
 8003e14:	2301      	moveq	r3, #1
 8003e16:	2300      	movne	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_I2C_Init+0x17e>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e022      	b.n	8003e68 <HAL_I2C_Init+0x1c4>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10e      	bne.n	8003e48 <HAL_I2C_Init+0x1a4>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	1e58      	subs	r0, r3, #1
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6859      	ldr	r1, [r3, #4]
 8003e32:	460b      	mov	r3, r1
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	440b      	add	r3, r1
 8003e38:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e46:	e00f      	b.n	8003e68 <HAL_I2C_Init+0x1c4>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1e58      	subs	r0, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6859      	ldr	r1, [r3, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	0099      	lsls	r1, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e5e:	3301      	adds	r3, #1
 8003e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	6809      	ldr	r1, [r1, #0]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69da      	ldr	r2, [r3, #28]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6911      	ldr	r1, [r2, #16]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	68d2      	ldr	r2, [r2, #12]
 8003ea2:	4311      	orrs	r1, r2
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	430b      	orrs	r3, r1
 8003eaa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695a      	ldr	r2, [r3, #20]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	000186a0 	.word	0x000186a0
 8003f04:	001e847f 	.word	0x001e847f
 8003f08:	003d08ff 	.word	0x003d08ff
 8003f0c:	431bde83 	.word	0x431bde83
 8003f10:	10624dd3 	.word	0x10624dd3

08003f14 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e128      	b.n	8004178 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a90      	ldr	r2, [pc, #576]	; (8004180 <HAL_I2S_Init+0x26c>)
 8003f3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7fd fc47 	bl	80017d4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6812      	ldr	r2, [r2, #0]
 8003f58:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f5c:	f023 030f 	bic.w	r3, r3, #15
 8003f60:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2202      	movs	r2, #2
 8003f68:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d060      	beq.n	8004034 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d102      	bne.n	8003f80 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003f7a:	2310      	movs	r3, #16
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	e001      	b.n	8003f84 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003f80:	2320      	movs	r3, #32
 8003f82:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b20      	cmp	r3, #32
 8003f8a:	d802      	bhi.n	8003f92 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003f92:	2001      	movs	r0, #1
 8003f94:	f001 f9d4 	bl	8005340 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f98:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa2:	d125      	bne.n	8003ff0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d010      	beq.n	8003fce <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc8:	3305      	adds	r3, #5
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	e01f      	b.n	800400e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fea:	3305      	adds	r3, #5
 8003fec:	613b      	str	r3, [r7, #16]
 8003fee:	e00e      	b.n	800400e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	461a      	mov	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	fbb2 f3f3 	udiv	r3, r2, r3
 800400a:	3305      	adds	r3, #5
 800400c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	4a5c      	ldr	r2, [pc, #368]	; (8004184 <HAL_I2S_Init+0x270>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	08db      	lsrs	r3, r3, #3
 8004018:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	085b      	lsrs	r3, r3, #1
 800402a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	021b      	lsls	r3, r3, #8
 8004030:	61bb      	str	r3, [r7, #24]
 8004032:	e003      	b.n	800403c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004034:	2302      	movs	r3, #2
 8004036:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d902      	bls.n	8004048 <HAL_I2S_Init+0x134>
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	2bff      	cmp	r3, #255	; 0xff
 8004046:	d907      	bls.n	8004058 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404c:	f043 0210 	orr.w	r2, r3, #16
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e08f      	b.n	8004178 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	ea42 0103 	orr.w	r1, r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69fa      	ldr	r2, [r7, #28]
 8004068:	430a      	orrs	r2, r1
 800406a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004076:	f023 030f 	bic.w	r3, r3, #15
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6851      	ldr	r1, [r2, #4]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6892      	ldr	r2, [r2, #8]
 8004082:	4311      	orrs	r1, r2
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	68d2      	ldr	r2, [r2, #12]
 8004088:	4311      	orrs	r1, r2
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6992      	ldr	r2, [r2, #24]
 800408e:	430a      	orrs	r2, r1
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800409a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d161      	bne.n	8004168 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a38      	ldr	r2, [pc, #224]	; (8004188 <HAL_I2S_Init+0x274>)
 80040a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a37      	ldr	r2, [pc, #220]	; (800418c <HAL_I2S_Init+0x278>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d101      	bne.n	80040b8 <HAL_I2S_Init+0x1a4>
 80040b4:	4b36      	ldr	r3, [pc, #216]	; (8004190 <HAL_I2S_Init+0x27c>)
 80040b6:	e001      	b.n	80040bc <HAL_I2S_Init+0x1a8>
 80040b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6812      	ldr	r2, [r2, #0]
 80040c2:	4932      	ldr	r1, [pc, #200]	; (800418c <HAL_I2S_Init+0x278>)
 80040c4:	428a      	cmp	r2, r1
 80040c6:	d101      	bne.n	80040cc <HAL_I2S_Init+0x1b8>
 80040c8:	4a31      	ldr	r2, [pc, #196]	; (8004190 <HAL_I2S_Init+0x27c>)
 80040ca:	e001      	b.n	80040d0 <HAL_I2S_Init+0x1bc>
 80040cc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80040d0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80040d4:	f023 030f 	bic.w	r3, r3, #15
 80040d8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a2b      	ldr	r2, [pc, #172]	; (800418c <HAL_I2S_Init+0x278>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d101      	bne.n	80040e8 <HAL_I2S_Init+0x1d4>
 80040e4:	4b2a      	ldr	r3, [pc, #168]	; (8004190 <HAL_I2S_Init+0x27c>)
 80040e6:	e001      	b.n	80040ec <HAL_I2S_Init+0x1d8>
 80040e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040ec:	2202      	movs	r2, #2
 80040ee:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a25      	ldr	r2, [pc, #148]	; (800418c <HAL_I2S_Init+0x278>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d101      	bne.n	80040fe <HAL_I2S_Init+0x1ea>
 80040fa:	4b25      	ldr	r3, [pc, #148]	; (8004190 <HAL_I2S_Init+0x27c>)
 80040fc:	e001      	b.n	8004102 <HAL_I2S_Init+0x1ee>
 80040fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800410e:	d003      	beq.n	8004118 <HAL_I2S_Init+0x204>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d103      	bne.n	8004120 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004118:	f44f 7380 	mov.w	r3, #256	; 0x100
 800411c:	613b      	str	r3, [r7, #16]
 800411e:	e001      	b.n	8004124 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004120:	2300      	movs	r3, #0
 8004122:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	b299      	uxth	r1, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800413a:	4303      	orrs	r3, r0
 800413c:	b29b      	uxth	r3, r3
 800413e:	430b      	orrs	r3, r1
 8004140:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004142:	4313      	orrs	r3, r2
 8004144:	b29a      	uxth	r2, r3
 8004146:	897b      	ldrh	r3, [r7, #10]
 8004148:	4313      	orrs	r3, r2
 800414a:	b29b      	uxth	r3, r3
 800414c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004150:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a0d      	ldr	r2, [pc, #52]	; (800418c <HAL_I2S_Init+0x278>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d101      	bne.n	8004160 <HAL_I2S_Init+0x24c>
 800415c:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <HAL_I2S_Init+0x27c>)
 800415e:	e001      	b.n	8004164 <HAL_I2S_Init+0x250>
 8004160:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004164:	897a      	ldrh	r2, [r7, #10]
 8004166:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3720      	adds	r7, #32
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	0800428b 	.word	0x0800428b
 8004184:	cccccccd 	.word	0xcccccccd
 8004188:	080043a1 	.word	0x080043a1
 800418c:	40003800 	.word	0x40003800
 8004190:	40003400 	.word	0x40003400

08004194 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	881a      	ldrh	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	1c9a      	adds	r2, r3, #2
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10e      	bne.n	8004224 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004214:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff ffb8 	bl	8004194 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004224:	bf00      	nop
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423e:	b292      	uxth	r2, r2
 8004240:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	1c9a      	adds	r2, r3, #2
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004250:	b29b      	uxth	r3, r3
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800425e:	b29b      	uxth	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10e      	bne.n	8004282 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004272:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f7ff ff93 	bl	80041a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004282:	bf00      	nop
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b086      	sub	sp, #24
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d13a      	bne.n	800431c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d109      	bne.n	80042c4 <I2S_IRQHandler+0x3a>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ba:	2b40      	cmp	r3, #64	; 0x40
 80042bc:	d102      	bne.n	80042c4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff ffb4 	bl	800422c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ca:	2b40      	cmp	r3, #64	; 0x40
 80042cc:	d126      	bne.n	800431c <I2S_IRQHandler+0x92>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f003 0320 	and.w	r3, r3, #32
 80042d8:	2b20      	cmp	r3, #32
 80042da:	d11f      	bne.n	800431c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80042ec:	2300      	movs	r3, #0
 80042ee:	613b      	str	r3, [r7, #16]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	613b      	str	r3, [r7, #16]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	613b      	str	r3, [r7, #16]
 8004300:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430e:	f043 0202 	orr.w	r2, r3, #2
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff ff50 	bl	80041bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b03      	cmp	r3, #3
 8004326:	d136      	bne.n	8004396 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b02      	cmp	r3, #2
 8004330:	d109      	bne.n	8004346 <I2S_IRQHandler+0xbc>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433c:	2b80      	cmp	r3, #128	; 0x80
 800433e:	d102      	bne.n	8004346 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7ff ff45 	bl	80041d0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	2b08      	cmp	r3, #8
 800434e:	d122      	bne.n	8004396 <I2S_IRQHandler+0x10c>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b20      	cmp	r3, #32
 800435c:	d11b      	bne.n	8004396 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800436c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004388:	f043 0204 	orr.w	r2, r3, #4
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff ff13 	bl	80041bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004396:	bf00      	nop
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b088      	sub	sp, #32
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4aa2      	ldr	r2, [pc, #648]	; (8004640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d101      	bne.n	80043be <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80043ba:	4ba2      	ldr	r3, [pc, #648]	; (8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043bc:	e001      	b.n	80043c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80043be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a9b      	ldr	r2, [pc, #620]	; (8004640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d101      	bne.n	80043dc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80043d8:	4b9a      	ldr	r3, [pc, #616]	; (8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043da:	e001      	b.n	80043e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80043dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ec:	d004      	beq.n	80043f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f040 8099 	bne.w	800452a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d107      	bne.n	8004412 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f925 	bl	800465c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b01      	cmp	r3, #1
 800441a:	d107      	bne.n	800442c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f9c8 	bl	80047bc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004432:	2b40      	cmp	r3, #64	; 0x40
 8004434:	d13a      	bne.n	80044ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f003 0320 	and.w	r3, r3, #32
 800443c:	2b00      	cmp	r3, #0
 800443e:	d035      	beq.n	80044ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a7e      	ldr	r2, [pc, #504]	; (8004640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d101      	bne.n	800444e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800444a:	4b7e      	ldr	r3, [pc, #504]	; (8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800444c:	e001      	b.n	8004452 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800444e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4979      	ldr	r1, [pc, #484]	; (8004640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800445a:	428b      	cmp	r3, r1
 800445c:	d101      	bne.n	8004462 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800445e:	4b79      	ldr	r3, [pc, #484]	; (8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004460:	e001      	b.n	8004466 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004462:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004466:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800446a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800447a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800447c:	2300      	movs	r3, #0
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449e:	f043 0202 	orr.w	r2, r3, #2
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7ff fe88 	bl	80041bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	f040 80be 	bne.w	8004634 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f003 0320 	and.w	r3, r3, #32
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 80b8 	beq.w	8004634 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044d2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a59      	ldr	r2, [pc, #356]	; (8004640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d101      	bne.n	80044e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80044de:	4b59      	ldr	r3, [pc, #356]	; (8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044e0:	e001      	b.n	80044e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80044e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4954      	ldr	r1, [pc, #336]	; (8004640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80044ee:	428b      	cmp	r3, r1
 80044f0:	d101      	bne.n	80044f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80044f2:	4b54      	ldr	r3, [pc, #336]	; (8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044f4:	e001      	b.n	80044fa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80044f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044fe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004500:	2300      	movs	r3, #0
 8004502:	60bb      	str	r3, [r7, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	60bb      	str	r3, [r7, #8]
 800450c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451a:	f043 0204 	orr.w	r2, r3, #4
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff fe4a 	bl	80041bc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004528:	e084      	b.n	8004634 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b02      	cmp	r3, #2
 8004532:	d107      	bne.n	8004544 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f8be 	bl	80046c0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b01      	cmp	r3, #1
 800454c:	d107      	bne.n	800455e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f8fd 	bl	8004758 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004564:	2b40      	cmp	r3, #64	; 0x40
 8004566:	d12f      	bne.n	80045c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f003 0320 	and.w	r3, r3, #32
 800456e:	2b00      	cmp	r3, #0
 8004570:	d02a      	beq.n	80045c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004580:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a2e      	ldr	r2, [pc, #184]	; (8004640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d101      	bne.n	8004590 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800458c:	4b2d      	ldr	r3, [pc, #180]	; (8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800458e:	e001      	b.n	8004594 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004590:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4929      	ldr	r1, [pc, #164]	; (8004640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800459c:	428b      	cmp	r3, r1
 800459e:	d101      	bne.n	80045a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80045a0:	4b28      	ldr	r3, [pc, #160]	; (8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045a2:	e001      	b.n	80045a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80045a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ba:	f043 0202 	orr.w	r2, r3, #2
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7ff fdfa 	bl	80041bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d131      	bne.n	8004636 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f003 0320 	and.w	r3, r3, #32
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d02c      	beq.n	8004636 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a17      	ldr	r2, [pc, #92]	; (8004640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d101      	bne.n	80045ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80045e6:	4b17      	ldr	r3, [pc, #92]	; (8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045e8:	e001      	b.n	80045ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80045ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4912      	ldr	r1, [pc, #72]	; (8004640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045f6:	428b      	cmp	r3, r1
 80045f8:	d101      	bne.n	80045fe <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80045fa:	4b12      	ldr	r3, [pc, #72]	; (8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045fc:	e001      	b.n	8004602 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80045fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004602:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004606:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004616:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004624:	f043 0204 	orr.w	r2, r3, #4
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff fdc5 	bl	80041bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004632:	e000      	b.n	8004636 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004634:	bf00      	nop
}
 8004636:	bf00      	nop
 8004638:	3720      	adds	r7, #32
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	40003800 	.word	0x40003800
 8004644:	40003400 	.word	0x40003400

08004648 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	1c99      	adds	r1, r3, #2
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6251      	str	r1, [r2, #36]	; 0x24
 800466e:	881a      	ldrh	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467a:	b29b      	uxth	r3, r3
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004688:	b29b      	uxth	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d113      	bne.n	80046b6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800469c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d106      	bne.n	80046b6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff ffc9 	bl	8004648 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046b6:	bf00      	nop
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	1c99      	adds	r1, r3, #2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6251      	str	r1, [r2, #36]	; 0x24
 80046d2:	8819      	ldrh	r1, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a1d      	ldr	r2, [pc, #116]	; (8004750 <I2SEx_TxISR_I2SExt+0x90>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d101      	bne.n	80046e2 <I2SEx_TxISR_I2SExt+0x22>
 80046de:	4b1d      	ldr	r3, [pc, #116]	; (8004754 <I2SEx_TxISR_I2SExt+0x94>)
 80046e0:	e001      	b.n	80046e6 <I2SEx_TxISR_I2SExt+0x26>
 80046e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046e6:	460a      	mov	r2, r1
 80046e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	3b01      	subs	r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d121      	bne.n	8004746 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a12      	ldr	r2, [pc, #72]	; (8004750 <I2SEx_TxISR_I2SExt+0x90>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d101      	bne.n	8004710 <I2SEx_TxISR_I2SExt+0x50>
 800470c:	4b11      	ldr	r3, [pc, #68]	; (8004754 <I2SEx_TxISR_I2SExt+0x94>)
 800470e:	e001      	b.n	8004714 <I2SEx_TxISR_I2SExt+0x54>
 8004710:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	490d      	ldr	r1, [pc, #52]	; (8004750 <I2SEx_TxISR_I2SExt+0x90>)
 800471c:	428b      	cmp	r3, r1
 800471e:	d101      	bne.n	8004724 <I2SEx_TxISR_I2SExt+0x64>
 8004720:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <I2SEx_TxISR_I2SExt+0x94>)
 8004722:	e001      	b.n	8004728 <I2SEx_TxISR_I2SExt+0x68>
 8004724:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004728:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800472c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004732:	b29b      	uxth	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d106      	bne.n	8004746 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff ff81 	bl	8004648 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	40003800 	.word	0x40003800
 8004754:	40003400 	.word	0x40003400

08004758 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68d8      	ldr	r0, [r3, #12]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	1c99      	adds	r1, r3, #2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004770:	b282      	uxth	r2, r0
 8004772:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004778:	b29b      	uxth	r3, r3
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004786:	b29b      	uxth	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d113      	bne.n	80047b4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800479a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff ff4a 	bl	8004648 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047b4:	bf00      	nop
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a20      	ldr	r2, [pc, #128]	; (800484c <I2SEx_RxISR_I2SExt+0x90>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d101      	bne.n	80047d2 <I2SEx_RxISR_I2SExt+0x16>
 80047ce:	4b20      	ldr	r3, [pc, #128]	; (8004850 <I2SEx_RxISR_I2SExt+0x94>)
 80047d0:	e001      	b.n	80047d6 <I2SEx_RxISR_I2SExt+0x1a>
 80047d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047d6:	68d8      	ldr	r0, [r3, #12]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	1c99      	adds	r1, r3, #2
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80047e2:	b282      	uxth	r2, r0
 80047e4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	3b01      	subs	r3, #1
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d121      	bne.n	8004842 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a12      	ldr	r2, [pc, #72]	; (800484c <I2SEx_RxISR_I2SExt+0x90>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d101      	bne.n	800480c <I2SEx_RxISR_I2SExt+0x50>
 8004808:	4b11      	ldr	r3, [pc, #68]	; (8004850 <I2SEx_RxISR_I2SExt+0x94>)
 800480a:	e001      	b.n	8004810 <I2SEx_RxISR_I2SExt+0x54>
 800480c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	490d      	ldr	r1, [pc, #52]	; (800484c <I2SEx_RxISR_I2SExt+0x90>)
 8004818:	428b      	cmp	r3, r1
 800481a:	d101      	bne.n	8004820 <I2SEx_RxISR_I2SExt+0x64>
 800481c:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <I2SEx_RxISR_I2SExt+0x94>)
 800481e:	e001      	b.n	8004824 <I2SEx_RxISR_I2SExt+0x68>
 8004820:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004824:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004828:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482e:	b29b      	uxth	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	d106      	bne.n	8004842 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7ff ff03 	bl	8004648 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004842:	bf00      	nop
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40003800 	.word	0x40003800
 8004850:	40003400 	.word	0x40003400

08004854 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e25b      	b.n	8004d1e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d075      	beq.n	800495e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004872:	4ba3      	ldr	r3, [pc, #652]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 030c 	and.w	r3, r3, #12
 800487a:	2b04      	cmp	r3, #4
 800487c:	d00c      	beq.n	8004898 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800487e:	4ba0      	ldr	r3, [pc, #640]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004886:	2b08      	cmp	r3, #8
 8004888:	d112      	bne.n	80048b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800488a:	4b9d      	ldr	r3, [pc, #628]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004896:	d10b      	bne.n	80048b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004898:	4b99      	ldr	r3, [pc, #612]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d05b      	beq.n	800495c <HAL_RCC_OscConfig+0x108>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d157      	bne.n	800495c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e236      	b.n	8004d1e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b8:	d106      	bne.n	80048c8 <HAL_RCC_OscConfig+0x74>
 80048ba:	4b91      	ldr	r3, [pc, #580]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a90      	ldr	r2, [pc, #576]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 80048c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	e01d      	b.n	8004904 <HAL_RCC_OscConfig+0xb0>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048d0:	d10c      	bne.n	80048ec <HAL_RCC_OscConfig+0x98>
 80048d2:	4b8b      	ldr	r3, [pc, #556]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a8a      	ldr	r2, [pc, #552]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 80048d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	4b88      	ldr	r3, [pc, #544]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a87      	ldr	r2, [pc, #540]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 80048e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	e00b      	b.n	8004904 <HAL_RCC_OscConfig+0xb0>
 80048ec:	4b84      	ldr	r3, [pc, #528]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a83      	ldr	r2, [pc, #524]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 80048f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	4b81      	ldr	r3, [pc, #516]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a80      	ldr	r2, [pc, #512]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 80048fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d013      	beq.n	8004934 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490c:	f7fd f9a0 	bl	8001c50 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004914:	f7fd f99c 	bl	8001c50 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b64      	cmp	r3, #100	; 0x64
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e1fb      	b.n	8004d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004926:	4b76      	ldr	r3, [pc, #472]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0f0      	beq.n	8004914 <HAL_RCC_OscConfig+0xc0>
 8004932:	e014      	b.n	800495e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004934:	f7fd f98c 	bl	8001c50 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800493c:	f7fd f988 	bl	8001c50 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b64      	cmp	r3, #100	; 0x64
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e1e7      	b.n	8004d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800494e:	4b6c      	ldr	r3, [pc, #432]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f0      	bne.n	800493c <HAL_RCC_OscConfig+0xe8>
 800495a:	e000      	b.n	800495e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800495c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d063      	beq.n	8004a32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800496a:	4b65      	ldr	r3, [pc, #404]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 030c 	and.w	r3, r3, #12
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00b      	beq.n	800498e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004976:	4b62      	ldr	r3, [pc, #392]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800497e:	2b08      	cmp	r3, #8
 8004980:	d11c      	bne.n	80049bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004982:	4b5f      	ldr	r3, [pc, #380]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d116      	bne.n	80049bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800498e:	4b5c      	ldr	r3, [pc, #368]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d005      	beq.n	80049a6 <HAL_RCC_OscConfig+0x152>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d001      	beq.n	80049a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e1bb      	b.n	8004d1e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a6:	4b56      	ldr	r3, [pc, #344]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	4952      	ldr	r1, [pc, #328]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ba:	e03a      	b.n	8004a32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d020      	beq.n	8004a06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049c4:	4b4f      	ldr	r3, [pc, #316]	; (8004b04 <HAL_RCC_OscConfig+0x2b0>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ca:	f7fd f941 	bl	8001c50 <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d0:	e008      	b.n	80049e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049d2:	f7fd f93d 	bl	8001c50 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e19c      	b.n	8004d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e4:	4b46      	ldr	r3, [pc, #280]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0f0      	beq.n	80049d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049f0:	4b43      	ldr	r3, [pc, #268]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	4940      	ldr	r1, [pc, #256]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	600b      	str	r3, [r1, #0]
 8004a04:	e015      	b.n	8004a32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a06:	4b3f      	ldr	r3, [pc, #252]	; (8004b04 <HAL_RCC_OscConfig+0x2b0>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0c:	f7fd f920 	bl	8001c50 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a14:	f7fd f91c 	bl	8001c50 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e17b      	b.n	8004d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a26:	4b36      	ldr	r3, [pc, #216]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f0      	bne.n	8004a14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d030      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d016      	beq.n	8004a74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a46:	4b30      	ldr	r3, [pc, #192]	; (8004b08 <HAL_RCC_OscConfig+0x2b4>)
 8004a48:	2201      	movs	r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4c:	f7fd f900 	bl	8001c50 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a54:	f7fd f8fc 	bl	8001c50 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e15b      	b.n	8004d1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a66:	4b26      	ldr	r3, [pc, #152]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 8004a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0f0      	beq.n	8004a54 <HAL_RCC_OscConfig+0x200>
 8004a72:	e015      	b.n	8004aa0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a74:	4b24      	ldr	r3, [pc, #144]	; (8004b08 <HAL_RCC_OscConfig+0x2b4>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a7a:	f7fd f8e9 	bl	8001c50 <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a80:	e008      	b.n	8004a94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a82:	f7fd f8e5 	bl	8001c50 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e144      	b.n	8004d1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a94:	4b1a      	ldr	r3, [pc, #104]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 8004a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1f0      	bne.n	8004a82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 80a0 	beq.w	8004bee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ab2:	4b13      	ldr	r3, [pc, #76]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10f      	bne.n	8004ade <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60bb      	str	r3, [r7, #8]
 8004ac2:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	4a0e      	ldr	r2, [pc, #56]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 8004ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004acc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ace:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <HAL_RCC_OscConfig+0x2ac>)
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	60bb      	str	r3, [r7, #8]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ada:	2301      	movs	r3, #1
 8004adc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ade:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <HAL_RCC_OscConfig+0x2b8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d121      	bne.n	8004b2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aea:	4b08      	ldr	r3, [pc, #32]	; (8004b0c <HAL_RCC_OscConfig+0x2b8>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a07      	ldr	r2, [pc, #28]	; (8004b0c <HAL_RCC_OscConfig+0x2b8>)
 8004af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004af6:	f7fd f8ab 	bl	8001c50 <HAL_GetTick>
 8004afa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004afc:	e011      	b.n	8004b22 <HAL_RCC_OscConfig+0x2ce>
 8004afe:	bf00      	nop
 8004b00:	40023800 	.word	0x40023800
 8004b04:	42470000 	.word	0x42470000
 8004b08:	42470e80 	.word	0x42470e80
 8004b0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b10:	f7fd f89e 	bl	8001c50 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e0fd      	b.n	8004d1e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b22:	4b81      	ldr	r3, [pc, #516]	; (8004d28 <HAL_RCC_OscConfig+0x4d4>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0f0      	beq.n	8004b10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d106      	bne.n	8004b44 <HAL_RCC_OscConfig+0x2f0>
 8004b36:	4b7d      	ldr	r3, [pc, #500]	; (8004d2c <HAL_RCC_OscConfig+0x4d8>)
 8004b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3a:	4a7c      	ldr	r2, [pc, #496]	; (8004d2c <HAL_RCC_OscConfig+0x4d8>)
 8004b3c:	f043 0301 	orr.w	r3, r3, #1
 8004b40:	6713      	str	r3, [r2, #112]	; 0x70
 8004b42:	e01c      	b.n	8004b7e <HAL_RCC_OscConfig+0x32a>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	2b05      	cmp	r3, #5
 8004b4a:	d10c      	bne.n	8004b66 <HAL_RCC_OscConfig+0x312>
 8004b4c:	4b77      	ldr	r3, [pc, #476]	; (8004d2c <HAL_RCC_OscConfig+0x4d8>)
 8004b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b50:	4a76      	ldr	r2, [pc, #472]	; (8004d2c <HAL_RCC_OscConfig+0x4d8>)
 8004b52:	f043 0304 	orr.w	r3, r3, #4
 8004b56:	6713      	str	r3, [r2, #112]	; 0x70
 8004b58:	4b74      	ldr	r3, [pc, #464]	; (8004d2c <HAL_RCC_OscConfig+0x4d8>)
 8004b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5c:	4a73      	ldr	r2, [pc, #460]	; (8004d2c <HAL_RCC_OscConfig+0x4d8>)
 8004b5e:	f043 0301 	orr.w	r3, r3, #1
 8004b62:	6713      	str	r3, [r2, #112]	; 0x70
 8004b64:	e00b      	b.n	8004b7e <HAL_RCC_OscConfig+0x32a>
 8004b66:	4b71      	ldr	r3, [pc, #452]	; (8004d2c <HAL_RCC_OscConfig+0x4d8>)
 8004b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6a:	4a70      	ldr	r2, [pc, #448]	; (8004d2c <HAL_RCC_OscConfig+0x4d8>)
 8004b6c:	f023 0301 	bic.w	r3, r3, #1
 8004b70:	6713      	str	r3, [r2, #112]	; 0x70
 8004b72:	4b6e      	ldr	r3, [pc, #440]	; (8004d2c <HAL_RCC_OscConfig+0x4d8>)
 8004b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b76:	4a6d      	ldr	r2, [pc, #436]	; (8004d2c <HAL_RCC_OscConfig+0x4d8>)
 8004b78:	f023 0304 	bic.w	r3, r3, #4
 8004b7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d015      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b86:	f7fd f863 	bl	8001c50 <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b8c:	e00a      	b.n	8004ba4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b8e:	f7fd f85f 	bl	8001c50 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e0bc      	b.n	8004d1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba4:	4b61      	ldr	r3, [pc, #388]	; (8004d2c <HAL_RCC_OscConfig+0x4d8>)
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0ee      	beq.n	8004b8e <HAL_RCC_OscConfig+0x33a>
 8004bb0:	e014      	b.n	8004bdc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bb2:	f7fd f84d 	bl	8001c50 <HAL_GetTick>
 8004bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bb8:	e00a      	b.n	8004bd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bba:	f7fd f849 	bl	8001c50 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e0a6      	b.n	8004d1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bd0:	4b56      	ldr	r3, [pc, #344]	; (8004d2c <HAL_RCC_OscConfig+0x4d8>)
 8004bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1ee      	bne.n	8004bba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bdc:	7dfb      	ldrb	r3, [r7, #23]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d105      	bne.n	8004bee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004be2:	4b52      	ldr	r3, [pc, #328]	; (8004d2c <HAL_RCC_OscConfig+0x4d8>)
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	4a51      	ldr	r2, [pc, #324]	; (8004d2c <HAL_RCC_OscConfig+0x4d8>)
 8004be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 8092 	beq.w	8004d1c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bf8:	4b4c      	ldr	r3, [pc, #304]	; (8004d2c <HAL_RCC_OscConfig+0x4d8>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 030c 	and.w	r3, r3, #12
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d05c      	beq.n	8004cbe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d141      	bne.n	8004c90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c0c:	4b48      	ldr	r3, [pc, #288]	; (8004d30 <HAL_RCC_OscConfig+0x4dc>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c12:	f7fd f81d 	bl	8001c50 <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c18:	e008      	b.n	8004c2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c1a:	f7fd f819 	bl	8001c50 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e078      	b.n	8004d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c2c:	4b3f      	ldr	r3, [pc, #252]	; (8004d2c <HAL_RCC_OscConfig+0x4d8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1f0      	bne.n	8004c1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	69da      	ldr	r2, [r3, #28]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	019b      	lsls	r3, r3, #6
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4e:	085b      	lsrs	r3, r3, #1
 8004c50:	3b01      	subs	r3, #1
 8004c52:	041b      	lsls	r3, r3, #16
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	061b      	lsls	r3, r3, #24
 8004c5c:	4933      	ldr	r1, [pc, #204]	; (8004d2c <HAL_RCC_OscConfig+0x4d8>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c62:	4b33      	ldr	r3, [pc, #204]	; (8004d30 <HAL_RCC_OscConfig+0x4dc>)
 8004c64:	2201      	movs	r2, #1
 8004c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c68:	f7fc fff2 	bl	8001c50 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c70:	f7fc ffee 	bl	8001c50 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e04d      	b.n	8004d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c82:	4b2a      	ldr	r3, [pc, #168]	; (8004d2c <HAL_RCC_OscConfig+0x4d8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0f0      	beq.n	8004c70 <HAL_RCC_OscConfig+0x41c>
 8004c8e:	e045      	b.n	8004d1c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c90:	4b27      	ldr	r3, [pc, #156]	; (8004d30 <HAL_RCC_OscConfig+0x4dc>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c96:	f7fc ffdb 	bl	8001c50 <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c9e:	f7fc ffd7 	bl	8001c50 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e036      	b.n	8004d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cb0:	4b1e      	ldr	r3, [pc, #120]	; (8004d2c <HAL_RCC_OscConfig+0x4d8>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1f0      	bne.n	8004c9e <HAL_RCC_OscConfig+0x44a>
 8004cbc:	e02e      	b.n	8004d1c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d101      	bne.n	8004cca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e029      	b.n	8004d1e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cca:	4b18      	ldr	r3, [pc, #96]	; (8004d2c <HAL_RCC_OscConfig+0x4d8>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d11c      	bne.n	8004d18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d115      	bne.n	8004d18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d10d      	bne.n	8004d18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d106      	bne.n	8004d18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d001      	beq.n	8004d1c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	40007000 	.word	0x40007000
 8004d2c:	40023800 	.word	0x40023800
 8004d30:	42470060 	.word	0x42470060

08004d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0cc      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d48:	4b68      	ldr	r3, [pc, #416]	; (8004eec <HAL_RCC_ClockConfig+0x1b8>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 030f 	and.w	r3, r3, #15
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d90c      	bls.n	8004d70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d56:	4b65      	ldr	r3, [pc, #404]	; (8004eec <HAL_RCC_ClockConfig+0x1b8>)
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d5e:	4b63      	ldr	r3, [pc, #396]	; (8004eec <HAL_RCC_ClockConfig+0x1b8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 030f 	and.w	r3, r3, #15
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d001      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e0b8      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d020      	beq.n	8004dbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d88:	4b59      	ldr	r3, [pc, #356]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	4a58      	ldr	r2, [pc, #352]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0308 	and.w	r3, r3, #8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004da0:	4b53      	ldr	r3, [pc, #332]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	4a52      	ldr	r2, [pc, #328]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004daa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dac:	4b50      	ldr	r3, [pc, #320]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	494d      	ldr	r1, [pc, #308]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d044      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d107      	bne.n	8004de2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dd2:	4b47      	ldr	r3, [pc, #284]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d119      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e07f      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d003      	beq.n	8004df2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d107      	bne.n	8004e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df2:	4b3f      	ldr	r3, [pc, #252]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d109      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e06f      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e02:	4b3b      	ldr	r3, [pc, #236]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e067      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e12:	4b37      	ldr	r3, [pc, #220]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f023 0203 	bic.w	r2, r3, #3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	4934      	ldr	r1, [pc, #208]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e24:	f7fc ff14 	bl	8001c50 <HAL_GetTick>
 8004e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e2a:	e00a      	b.n	8004e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e2c:	f7fc ff10 	bl	8001c50 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e04f      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e42:	4b2b      	ldr	r3, [pc, #172]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 020c 	and.w	r2, r3, #12
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d1eb      	bne.n	8004e2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e54:	4b25      	ldr	r3, [pc, #148]	; (8004eec <HAL_RCC_ClockConfig+0x1b8>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 030f 	and.w	r3, r3, #15
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d20c      	bcs.n	8004e7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e62:	4b22      	ldr	r3, [pc, #136]	; (8004eec <HAL_RCC_ClockConfig+0x1b8>)
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e6a:	4b20      	ldr	r3, [pc, #128]	; (8004eec <HAL_RCC_ClockConfig+0x1b8>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d001      	beq.n	8004e7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e032      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d008      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e88:	4b19      	ldr	r3, [pc, #100]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	4916      	ldr	r1, [pc, #88]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d009      	beq.n	8004eba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ea6:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	490e      	ldr	r1, [pc, #56]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004eba:	f000 f821 	bl	8004f00 <HAL_RCC_GetSysClockFreq>
 8004ebe:	4601      	mov	r1, r0
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	091b      	lsrs	r3, r3, #4
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	4a0a      	ldr	r2, [pc, #40]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8004ecc:	5cd3      	ldrb	r3, [r2, r3]
 8004ece:	fa21 f303 	lsr.w	r3, r1, r3
 8004ed2:	4a09      	ldr	r2, [pc, #36]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ed6:	4b09      	ldr	r3, [pc, #36]	; (8004efc <HAL_RCC_ClockConfig+0x1c8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fc fd7a 	bl	80019d4 <HAL_InitTick>

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	40023c00 	.word	0x40023c00
 8004ef0:	40023800 	.word	0x40023800
 8004ef4:	0800d040 	.word	0x0800d040
 8004ef8:	20000000 	.word	0x20000000
 8004efc:	20000004 	.word	0x20000004

08004f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	607b      	str	r3, [r7, #4]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f16:	4b63      	ldr	r3, [pc, #396]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 030c 	and.w	r3, r3, #12
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d007      	beq.n	8004f32 <HAL_RCC_GetSysClockFreq+0x32>
 8004f22:	2b08      	cmp	r3, #8
 8004f24:	d008      	beq.n	8004f38 <HAL_RCC_GetSysClockFreq+0x38>
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f040 80b4 	bne.w	8005094 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f2c:	4b5e      	ldr	r3, [pc, #376]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f2e:	60bb      	str	r3, [r7, #8]
       break;
 8004f30:	e0b3      	b.n	800509a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f32:	4b5e      	ldr	r3, [pc, #376]	; (80050ac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004f34:	60bb      	str	r3, [r7, #8]
      break;
 8004f36:	e0b0      	b.n	800509a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f38:	4b5a      	ldr	r3, [pc, #360]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f40:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f42:	4b58      	ldr	r3, [pc, #352]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d04a      	beq.n	8004fe4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f4e:	4b55      	ldr	r3, [pc, #340]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	099b      	lsrs	r3, r3, #6
 8004f54:	f04f 0400 	mov.w	r4, #0
 8004f58:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	ea03 0501 	and.w	r5, r3, r1
 8004f64:	ea04 0602 	and.w	r6, r4, r2
 8004f68:	4629      	mov	r1, r5
 8004f6a:	4632      	mov	r2, r6
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	f04f 0400 	mov.w	r4, #0
 8004f74:	0154      	lsls	r4, r2, #5
 8004f76:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f7a:	014b      	lsls	r3, r1, #5
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4622      	mov	r2, r4
 8004f80:	1b49      	subs	r1, r1, r5
 8004f82:	eb62 0206 	sbc.w	r2, r2, r6
 8004f86:	f04f 0300 	mov.w	r3, #0
 8004f8a:	f04f 0400 	mov.w	r4, #0
 8004f8e:	0194      	lsls	r4, r2, #6
 8004f90:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f94:	018b      	lsls	r3, r1, #6
 8004f96:	1a5b      	subs	r3, r3, r1
 8004f98:	eb64 0402 	sbc.w	r4, r4, r2
 8004f9c:	f04f 0100 	mov.w	r1, #0
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	00e2      	lsls	r2, r4, #3
 8004fa6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004faa:	00d9      	lsls	r1, r3, #3
 8004fac:	460b      	mov	r3, r1
 8004fae:	4614      	mov	r4, r2
 8004fb0:	195b      	adds	r3, r3, r5
 8004fb2:	eb44 0406 	adc.w	r4, r4, r6
 8004fb6:	f04f 0100 	mov.w	r1, #0
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	0262      	lsls	r2, r4, #9
 8004fc0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004fc4:	0259      	lsls	r1, r3, #9
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	4614      	mov	r4, r2
 8004fca:	4618      	mov	r0, r3
 8004fcc:	4621      	mov	r1, r4
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f04f 0400 	mov.w	r4, #0
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	4623      	mov	r3, r4
 8004fd8:	f7fb f902 	bl	80001e0 <__aeabi_uldivmod>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	460c      	mov	r4, r1
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	e049      	b.n	8005078 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fe4:	4b2f      	ldr	r3, [pc, #188]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	099b      	lsrs	r3, r3, #6
 8004fea:	f04f 0400 	mov.w	r4, #0
 8004fee:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	ea03 0501 	and.w	r5, r3, r1
 8004ffa:	ea04 0602 	and.w	r6, r4, r2
 8004ffe:	4629      	mov	r1, r5
 8005000:	4632      	mov	r2, r6
 8005002:	f04f 0300 	mov.w	r3, #0
 8005006:	f04f 0400 	mov.w	r4, #0
 800500a:	0154      	lsls	r4, r2, #5
 800500c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005010:	014b      	lsls	r3, r1, #5
 8005012:	4619      	mov	r1, r3
 8005014:	4622      	mov	r2, r4
 8005016:	1b49      	subs	r1, r1, r5
 8005018:	eb62 0206 	sbc.w	r2, r2, r6
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	f04f 0400 	mov.w	r4, #0
 8005024:	0194      	lsls	r4, r2, #6
 8005026:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800502a:	018b      	lsls	r3, r1, #6
 800502c:	1a5b      	subs	r3, r3, r1
 800502e:	eb64 0402 	sbc.w	r4, r4, r2
 8005032:	f04f 0100 	mov.w	r1, #0
 8005036:	f04f 0200 	mov.w	r2, #0
 800503a:	00e2      	lsls	r2, r4, #3
 800503c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005040:	00d9      	lsls	r1, r3, #3
 8005042:	460b      	mov	r3, r1
 8005044:	4614      	mov	r4, r2
 8005046:	195b      	adds	r3, r3, r5
 8005048:	eb44 0406 	adc.w	r4, r4, r6
 800504c:	f04f 0100 	mov.w	r1, #0
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	02a2      	lsls	r2, r4, #10
 8005056:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800505a:	0299      	lsls	r1, r3, #10
 800505c:	460b      	mov	r3, r1
 800505e:	4614      	mov	r4, r2
 8005060:	4618      	mov	r0, r3
 8005062:	4621      	mov	r1, r4
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f04f 0400 	mov.w	r4, #0
 800506a:	461a      	mov	r2, r3
 800506c:	4623      	mov	r3, r4
 800506e:	f7fb f8b7 	bl	80001e0 <__aeabi_uldivmod>
 8005072:	4603      	mov	r3, r0
 8005074:	460c      	mov	r4, r1
 8005076:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005078:	4b0a      	ldr	r3, [pc, #40]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	0c1b      	lsrs	r3, r3, #16
 800507e:	f003 0303 	and.w	r3, r3, #3
 8005082:	3301      	adds	r3, #1
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005090:	60bb      	str	r3, [r7, #8]
      break;
 8005092:	e002      	b.n	800509a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005094:	4b04      	ldr	r3, [pc, #16]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005096:	60bb      	str	r3, [r7, #8]
      break;
 8005098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800509a:	68bb      	ldr	r3, [r7, #8]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050a4:	40023800 	.word	0x40023800
 80050a8:	00f42400 	.word	0x00f42400
 80050ac:	007a1200 	.word	0x007a1200

080050b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050b4:	4b03      	ldr	r3, [pc, #12]	; (80050c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050b6:	681b      	ldr	r3, [r3, #0]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	20000000 	.word	0x20000000

080050c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050cc:	f7ff fff0 	bl	80050b0 <HAL_RCC_GetHCLKFreq>
 80050d0:	4601      	mov	r1, r0
 80050d2:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	0a9b      	lsrs	r3, r3, #10
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	4a03      	ldr	r2, [pc, #12]	; (80050ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80050de:	5cd3      	ldrb	r3, [r2, r3]
 80050e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40023800 	.word	0x40023800
 80050ec:	0800d050 	.word	0x0800d050

080050f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050f4:	f7ff ffdc 	bl	80050b0 <HAL_RCC_GetHCLKFreq>
 80050f8:	4601      	mov	r1, r0
 80050fa:	4b05      	ldr	r3, [pc, #20]	; (8005110 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	0b5b      	lsrs	r3, r3, #13
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	4a03      	ldr	r2, [pc, #12]	; (8005114 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005106:	5cd3      	ldrb	r3, [r2, r3]
 8005108:	fa21 f303 	lsr.w	r3, r1, r3
}
 800510c:	4618      	mov	r0, r3
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40023800 	.word	0x40023800
 8005114:	0800d050 	.word	0x0800d050

08005118 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	220f      	movs	r2, #15
 8005126:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005128:	4b12      	ldr	r3, [pc, #72]	; (8005174 <HAL_RCC_GetClockConfig+0x5c>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f003 0203 	and.w	r2, r3, #3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005134:	4b0f      	ldr	r3, [pc, #60]	; (8005174 <HAL_RCC_GetClockConfig+0x5c>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005140:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <HAL_RCC_GetClockConfig+0x5c>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800514c:	4b09      	ldr	r3, [pc, #36]	; (8005174 <HAL_RCC_GetClockConfig+0x5c>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	08db      	lsrs	r3, r3, #3
 8005152:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800515a:	4b07      	ldr	r3, [pc, #28]	; (8005178 <HAL_RCC_GetClockConfig+0x60>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 020f 	and.w	r2, r3, #15
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	601a      	str	r2, [r3, #0]
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	40023800 	.word	0x40023800
 8005178:	40023c00 	.word	0x40023c00

0800517c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d105      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d035      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051a4:	4b62      	ldr	r3, [pc, #392]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051aa:	f7fc fd51 	bl	8001c50 <HAL_GetTick>
 80051ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051b0:	e008      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051b2:	f7fc fd4d 	bl	8001c50 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d901      	bls.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e0b0      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051c4:	4b5b      	ldr	r3, [pc, #364]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1f0      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	019a      	lsls	r2, r3, #6
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	071b      	lsls	r3, r3, #28
 80051dc:	4955      	ldr	r1, [pc, #340]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051e4:	4b52      	ldr	r3, [pc, #328]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80051e6:	2201      	movs	r2, #1
 80051e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051ea:	f7fc fd31 	bl	8001c50 <HAL_GetTick>
 80051ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051f0:	e008      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051f2:	f7fc fd2d 	bl	8001c50 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e090      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005204:	4b4b      	ldr	r3, [pc, #300]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0f0      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 8083 	beq.w	8005324 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800521e:	2300      	movs	r3, #0
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	4b44      	ldr	r3, [pc, #272]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	4a43      	ldr	r2, [pc, #268]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800522c:	6413      	str	r3, [r2, #64]	; 0x40
 800522e:	4b41      	ldr	r3, [pc, #260]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800523a:	4b3f      	ldr	r3, [pc, #252]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a3e      	ldr	r2, [pc, #248]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005244:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005246:	f7fc fd03 	bl	8001c50 <HAL_GetTick>
 800524a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800524c:	e008      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800524e:	f7fc fcff 	bl	8001c50 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d901      	bls.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e062      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005260:	4b35      	ldr	r3, [pc, #212]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0f0      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800526c:	4b31      	ldr	r3, [pc, #196]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800526e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005274:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d02f      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	429a      	cmp	r2, r3
 8005288:	d028      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800528a:	4b2a      	ldr	r3, [pc, #168]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800528c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005292:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005294:	4b29      	ldr	r3, [pc, #164]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005296:	2201      	movs	r2, #1
 8005298:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800529a:	4b28      	ldr	r3, [pc, #160]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80052a0:	4a24      	ldr	r2, [pc, #144]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052a6:	4b23      	ldr	r3, [pc, #140]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d114      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80052b2:	f7fc fccd 	bl	8001c50 <HAL_GetTick>
 80052b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b8:	e00a      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052ba:	f7fc fcc9 	bl	8001c50 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e02a      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d0:	4b18      	ldr	r3, [pc, #96]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0ee      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052e8:	d10d      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80052ea:	4b12      	ldr	r3, [pc, #72]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80052fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052fe:	490d      	ldr	r1, [pc, #52]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005300:	4313      	orrs	r3, r2
 8005302:	608b      	str	r3, [r1, #8]
 8005304:	e005      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005306:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	4a0a      	ldr	r2, [pc, #40]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800530c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005310:	6093      	str	r3, [r2, #8]
 8005312:	4b08      	ldr	r3, [pc, #32]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005314:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800531e:	4905      	ldr	r1, [pc, #20]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005320:	4313      	orrs	r3, r2
 8005322:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	42470068 	.word	0x42470068
 8005334:	40023800 	.word	0x40023800
 8005338:	40007000 	.word	0x40007000
 800533c:	42470e40 	.word	0x42470e40

08005340 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d13d      	bne.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800535e:	4b22      	ldr	r3, [pc, #136]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005366:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d004      	beq.n	8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800536e:	2b01      	cmp	r3, #1
 8005370:	d12f      	bne.n	80053d2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005372:	4b1e      	ldr	r3, [pc, #120]	; (80053ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005374:	617b      	str	r3, [r7, #20]
          break;
 8005376:	e02f      	b.n	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005378:	4b1b      	ldr	r3, [pc, #108]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005380:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005384:	d108      	bne.n	8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005386:	4b18      	ldr	r3, [pc, #96]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800538e:	4a18      	ldr	r2, [pc, #96]	; (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005390:	fbb2 f3f3 	udiv	r3, r2, r3
 8005394:	613b      	str	r3, [r7, #16]
 8005396:	e007      	b.n	80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005398:	4b13      	ldr	r3, [pc, #76]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053a0:	4a14      	ldr	r2, [pc, #80]	; (80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80053a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80053a8:	4b0f      	ldr	r3, [pc, #60]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80053aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ae:	099b      	lsrs	r3, r3, #6
 80053b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	fb02 f303 	mul.w	r3, r2, r3
 80053ba:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80053bc:	4b0a      	ldr	r3, [pc, #40]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80053be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053c2:	0f1b      	lsrs	r3, r3, #28
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ce:	617b      	str	r3, [r7, #20]
          break;
 80053d0:	e002      	b.n	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	617b      	str	r3, [r7, #20]
          break;
 80053d6:	bf00      	nop
        }
      }
      break;
 80053d8:	bf00      	nop
    }
  }
  return frequency;
 80053da:	697b      	ldr	r3, [r7, #20]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	40023800 	.word	0x40023800
 80053ec:	00bb8000 	.word	0x00bb8000
 80053f0:	007a1200 	.word	0x007a1200
 80053f4:	00f42400 	.word	0x00f42400

080053f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e056      	b.n	80054b8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d106      	bne.n	800542a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7fc fa3d 	bl	80018a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2202      	movs	r2, #2
 800542e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005440:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	431a      	orrs	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	431a      	orrs	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	431a      	orrs	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	431a      	orrs	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	ea42 0103 	orr.w	r1, r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	0c1b      	lsrs	r3, r3, #16
 8005488:	f003 0104 	and.w	r1, r3, #4
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	69da      	ldr	r2, [r3, #28]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e01d      	b.n	800550e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f815 	bl	8005516 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3304      	adds	r3, #4
 80054fc:	4619      	mov	r1, r3
 80054fe:	4610      	mov	r0, r2
 8005500:	f000 f968 	bl	80057d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800552a:	b480      	push	{r7}
 800552c:	b085      	sub	sp, #20
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f042 0201 	orr.w	r2, r2, #1
 8005540:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b06      	cmp	r3, #6
 8005552:	d007      	beq.n	8005564 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0201 	orr.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b082      	sub	sp, #8
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b02      	cmp	r3, #2
 8005586:	d122      	bne.n	80055ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b02      	cmp	r3, #2
 8005594:	d11b      	bne.n	80055ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f06f 0202 	mvn.w	r2, #2
 800559e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	f003 0303 	and.w	r3, r3, #3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f8ee 	bl	8005796 <HAL_TIM_IC_CaptureCallback>
 80055ba:	e005      	b.n	80055c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f8e0 	bl	8005782 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f8f1 	bl	80057aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d122      	bne.n	8005622 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	f003 0304 	and.w	r3, r3, #4
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d11b      	bne.n	8005622 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f06f 0204 	mvn.w	r2, #4
 80055f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f8c4 	bl	8005796 <HAL_TIM_IC_CaptureCallback>
 800560e:	e005      	b.n	800561c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f8b6 	bl	8005782 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f8c7 	bl	80057aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f003 0308 	and.w	r3, r3, #8
 800562c:	2b08      	cmp	r3, #8
 800562e:	d122      	bne.n	8005676 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f003 0308 	and.w	r3, r3, #8
 800563a:	2b08      	cmp	r3, #8
 800563c:	d11b      	bne.n	8005676 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f06f 0208 	mvn.w	r2, #8
 8005646:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2204      	movs	r2, #4
 800564c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f89a 	bl	8005796 <HAL_TIM_IC_CaptureCallback>
 8005662:	e005      	b.n	8005670 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f88c 	bl	8005782 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f89d 	bl	80057aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	f003 0310 	and.w	r3, r3, #16
 8005680:	2b10      	cmp	r3, #16
 8005682:	d122      	bne.n	80056ca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f003 0310 	and.w	r3, r3, #16
 800568e:	2b10      	cmp	r3, #16
 8005690:	d11b      	bne.n	80056ca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f06f 0210 	mvn.w	r2, #16
 800569a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2208      	movs	r2, #8
 80056a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f870 	bl	8005796 <HAL_TIM_IC_CaptureCallback>
 80056b6:	e005      	b.n	80056c4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f862 	bl	8005782 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f873 	bl	80057aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d10e      	bne.n	80056f6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d107      	bne.n	80056f6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f06f 0201 	mvn.w	r2, #1
 80056ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7fb ffe9 	bl	80016c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005700:	2b80      	cmp	r3, #128	; 0x80
 8005702:	d10e      	bne.n	8005722 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570e:	2b80      	cmp	r3, #128	; 0x80
 8005710:	d107      	bne.n	8005722 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800571a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f903 	bl	8005928 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572c:	2b40      	cmp	r3, #64	; 0x40
 800572e:	d10e      	bne.n	800574e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573a:	2b40      	cmp	r3, #64	; 0x40
 800573c:	d107      	bne.n	800574e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f838 	bl	80057be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f003 0320 	and.w	r3, r3, #32
 8005758:	2b20      	cmp	r3, #32
 800575a:	d10e      	bne.n	800577a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b20      	cmp	r3, #32
 8005768:	d107      	bne.n	800577a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f06f 0220 	mvn.w	r2, #32
 8005772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f8cd 	bl	8005914 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800577a:	bf00      	nop
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057b2:	bf00      	nop
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
	...

080057d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a40      	ldr	r2, [pc, #256]	; (80058e8 <TIM_Base_SetConfig+0x114>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d013      	beq.n	8005814 <TIM_Base_SetConfig+0x40>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f2:	d00f      	beq.n	8005814 <TIM_Base_SetConfig+0x40>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a3d      	ldr	r2, [pc, #244]	; (80058ec <TIM_Base_SetConfig+0x118>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d00b      	beq.n	8005814 <TIM_Base_SetConfig+0x40>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a3c      	ldr	r2, [pc, #240]	; (80058f0 <TIM_Base_SetConfig+0x11c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d007      	beq.n	8005814 <TIM_Base_SetConfig+0x40>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a3b      	ldr	r2, [pc, #236]	; (80058f4 <TIM_Base_SetConfig+0x120>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d003      	beq.n	8005814 <TIM_Base_SetConfig+0x40>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a3a      	ldr	r2, [pc, #232]	; (80058f8 <TIM_Base_SetConfig+0x124>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d108      	bne.n	8005826 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a2f      	ldr	r2, [pc, #188]	; (80058e8 <TIM_Base_SetConfig+0x114>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d02b      	beq.n	8005886 <TIM_Base_SetConfig+0xb2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005834:	d027      	beq.n	8005886 <TIM_Base_SetConfig+0xb2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a2c      	ldr	r2, [pc, #176]	; (80058ec <TIM_Base_SetConfig+0x118>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d023      	beq.n	8005886 <TIM_Base_SetConfig+0xb2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a2b      	ldr	r2, [pc, #172]	; (80058f0 <TIM_Base_SetConfig+0x11c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d01f      	beq.n	8005886 <TIM_Base_SetConfig+0xb2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a2a      	ldr	r2, [pc, #168]	; (80058f4 <TIM_Base_SetConfig+0x120>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d01b      	beq.n	8005886 <TIM_Base_SetConfig+0xb2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a29      	ldr	r2, [pc, #164]	; (80058f8 <TIM_Base_SetConfig+0x124>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d017      	beq.n	8005886 <TIM_Base_SetConfig+0xb2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a28      	ldr	r2, [pc, #160]	; (80058fc <TIM_Base_SetConfig+0x128>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d013      	beq.n	8005886 <TIM_Base_SetConfig+0xb2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a27      	ldr	r2, [pc, #156]	; (8005900 <TIM_Base_SetConfig+0x12c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00f      	beq.n	8005886 <TIM_Base_SetConfig+0xb2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a26      	ldr	r2, [pc, #152]	; (8005904 <TIM_Base_SetConfig+0x130>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d00b      	beq.n	8005886 <TIM_Base_SetConfig+0xb2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a25      	ldr	r2, [pc, #148]	; (8005908 <TIM_Base_SetConfig+0x134>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d007      	beq.n	8005886 <TIM_Base_SetConfig+0xb2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a24      	ldr	r2, [pc, #144]	; (800590c <TIM_Base_SetConfig+0x138>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d003      	beq.n	8005886 <TIM_Base_SetConfig+0xb2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a23      	ldr	r2, [pc, #140]	; (8005910 <TIM_Base_SetConfig+0x13c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d108      	bne.n	8005898 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800588c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	4313      	orrs	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a0a      	ldr	r2, [pc, #40]	; (80058e8 <TIM_Base_SetConfig+0x114>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d003      	beq.n	80058cc <TIM_Base_SetConfig+0xf8>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a0c      	ldr	r2, [pc, #48]	; (80058f8 <TIM_Base_SetConfig+0x124>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d103      	bne.n	80058d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	691a      	ldr	r2, [r3, #16]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	615a      	str	r2, [r3, #20]
}
 80058da:	bf00      	nop
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	40010000 	.word	0x40010000
 80058ec:	40000400 	.word	0x40000400
 80058f0:	40000800 	.word	0x40000800
 80058f4:	40000c00 	.word	0x40000c00
 80058f8:	40010400 	.word	0x40010400
 80058fc:	40014000 	.word	0x40014000
 8005900:	40014400 	.word	0x40014400
 8005904:	40014800 	.word	0x40014800
 8005908:	40001800 	.word	0x40001800
 800590c:	40001c00 	.word	0x40001c00
 8005910:	40002000 	.word	0x40002000

08005914 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e03f      	b.n	80059ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d106      	bne.n	8005968 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7fb ffe6 	bl	8001934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2224      	movs	r2, #36	; 0x24
 800596c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800597e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 fb4b 	bl	800601c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005994:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	695a      	ldr	r2, [r3, #20]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68da      	ldr	r2, [r3, #12]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2220      	movs	r2, #32
 80059c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2220      	movs	r2, #32
 80059c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b088      	sub	sp, #32
 80059da:	af02      	add	r7, sp, #8
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	60b9      	str	r1, [r7, #8]
 80059e0:	603b      	str	r3, [r7, #0]
 80059e2:	4613      	mov	r3, r2
 80059e4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b20      	cmp	r3, #32
 80059f4:	f040 8083 	bne.w	8005afe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d002      	beq.n	8005a04 <HAL_UART_Transmit+0x2e>
 80059fe:	88fb      	ldrh	r3, [r7, #6]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e07b      	b.n	8005b00 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d101      	bne.n	8005a16 <HAL_UART_Transmit+0x40>
 8005a12:	2302      	movs	r3, #2
 8005a14:	e074      	b.n	8005b00 <HAL_UART_Transmit+0x12a>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2221      	movs	r2, #33	; 0x21
 8005a28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005a2c:	f7fc f910 	bl	8001c50 <HAL_GetTick>
 8005a30:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	88fa      	ldrh	r2, [r7, #6]
 8005a36:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	88fa      	ldrh	r2, [r7, #6]
 8005a3c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005a46:	e042      	b.n	8005ace <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a5e:	d122      	bne.n	8005aa6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	2200      	movs	r2, #0
 8005a68:	2180      	movs	r1, #128	; 0x80
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 f96a 	bl	8005d44 <UART_WaitOnFlagUntilTimeout>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e042      	b.n	8005b00 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	461a      	mov	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a8c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d103      	bne.n	8005a9e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	3302      	adds	r3, #2
 8005a9a:	60bb      	str	r3, [r7, #8]
 8005a9c:	e017      	b.n	8005ace <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	60bb      	str	r3, [r7, #8]
 8005aa4:	e013      	b.n	8005ace <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2200      	movs	r2, #0
 8005aae:	2180      	movs	r1, #128	; 0x80
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f000 f947 	bl	8005d44 <UART_WaitOnFlagUntilTimeout>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e01f      	b.n	8005b00 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	60ba      	str	r2, [r7, #8]
 8005ac6:	781a      	ldrb	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1b7      	bne.n	8005a48 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	2140      	movs	r1, #64	; 0x40
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 f92e 	bl	8005d44 <UART_WaitOnFlagUntilTimeout>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e006      	b.n	8005b00 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	e000      	b.n	8005b00 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005afe:	2302      	movs	r3, #2
  }
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b088      	sub	sp, #32
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10d      	bne.n	8005b5a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	f003 0320 	and.w	r3, r3, #32
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d008      	beq.n	8005b5a <HAL_UART_IRQHandler+0x52>
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	f003 0320 	and.w	r3, r3, #32
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f9e0 	bl	8005f18 <UART_Receive_IT>
      return;
 8005b58:	e0d1      	b.n	8005cfe <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 80b0 	beq.w	8005cc2 <HAL_UART_IRQHandler+0x1ba>
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d105      	bne.n	8005b78 <HAL_UART_IRQHandler+0x70>
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f000 80a5 	beq.w	8005cc2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <HAL_UART_IRQHandler+0x90>
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d005      	beq.n	8005b98 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b90:	f043 0201 	orr.w	r2, r3, #1
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	f003 0304 	and.w	r3, r3, #4
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <HAL_UART_IRQHandler+0xb0>
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d005      	beq.n	8005bb8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb0:	f043 0202 	orr.w	r2, r3, #2
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00a      	beq.n	8005bd8 <HAL_UART_IRQHandler+0xd0>
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd0:	f043 0204 	orr.w	r2, r3, #4
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	f003 0308 	and.w	r3, r3, #8
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00f      	beq.n	8005c02 <HAL_UART_IRQHandler+0xfa>
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d104      	bne.n	8005bf6 <HAL_UART_IRQHandler+0xee>
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d005      	beq.n	8005c02 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfa:	f043 0208 	orr.w	r2, r3, #8
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d078      	beq.n	8005cfc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	f003 0320 	and.w	r3, r3, #32
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d007      	beq.n	8005c24 <HAL_UART_IRQHandler+0x11c>
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	f003 0320 	and.w	r3, r3, #32
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f97a 	bl	8005f18 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2e:	2b40      	cmp	r3, #64	; 0x40
 8005c30:	bf0c      	ite	eq
 8005c32:	2301      	moveq	r3, #1
 8005c34:	2300      	movne	r3, #0
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3e:	f003 0308 	and.w	r3, r3, #8
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d102      	bne.n	8005c4c <HAL_UART_IRQHandler+0x144>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d031      	beq.n	8005cb0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f8c3 	bl	8005dd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5c:	2b40      	cmp	r3, #64	; 0x40
 8005c5e:	d123      	bne.n	8005ca8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695a      	ldr	r2, [r3, #20]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c6e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d013      	beq.n	8005ca0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7c:	4a21      	ldr	r2, [pc, #132]	; (8005d04 <HAL_UART_IRQHandler+0x1fc>)
 8005c7e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7fc f923 	bl	8001ed0 <HAL_DMA_Abort_IT>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d016      	beq.n	8005cbe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c9e:	e00e      	b.n	8005cbe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f845 	bl	8005d30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca6:	e00a      	b.n	8005cbe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f841 	bl	8005d30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cae:	e006      	b.n	8005cbe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f83d 	bl	8005d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005cbc:	e01e      	b.n	8005cfc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cbe:	bf00      	nop
    return;
 8005cc0:	e01c      	b.n	8005cfc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d008      	beq.n	8005cde <HAL_UART_IRQHandler+0x1d6>
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f8b0 	bl	8005e3c <UART_Transmit_IT>
    return;
 8005cdc:	e00f      	b.n	8005cfe <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00a      	beq.n	8005cfe <HAL_UART_IRQHandler+0x1f6>
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d005      	beq.n	8005cfe <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f8f8 	bl	8005ee8 <UART_EndTransmit_IT>
    return;
 8005cf8:	bf00      	nop
 8005cfa:	e000      	b.n	8005cfe <HAL_UART_IRQHandler+0x1f6>
    return;
 8005cfc:	bf00      	nop
  }
}
 8005cfe:	3720      	adds	r7, #32
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	08005e15 	.word	0x08005e15

08005d08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	4613      	mov	r3, r2
 8005d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d54:	e02c      	b.n	8005db0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5c:	d028      	beq.n	8005db0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d007      	beq.n	8005d74 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d64:	f7fb ff74 	bl	8001c50 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d21d      	bcs.n	8005db0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68da      	ldr	r2, [r3, #12]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d82:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	695a      	ldr	r2, [r3, #20]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0201 	bic.w	r2, r2, #1
 8005d92:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2220      	movs	r2, #32
 8005d98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e00f      	b.n	8005dd0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	4013      	ands	r3, r2
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	bf0c      	ite	eq
 8005dc0:	2301      	moveq	r3, #1
 8005dc2:	2300      	movne	r3, #0
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	79fb      	ldrb	r3, [r7, #7]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d0c3      	beq.n	8005d56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005dee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	695a      	ldr	r2, [r3, #20]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0201 	bic.w	r2, r2, #1
 8005dfe:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2220      	movs	r2, #32
 8005e04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f7ff ff7e 	bl	8005d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e34:	bf00      	nop
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b21      	cmp	r3, #33	; 0x21
 8005e4e:	d144      	bne.n	8005eda <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e58:	d11a      	bne.n	8005e90 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	461a      	mov	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e6e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d105      	bne.n	8005e84 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	1c9a      	adds	r2, r3, #2
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	621a      	str	r2, [r3, #32]
 8005e82:	e00e      	b.n	8005ea2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	621a      	str	r2, [r3, #32]
 8005e8e:	e008      	b.n	8005ea2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	1c59      	adds	r1, r3, #1
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	6211      	str	r1, [r2, #32]
 8005e9a:	781a      	ldrb	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	4619      	mov	r1, r3
 8005eb0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10f      	bne.n	8005ed6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68da      	ldr	r2, [r3, #12]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ec4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68da      	ldr	r2, [r3, #12]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ed4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	e000      	b.n	8005edc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005eda:	2302      	movs	r3, #2
  }
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005efe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2220      	movs	r2, #32
 8005f04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7ff fefd 	bl	8005d08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b22      	cmp	r3, #34	; 0x22
 8005f2a:	d171      	bne.n	8006010 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f34:	d123      	bne.n	8005f7e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10e      	bne.n	8005f62 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5a:	1c9a      	adds	r2, r3, #2
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	629a      	str	r2, [r3, #40]	; 0x28
 8005f60:	e029      	b.n	8005fb6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	629a      	str	r2, [r3, #40]	; 0x28
 8005f7c:	e01b      	b.n	8005fb6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10a      	bne.n	8005f9c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6858      	ldr	r0, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f90:	1c59      	adds	r1, r3, #1
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	6291      	str	r1, [r2, #40]	; 0x28
 8005f96:	b2c2      	uxtb	r2, r0
 8005f98:	701a      	strb	r2, [r3, #0]
 8005f9a:	e00c      	b.n	8005fb6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa8:	1c58      	adds	r0, r3, #1
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	6288      	str	r0, [r1, #40]	; 0x28
 8005fae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005fb2:	b2d2      	uxtb	r2, r2
 8005fb4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d120      	bne.n	800600c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0220 	bic.w	r2, r2, #32
 8005fd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68da      	ldr	r2, [r3, #12]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fe8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	695a      	ldr	r2, [r3, #20]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 0201 	bic.w	r2, r2, #1
 8005ff8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7ff fe8a 	bl	8005d1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	e002      	b.n	8006012 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800600c:	2300      	movs	r3, #0
 800600e:	e000      	b.n	8006012 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006010:	2302      	movs	r3, #2
  }
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
	...

0800601c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800601c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006020:	b085      	sub	sp, #20
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68da      	ldr	r2, [r3, #12]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	431a      	orrs	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	431a      	orrs	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	4313      	orrs	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800605e:	f023 030c 	bic.w	r3, r3, #12
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	6812      	ldr	r2, [r2, #0]
 8006066:	68f9      	ldr	r1, [r7, #12]
 8006068:	430b      	orrs	r3, r1
 800606a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	699a      	ldr	r2, [r3, #24]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800608a:	f040 818b 	bne.w	80063a4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4ac1      	ldr	r2, [pc, #772]	; (8006398 <UART_SetConfig+0x37c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d005      	beq.n	80060a4 <UART_SetConfig+0x88>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4abf      	ldr	r2, [pc, #764]	; (800639c <UART_SetConfig+0x380>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	f040 80bd 	bne.w	800621e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060a4:	f7ff f824 	bl	80050f0 <HAL_RCC_GetPCLK2Freq>
 80060a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	461d      	mov	r5, r3
 80060ae:	f04f 0600 	mov.w	r6, #0
 80060b2:	46a8      	mov	r8, r5
 80060b4:	46b1      	mov	r9, r6
 80060b6:	eb18 0308 	adds.w	r3, r8, r8
 80060ba:	eb49 0409 	adc.w	r4, r9, r9
 80060be:	4698      	mov	r8, r3
 80060c0:	46a1      	mov	r9, r4
 80060c2:	eb18 0805 	adds.w	r8, r8, r5
 80060c6:	eb49 0906 	adc.w	r9, r9, r6
 80060ca:	f04f 0100 	mov.w	r1, #0
 80060ce:	f04f 0200 	mov.w	r2, #0
 80060d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060de:	4688      	mov	r8, r1
 80060e0:	4691      	mov	r9, r2
 80060e2:	eb18 0005 	adds.w	r0, r8, r5
 80060e6:	eb49 0106 	adc.w	r1, r9, r6
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	461d      	mov	r5, r3
 80060f0:	f04f 0600 	mov.w	r6, #0
 80060f4:	196b      	adds	r3, r5, r5
 80060f6:	eb46 0406 	adc.w	r4, r6, r6
 80060fa:	461a      	mov	r2, r3
 80060fc:	4623      	mov	r3, r4
 80060fe:	f7fa f86f 	bl	80001e0 <__aeabi_uldivmod>
 8006102:	4603      	mov	r3, r0
 8006104:	460c      	mov	r4, r1
 8006106:	461a      	mov	r2, r3
 8006108:	4ba5      	ldr	r3, [pc, #660]	; (80063a0 <UART_SetConfig+0x384>)
 800610a:	fba3 2302 	umull	r2, r3, r3, r2
 800610e:	095b      	lsrs	r3, r3, #5
 8006110:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	461d      	mov	r5, r3
 8006118:	f04f 0600 	mov.w	r6, #0
 800611c:	46a9      	mov	r9, r5
 800611e:	46b2      	mov	sl, r6
 8006120:	eb19 0309 	adds.w	r3, r9, r9
 8006124:	eb4a 040a 	adc.w	r4, sl, sl
 8006128:	4699      	mov	r9, r3
 800612a:	46a2      	mov	sl, r4
 800612c:	eb19 0905 	adds.w	r9, r9, r5
 8006130:	eb4a 0a06 	adc.w	sl, sl, r6
 8006134:	f04f 0100 	mov.w	r1, #0
 8006138:	f04f 0200 	mov.w	r2, #0
 800613c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006140:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006144:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006148:	4689      	mov	r9, r1
 800614a:	4692      	mov	sl, r2
 800614c:	eb19 0005 	adds.w	r0, r9, r5
 8006150:	eb4a 0106 	adc.w	r1, sl, r6
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	461d      	mov	r5, r3
 800615a:	f04f 0600 	mov.w	r6, #0
 800615e:	196b      	adds	r3, r5, r5
 8006160:	eb46 0406 	adc.w	r4, r6, r6
 8006164:	461a      	mov	r2, r3
 8006166:	4623      	mov	r3, r4
 8006168:	f7fa f83a 	bl	80001e0 <__aeabi_uldivmod>
 800616c:	4603      	mov	r3, r0
 800616e:	460c      	mov	r4, r1
 8006170:	461a      	mov	r2, r3
 8006172:	4b8b      	ldr	r3, [pc, #556]	; (80063a0 <UART_SetConfig+0x384>)
 8006174:	fba3 1302 	umull	r1, r3, r3, r2
 8006178:	095b      	lsrs	r3, r3, #5
 800617a:	2164      	movs	r1, #100	; 0x64
 800617c:	fb01 f303 	mul.w	r3, r1, r3
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	3332      	adds	r3, #50	; 0x32
 8006186:	4a86      	ldr	r2, [pc, #536]	; (80063a0 <UART_SetConfig+0x384>)
 8006188:	fba2 2303 	umull	r2, r3, r2, r3
 800618c:	095b      	lsrs	r3, r3, #5
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006194:	4498      	add	r8, r3
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	461d      	mov	r5, r3
 800619a:	f04f 0600 	mov.w	r6, #0
 800619e:	46a9      	mov	r9, r5
 80061a0:	46b2      	mov	sl, r6
 80061a2:	eb19 0309 	adds.w	r3, r9, r9
 80061a6:	eb4a 040a 	adc.w	r4, sl, sl
 80061aa:	4699      	mov	r9, r3
 80061ac:	46a2      	mov	sl, r4
 80061ae:	eb19 0905 	adds.w	r9, r9, r5
 80061b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80061b6:	f04f 0100 	mov.w	r1, #0
 80061ba:	f04f 0200 	mov.w	r2, #0
 80061be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061ca:	4689      	mov	r9, r1
 80061cc:	4692      	mov	sl, r2
 80061ce:	eb19 0005 	adds.w	r0, r9, r5
 80061d2:	eb4a 0106 	adc.w	r1, sl, r6
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	461d      	mov	r5, r3
 80061dc:	f04f 0600 	mov.w	r6, #0
 80061e0:	196b      	adds	r3, r5, r5
 80061e2:	eb46 0406 	adc.w	r4, r6, r6
 80061e6:	461a      	mov	r2, r3
 80061e8:	4623      	mov	r3, r4
 80061ea:	f7f9 fff9 	bl	80001e0 <__aeabi_uldivmod>
 80061ee:	4603      	mov	r3, r0
 80061f0:	460c      	mov	r4, r1
 80061f2:	461a      	mov	r2, r3
 80061f4:	4b6a      	ldr	r3, [pc, #424]	; (80063a0 <UART_SetConfig+0x384>)
 80061f6:	fba3 1302 	umull	r1, r3, r3, r2
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	2164      	movs	r1, #100	; 0x64
 80061fe:	fb01 f303 	mul.w	r3, r1, r3
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	3332      	adds	r3, #50	; 0x32
 8006208:	4a65      	ldr	r2, [pc, #404]	; (80063a0 <UART_SetConfig+0x384>)
 800620a:	fba2 2303 	umull	r2, r3, r2, r3
 800620e:	095b      	lsrs	r3, r3, #5
 8006210:	f003 0207 	and.w	r2, r3, #7
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4442      	add	r2, r8
 800621a:	609a      	str	r2, [r3, #8]
 800621c:	e26f      	b.n	80066fe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800621e:	f7fe ff53 	bl	80050c8 <HAL_RCC_GetPCLK1Freq>
 8006222:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	461d      	mov	r5, r3
 8006228:	f04f 0600 	mov.w	r6, #0
 800622c:	46a8      	mov	r8, r5
 800622e:	46b1      	mov	r9, r6
 8006230:	eb18 0308 	adds.w	r3, r8, r8
 8006234:	eb49 0409 	adc.w	r4, r9, r9
 8006238:	4698      	mov	r8, r3
 800623a:	46a1      	mov	r9, r4
 800623c:	eb18 0805 	adds.w	r8, r8, r5
 8006240:	eb49 0906 	adc.w	r9, r9, r6
 8006244:	f04f 0100 	mov.w	r1, #0
 8006248:	f04f 0200 	mov.w	r2, #0
 800624c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006250:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006254:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006258:	4688      	mov	r8, r1
 800625a:	4691      	mov	r9, r2
 800625c:	eb18 0005 	adds.w	r0, r8, r5
 8006260:	eb49 0106 	adc.w	r1, r9, r6
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	461d      	mov	r5, r3
 800626a:	f04f 0600 	mov.w	r6, #0
 800626e:	196b      	adds	r3, r5, r5
 8006270:	eb46 0406 	adc.w	r4, r6, r6
 8006274:	461a      	mov	r2, r3
 8006276:	4623      	mov	r3, r4
 8006278:	f7f9 ffb2 	bl	80001e0 <__aeabi_uldivmod>
 800627c:	4603      	mov	r3, r0
 800627e:	460c      	mov	r4, r1
 8006280:	461a      	mov	r2, r3
 8006282:	4b47      	ldr	r3, [pc, #284]	; (80063a0 <UART_SetConfig+0x384>)
 8006284:	fba3 2302 	umull	r2, r3, r3, r2
 8006288:	095b      	lsrs	r3, r3, #5
 800628a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	461d      	mov	r5, r3
 8006292:	f04f 0600 	mov.w	r6, #0
 8006296:	46a9      	mov	r9, r5
 8006298:	46b2      	mov	sl, r6
 800629a:	eb19 0309 	adds.w	r3, r9, r9
 800629e:	eb4a 040a 	adc.w	r4, sl, sl
 80062a2:	4699      	mov	r9, r3
 80062a4:	46a2      	mov	sl, r4
 80062a6:	eb19 0905 	adds.w	r9, r9, r5
 80062aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80062ae:	f04f 0100 	mov.w	r1, #0
 80062b2:	f04f 0200 	mov.w	r2, #0
 80062b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062c2:	4689      	mov	r9, r1
 80062c4:	4692      	mov	sl, r2
 80062c6:	eb19 0005 	adds.w	r0, r9, r5
 80062ca:	eb4a 0106 	adc.w	r1, sl, r6
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	461d      	mov	r5, r3
 80062d4:	f04f 0600 	mov.w	r6, #0
 80062d8:	196b      	adds	r3, r5, r5
 80062da:	eb46 0406 	adc.w	r4, r6, r6
 80062de:	461a      	mov	r2, r3
 80062e0:	4623      	mov	r3, r4
 80062e2:	f7f9 ff7d 	bl	80001e0 <__aeabi_uldivmod>
 80062e6:	4603      	mov	r3, r0
 80062e8:	460c      	mov	r4, r1
 80062ea:	461a      	mov	r2, r3
 80062ec:	4b2c      	ldr	r3, [pc, #176]	; (80063a0 <UART_SetConfig+0x384>)
 80062ee:	fba3 1302 	umull	r1, r3, r3, r2
 80062f2:	095b      	lsrs	r3, r3, #5
 80062f4:	2164      	movs	r1, #100	; 0x64
 80062f6:	fb01 f303 	mul.w	r3, r1, r3
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	00db      	lsls	r3, r3, #3
 80062fe:	3332      	adds	r3, #50	; 0x32
 8006300:	4a27      	ldr	r2, [pc, #156]	; (80063a0 <UART_SetConfig+0x384>)
 8006302:	fba2 2303 	umull	r2, r3, r2, r3
 8006306:	095b      	lsrs	r3, r3, #5
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800630e:	4498      	add	r8, r3
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	461d      	mov	r5, r3
 8006314:	f04f 0600 	mov.w	r6, #0
 8006318:	46a9      	mov	r9, r5
 800631a:	46b2      	mov	sl, r6
 800631c:	eb19 0309 	adds.w	r3, r9, r9
 8006320:	eb4a 040a 	adc.w	r4, sl, sl
 8006324:	4699      	mov	r9, r3
 8006326:	46a2      	mov	sl, r4
 8006328:	eb19 0905 	adds.w	r9, r9, r5
 800632c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006330:	f04f 0100 	mov.w	r1, #0
 8006334:	f04f 0200 	mov.w	r2, #0
 8006338:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800633c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006340:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006344:	4689      	mov	r9, r1
 8006346:	4692      	mov	sl, r2
 8006348:	eb19 0005 	adds.w	r0, r9, r5
 800634c:	eb4a 0106 	adc.w	r1, sl, r6
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	461d      	mov	r5, r3
 8006356:	f04f 0600 	mov.w	r6, #0
 800635a:	196b      	adds	r3, r5, r5
 800635c:	eb46 0406 	adc.w	r4, r6, r6
 8006360:	461a      	mov	r2, r3
 8006362:	4623      	mov	r3, r4
 8006364:	f7f9 ff3c 	bl	80001e0 <__aeabi_uldivmod>
 8006368:	4603      	mov	r3, r0
 800636a:	460c      	mov	r4, r1
 800636c:	461a      	mov	r2, r3
 800636e:	4b0c      	ldr	r3, [pc, #48]	; (80063a0 <UART_SetConfig+0x384>)
 8006370:	fba3 1302 	umull	r1, r3, r3, r2
 8006374:	095b      	lsrs	r3, r3, #5
 8006376:	2164      	movs	r1, #100	; 0x64
 8006378:	fb01 f303 	mul.w	r3, r1, r3
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	00db      	lsls	r3, r3, #3
 8006380:	3332      	adds	r3, #50	; 0x32
 8006382:	4a07      	ldr	r2, [pc, #28]	; (80063a0 <UART_SetConfig+0x384>)
 8006384:	fba2 2303 	umull	r2, r3, r2, r3
 8006388:	095b      	lsrs	r3, r3, #5
 800638a:	f003 0207 	and.w	r2, r3, #7
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4442      	add	r2, r8
 8006394:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006396:	e1b2      	b.n	80066fe <UART_SetConfig+0x6e2>
 8006398:	40011000 	.word	0x40011000
 800639c:	40011400 	.word	0x40011400
 80063a0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4ad7      	ldr	r2, [pc, #860]	; (8006708 <UART_SetConfig+0x6ec>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d005      	beq.n	80063ba <UART_SetConfig+0x39e>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4ad6      	ldr	r2, [pc, #856]	; (800670c <UART_SetConfig+0x6f0>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	f040 80d1 	bne.w	800655c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80063ba:	f7fe fe99 	bl	80050f0 <HAL_RCC_GetPCLK2Freq>
 80063be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	469a      	mov	sl, r3
 80063c4:	f04f 0b00 	mov.w	fp, #0
 80063c8:	46d0      	mov	r8, sl
 80063ca:	46d9      	mov	r9, fp
 80063cc:	eb18 0308 	adds.w	r3, r8, r8
 80063d0:	eb49 0409 	adc.w	r4, r9, r9
 80063d4:	4698      	mov	r8, r3
 80063d6:	46a1      	mov	r9, r4
 80063d8:	eb18 080a 	adds.w	r8, r8, sl
 80063dc:	eb49 090b 	adc.w	r9, r9, fp
 80063e0:	f04f 0100 	mov.w	r1, #0
 80063e4:	f04f 0200 	mov.w	r2, #0
 80063e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80063ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80063f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80063f4:	4688      	mov	r8, r1
 80063f6:	4691      	mov	r9, r2
 80063f8:	eb1a 0508 	adds.w	r5, sl, r8
 80063fc:	eb4b 0609 	adc.w	r6, fp, r9
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	4619      	mov	r1, r3
 8006406:	f04f 0200 	mov.w	r2, #0
 800640a:	f04f 0300 	mov.w	r3, #0
 800640e:	f04f 0400 	mov.w	r4, #0
 8006412:	0094      	lsls	r4, r2, #2
 8006414:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006418:	008b      	lsls	r3, r1, #2
 800641a:	461a      	mov	r2, r3
 800641c:	4623      	mov	r3, r4
 800641e:	4628      	mov	r0, r5
 8006420:	4631      	mov	r1, r6
 8006422:	f7f9 fedd 	bl	80001e0 <__aeabi_uldivmod>
 8006426:	4603      	mov	r3, r0
 8006428:	460c      	mov	r4, r1
 800642a:	461a      	mov	r2, r3
 800642c:	4bb8      	ldr	r3, [pc, #736]	; (8006710 <UART_SetConfig+0x6f4>)
 800642e:	fba3 2302 	umull	r2, r3, r3, r2
 8006432:	095b      	lsrs	r3, r3, #5
 8006434:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	469b      	mov	fp, r3
 800643c:	f04f 0c00 	mov.w	ip, #0
 8006440:	46d9      	mov	r9, fp
 8006442:	46e2      	mov	sl, ip
 8006444:	eb19 0309 	adds.w	r3, r9, r9
 8006448:	eb4a 040a 	adc.w	r4, sl, sl
 800644c:	4699      	mov	r9, r3
 800644e:	46a2      	mov	sl, r4
 8006450:	eb19 090b 	adds.w	r9, r9, fp
 8006454:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006458:	f04f 0100 	mov.w	r1, #0
 800645c:	f04f 0200 	mov.w	r2, #0
 8006460:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006464:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006468:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800646c:	4689      	mov	r9, r1
 800646e:	4692      	mov	sl, r2
 8006470:	eb1b 0509 	adds.w	r5, fp, r9
 8006474:	eb4c 060a 	adc.w	r6, ip, sl
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	4619      	mov	r1, r3
 800647e:	f04f 0200 	mov.w	r2, #0
 8006482:	f04f 0300 	mov.w	r3, #0
 8006486:	f04f 0400 	mov.w	r4, #0
 800648a:	0094      	lsls	r4, r2, #2
 800648c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006490:	008b      	lsls	r3, r1, #2
 8006492:	461a      	mov	r2, r3
 8006494:	4623      	mov	r3, r4
 8006496:	4628      	mov	r0, r5
 8006498:	4631      	mov	r1, r6
 800649a:	f7f9 fea1 	bl	80001e0 <__aeabi_uldivmod>
 800649e:	4603      	mov	r3, r0
 80064a0:	460c      	mov	r4, r1
 80064a2:	461a      	mov	r2, r3
 80064a4:	4b9a      	ldr	r3, [pc, #616]	; (8006710 <UART_SetConfig+0x6f4>)
 80064a6:	fba3 1302 	umull	r1, r3, r3, r2
 80064aa:	095b      	lsrs	r3, r3, #5
 80064ac:	2164      	movs	r1, #100	; 0x64
 80064ae:	fb01 f303 	mul.w	r3, r1, r3
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	3332      	adds	r3, #50	; 0x32
 80064b8:	4a95      	ldr	r2, [pc, #596]	; (8006710 <UART_SetConfig+0x6f4>)
 80064ba:	fba2 2303 	umull	r2, r3, r2, r3
 80064be:	095b      	lsrs	r3, r3, #5
 80064c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064c4:	4498      	add	r8, r3
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	469b      	mov	fp, r3
 80064ca:	f04f 0c00 	mov.w	ip, #0
 80064ce:	46d9      	mov	r9, fp
 80064d0:	46e2      	mov	sl, ip
 80064d2:	eb19 0309 	adds.w	r3, r9, r9
 80064d6:	eb4a 040a 	adc.w	r4, sl, sl
 80064da:	4699      	mov	r9, r3
 80064dc:	46a2      	mov	sl, r4
 80064de:	eb19 090b 	adds.w	r9, r9, fp
 80064e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80064e6:	f04f 0100 	mov.w	r1, #0
 80064ea:	f04f 0200 	mov.w	r2, #0
 80064ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064fa:	4689      	mov	r9, r1
 80064fc:	4692      	mov	sl, r2
 80064fe:	eb1b 0509 	adds.w	r5, fp, r9
 8006502:	eb4c 060a 	adc.w	r6, ip, sl
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	4619      	mov	r1, r3
 800650c:	f04f 0200 	mov.w	r2, #0
 8006510:	f04f 0300 	mov.w	r3, #0
 8006514:	f04f 0400 	mov.w	r4, #0
 8006518:	0094      	lsls	r4, r2, #2
 800651a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800651e:	008b      	lsls	r3, r1, #2
 8006520:	461a      	mov	r2, r3
 8006522:	4623      	mov	r3, r4
 8006524:	4628      	mov	r0, r5
 8006526:	4631      	mov	r1, r6
 8006528:	f7f9 fe5a 	bl	80001e0 <__aeabi_uldivmod>
 800652c:	4603      	mov	r3, r0
 800652e:	460c      	mov	r4, r1
 8006530:	461a      	mov	r2, r3
 8006532:	4b77      	ldr	r3, [pc, #476]	; (8006710 <UART_SetConfig+0x6f4>)
 8006534:	fba3 1302 	umull	r1, r3, r3, r2
 8006538:	095b      	lsrs	r3, r3, #5
 800653a:	2164      	movs	r1, #100	; 0x64
 800653c:	fb01 f303 	mul.w	r3, r1, r3
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	011b      	lsls	r3, r3, #4
 8006544:	3332      	adds	r3, #50	; 0x32
 8006546:	4a72      	ldr	r2, [pc, #456]	; (8006710 <UART_SetConfig+0x6f4>)
 8006548:	fba2 2303 	umull	r2, r3, r2, r3
 800654c:	095b      	lsrs	r3, r3, #5
 800654e:	f003 020f 	and.w	r2, r3, #15
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4442      	add	r2, r8
 8006558:	609a      	str	r2, [r3, #8]
 800655a:	e0d0      	b.n	80066fe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800655c:	f7fe fdb4 	bl	80050c8 <HAL_RCC_GetPCLK1Freq>
 8006560:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	469a      	mov	sl, r3
 8006566:	f04f 0b00 	mov.w	fp, #0
 800656a:	46d0      	mov	r8, sl
 800656c:	46d9      	mov	r9, fp
 800656e:	eb18 0308 	adds.w	r3, r8, r8
 8006572:	eb49 0409 	adc.w	r4, r9, r9
 8006576:	4698      	mov	r8, r3
 8006578:	46a1      	mov	r9, r4
 800657a:	eb18 080a 	adds.w	r8, r8, sl
 800657e:	eb49 090b 	adc.w	r9, r9, fp
 8006582:	f04f 0100 	mov.w	r1, #0
 8006586:	f04f 0200 	mov.w	r2, #0
 800658a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800658e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006592:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006596:	4688      	mov	r8, r1
 8006598:	4691      	mov	r9, r2
 800659a:	eb1a 0508 	adds.w	r5, sl, r8
 800659e:	eb4b 0609 	adc.w	r6, fp, r9
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	4619      	mov	r1, r3
 80065a8:	f04f 0200 	mov.w	r2, #0
 80065ac:	f04f 0300 	mov.w	r3, #0
 80065b0:	f04f 0400 	mov.w	r4, #0
 80065b4:	0094      	lsls	r4, r2, #2
 80065b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80065ba:	008b      	lsls	r3, r1, #2
 80065bc:	461a      	mov	r2, r3
 80065be:	4623      	mov	r3, r4
 80065c0:	4628      	mov	r0, r5
 80065c2:	4631      	mov	r1, r6
 80065c4:	f7f9 fe0c 	bl	80001e0 <__aeabi_uldivmod>
 80065c8:	4603      	mov	r3, r0
 80065ca:	460c      	mov	r4, r1
 80065cc:	461a      	mov	r2, r3
 80065ce:	4b50      	ldr	r3, [pc, #320]	; (8006710 <UART_SetConfig+0x6f4>)
 80065d0:	fba3 2302 	umull	r2, r3, r3, r2
 80065d4:	095b      	lsrs	r3, r3, #5
 80065d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	469b      	mov	fp, r3
 80065de:	f04f 0c00 	mov.w	ip, #0
 80065e2:	46d9      	mov	r9, fp
 80065e4:	46e2      	mov	sl, ip
 80065e6:	eb19 0309 	adds.w	r3, r9, r9
 80065ea:	eb4a 040a 	adc.w	r4, sl, sl
 80065ee:	4699      	mov	r9, r3
 80065f0:	46a2      	mov	sl, r4
 80065f2:	eb19 090b 	adds.w	r9, r9, fp
 80065f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80065fa:	f04f 0100 	mov.w	r1, #0
 80065fe:	f04f 0200 	mov.w	r2, #0
 8006602:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006606:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800660a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800660e:	4689      	mov	r9, r1
 8006610:	4692      	mov	sl, r2
 8006612:	eb1b 0509 	adds.w	r5, fp, r9
 8006616:	eb4c 060a 	adc.w	r6, ip, sl
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	4619      	mov	r1, r3
 8006620:	f04f 0200 	mov.w	r2, #0
 8006624:	f04f 0300 	mov.w	r3, #0
 8006628:	f04f 0400 	mov.w	r4, #0
 800662c:	0094      	lsls	r4, r2, #2
 800662e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006632:	008b      	lsls	r3, r1, #2
 8006634:	461a      	mov	r2, r3
 8006636:	4623      	mov	r3, r4
 8006638:	4628      	mov	r0, r5
 800663a:	4631      	mov	r1, r6
 800663c:	f7f9 fdd0 	bl	80001e0 <__aeabi_uldivmod>
 8006640:	4603      	mov	r3, r0
 8006642:	460c      	mov	r4, r1
 8006644:	461a      	mov	r2, r3
 8006646:	4b32      	ldr	r3, [pc, #200]	; (8006710 <UART_SetConfig+0x6f4>)
 8006648:	fba3 1302 	umull	r1, r3, r3, r2
 800664c:	095b      	lsrs	r3, r3, #5
 800664e:	2164      	movs	r1, #100	; 0x64
 8006650:	fb01 f303 	mul.w	r3, r1, r3
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	3332      	adds	r3, #50	; 0x32
 800665a:	4a2d      	ldr	r2, [pc, #180]	; (8006710 <UART_SetConfig+0x6f4>)
 800665c:	fba2 2303 	umull	r2, r3, r2, r3
 8006660:	095b      	lsrs	r3, r3, #5
 8006662:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006666:	4498      	add	r8, r3
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	469b      	mov	fp, r3
 800666c:	f04f 0c00 	mov.w	ip, #0
 8006670:	46d9      	mov	r9, fp
 8006672:	46e2      	mov	sl, ip
 8006674:	eb19 0309 	adds.w	r3, r9, r9
 8006678:	eb4a 040a 	adc.w	r4, sl, sl
 800667c:	4699      	mov	r9, r3
 800667e:	46a2      	mov	sl, r4
 8006680:	eb19 090b 	adds.w	r9, r9, fp
 8006684:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006688:	f04f 0100 	mov.w	r1, #0
 800668c:	f04f 0200 	mov.w	r2, #0
 8006690:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006694:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006698:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800669c:	4689      	mov	r9, r1
 800669e:	4692      	mov	sl, r2
 80066a0:	eb1b 0509 	adds.w	r5, fp, r9
 80066a4:	eb4c 060a 	adc.w	r6, ip, sl
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	4619      	mov	r1, r3
 80066ae:	f04f 0200 	mov.w	r2, #0
 80066b2:	f04f 0300 	mov.w	r3, #0
 80066b6:	f04f 0400 	mov.w	r4, #0
 80066ba:	0094      	lsls	r4, r2, #2
 80066bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066c0:	008b      	lsls	r3, r1, #2
 80066c2:	461a      	mov	r2, r3
 80066c4:	4623      	mov	r3, r4
 80066c6:	4628      	mov	r0, r5
 80066c8:	4631      	mov	r1, r6
 80066ca:	f7f9 fd89 	bl	80001e0 <__aeabi_uldivmod>
 80066ce:	4603      	mov	r3, r0
 80066d0:	460c      	mov	r4, r1
 80066d2:	461a      	mov	r2, r3
 80066d4:	4b0e      	ldr	r3, [pc, #56]	; (8006710 <UART_SetConfig+0x6f4>)
 80066d6:	fba3 1302 	umull	r1, r3, r3, r2
 80066da:	095b      	lsrs	r3, r3, #5
 80066dc:	2164      	movs	r1, #100	; 0x64
 80066de:	fb01 f303 	mul.w	r3, r1, r3
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	011b      	lsls	r3, r3, #4
 80066e6:	3332      	adds	r3, #50	; 0x32
 80066e8:	4a09      	ldr	r2, [pc, #36]	; (8006710 <UART_SetConfig+0x6f4>)
 80066ea:	fba2 2303 	umull	r2, r3, r2, r3
 80066ee:	095b      	lsrs	r3, r3, #5
 80066f0:	f003 020f 	and.w	r2, r3, #15
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4442      	add	r2, r8
 80066fa:	609a      	str	r2, [r3, #8]
}
 80066fc:	e7ff      	b.n	80066fe <UART_SetConfig+0x6e2>
 80066fe:	bf00      	nop
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006708:	40011000 	.word	0x40011000
 800670c:	40011400 	.word	0x40011400
 8006710:	51eb851f 	.word	0x51eb851f

08006714 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006714:	b084      	sub	sp, #16
 8006716:	b580      	push	{r7, lr}
 8006718:	b084      	sub	sp, #16
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	f107 001c 	add.w	r0, r7, #28
 8006722:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006728:	2b01      	cmp	r3, #1
 800672a:	d122      	bne.n	8006772 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006730:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006756:	2b01      	cmp	r3, #1
 8006758:	d105      	bne.n	8006766 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f94a 	bl	8006a00 <USB_CoreReset>
 800676c:	4603      	mov	r3, r0
 800676e:	73fb      	strb	r3, [r7, #15]
 8006770:	e01a      	b.n	80067a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f93e 	bl	8006a00 <USB_CoreReset>
 8006784:	4603      	mov	r3, r0
 8006786:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800678a:	2b00      	cmp	r3, #0
 800678c:	d106      	bne.n	800679c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006792:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	639a      	str	r2, [r3, #56]	; 0x38
 800679a:	e005      	b.n	80067a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d10b      	bne.n	80067c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f043 0206 	orr.w	r2, r3, #6
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f043 0220 	orr.w	r2, r3, #32
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067d2:	b004      	add	sp, #16
 80067d4:	4770      	bx	lr

080067d6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f043 0201 	orr.w	r2, r3, #1
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f023 0201 	bic.w	r2, r3, #1
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b082      	sub	sp, #8
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	460b      	mov	r3, r1
 8006824:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006832:	78fb      	ldrb	r3, [r7, #3]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d106      	bne.n	8006846 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	60da      	str	r2, [r3, #12]
 8006844:	e00b      	b.n	800685e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006846:	78fb      	ldrb	r3, [r7, #3]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d106      	bne.n	800685a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	60da      	str	r2, [r3, #12]
 8006858:	e001      	b.n	800685e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e003      	b.n	8006866 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800685e:	2032      	movs	r0, #50	; 0x32
 8006860:	f7fb fa02 	bl	8001c68 <HAL_Delay>

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
	...

08006870 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	019b      	lsls	r3, r3, #6
 8006882:	f043 0220 	orr.w	r2, r3, #32
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	3301      	adds	r3, #1
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	4a09      	ldr	r2, [pc, #36]	; (80068b8 <USB_FlushTxFifo+0x48>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d901      	bls.n	800689c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e006      	b.n	80068aa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	f003 0320 	and.w	r3, r3, #32
 80068a4:	2b20      	cmp	r3, #32
 80068a6:	d0f0      	beq.n	800688a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	00030d40 	.word	0x00030d40

080068bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80068c4:	2300      	movs	r3, #0
 80068c6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2210      	movs	r2, #16
 80068cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3301      	adds	r3, #1
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4a09      	ldr	r2, [pc, #36]	; (80068fc <USB_FlushRxFifo+0x40>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d901      	bls.n	80068e0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e006      	b.n	80068ee <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	f003 0310 	and.w	r3, r3, #16
 80068e8:	2b10      	cmp	r3, #16
 80068ea:	d0f0      	beq.n	80068ce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	00030d40 	.word	0x00030d40

08006900 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006900:	b480      	push	{r7}
 8006902:	b089      	sub	sp, #36	; 0x24
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	4611      	mov	r1, r2
 800690c:	461a      	mov	r2, r3
 800690e:	460b      	mov	r3, r1
 8006910:	71fb      	strb	r3, [r7, #7]
 8006912:	4613      	mov	r3, r2
 8006914:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800691e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006922:	2b00      	cmp	r3, #0
 8006924:	d11a      	bne.n	800695c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006926:	88bb      	ldrh	r3, [r7, #4]
 8006928:	3303      	adds	r3, #3
 800692a:	089b      	lsrs	r3, r3, #2
 800692c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800692e:	2300      	movs	r3, #0
 8006930:	61bb      	str	r3, [r7, #24]
 8006932:	e00f      	b.n	8006954 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006934:	79fb      	ldrb	r3, [r7, #7]
 8006936:	031a      	lsls	r2, r3, #12
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	4413      	add	r3, r2
 800693c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006940:	461a      	mov	r2, r3
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	3304      	adds	r3, #4
 800694c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	3301      	adds	r3, #1
 8006952:	61bb      	str	r3, [r7, #24]
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	429a      	cmp	r2, r3
 800695a:	d3eb      	bcc.n	8006934 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3724      	adds	r7, #36	; 0x24
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800696a:	b480      	push	{r7}
 800696c:	b089      	sub	sp, #36	; 0x24
 800696e:	af00      	add	r7, sp, #0
 8006970:	60f8      	str	r0, [r7, #12]
 8006972:	60b9      	str	r1, [r7, #8]
 8006974:	4613      	mov	r3, r2
 8006976:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006980:	88fb      	ldrh	r3, [r7, #6]
 8006982:	3303      	adds	r3, #3
 8006984:	089b      	lsrs	r3, r3, #2
 8006986:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006988:	2300      	movs	r3, #0
 800698a:	61bb      	str	r3, [r7, #24]
 800698c:	e00b      	b.n	80069a6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	601a      	str	r2, [r3, #0]
    pDest++;
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	3304      	adds	r3, #4
 800699e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	3301      	adds	r3, #1
 80069a4:	61bb      	str	r3, [r7, #24]
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d3ef      	bcc.n	800698e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80069ae:	69fb      	ldr	r3, [r7, #28]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3724      	adds	r7, #36	; 0x24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	4013      	ands	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80069d4:	68fb      	ldr	r3, [r7, #12]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b083      	sub	sp, #12
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	f003 0301 	and.w	r3, r3, #1
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
	...

08006a00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	60fb      	str	r3, [r7, #12]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4a13      	ldr	r2, [pc, #76]	; (8006a64 <USB_CoreReset+0x64>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d901      	bls.n	8006a1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e01b      	b.n	8006a56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	daf2      	bge.n	8006a0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a26:	2300      	movs	r3, #0
 8006a28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f043 0201 	orr.w	r2, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4a09      	ldr	r2, [pc, #36]	; (8006a64 <USB_CoreReset+0x64>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d901      	bls.n	8006a48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e006      	b.n	8006a56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d0f0      	beq.n	8006a36 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	00030d40 	.word	0x00030d40

08006a68 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a68:	b084      	sub	sp, #16
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	f107 001c 	add.w	r0, r7, #28
 8006a76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a84:	461a      	mov	r2, r3
 8006a86:	2300      	movs	r3, #0
 8006a88:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d018      	beq.n	8006aec <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d10a      	bne.n	8006ad6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ace:	f043 0304 	orr.w	r3, r3, #4
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	e014      	b.n	8006b00 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ae4:	f023 0304 	bic.w	r3, r3, #4
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	e009      	b.n	8006b00 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006afa:	f023 0304 	bic.w	r3, r3, #4
 8006afe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006b00:	2110      	movs	r1, #16
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7ff feb4 	bl	8006870 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7ff fed7 	bl	80068bc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60fb      	str	r3, [r7, #12]
 8006b12:	e015      	b.n	8006b40 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b20:	461a      	mov	r2, r3
 8006b22:	f04f 33ff 	mov.w	r3, #4294967295
 8006b26:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b34:	461a      	mov	r2, r3
 8006b36:	2300      	movs	r3, #0
 8006b38:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d3e5      	bcc.n	8006b14 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006b48:	2101      	movs	r1, #1
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f8ac 	bl	8006ca8 <USB_DriveVbus>

  HAL_Delay(200U);
 8006b50:	20c8      	movs	r0, #200	; 0xc8
 8006b52:	f7fb f889 	bl	8001c68 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b62:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00b      	beq.n	8006b88 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b76:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a14      	ldr	r2, [pc, #80]	; (8006bcc <USB_HostInit+0x164>)
 8006b7c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a13      	ldr	r2, [pc, #76]	; (8006bd0 <USB_HostInit+0x168>)
 8006b82:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006b86:	e009      	b.n	8006b9c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2280      	movs	r2, #128	; 0x80
 8006b8c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a10      	ldr	r2, [pc, #64]	; (8006bd4 <USB_HostInit+0x16c>)
 8006b92:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a10      	ldr	r2, [pc, #64]	; (8006bd8 <USB_HostInit+0x170>)
 8006b98:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d105      	bne.n	8006bae <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	f043 0210 	orr.w	r2, r3, #16
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	699a      	ldr	r2, [r3, #24]
 8006bb2:	4b0a      	ldr	r3, [pc, #40]	; (8006bdc <USB_HostInit+0x174>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bc6:	b004      	add	sp, #16
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	01000200 	.word	0x01000200
 8006bd0:	00e00300 	.word	0x00e00300
 8006bd4:	00600080 	.word	0x00600080
 8006bd8:	004000e0 	.word	0x004000e0
 8006bdc:	a3200008 	.word	0xa3200008

08006be0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006bfe:	f023 0303 	bic.w	r3, r3, #3
 8006c02:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	78fb      	ldrb	r3, [r7, #3]
 8006c0e:	f003 0303 	and.w	r3, r3, #3
 8006c12:	68f9      	ldr	r1, [r7, #12]
 8006c14:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006c1c:	78fb      	ldrb	r3, [r7, #3]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d107      	bne.n	8006c32 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c28:	461a      	mov	r2, r3
 8006c2a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006c2e:	6053      	str	r3, [r2, #4]
 8006c30:	e009      	b.n	8006c46 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006c32:	78fb      	ldrb	r3, [r7, #3]
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d106      	bne.n	8006c46 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c3e:	461a      	mov	r2, r3
 8006c40:	f241 7370 	movw	r3, #6000	; 0x1770
 8006c44:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006c74:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c82:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006c84:	2064      	movs	r0, #100	; 0x64
 8006c86:	f7fa ffef 	bl	8001c68 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c96:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006c98:	200a      	movs	r0, #10
 8006c9a:	f7fa ffe5 	bl	8001c68 <HAL_Delay>

  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006ccc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d109      	bne.n	8006cec <USB_DriveVbus+0x44>
 8006cd8:	78fb      	ldrb	r3, [r7, #3]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d106      	bne.n	8006cec <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ce6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006cea:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf6:	d109      	bne.n	8006d0c <USB_DriveVbus+0x64>
 8006cf8:	78fb      	ldrb	r3, [r7, #3]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d106      	bne.n	8006d0c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006d06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d0a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b085      	sub	sp, #20
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	0c5b      	lsrs	r3, r3, #17
 8006d38:	f003 0303 	and.w	r3, r3, #3
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	b29b      	uxth	r3, r3
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
	...

08006d6c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	4608      	mov	r0, r1
 8006d76:	4611      	mov	r1, r2
 8006d78:	461a      	mov	r2, r3
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	70fb      	strb	r3, [r7, #3]
 8006d7e:	460b      	mov	r3, r1
 8006d80:	70bb      	strb	r3, [r7, #2]
 8006d82:	4613      	mov	r3, r2
 8006d84:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006d8e:	78fb      	ldrb	r3, [r7, #3]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006da0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006da2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006da6:	2b03      	cmp	r3, #3
 8006da8:	d87e      	bhi.n	8006ea8 <USB_HC_Init+0x13c>
 8006daa:	a201      	add	r2, pc, #4	; (adr r2, 8006db0 <USB_HC_Init+0x44>)
 8006dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db0:	08006dc1 	.word	0x08006dc1
 8006db4:	08006e6b 	.word	0x08006e6b
 8006db8:	08006dc1 	.word	0x08006dc1
 8006dbc:	08006e2d 	.word	0x08006e2d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006dc0:	78fb      	ldrb	r3, [r7, #3]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dcc:	461a      	mov	r2, r3
 8006dce:	f240 439d 	movw	r3, #1181	; 0x49d
 8006dd2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006dd4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	da10      	bge.n	8006dfe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006ddc:	78fb      	ldrb	r3, [r7, #3]
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	78fa      	ldrb	r2, [r7, #3]
 8006dec:	0151      	lsls	r1, r2, #5
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	440a      	add	r2, r1
 8006df2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dfa:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006dfc:	e057      	b.n	8006eae <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d051      	beq.n	8006eae <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006e0a:	78fb      	ldrb	r3, [r7, #3]
 8006e0c:	015a      	lsls	r2, r3, #5
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	4413      	add	r3, r2
 8006e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	78fa      	ldrb	r2, [r7, #3]
 8006e1a:	0151      	lsls	r1, r2, #5
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	440a      	add	r2, r1
 8006e20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e24:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006e28:	60d3      	str	r3, [r2, #12]
      break;
 8006e2a:	e040      	b.n	8006eae <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e2c:	78fb      	ldrb	r3, [r7, #3]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e38:	461a      	mov	r2, r3
 8006e3a:	f240 639d 	movw	r3, #1693	; 0x69d
 8006e3e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006e40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	da34      	bge.n	8006eb2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006e48:	78fb      	ldrb	r3, [r7, #3]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	78fa      	ldrb	r2, [r7, #3]
 8006e58:	0151      	lsls	r1, r2, #5
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	440a      	add	r2, r1
 8006e5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e66:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006e68:	e023      	b.n	8006eb2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e6a:	78fb      	ldrb	r3, [r7, #3]
 8006e6c:	015a      	lsls	r2, r3, #5
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e76:	461a      	mov	r2, r3
 8006e78:	f240 2325 	movw	r3, #549	; 0x225
 8006e7c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006e7e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	da17      	bge.n	8006eb6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006e86:	78fb      	ldrb	r3, [r7, #3]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	78fa      	ldrb	r2, [r7, #3]
 8006e96:	0151      	lsls	r1, r2, #5
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	440a      	add	r2, r1
 8006e9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ea0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006ea4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006ea6:	e006      	b.n	8006eb6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8006eac:	e004      	b.n	8006eb8 <USB_HC_Init+0x14c>
      break;
 8006eae:	bf00      	nop
 8006eb0:	e002      	b.n	8006eb8 <USB_HC_Init+0x14c>
      break;
 8006eb2:	bf00      	nop
 8006eb4:	e000      	b.n	8006eb8 <USB_HC_Init+0x14c>
      break;
 8006eb6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ebe:	699a      	ldr	r2, [r3, #24]
 8006ec0:	78fb      	ldrb	r3, [r7, #3]
 8006ec2:	f003 030f 	and.w	r3, r3, #15
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8006ecc:	68b9      	ldr	r1, [r7, #8]
 8006ece:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006ee2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	da03      	bge.n	8006ef2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eee:	613b      	str	r3, [r7, #16]
 8006ef0:	e001      	b.n	8006ef6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006ef6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d103      	bne.n	8006f06 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006efe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	e001      	b.n	8006f0a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f0a:	787b      	ldrb	r3, [r7, #1]
 8006f0c:	059b      	lsls	r3, r3, #22
 8006f0e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006f12:	78bb      	ldrb	r3, [r7, #2]
 8006f14:	02db      	lsls	r3, r3, #11
 8006f16:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f1a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006f1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006f20:	049b      	lsls	r3, r3, #18
 8006f22:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006f26:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006f2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006f2e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f34:	78fb      	ldrb	r3, [r7, #3]
 8006f36:	0159      	lsls	r1, r3, #5
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	440b      	add	r3, r1
 8006f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f40:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f46:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006f48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006f4c:	2b03      	cmp	r3, #3
 8006f4e:	d10f      	bne.n	8006f70 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006f50:	78fb      	ldrb	r3, [r7, #3]
 8006f52:	015a      	lsls	r2, r3, #5
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	4413      	add	r3, r2
 8006f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	78fa      	ldrb	r2, [r7, #3]
 8006f60:	0151      	lsls	r1, r2, #5
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	440a      	add	r2, r1
 8006f66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f6e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	371c      	adds	r7, #28
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop

08006f80 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08c      	sub	sp, #48	; 0x30
 8006f84:	af02      	add	r7, sp, #8
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	785b      	ldrb	r3, [r3, #1]
 8006f96:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f9c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d028      	beq.n	8006ffc <USB_HC_StartXfer+0x7c>
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	791b      	ldrb	r3, [r3, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d124      	bne.n	8006ffc <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006fb2:	79fb      	ldrb	r3, [r7, #7]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10b      	bne.n	8006fd0 <USB_HC_StartXfer+0x50>
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	795b      	ldrb	r3, [r3, #5]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d107      	bne.n	8006fd0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	785b      	ldrb	r3, [r3, #1]
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f000 fa30 	bl	800742c <USB_DoPing>
      return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	e114      	b.n	80071fa <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8006fd0:	79fb      	ldrb	r3, [r7, #7]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d112      	bne.n	8006ffc <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	015a      	lsls	r2, r3, #5
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	4413      	add	r3, r2
 8006fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	69fa      	ldr	r2, [r7, #28]
 8006fe6:	0151      	lsls	r1, r2, #5
 8006fe8:	6a3a      	ldr	r2, [r7, #32]
 8006fea:	440a      	add	r2, r1
 8006fec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ff0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006ff4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d018      	beq.n	8007036 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	8912      	ldrh	r2, [r2, #8]
 800700c:	4413      	add	r3, r2
 800700e:	3b01      	subs	r3, #1
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	8912      	ldrh	r2, [r2, #8]
 8007014:	fbb3 f3f2 	udiv	r3, r3, r2
 8007018:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800701a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800701c:	8b7b      	ldrh	r3, [r7, #26]
 800701e:	429a      	cmp	r2, r3
 8007020:	d90b      	bls.n	800703a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8007022:	8b7b      	ldrh	r3, [r7, #26]
 8007024:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007026:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	8912      	ldrh	r2, [r2, #8]
 800702c:	fb02 f203 	mul.w	r2, r2, r3
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	611a      	str	r2, [r3, #16]
 8007034:	e001      	b.n	800703a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8007036:	2301      	movs	r3, #1
 8007038:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	78db      	ldrb	r3, [r3, #3]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d006      	beq.n	8007050 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007042:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	8912      	ldrh	r2, [r2, #8]
 8007048:	fb02 f203 	mul.w	r2, r2, r3
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007058:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800705a:	04d9      	lsls	r1, r3, #19
 800705c:	4b69      	ldr	r3, [pc, #420]	; (8007204 <USB_HC_StartXfer+0x284>)
 800705e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007060:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	7a9b      	ldrb	r3, [r3, #10]
 8007066:	075b      	lsls	r3, r3, #29
 8007068:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800706c:	69f9      	ldr	r1, [r7, #28]
 800706e:	0148      	lsls	r0, r1, #5
 8007070:	6a39      	ldr	r1, [r7, #32]
 8007072:	4401      	add	r1, r0
 8007074:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007078:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800707a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800707c:	79fb      	ldrb	r3, [r7, #7]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d009      	beq.n	8007096 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	68d9      	ldr	r1, [r3, #12]
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	4413      	add	r3, r2
 800708e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007092:	460a      	mov	r2, r1
 8007094:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	bf0c      	ite	eq
 80070a6:	2301      	moveq	r3, #1
 80070a8:	2300      	movne	r3, #0
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	69fa      	ldr	r2, [r7, #28]
 80070be:	0151      	lsls	r1, r2, #5
 80070c0:	6a3a      	ldr	r2, [r7, #32]
 80070c2:	440a      	add	r2, r1
 80070c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070c8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80070cc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	7e7b      	ldrb	r3, [r7, #25]
 80070de:	075b      	lsls	r3, r3, #29
 80070e0:	69f9      	ldr	r1, [r7, #28]
 80070e2:	0148      	lsls	r0, r1, #5
 80070e4:	6a39      	ldr	r1, [r7, #32]
 80070e6:	4401      	add	r1, r0
 80070e8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80070ec:	4313      	orrs	r3, r2
 80070ee:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a42      	ldr	r2, [pc, #264]	; (8007208 <USB_HC_StartXfer+0x288>)
 8007100:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007102:	4b41      	ldr	r3, [pc, #260]	; (8007208 <USB_HC_StartXfer+0x288>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800710a:	4a3f      	ldr	r2, [pc, #252]	; (8007208 <USB_HC_StartXfer+0x288>)
 800710c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	78db      	ldrb	r3, [r3, #3]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d006      	beq.n	8007124 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007116:	4b3c      	ldr	r3, [pc, #240]	; (8007208 <USB_HC_StartXfer+0x288>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800711e:	4a3a      	ldr	r2, [pc, #232]	; (8007208 <USB_HC_StartXfer+0x288>)
 8007120:	6013      	str	r3, [r2, #0]
 8007122:	e005      	b.n	8007130 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007124:	4b38      	ldr	r3, [pc, #224]	; (8007208 <USB_HC_StartXfer+0x288>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800712c:	4a36      	ldr	r2, [pc, #216]	; (8007208 <USB_HC_StartXfer+0x288>)
 800712e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007130:	4b35      	ldr	r3, [pc, #212]	; (8007208 <USB_HC_StartXfer+0x288>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007138:	4a33      	ldr	r2, [pc, #204]	; (8007208 <USB_HC_StartXfer+0x288>)
 800713a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	015a      	lsls	r2, r3, #5
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	4413      	add	r3, r2
 8007144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007148:	461a      	mov	r2, r3
 800714a:	4b2f      	ldr	r3, [pc, #188]	; (8007208 <USB_HC_StartXfer+0x288>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007150:	79fb      	ldrb	r3, [r7, #7]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	e04f      	b.n	80071fa <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	78db      	ldrb	r3, [r3, #3]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d14a      	bne.n	80071f8 <USB_HC_StartXfer+0x278>
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d046      	beq.n	80071f8 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	79db      	ldrb	r3, [r3, #7]
 800716e:	2b03      	cmp	r3, #3
 8007170:	d830      	bhi.n	80071d4 <USB_HC_StartXfer+0x254>
 8007172:	a201      	add	r2, pc, #4	; (adr r2, 8007178 <USB_HC_StartXfer+0x1f8>)
 8007174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007178:	08007189 	.word	0x08007189
 800717c:	080071ad 	.word	0x080071ad
 8007180:	08007189 	.word	0x08007189
 8007184:	080071ad 	.word	0x080071ad
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	3303      	adds	r3, #3
 800718e:	089b      	lsrs	r3, r3, #2
 8007190:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007192:	8afa      	ldrh	r2, [r7, #22]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007198:	b29b      	uxth	r3, r3
 800719a:	429a      	cmp	r2, r3
 800719c:	d91c      	bls.n	80071d8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	f043 0220 	orr.w	r2, r3, #32
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80071aa:	e015      	b.n	80071d8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	3303      	adds	r3, #3
 80071b2:	089b      	lsrs	r3, r3, #2
 80071b4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80071b6:	8afa      	ldrh	r2, [r7, #22]
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d90a      	bls.n	80071dc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80071d2:	e003      	b.n	80071dc <USB_HC_StartXfer+0x25c>

      default:
        break;
 80071d4:	bf00      	nop
 80071d6:	e002      	b.n	80071de <USB_HC_StartXfer+0x25e>
        break;
 80071d8:	bf00      	nop
 80071da:	e000      	b.n	80071de <USB_HC_StartXfer+0x25e>
        break;
 80071dc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	68d9      	ldr	r1, [r3, #12]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	785a      	ldrb	r2, [r3, #1]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	b298      	uxth	r0, r3
 80071ec:	2300      	movs	r3, #0
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	4603      	mov	r3, r0
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f7ff fb84 	bl	8006900 <USB_WritePacket>
  }

  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3728      	adds	r7, #40	; 0x28
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	1ff80000 	.word	0x1ff80000
 8007208:	20000314 	.word	0x20000314

0800720c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	b29b      	uxth	r3, r3
}
 8007222:	4618      	mov	r0, r3
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800722e:	b480      	push	{r7}
 8007230:	b087      	sub	sp, #28
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	460b      	mov	r3, r1
 8007238:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800723e:	78fb      	ldrb	r3, [r7, #3]
 8007240:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	4413      	add	r3, r2
 800724e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	0c9b      	lsrs	r3, r3, #18
 8007256:	f003 0303 	and.w	r3, r3, #3
 800725a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d002      	beq.n	8007268 <USB_HC_Halt+0x3a>
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	2b02      	cmp	r3, #2
 8007266:	d16c      	bne.n	8007342 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	4413      	add	r3, r2
 8007270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	0151      	lsls	r1, r2, #5
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	440a      	add	r2, r1
 800727e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007282:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007286:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d143      	bne.n	800731c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	4413      	add	r3, r2
 800729c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	0151      	lsls	r1, r2, #5
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	440a      	add	r2, r1
 80072aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072b2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	0151      	lsls	r1, r2, #5
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	440a      	add	r2, r1
 80072ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	0151      	lsls	r1, r2, #5
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	440a      	add	r2, r1
 80072ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072f2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	3301      	adds	r3, #1
 80072f8:	617b      	str	r3, [r7, #20]
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007300:	d81d      	bhi.n	800733e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	4413      	add	r3, r2
 800730a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007314:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007318:	d0ec      	beq.n	80072f4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800731a:	e080      	b.n	800741e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	4413      	add	r3, r2
 8007324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	0151      	lsls	r1, r2, #5
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	440a      	add	r2, r1
 8007332:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007336:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800733a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800733c:	e06f      	b.n	800741e <USB_HC_Halt+0x1f0>
          break;
 800733e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007340:	e06d      	b.n	800741e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	4413      	add	r3, r2
 800734a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	0151      	lsls	r1, r2, #5
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	440a      	add	r2, r1
 8007358:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800735c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007360:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d143      	bne.n	80073fa <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	4413      	add	r3, r2
 800737a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	0151      	lsls	r1, r2, #5
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	440a      	add	r2, r1
 8007388:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800738c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007390:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	015a      	lsls	r2, r3, #5
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	4413      	add	r3, r2
 800739a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	0151      	lsls	r1, r2, #5
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	440a      	add	r2, r1
 80073a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073b0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	0151      	lsls	r1, r2, #5
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	440a      	add	r2, r1
 80073c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073d0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	3301      	adds	r3, #1
 80073d6:	617b      	str	r3, [r7, #20]
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073de:	d81d      	bhi.n	800741c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073f6:	d0ec      	beq.n	80073d2 <USB_HC_Halt+0x1a4>
 80073f8:	e011      	b.n	800741e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	015a      	lsls	r2, r3, #5
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	4413      	add	r3, r2
 8007402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	0151      	lsls	r1, r2, #5
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	440a      	add	r2, r1
 8007410:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007414:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007418:	6013      	str	r3, [r2, #0]
 800741a:	e000      	b.n	800741e <USB_HC_Halt+0x1f0>
          break;
 800741c:	bf00      	nop
    }
  }

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	371c      	adds	r7, #28
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	460b      	mov	r3, r1
 8007436:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800743c:	78fb      	ldrb	r3, [r7, #3]
 800743e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007440:	2301      	movs	r3, #1
 8007442:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	04da      	lsls	r2, r3, #19
 8007448:	4b15      	ldr	r3, [pc, #84]	; (80074a0 <USB_DoPing+0x74>)
 800744a:	4013      	ands	r3, r2
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	0151      	lsls	r1, r2, #5
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	440a      	add	r2, r1
 8007454:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007458:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800745c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	4413      	add	r3, r2
 8007466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007474:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800747c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	015a      	lsls	r2, r3, #5
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	4413      	add	r3, r2
 8007486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800748a:	461a      	mov	r2, r3
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	371c      	adds	r7, #28
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	1ff80000 	.word	0x1ff80000

080074a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b086      	sub	sp, #24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80074b0:	2300      	movs	r3, #0
 80074b2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7ff f99f 	bl	80067f8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80074ba:	2110      	movs	r1, #16
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f7ff f9d7 	bl	8006870 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7ff f9fa 	bl	80068bc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80074c8:	2300      	movs	r3, #0
 80074ca:	613b      	str	r3, [r7, #16]
 80074cc:	e01f      	b.n	800750e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	015a      	lsls	r2, r3, #5
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	4413      	add	r3, r2
 80074d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074ec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074f4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007502:	461a      	mov	r2, r3
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	3301      	adds	r3, #1
 800750c:	613b      	str	r3, [r7, #16]
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	2b0f      	cmp	r3, #15
 8007512:	d9dc      	bls.n	80074ce <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007514:	2300      	movs	r3, #0
 8007516:	613b      	str	r3, [r7, #16]
 8007518:	e034      	b.n	8007584 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	4413      	add	r3, r2
 8007522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007530:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007538:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007540:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	015a      	lsls	r2, r3, #5
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	4413      	add	r3, r2
 800754a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800754e:	461a      	mov	r2, r3
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	3301      	adds	r3, #1
 8007558:	617b      	str	r3, [r7, #20]
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007560:	d80c      	bhi.n	800757c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	015a      	lsls	r2, r3, #5
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	4413      	add	r3, r2
 800756a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007574:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007578:	d0ec      	beq.n	8007554 <USB_StopHost+0xb0>
 800757a:	e000      	b.n	800757e <USB_StopHost+0xda>
        break;
 800757c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	3301      	adds	r3, #1
 8007582:	613b      	str	r3, [r7, #16]
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	2b0f      	cmp	r3, #15
 8007588:	d9c7      	bls.n	800751a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007590:	461a      	mov	r2, r3
 8007592:	f04f 33ff 	mov.w	r3, #4294967295
 8007596:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f04f 32ff 	mov.w	r2, #4294967295
 800759e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7ff f918 	bl	80067d6 <USB_EnableGlobalInt>

  return HAL_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3718      	adds	r7, #24
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80075b0:	b590      	push	{r4, r7, lr}
 80075b2:	b089      	sub	sp, #36	; 0x24
 80075b4:	af04      	add	r7, sp, #16
 80075b6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80075b8:	2301      	movs	r3, #1
 80075ba:	2202      	movs	r2, #2
 80075bc:	2102      	movs	r1, #2
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fcba 	bl	8007f38 <USBH_FindInterface>
 80075c4:	4603      	mov	r3, r0
 80075c6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
 80075ca:	2bff      	cmp	r3, #255	; 0xff
 80075cc:	d002      	beq.n	80075d4 <USBH_CDC_InterfaceInit+0x24>
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d901      	bls.n	80075d8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80075d4:	2302      	movs	r3, #2
 80075d6:	e13d      	b.n	8007854 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fc8f 	bl	8007f00 <USBH_SelectInterface>
 80075e2:	4603      	mov	r3, r0
 80075e4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80075e6:	7bbb      	ldrb	r3, [r7, #14]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d001      	beq.n	80075f0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80075ec:	2302      	movs	r3, #2
 80075ee:	e131      	b.n	8007854 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80075f6:	2050      	movs	r0, #80	; 0x50
 80075f8:	f005 f904 	bl	800c804 <malloc>
 80075fc:	4603      	mov	r3, r0
 80075fe:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d101      	bne.n	8007614 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007610:	2302      	movs	r3, #2
 8007612:	e11f      	b.n	8007854 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007614:	2250      	movs	r2, #80	; 0x50
 8007616:	2100      	movs	r1, #0
 8007618:	68b8      	ldr	r0, [r7, #8]
 800761a:	f005 f90e 	bl	800c83a <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800761e:	7bfb      	ldrb	r3, [r7, #15]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	211a      	movs	r1, #26
 8007624:	fb01 f303 	mul.w	r3, r1, r3
 8007628:	4413      	add	r3, r2
 800762a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	b25b      	sxtb	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	da15      	bge.n	8007662 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	211a      	movs	r1, #26
 800763c:	fb01 f303 	mul.w	r3, r1, r3
 8007640:	4413      	add	r3, r2
 8007642:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007646:	781a      	ldrb	r2, [r3, #0]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800764c:	7bfb      	ldrb	r3, [r7, #15]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	211a      	movs	r1, #26
 8007652:	fb01 f303 	mul.w	r3, r1, r3
 8007656:	4413      	add	r3, r2
 8007658:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800765c:	881a      	ldrh	r2, [r3, #0]
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	785b      	ldrb	r3, [r3, #1]
 8007666:	4619      	mov	r1, r3
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f002 f894 	bl	8009796 <USBH_AllocPipe>
 800766e:	4603      	mov	r3, r0
 8007670:	461a      	mov	r2, r3
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	7819      	ldrb	r1, [r3, #0]
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	7858      	ldrb	r0, [r3, #1]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	8952      	ldrh	r2, [r2, #10]
 800768e:	9202      	str	r2, [sp, #8]
 8007690:	2203      	movs	r2, #3
 8007692:	9201      	str	r2, [sp, #4]
 8007694:	9300      	str	r3, [sp, #0]
 8007696:	4623      	mov	r3, r4
 8007698:	4602      	mov	r2, r0
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f002 f84c 	bl	8009738 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2200      	movs	r2, #0
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f004 fffb 	bl	800c6a4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80076ae:	2300      	movs	r3, #0
 80076b0:	2200      	movs	r2, #0
 80076b2:	210a      	movs	r1, #10
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fc3f 	bl	8007f38 <USBH_FindInterface>
 80076ba:	4603      	mov	r3, r0
 80076bc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80076be:	7bfb      	ldrb	r3, [r7, #15]
 80076c0:	2bff      	cmp	r3, #255	; 0xff
 80076c2:	d002      	beq.n	80076ca <USBH_CDC_InterfaceInit+0x11a>
 80076c4:	7bfb      	ldrb	r3, [r7, #15]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d901      	bls.n	80076ce <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80076ca:	2302      	movs	r3, #2
 80076cc:	e0c2      	b.n	8007854 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80076ce:	7bfb      	ldrb	r3, [r7, #15]
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	211a      	movs	r1, #26
 80076d4:	fb01 f303 	mul.w	r3, r1, r3
 80076d8:	4413      	add	r3, r2
 80076da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	b25b      	sxtb	r3, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	da16      	bge.n	8007714 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80076e6:	7bfb      	ldrb	r3, [r7, #15]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	211a      	movs	r1, #26
 80076ec:	fb01 f303 	mul.w	r3, r1, r3
 80076f0:	4413      	add	r3, r2
 80076f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076f6:	781a      	ldrb	r2, [r3, #0]
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	211a      	movs	r1, #26
 8007702:	fb01 f303 	mul.w	r3, r1, r3
 8007706:	4413      	add	r3, r2
 8007708:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800770c:	881a      	ldrh	r2, [r3, #0]
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	835a      	strh	r2, [r3, #26]
 8007712:	e015      	b.n	8007740 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007714:	7bfb      	ldrb	r3, [r7, #15]
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	211a      	movs	r1, #26
 800771a:	fb01 f303 	mul.w	r3, r1, r3
 800771e:	4413      	add	r3, r2
 8007720:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007724:	781a      	ldrb	r2, [r3, #0]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800772a:	7bfb      	ldrb	r3, [r7, #15]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	211a      	movs	r1, #26
 8007730:	fb01 f303 	mul.w	r3, r1, r3
 8007734:	4413      	add	r3, r2
 8007736:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800773a:	881a      	ldrh	r2, [r3, #0]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007740:	7bfb      	ldrb	r3, [r7, #15]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	211a      	movs	r1, #26
 8007746:	fb01 f303 	mul.w	r3, r1, r3
 800774a:	4413      	add	r3, r2
 800774c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	b25b      	sxtb	r3, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	da16      	bge.n	8007786 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	211a      	movs	r1, #26
 800775e:	fb01 f303 	mul.w	r3, r1, r3
 8007762:	4413      	add	r3, r2
 8007764:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007768:	781a      	ldrb	r2, [r3, #0]
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	211a      	movs	r1, #26
 8007774:	fb01 f303 	mul.w	r3, r1, r3
 8007778:	4413      	add	r3, r2
 800777a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800777e:	881a      	ldrh	r2, [r3, #0]
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	835a      	strh	r2, [r3, #26]
 8007784:	e015      	b.n	80077b2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007786:	7bfb      	ldrb	r3, [r7, #15]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	211a      	movs	r1, #26
 800778c:	fb01 f303 	mul.w	r3, r1, r3
 8007790:	4413      	add	r3, r2
 8007792:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007796:	781a      	ldrb	r2, [r3, #0]
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800779c:	7bfb      	ldrb	r3, [r7, #15]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	211a      	movs	r1, #26
 80077a2:	fb01 f303 	mul.w	r3, r1, r3
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80077ac:	881a      	ldrh	r2, [r3, #0]
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	7b9b      	ldrb	r3, [r3, #14]
 80077b6:	4619      	mov	r1, r3
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f001 ffec 	bl	8009796 <USBH_AllocPipe>
 80077be:	4603      	mov	r3, r0
 80077c0:	461a      	mov	r2, r3
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	7bdb      	ldrb	r3, [r3, #15]
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f001 ffe2 	bl	8009796 <USBH_AllocPipe>
 80077d2:	4603      	mov	r3, r0
 80077d4:	461a      	mov	r2, r3
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	7b59      	ldrb	r1, [r3, #13]
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	7b98      	ldrb	r0, [r3, #14]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	8b12      	ldrh	r2, [r2, #24]
 80077f2:	9202      	str	r2, [sp, #8]
 80077f4:	2202      	movs	r2, #2
 80077f6:	9201      	str	r2, [sp, #4]
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	4623      	mov	r3, r4
 80077fc:	4602      	mov	r2, r0
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f001 ff9a 	bl	8009738 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	7b19      	ldrb	r1, [r3, #12]
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	7bd8      	ldrb	r0, [r3, #15]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	8b52      	ldrh	r2, [r2, #26]
 800781c:	9202      	str	r2, [sp, #8]
 800781e:	2202      	movs	r2, #2
 8007820:	9201      	str	r2, [sp, #4]
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	4623      	mov	r3, r4
 8007826:	4602      	mov	r2, r0
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f001 ff85 	bl	8009738 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	7b5b      	ldrb	r3, [r3, #13]
 800783a:	2200      	movs	r2, #0
 800783c:	4619      	mov	r1, r3
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f004 ff30 	bl	800c6a4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	7b1b      	ldrb	r3, [r3, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f004 ff29 	bl	800c6a4 <USBH_LL_SetToggle>

  return USBH_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	bd90      	pop	{r4, r7, pc}

0800785c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800786a:	69db      	ldr	r3, [r3, #28]
 800786c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00e      	beq.n	8007894 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f001 ff7a 	bl	8009776 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	4619      	mov	r1, r3
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f001 ffa5 	bl	80097d8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	7b1b      	ldrb	r3, [r3, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00e      	beq.n	80078ba <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	7b1b      	ldrb	r3, [r3, #12]
 80078a0:	4619      	mov	r1, r3
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f001 ff67 	bl	8009776 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	7b1b      	ldrb	r3, [r3, #12]
 80078ac:	4619      	mov	r1, r3
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f001 ff92 	bl	80097d8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	7b5b      	ldrb	r3, [r3, #13]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00e      	beq.n	80078e0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	7b5b      	ldrb	r3, [r3, #13]
 80078c6:	4619      	mov	r1, r3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 ff54 	bl	8009776 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	7b5b      	ldrb	r3, [r3, #13]
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f001 ff7f 	bl	80097d8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00b      	beq.n	8007904 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078f2:	69db      	ldr	r3, [r3, #28]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f004 ff8d 	bl	800c814 <free>
    phost->pActiveClass->pData = 0U;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007900:	2200      	movs	r2, #0
 8007902:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b084      	sub	sp, #16
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	3340      	adds	r3, #64	; 0x40
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f8b1 	bl	8007a8e <GetLineCoding>
 800792c:	4603      	mov	r3, r0
 800792e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007930:	7afb      	ldrb	r3, [r7, #11]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d105      	bne.n	8007942 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800793c:	2102      	movs	r1, #2
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007942:	7afb      	ldrb	r3, [r7, #11]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007954:	2301      	movs	r3, #1
 8007956:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007962:	69db      	ldr	r3, [r3, #28]
 8007964:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800796c:	2b04      	cmp	r3, #4
 800796e:	d877      	bhi.n	8007a60 <USBH_CDC_Process+0x114>
 8007970:	a201      	add	r2, pc, #4	; (adr r2, 8007978 <USBH_CDC_Process+0x2c>)
 8007972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007976:	bf00      	nop
 8007978:	0800798d 	.word	0x0800798d
 800797c:	08007993 	.word	0x08007993
 8007980:	080079c3 	.word	0x080079c3
 8007984:	08007a37 	.word	0x08007a37
 8007988:	08007a45 	.word	0x08007a45
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	73fb      	strb	r3, [r7, #15]
      break;
 8007990:	e06d      	b.n	8007a6e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f897 	bl	8007acc <SetLineCoding>
 800799e:	4603      	mov	r3, r0
 80079a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80079a2:	7bbb      	ldrb	r3, [r7, #14]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d104      	bne.n	80079b2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2202      	movs	r2, #2
 80079ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80079b0:	e058      	b.n	8007a64 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80079b2:	7bbb      	ldrb	r3, [r7, #14]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d055      	beq.n	8007a64 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	2204      	movs	r2, #4
 80079bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80079c0:	e050      	b.n	8007a64 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	3340      	adds	r3, #64	; 0x40
 80079c6:	4619      	mov	r1, r3
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f860 	bl	8007a8e <GetLineCoding>
 80079ce:	4603      	mov	r3, r0
 80079d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d126      	bne.n	8007a26 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ea:	791b      	ldrb	r3, [r3, #4]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d13b      	bne.n	8007a68 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079fa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d133      	bne.n	8007a68 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a0a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d12b      	bne.n	8007a68 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a18:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d124      	bne.n	8007a68 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f984 	bl	8007d2c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007a24:	e020      	b.n	8007a68 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d01d      	beq.n	8007a68 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2204      	movs	r2, #4
 8007a30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007a34:	e018      	b.n	8007a68 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f867 	bl	8007b0a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f8f8 	bl	8007c32 <CDC_ProcessReception>
      break;
 8007a42:	e014      	b.n	8007a6e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007a44:	2100      	movs	r1, #0
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f001 f953 	bl	8008cf2 <USBH_ClrFeature>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10a      	bne.n	8007a6c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007a5e:	e005      	b.n	8007a6c <USBH_CDC_Process+0x120>

    default:
      break;
 8007a60:	bf00      	nop
 8007a62:	e004      	b.n	8007a6e <USBH_CDC_Process+0x122>
      break;
 8007a64:	bf00      	nop
 8007a66:	e002      	b.n	8007a6e <USBH_CDC_Process+0x122>
      break;
 8007a68:	bf00      	nop
 8007a6a:	e000      	b.n	8007a6e <USBH_CDC_Process+0x122>
      break;
 8007a6c:	bf00      	nop

  }

  return status;
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b082      	sub	sp, #8
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	22a1      	movs	r2, #161	; 0xa1
 8007a9c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2221      	movs	r2, #33	; 0x21
 8007aa2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2207      	movs	r2, #7
 8007ab4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2207      	movs	r2, #7
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f001 faf8 	bl	80090b2 <USBH_CtlReq>
 8007ac2:	4603      	mov	r3, r0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2221      	movs	r2, #33	; 0x21
 8007ada:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2220      	movs	r2, #32
 8007ae0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2207      	movs	r2, #7
 8007af2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	2207      	movs	r2, #7
 8007af8:	4619      	mov	r1, r3
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f001 fad9 	bl	80090b2 <USBH_CtlReq>
 8007b00:	4603      	mov	r3, r0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b086      	sub	sp, #24
 8007b0e:	af02      	add	r7, sp, #8
 8007b10:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b18:	69db      	ldr	r3, [r3, #28]
 8007b1a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d002      	beq.n	8007b30 <CDC_ProcessTransmission+0x26>
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d025      	beq.n	8007b7a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8007b2e:	e07c      	b.n	8007c2a <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	8b12      	ldrh	r2, [r2, #24]
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d90c      	bls.n	8007b56 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	69d9      	ldr	r1, [r3, #28]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	8b1a      	ldrh	r2, [r3, #24]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	7b58      	ldrb	r0, [r3, #13]
 8007b48:	2301      	movs	r3, #1
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f001 fdaf 	bl	80096b2 <USBH_BulkSendData>
 8007b54:	e00c      	b.n	8007b70 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	7b58      	ldrb	r0, [r3, #13]
 8007b64:	2301      	movs	r3, #1
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	4603      	mov	r3, r0
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f001 fda1 	bl	80096b2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007b78:	e057      	b.n	8007c2a <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	7b5b      	ldrb	r3, [r3, #13]
 8007b7e:	4619      	mov	r1, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f004 fd65 	bl	800c650 <USBH_LL_GetURBState>
 8007b86:	4603      	mov	r3, r0
 8007b88:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007b8a:	7afb      	ldrb	r3, [r7, #11]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d136      	bne.n	8007bfe <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	8b12      	ldrh	r2, [r2, #24]
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d90e      	bls.n	8007bba <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	8b12      	ldrh	r2, [r2, #24]
 8007ba4:	1a9a      	subs	r2, r3, r2
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	69db      	ldr	r3, [r3, #28]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	8b12      	ldrh	r2, [r2, #24]
 8007bb2:	441a      	add	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	61da      	str	r2, [r3, #28]
 8007bb8:	e002      	b.n	8007bc0 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d004      	beq.n	8007bd2 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8007bd0:	e006      	b.n	8007be0 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f892 	bl	8007d04 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2204      	movs	r2, #4
 8007be4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	f001 ff70 	bl	8009adc <osMessagePut>
      break;
 8007bfc:	e014      	b.n	8007c28 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 8007bfe:	7afb      	ldrb	r3, [r7, #11]
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d111      	bne.n	8007c28 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2204      	movs	r2, #4
 8007c10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c20:	2200      	movs	r2, #0
 8007c22:	4619      	mov	r1, r3
 8007c24:	f001 ff5a 	bl	8009adc <osMessagePut>
      break;
 8007c28:	bf00      	nop
  }
}
 8007c2a:	bf00      	nop
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b086      	sub	sp, #24
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c44:	2300      	movs	r3, #0
 8007c46:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	d002      	beq.n	8007c58 <CDC_ProcessReception+0x26>
 8007c52:	2b04      	cmp	r3, #4
 8007c54:	d00e      	beq.n	8007c74 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007c56:	e051      	b.n	8007cfc <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	6a19      	ldr	r1, [r3, #32]
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	8b5a      	ldrh	r2, [r3, #26]
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	7b1b      	ldrb	r3, [r3, #12]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f001 fd49 	bl	80096fc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	2204      	movs	r2, #4
 8007c6e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007c72:	e043      	b.n	8007cfc <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	7b1b      	ldrb	r3, [r3, #12]
 8007c78:	4619      	mov	r1, r3
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f004 fce8 	bl	800c650 <USBH_LL_GetURBState>
 8007c80:	4603      	mov	r3, r0
 8007c82:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007c84:	7cfb      	ldrb	r3, [r7, #19]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d137      	bne.n	8007cfa <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	7b1b      	ldrb	r3, [r3, #12]
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f004 fc4b 	bl	800c52c <USBH_LL_GetLastXferSize>
 8007c96:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d016      	beq.n	8007cd0 <CDC_ProcessReception+0x9e>
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	8b5b      	ldrh	r3, [r3, #26]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d910      	bls.n	8007cd0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	1ad2      	subs	r2, r2, r3
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	6a1a      	ldr	r2, [r3, #32]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	441a      	add	r2, r3
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2203      	movs	r2, #3
 8007cca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8007cce:	e006      	b.n	8007cde <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f81d 	bl	8007d18 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2204      	movs	r2, #4
 8007ce2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	f001 fef1 	bl	8009adc <osMessagePut>
      break;
 8007cfa:	bf00      	nop
  }
}
 8007cfc:	bf00      	nop
 8007cfe:	3718      	adds	r7, #24
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007d0c:	bf00      	nop
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007d40:	b5b0      	push	{r4, r5, r7, lr}
 8007d42:	b090      	sub	sp, #64	; 0x40
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007d54:	2302      	movs	r3, #2
 8007d56:	e04d      	b.n	8007df4 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	79fa      	ldrb	r2, [r7, #7]
 8007d5c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 f847 	bl	8007e04 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d003      	beq.n	8007da4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8007da4:	4b15      	ldr	r3, [pc, #84]	; (8007dfc <USBH_Init+0xbc>)
 8007da6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8007daa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8007db0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007db4:	2100      	movs	r1, #0
 8007db6:	4618      	mov	r0, r3
 8007db8:	f001 fe66 	bl	8009a88 <osMessageCreate>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8007dc4:	4b0e      	ldr	r3, [pc, #56]	; (8007e00 <USBH_Init+0xc0>)
 8007dc6:	f107 0414 	add.w	r4, r7, #20
 8007dca:	461d      	mov	r5, r3
 8007dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007dd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007dd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8007dd8:	f107 0314 	add.w	r3, r7, #20
 8007ddc:	68f9      	ldr	r1, [r7, #12]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f001 fd7d 	bl	80098de <osThreadCreate>
 8007de4:	4602      	mov	r2, r0
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f004 faeb 	bl	800c3c8 <USBH_LL_Init>

  return USBH_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3740      	adds	r7, #64	; 0x40
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bdb0      	pop	{r4, r5, r7, pc}
 8007dfc:	0800cfd8 	.word	0x0800cfd8
 8007e00:	0800cff4 	.word	0x0800cff4

08007e04 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007e10:	2300      	movs	r3, #0
 8007e12:	60fb      	str	r3, [r7, #12]
 8007e14:	e009      	b.n	8007e2a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	33e0      	adds	r3, #224	; 0xe0
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	4413      	add	r3, r2
 8007e20:	2200      	movs	r2, #0
 8007e22:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	3301      	adds	r3, #1
 8007e28:	60fb      	str	r3, [r7, #12]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2b0e      	cmp	r3, #14
 8007e2e:	d9f2      	bls.n	8007e16 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007e30:	2300      	movs	r3, #0
 8007e32:	60fb      	str	r3, [r7, #12]
 8007e34:	e009      	b.n	8007e4a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007e40:	2200      	movs	r2, #0
 8007e42:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	3301      	adds	r3, #1
 8007e48:	60fb      	str	r3, [r7, #12]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e50:	d3f1      	bcc.n	8007e36 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2240      	movs	r2, #64	; 0x40
 8007e76:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3714      	adds	r7, #20
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d016      	beq.n	8007eee <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10e      	bne.n	8007ee8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007ed0:	1c59      	adds	r1, r3, #1
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	33de      	adds	r3, #222	; 0xde
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	73fb      	strb	r3, [r7, #15]
 8007ee6:	e004      	b.n	8007ef2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007ee8:	2302      	movs	r3, #2
 8007eea:	73fb      	strb	r3, [r7, #15]
 8007eec:	e001      	b.n	8007ef2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007eee:	2302      	movs	r3, #2
 8007ef0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007f16:	78fa      	ldrb	r2, [r7, #3]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d204      	bcs.n	8007f26 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	78fa      	ldrb	r2, [r7, #3]
 8007f20:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007f24:	e001      	b.n	8007f2a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007f26:	2302      	movs	r3, #2
 8007f28:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b087      	sub	sp, #28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	4608      	mov	r0, r1
 8007f42:	4611      	mov	r1, r2
 8007f44:	461a      	mov	r2, r3
 8007f46:	4603      	mov	r3, r0
 8007f48:	70fb      	strb	r3, [r7, #3]
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	70bb      	strb	r3, [r7, #2]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007f52:	2300      	movs	r3, #0
 8007f54:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007f56:	2300      	movs	r3, #0
 8007f58:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007f60:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007f62:	e025      	b.n	8007fb0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007f64:	7dfb      	ldrb	r3, [r7, #23]
 8007f66:	221a      	movs	r2, #26
 8007f68:	fb02 f303 	mul.w	r3, r2, r3
 8007f6c:	3308      	adds	r3, #8
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	4413      	add	r3, r2
 8007f72:	3302      	adds	r3, #2
 8007f74:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	795b      	ldrb	r3, [r3, #5]
 8007f7a:	78fa      	ldrb	r2, [r7, #3]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d002      	beq.n	8007f86 <USBH_FindInterface+0x4e>
 8007f80:	78fb      	ldrb	r3, [r7, #3]
 8007f82:	2bff      	cmp	r3, #255	; 0xff
 8007f84:	d111      	bne.n	8007faa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007f8a:	78ba      	ldrb	r2, [r7, #2]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d002      	beq.n	8007f96 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f90:	78bb      	ldrb	r3, [r7, #2]
 8007f92:	2bff      	cmp	r3, #255	; 0xff
 8007f94:	d109      	bne.n	8007faa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f9a:	787a      	ldrb	r2, [r7, #1]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d002      	beq.n	8007fa6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007fa0:	787b      	ldrb	r3, [r7, #1]
 8007fa2:	2bff      	cmp	r3, #255	; 0xff
 8007fa4:	d101      	bne.n	8007faa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007fa6:	7dfb      	ldrb	r3, [r7, #23]
 8007fa8:	e006      	b.n	8007fb8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007faa:	7dfb      	ldrb	r3, [r7, #23]
 8007fac:	3301      	adds	r3, #1
 8007fae:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007fb0:	7dfb      	ldrb	r3, [r7, #23]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d9d6      	bls.n	8007f64 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007fb6:	23ff      	movs	r3, #255	; 0xff
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	371c      	adds	r7, #28
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f004 fa37 	bl	800c440 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f004 fb4e 	bl	800c676 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b088      	sub	sp, #32
 8007fe8:	af04      	add	r7, sp, #16
 8007fea:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007fec:	2302      	movs	r3, #2
 8007fee:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d102      	bne.n	8008006 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2203      	movs	r2, #3
 8008004:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b0b      	cmp	r3, #11
 800800e:	f200 823c 	bhi.w	800848a <USBH_Process+0x4a6>
 8008012:	a201      	add	r2, pc, #4	; (adr r2, 8008018 <USBH_Process+0x34>)
 8008014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008018:	08008049 	.word	0x08008049
 800801c:	08008097 	.word	0x08008097
 8008020:	0800811b 	.word	0x0800811b
 8008024:	08008409 	.word	0x08008409
 8008028:	0800848b 	.word	0x0800848b
 800802c:	080081db 	.word	0x080081db
 8008030:	08008393 	.word	0x08008393
 8008034:	0800822d 	.word	0x0800822d
 8008038:	08008269 	.word	0x08008269
 800803c:	080082a3 	.word	0x080082a3
 8008040:	080082eb 	.word	0x080082eb
 8008044:	080083f1 	.word	0x080083f1
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 821c 	beq.w	800848e <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800805c:	20c8      	movs	r0, #200	; 0xc8
 800805e:	f004 fb54 	bl	800c70a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f004 fa47 	bl	800c4f6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800808c:	2200      	movs	r2, #0
 800808e:	4619      	mov	r1, r3
 8008090:	f001 fd24 	bl	8009adc <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008094:	e1fb      	b.n	800848e <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800809c:	2b01      	cmp	r3, #1
 800809e:	d107      	bne.n	80080b0 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2202      	movs	r2, #2
 80080ac:	701a      	strb	r2, [r3, #0]
 80080ae:	e025      	b.n	80080fc <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80080b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080ba:	d914      	bls.n	80080e6 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80080c2:	3301      	adds	r3, #1
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d903      	bls.n	80080de <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	220d      	movs	r2, #13
 80080da:	701a      	strb	r2, [r3, #0]
 80080dc:	e00e      	b.n	80080fc <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	701a      	strb	r2, [r3, #0]
 80080e4:	e00a      	b.n	80080fc <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80080ec:	f103 020a 	add.w	r2, r3, #10
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80080f6:	200a      	movs	r0, #10
 80080f8:	f004 fb07 	bl	800c70a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008110:	2200      	movs	r2, #0
 8008112:	4619      	mov	r1, r3
 8008114:	f001 fce2 	bl	8009adc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008118:	e1c0      	b.n	800849c <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008120:	2b00      	cmp	r3, #0
 8008122:	d005      	beq.n	8008130 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800812a:	2104      	movs	r1, #4
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008130:	2064      	movs	r0, #100	; 0x64
 8008132:	f004 faea 	bl	800c70a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f004 f9b8 	bl	800c4ac <USBH_LL_GetSpeed>
 800813c:	4603      	mov	r3, r0
 800813e:	461a      	mov	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2205      	movs	r2, #5
 800814a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800814c:	2100      	movs	r1, #0
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f001 fb21 	bl	8009796 <USBH_AllocPipe>
 8008154:	4603      	mov	r3, r0
 8008156:	461a      	mov	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800815c:	2180      	movs	r1, #128	; 0x80
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f001 fb19 	bl	8009796 <USBH_AllocPipe>
 8008164:	4603      	mov	r3, r0
 8008166:	461a      	mov	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	7919      	ldrb	r1, [r3, #4]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008180:	b292      	uxth	r2, r2
 8008182:	9202      	str	r2, [sp, #8]
 8008184:	2200      	movs	r2, #0
 8008186:	9201      	str	r2, [sp, #4]
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	4603      	mov	r3, r0
 800818c:	2280      	movs	r2, #128	; 0x80
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f001 fad2 	bl	8009738 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	7959      	ldrb	r1, [r3, #5]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80081a8:	b292      	uxth	r2, r2
 80081aa:	9202      	str	r2, [sp, #8]
 80081ac:	2200      	movs	r2, #0
 80081ae:	9201      	str	r2, [sp, #4]
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	4603      	mov	r3, r0
 80081b4:	2200      	movs	r2, #0
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f001 fabe 	bl	8009738 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80081d0:	2200      	movs	r2, #0
 80081d2:	4619      	mov	r1, r3
 80081d4:	f001 fc82 	bl	8009adc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80081d8:	e160      	b.n	800849c <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f964 	bl	80084a8 <USBH_HandleEnum>
 80081e0:	4603      	mov	r3, r0
 80081e2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80081e4:	7bbb      	ldrb	r3, [r7, #14]
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f040 8152 	bne.w	8008492 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d103      	bne.n	8008208 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2208      	movs	r2, #8
 8008204:	701a      	strb	r2, [r3, #0]
 8008206:	e002      	b.n	800820e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2207      	movs	r2, #7
 800820c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2205      	movs	r2, #5
 8008212:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008222:	2200      	movs	r2, #0
 8008224:	4619      	mov	r1, r3
 8008226:	f001 fc59 	bl	8009adc <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800822a:	e132      	b.n	8008492 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008232:	2b00      	cmp	r3, #0
 8008234:	f000 812f 	beq.w	8008496 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800823e:	2101      	movs	r1, #1
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2208      	movs	r2, #8
 8008248:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2205      	movs	r2, #5
 800824e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800825e:	2200      	movs	r2, #0
 8008260:	4619      	mov	r1, r3
 8008262:	f001 fc3b 	bl	8009adc <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008266:	e116      	b.n	8008496 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800826e:	b29b      	uxth	r3, r3
 8008270:	4619      	mov	r1, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fcf6 	bl	8008c64 <USBH_SetCfg>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d102      	bne.n	8008284 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2209      	movs	r2, #9
 8008282:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008298:	2200      	movs	r2, #0
 800829a:	4619      	mov	r1, r3
 800829c:	f001 fc1e 	bl	8009adc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80082a0:	e0fc      	b.n	800849c <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80082a8:	f003 0320 	and.w	r3, r3, #32
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00a      	beq.n	80082c6 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80082b0:	2101      	movs	r1, #1
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fcf9 	bl	8008caa <USBH_SetFeature>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d106      	bne.n	80082cc <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	220a      	movs	r2, #10
 80082c2:	701a      	strb	r2, [r3, #0]
 80082c4:	e002      	b.n	80082cc <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	220a      	movs	r2, #10
 80082ca:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80082e0:	2200      	movs	r2, #0
 80082e2:	4619      	mov	r1, r3
 80082e4:	f001 fbfa 	bl	8009adc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80082e8:	e0d8      	b.n	800849c <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d03f      	beq.n	8008374 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80082fc:	2300      	movs	r3, #0
 80082fe:	73fb      	strb	r3, [r7, #15]
 8008300:	e016      	b.n	8008330 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008302:	7bfa      	ldrb	r2, [r7, #15]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	32de      	adds	r2, #222	; 0xde
 8008308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800830c:	791a      	ldrb	r2, [r3, #4]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008314:	429a      	cmp	r2, r3
 8008316:	d108      	bne.n	800832a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008318:	7bfa      	ldrb	r2, [r7, #15]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	32de      	adds	r2, #222	; 0xde
 800831e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008328:	e005      	b.n	8008336 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800832a:	7bfb      	ldrb	r3, [r7, #15]
 800832c:	3301      	adds	r3, #1
 800832e:	73fb      	strb	r3, [r7, #15]
 8008330:	7bfb      	ldrb	r3, [r7, #15]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d0e5      	beq.n	8008302 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800833c:	2b00      	cmp	r3, #0
 800833e:	d016      	beq.n	800836e <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	4798      	blx	r3
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d109      	bne.n	8008366 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2206      	movs	r2, #6
 8008356:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800835e:	2103      	movs	r1, #3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	4798      	blx	r3
 8008364:	e006      	b.n	8008374 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	220d      	movs	r2, #13
 800836a:	701a      	strb	r2, [r3, #0]
 800836c:	e002      	b.n	8008374 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	220d      	movs	r2, #13
 8008372:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2205      	movs	r2, #5
 8008378:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008388:	2200      	movs	r2, #0
 800838a:	4619      	mov	r1, r3
 800838c:	f001 fba6 	bl	8009adc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008390:	e084      	b.n	800849c <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008398:	2b00      	cmp	r3, #0
 800839a:	d017      	beq.n	80083cc <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	4798      	blx	r3
 80083a8:	4603      	mov	r3, r0
 80083aa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80083ac:	7bbb      	ldrb	r3, [r7, #14]
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d103      	bne.n	80083bc <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	220b      	movs	r2, #11
 80083b8:	701a      	strb	r2, [r3, #0]
 80083ba:	e00a      	b.n	80083d2 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 80083bc:	7bbb      	ldrb	r3, [r7, #14]
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d106      	bne.n	80083d2 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	220d      	movs	r2, #13
 80083c8:	701a      	strb	r2, [r3, #0]
 80083ca:	e002      	b.n	80083d2 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	220d      	movs	r2, #13
 80083d0:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2205      	movs	r2, #5
 80083d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80083e6:	2200      	movs	r2, #0
 80083e8:	4619      	mov	r1, r3
 80083ea:	f001 fb77 	bl	8009adc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80083ee:	e055      	b.n	800849c <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d04f      	beq.n	800849a <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	4798      	blx	r3
      }
      break;
 8008406:	e048      	b.n	800849a <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f7ff fcf7 	bl	8007e04 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800841c:	2b00      	cmp	r3, #0
 800841e:	d009      	beq.n	8008434 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800843a:	2b00      	cmp	r3, #0
 800843c:	d005      	beq.n	800844a <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008444:	2105      	movs	r1, #5
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b01      	cmp	r3, #1
 8008454:	d107      	bne.n	8008466 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f7ff fdb0 	bl	8007fc4 <USBH_Start>
 8008464:	e002      	b.n	800846c <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f003 ffea 	bl	800c440 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008480:	2200      	movs	r2, #0
 8008482:	4619      	mov	r1, r3
 8008484:	f001 fb2a 	bl	8009adc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008488:	e008      	b.n	800849c <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800848a:	bf00      	nop
 800848c:	e006      	b.n	800849c <USBH_Process+0x4b8>
      break;
 800848e:	bf00      	nop
 8008490:	e004      	b.n	800849c <USBH_Process+0x4b8>
      break;
 8008492:	bf00      	nop
 8008494:	e002      	b.n	800849c <USBH_Process+0x4b8>
    break;
 8008496:	bf00      	nop
 8008498:	e000      	b.n	800849c <USBH_Process+0x4b8>
      break;
 800849a:	bf00      	nop
  }
  return USBH_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop

080084a8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b088      	sub	sp, #32
 80084ac:	af04      	add	r7, sp, #16
 80084ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80084b0:	2301      	movs	r3, #1
 80084b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80084b4:	2301      	movs	r3, #1
 80084b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	785b      	ldrb	r3, [r3, #1]
 80084bc:	2b07      	cmp	r3, #7
 80084be:	f200 8208 	bhi.w	80088d2 <USBH_HandleEnum+0x42a>
 80084c2:	a201      	add	r2, pc, #4	; (adr r2, 80084c8 <USBH_HandleEnum+0x20>)
 80084c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c8:	080084e9 	.word	0x080084e9
 80084cc:	080085a7 	.word	0x080085a7
 80084d0:	08008611 	.word	0x08008611
 80084d4:	0800869f 	.word	0x0800869f
 80084d8:	08008709 	.word	0x08008709
 80084dc:	08008779 	.word	0x08008779
 80084e0:	08008815 	.word	0x08008815
 80084e4:	08008893 	.word	0x08008893
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80084e8:	2108      	movs	r1, #8
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 faea 	bl	8008ac4 <USBH_Get_DevDesc>
 80084f0:	4603      	mov	r3, r0
 80084f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084f4:	7bbb      	ldrb	r3, [r7, #14]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d130      	bne.n	800855c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	7919      	ldrb	r1, [r3, #4]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800851e:	b292      	uxth	r2, r2
 8008520:	9202      	str	r2, [sp, #8]
 8008522:	2200      	movs	r2, #0
 8008524:	9201      	str	r2, [sp, #4]
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	4603      	mov	r3, r0
 800852a:	2280      	movs	r2, #128	; 0x80
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f001 f903 	bl	8009738 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	7959      	ldrb	r1, [r3, #5]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008546:	b292      	uxth	r2, r2
 8008548:	9202      	str	r2, [sp, #8]
 800854a:	2200      	movs	r2, #0
 800854c:	9201      	str	r2, [sp, #4]
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	4603      	mov	r3, r0
 8008552:	2200      	movs	r2, #0
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f001 f8ef 	bl	8009738 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800855a:	e1bc      	b.n	80088d6 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800855c:	7bbb      	ldrb	r3, [r7, #14]
 800855e:	2b03      	cmp	r3, #3
 8008560:	f040 81b9 	bne.w	80088d6 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800856a:	3301      	adds	r3, #1
 800856c:	b2da      	uxtb	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800857a:	2b03      	cmp	r3, #3
 800857c:	d903      	bls.n	8008586 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	220d      	movs	r2, #13
 8008582:	701a      	strb	r2, [r3, #0]
      break;
 8008584:	e1a7      	b.n	80088d6 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	795b      	ldrb	r3, [r3, #5]
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f001 f923 	bl	80097d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	791b      	ldrb	r3, [r3, #4]
 8008596:	4619      	mov	r1, r3
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f001 f91d 	bl	80097d8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	701a      	strb	r2, [r3, #0]
      break;
 80085a4:	e197      	b.n	80088d6 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80085a6:	2112      	movs	r1, #18
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fa8b 	bl	8008ac4 <USBH_Get_DevDesc>
 80085ae:	4603      	mov	r3, r0
 80085b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d103      	bne.n	80085c0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2202      	movs	r2, #2
 80085bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80085be:	e18c      	b.n	80088da <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
 80085c2:	2b03      	cmp	r3, #3
 80085c4:	f040 8189 	bne.w	80088da <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085ce:	3301      	adds	r3, #1
 80085d0:	b2da      	uxtb	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085de:	2b03      	cmp	r3, #3
 80085e0:	d903      	bls.n	80085ea <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	220d      	movs	r2, #13
 80085e6:	701a      	strb	r2, [r3, #0]
      break;
 80085e8:	e177      	b.n	80088da <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	795b      	ldrb	r3, [r3, #5]
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f001 f8f1 	bl	80097d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	791b      	ldrb	r3, [r3, #4]
 80085fa:	4619      	mov	r1, r3
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f001 f8eb 	bl	80097d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	701a      	strb	r2, [r3, #0]
      break;
 800860e:	e164      	b.n	80088da <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008610:	2101      	movs	r1, #1
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fb02 	bl	8008c1c <USBH_SetAddress>
 8008618:	4603      	mov	r3, r0
 800861a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800861c:	7bbb      	ldrb	r3, [r7, #14]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d132      	bne.n	8008688 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008622:	2002      	movs	r0, #2
 8008624:	f004 f871 	bl	800c70a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2203      	movs	r2, #3
 8008634:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	7919      	ldrb	r1, [r3, #4]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800864a:	b292      	uxth	r2, r2
 800864c:	9202      	str	r2, [sp, #8]
 800864e:	2200      	movs	r2, #0
 8008650:	9201      	str	r2, [sp, #4]
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	4603      	mov	r3, r0
 8008656:	2280      	movs	r2, #128	; 0x80
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f001 f86d 	bl	8009738 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	7959      	ldrb	r1, [r3, #5]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008672:	b292      	uxth	r2, r2
 8008674:	9202      	str	r2, [sp, #8]
 8008676:	2200      	movs	r2, #0
 8008678:	9201      	str	r2, [sp, #4]
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	4603      	mov	r3, r0
 800867e:	2200      	movs	r2, #0
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f001 f859 	bl	8009738 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008686:	e12a      	b.n	80088de <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008688:	7bbb      	ldrb	r3, [r7, #14]
 800868a:	2b03      	cmp	r3, #3
 800868c:	f040 8127 	bne.w	80088de <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	220d      	movs	r2, #13
 8008694:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	705a      	strb	r2, [r3, #1]
      break;
 800869c:	e11f      	b.n	80088de <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800869e:	2109      	movs	r1, #9
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fa37 	bl	8008b14 <USBH_Get_CfgDesc>
 80086a6:	4603      	mov	r3, r0
 80086a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d103      	bne.n	80086b8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2204      	movs	r2, #4
 80086b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80086b6:	e114      	b.n	80088e2 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086b8:	7bbb      	ldrb	r3, [r7, #14]
 80086ba:	2b03      	cmp	r3, #3
 80086bc:	f040 8111 	bne.w	80088e2 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086c6:	3301      	adds	r3, #1
 80086c8:	b2da      	uxtb	r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086d6:	2b03      	cmp	r3, #3
 80086d8:	d903      	bls.n	80086e2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	220d      	movs	r2, #13
 80086de:	701a      	strb	r2, [r3, #0]
      break;
 80086e0:	e0ff      	b.n	80088e2 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	795b      	ldrb	r3, [r3, #5]
 80086e6:	4619      	mov	r1, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f001 f875 	bl	80097d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	791b      	ldrb	r3, [r3, #4]
 80086f2:	4619      	mov	r1, r3
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f001 f86f 	bl	80097d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	701a      	strb	r2, [r3, #0]
      break;
 8008706:	e0ec      	b.n	80088e2 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800870e:	4619      	mov	r1, r3
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 f9ff 	bl	8008b14 <USBH_Get_CfgDesc>
 8008716:	4603      	mov	r3, r0
 8008718:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800871a:	7bbb      	ldrb	r3, [r7, #14]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d103      	bne.n	8008728 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2205      	movs	r2, #5
 8008724:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008726:	e0de      	b.n	80088e6 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008728:	7bbb      	ldrb	r3, [r7, #14]
 800872a:	2b03      	cmp	r3, #3
 800872c:	f040 80db 	bne.w	80088e6 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008736:	3301      	adds	r3, #1
 8008738:	b2da      	uxtb	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008746:	2b03      	cmp	r3, #3
 8008748:	d903      	bls.n	8008752 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	220d      	movs	r2, #13
 800874e:	701a      	strb	r2, [r3, #0]
      break;
 8008750:	e0c9      	b.n	80088e6 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	795b      	ldrb	r3, [r3, #5]
 8008756:	4619      	mov	r1, r3
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f001 f83d 	bl	80097d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	791b      	ldrb	r3, [r3, #4]
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f001 f837 	bl	80097d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	701a      	strb	r2, [r3, #0]
      break;
 8008776:	e0b6      	b.n	80088e6 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800877e:	2b00      	cmp	r3, #0
 8008780:	d036      	beq.n	80087f0 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800878e:	23ff      	movs	r3, #255	; 0xff
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f9e3 	bl	8008b5c <USBH_Get_StringDesc>
 8008796:	4603      	mov	r3, r0
 8008798:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800879a:	7bbb      	ldrb	r3, [r7, #14]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d111      	bne.n	80087c4 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2206      	movs	r2, #6
 80087a4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2205      	movs	r2, #5
 80087aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80087ba:	2200      	movs	r2, #0
 80087bc:	4619      	mov	r1, r3
 80087be:	f001 f98d 	bl	8009adc <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80087c2:	e092      	b.n	80088ea <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087c4:	7bbb      	ldrb	r3, [r7, #14]
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	f040 808f 	bne.w	80088ea <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2206      	movs	r2, #6
 80087d0:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2205      	movs	r2, #5
 80087d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80087e6:	2200      	movs	r2, #0
 80087e8:	4619      	mov	r1, r3
 80087ea:	f001 f977 	bl	8009adc <osMessagePut>
      break;
 80087ee:	e07c      	b.n	80088ea <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2206      	movs	r2, #6
 80087f4:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2205      	movs	r2, #5
 80087fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800880a:	2200      	movs	r2, #0
 800880c:	4619      	mov	r1, r3
 800880e:	f001 f965 	bl	8009adc <osMessagePut>
      break;
 8008812:	e06a      	b.n	80088ea <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800881a:	2b00      	cmp	r3, #0
 800881c:	d027      	beq.n	800886e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800882a:	23ff      	movs	r3, #255	; 0xff
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f995 	bl	8008b5c <USBH_Get_StringDesc>
 8008832:	4603      	mov	r3, r0
 8008834:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008836:	7bbb      	ldrb	r3, [r7, #14]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d103      	bne.n	8008844 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2207      	movs	r2, #7
 8008840:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008842:	e054      	b.n	80088ee <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008844:	7bbb      	ldrb	r3, [r7, #14]
 8008846:	2b03      	cmp	r3, #3
 8008848:	d151      	bne.n	80088ee <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2207      	movs	r2, #7
 800884e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2205      	movs	r2, #5
 8008854:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008864:	2200      	movs	r2, #0
 8008866:	4619      	mov	r1, r3
 8008868:	f001 f938 	bl	8009adc <osMessagePut>
      break;
 800886c:	e03f      	b.n	80088ee <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2207      	movs	r2, #7
 8008872:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2205      	movs	r2, #5
 8008878:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008888:	2200      	movs	r2, #0
 800888a:	4619      	mov	r1, r3
 800888c:	f001 f926 	bl	8009adc <osMessagePut>
      break;
 8008890:	e02d      	b.n	80088ee <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008898:	2b00      	cmp	r3, #0
 800889a:	d017      	beq.n	80088cc <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80088a8:	23ff      	movs	r3, #255	; 0xff
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f956 	bl	8008b5c <USBH_Get_StringDesc>
 80088b0:	4603      	mov	r3, r0
 80088b2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80088b4:	7bbb      	ldrb	r3, [r7, #14]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d102      	bne.n	80088c0 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80088be:	e018      	b.n	80088f2 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088c0:	7bbb      	ldrb	r3, [r7, #14]
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	d115      	bne.n	80088f2 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	73fb      	strb	r3, [r7, #15]
      break;
 80088ca:	e012      	b.n	80088f2 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	73fb      	strb	r3, [r7, #15]
      break;
 80088d0:	e00f      	b.n	80088f2 <USBH_HandleEnum+0x44a>

    default:
      break;
 80088d2:	bf00      	nop
 80088d4:	e00e      	b.n	80088f4 <USBH_HandleEnum+0x44c>
      break;
 80088d6:	bf00      	nop
 80088d8:	e00c      	b.n	80088f4 <USBH_HandleEnum+0x44c>
      break;
 80088da:	bf00      	nop
 80088dc:	e00a      	b.n	80088f4 <USBH_HandleEnum+0x44c>
      break;
 80088de:	bf00      	nop
 80088e0:	e008      	b.n	80088f4 <USBH_HandleEnum+0x44c>
      break;
 80088e2:	bf00      	nop
 80088e4:	e006      	b.n	80088f4 <USBH_HandleEnum+0x44c>
      break;
 80088e6:	bf00      	nop
 80088e8:	e004      	b.n	80088f4 <USBH_HandleEnum+0x44c>
      break;
 80088ea:	bf00      	nop
 80088ec:	e002      	b.n	80088f4 <USBH_HandleEnum+0x44c>
      break;
 80088ee:	bf00      	nop
 80088f0:	e000      	b.n	80088f4 <USBH_HandleEnum+0x44c>
      break;
 80088f2:	bf00      	nop
  }
  return Status;
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop

08008900 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	683a      	ldr	r2, [r7, #0]
 800890e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008912:	bf00      	nop
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b082      	sub	sp, #8
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800892c:	1c5a      	adds	r2, r3, #1
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f804 	bl	8008942 <USBH_HandleSof>
}
 800893a:	bf00      	nop
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b082      	sub	sp, #8
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b0b      	cmp	r3, #11
 8008952:	d10a      	bne.n	800896a <USBH_HandleSof+0x28>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800895a:	2b00      	cmp	r3, #0
 800895c:	d005      	beq.n	800896a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	4798      	blx	r3
  }
}
 800896a:	bf00      	nop
 800896c:	3708      	adds	r7, #8
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b082      	sub	sp, #8
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008996:	2200      	movs	r2, #0
 8008998:	4619      	mov	r1, r3
 800899a:	f001 f89f 	bl	8009adc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800899e:	bf00      	nop
}
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80089a6:	b480      	push	{r7}
 80089a8:	b083      	sub	sp, #12
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80089b6:	bf00      	nop
}
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr

080089c2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b082      	sub	sp, #8
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80089f6:	2200      	movs	r2, #0
 80089f8:	4619      	mov	r1, r3
 80089fa:	f001 f86f 	bl	8009adc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f003 fd24 	bl	800c476 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	791b      	ldrb	r3, [r3, #4]
 8008a32:	4619      	mov	r1, r3
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fecf 	bl	80097d8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	795b      	ldrb	r3, [r3, #5]
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 fec9 	bl	80097d8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	f001 f83d 	bl	8009adc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8008a7a:	f107 030c 	add.w	r3, r7, #12
 8008a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a82:	4618      	mov	r0, r3
 8008a84:	f001 f86a 	bl	8009b5c <osMessageGet>
    if (event.status == osEventMessage)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2b10      	cmp	r3, #16
 8008a8c:	d1f2      	bne.n	8008a74 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7ff faa8 	bl	8007fe4 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8008a94:	e7ee      	b.n	8008a74 <USBH_Process_OS+0x8>

08008a96 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b082      	sub	sp, #8
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	f001 f811 	bl	8009adc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b086      	sub	sp, #24
 8008ac8:	af02      	add	r7, sp, #8
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	460b      	mov	r3, r1
 8008ace:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008ad6:	78fb      	ldrb	r3, [r7, #3]
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	9300      	str	r3, [sp, #0]
 8008adc:	4613      	mov	r3, r2
 8008ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f864 	bl	8008bb2 <USBH_GetDescriptor>
 8008aea:	4603      	mov	r3, r0
 8008aec:	73fb      	strb	r3, [r7, #15]
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10a      	bne.n	8008b0a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008b00:	78fa      	ldrb	r2, [r7, #3]
 8008b02:	b292      	uxth	r2, r2
 8008b04:	4619      	mov	r1, r3
 8008b06:	f000 f918 	bl	8008d3a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af02      	add	r7, sp, #8
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	331c      	adds	r3, #28
 8008b24:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008b26:	887b      	ldrh	r3, [r7, #2]
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b30:	2100      	movs	r1, #0
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 f83d 	bl	8008bb2 <USBH_GetDescriptor>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	72fb      	strb	r3, [r7, #11]
 8008b3c:	7afb      	ldrb	r3, [r7, #11]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d107      	bne.n	8008b52 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008b48:	887a      	ldrh	r2, [r7, #2]
 8008b4a:	68f9      	ldr	r1, [r7, #12]
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 f964 	bl	8008e1a <USBH_ParseCfgDesc>
  }

  return status;
 8008b52:	7afb      	ldrb	r3, [r7, #11]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b088      	sub	sp, #32
 8008b60:	af02      	add	r7, sp, #8
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	607a      	str	r2, [r7, #4]
 8008b66:	461a      	mov	r2, r3
 8008b68:	460b      	mov	r3, r1
 8008b6a:	72fb      	strb	r3, [r7, #11]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008b70:	7afb      	ldrb	r3, [r7, #11]
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008b78:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008b80:	893b      	ldrh	r3, [r7, #8]
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	460b      	mov	r3, r1
 8008b86:	2100      	movs	r1, #0
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f000 f812 	bl	8008bb2 <USBH_GetDescriptor>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	75fb      	strb	r3, [r7, #23]
 8008b92:	7dfb      	ldrb	r3, [r7, #23]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d107      	bne.n	8008ba8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008b9e:	893a      	ldrh	r2, [r7, #8]
 8008ba0:	6879      	ldr	r1, [r7, #4]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 fa37 	bl	8009016 <USBH_ParseStringDesc>
  }

  return status;
 8008ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3718      	adds	r7, #24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b084      	sub	sp, #16
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	60f8      	str	r0, [r7, #12]
 8008bba:	607b      	str	r3, [r7, #4]
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	72fb      	strb	r3, [r7, #11]
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	789b      	ldrb	r3, [r3, #2]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d11c      	bne.n	8008c06 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008bcc:	7afb      	ldrb	r3, [r7, #11]
 8008bce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bd2:	b2da      	uxtb	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2206      	movs	r2, #6
 8008bdc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	893a      	ldrh	r2, [r7, #8]
 8008be2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008be4:	893b      	ldrh	r3, [r7, #8]
 8008be6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008bea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bee:	d104      	bne.n	8008bfa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f240 4209 	movw	r2, #1033	; 0x409
 8008bf6:	829a      	strh	r2, [r3, #20]
 8008bf8:	e002      	b.n	8008c00 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	8b3a      	ldrh	r2, [r7, #24]
 8008c04:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008c06:	8b3b      	ldrh	r3, [r7, #24]
 8008c08:	461a      	mov	r2, r3
 8008c0a:	6879      	ldr	r1, [r7, #4]
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f000 fa50 	bl	80090b2 <USBH_CtlReq>
 8008c12:	4603      	mov	r3, r0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3710      	adds	r7, #16
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	460b      	mov	r3, r1
 8008c26:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	789b      	ldrb	r3, [r3, #2]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d10f      	bne.n	8008c50 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2205      	movs	r2, #5
 8008c3a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008c3c:	78fb      	ldrb	r3, [r7, #3]
 8008c3e:	b29a      	uxth	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008c50:	2200      	movs	r2, #0
 8008c52:	2100      	movs	r1, #0
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fa2c 	bl	80090b2 <USBH_CtlReq>
 8008c5a:	4603      	mov	r3, r0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	789b      	ldrb	r3, [r3, #2]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d10e      	bne.n	8008c96 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2209      	movs	r2, #9
 8008c82:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	887a      	ldrh	r2, [r7, #2]
 8008c88:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008c96:	2200      	movs	r2, #0
 8008c98:	2100      	movs	r1, #0
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fa09 	bl	80090b2 <USBH_CtlReq>
 8008ca0:	4603      	mov	r3, r0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b082      	sub	sp, #8
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	789b      	ldrb	r3, [r3, #2]
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d10f      	bne.n	8008cde <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2203      	movs	r2, #3
 8008cc8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008cca:	78fb      	ldrb	r3, [r7, #3]
 8008ccc:	b29a      	uxth	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008cde:	2200      	movs	r2, #0
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 f9e5 	bl	80090b2 <USBH_CtlReq>
 8008ce8:	4603      	mov	r3, r0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3708      	adds	r7, #8
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b082      	sub	sp, #8
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	789b      	ldrb	r3, [r3, #2]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d10f      	bne.n	8008d26 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2202      	movs	r2, #2
 8008d0a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008d18:	78fb      	ldrb	r3, [r7, #3]
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008d26:	2200      	movs	r2, #0
 8008d28:	2100      	movs	r1, #0
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f9c1 	bl	80090b2 <USBH_CtlReq>
 8008d30:	4603      	mov	r3, r0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b085      	sub	sp, #20
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	60f8      	str	r0, [r7, #12]
 8008d42:	60b9      	str	r1, [r7, #8]
 8008d44:	4613      	mov	r3, r2
 8008d46:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	781a      	ldrb	r2, [r3, #0]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	785a      	ldrb	r2, [r3, #1]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	3302      	adds	r3, #2
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	3303      	adds	r3, #3
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	021b      	lsls	r3, r3, #8
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	b29a      	uxth	r2, r3
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	791a      	ldrb	r2, [r3, #4]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	795a      	ldrb	r2, [r3, #5]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	799a      	ldrb	r2, [r3, #6]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	79da      	ldrb	r2, [r3, #7]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008d94:	88fb      	ldrh	r3, [r7, #6]
 8008d96:	2b08      	cmp	r3, #8
 8008d98:	d939      	bls.n	8008e0e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	3308      	adds	r3, #8
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	b29a      	uxth	r2, r3
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	3309      	adds	r3, #9
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	021b      	lsls	r3, r3, #8
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	4313      	orrs	r3, r2
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	330a      	adds	r3, #10
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	330b      	adds	r3, #11
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	021b      	lsls	r3, r3, #8
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	330c      	adds	r3, #12
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	330d      	adds	r3, #13
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	021b      	lsls	r3, r3, #8
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	4313      	orrs	r3, r2
 8008de8:	b29a      	uxth	r2, r3
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	7b9a      	ldrb	r2, [r3, #14]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	7bda      	ldrb	r2, [r3, #15]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	7c1a      	ldrb	r2, [r3, #16]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	7c5a      	ldrb	r2, [r3, #17]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	745a      	strb	r2, [r3, #17]
  }
}
 8008e0e:	bf00      	nop
 8008e10:	3714      	adds	r7, #20
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b08a      	sub	sp, #40	; 0x28
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	60f8      	str	r0, [r7, #12]
 8008e22:	60b9      	str	r1, [r7, #8]
 8008e24:	4613      	mov	r3, r2
 8008e26:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008e32:	2300      	movs	r3, #0
 8008e34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	781a      	ldrb	r2, [r3, #0]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	785a      	ldrb	r2, [r3, #1]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	3302      	adds	r3, #2
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	3303      	adds	r3, #3
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	021b      	lsls	r3, r3, #8
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	4313      	orrs	r3, r2
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	791a      	ldrb	r2, [r3, #4]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	795a      	ldrb	r2, [r3, #5]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	799a      	ldrb	r2, [r3, #6]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	79da      	ldrb	r2, [r3, #7]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	7a1a      	ldrb	r2, [r3, #8]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008e90:	88fb      	ldrh	r3, [r7, #6]
 8008e92:	2b09      	cmp	r3, #9
 8008e94:	d95f      	bls.n	8008f56 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008e96:	2309      	movs	r3, #9
 8008e98:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008e9e:	e051      	b.n	8008f44 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008ea0:	f107 0316 	add.w	r3, r7, #22
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ea8:	f000 f8e8 	bl	800907c <USBH_GetNextDesc>
 8008eac:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	785b      	ldrb	r3, [r3, #1]
 8008eb2:	2b04      	cmp	r3, #4
 8008eb4:	d146      	bne.n	8008f44 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008eb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008eba:	221a      	movs	r2, #26
 8008ebc:	fb02 f303 	mul.w	r3, r2, r3
 8008ec0:	3308      	adds	r3, #8
 8008ec2:	68fa      	ldr	r2, [r7, #12]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	3302      	adds	r3, #2
 8008ec8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008eca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ecc:	69f8      	ldr	r0, [r7, #28]
 8008ece:	f000 f846 	bl	8008f5e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008edc:	e022      	b.n	8008f24 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008ede:	f107 0316 	add.w	r3, r7, #22
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ee6:	f000 f8c9 	bl	800907c <USBH_GetNextDesc>
 8008eea:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eee:	785b      	ldrb	r3, [r3, #1]
 8008ef0:	2b05      	cmp	r3, #5
 8008ef2:	d117      	bne.n	8008f24 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008ef4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ef8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008efc:	3201      	adds	r2, #1
 8008efe:	00d2      	lsls	r2, r2, #3
 8008f00:	211a      	movs	r1, #26
 8008f02:	fb01 f303 	mul.w	r3, r1, r3
 8008f06:	4413      	add	r3, r2
 8008f08:	3308      	adds	r3, #8
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	3304      	adds	r3, #4
 8008f10:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008f12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f14:	69b8      	ldr	r0, [r7, #24]
 8008f16:	f000 f851 	bl	8008fbc <USBH_ParseEPDesc>
            ep_ix++;
 8008f1a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008f1e:	3301      	adds	r3, #1
 8008f20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	791b      	ldrb	r3, [r3, #4]
 8008f28:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d204      	bcs.n	8008f3a <USBH_ParseCfgDesc+0x120>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	885a      	ldrh	r2, [r3, #2]
 8008f34:	8afb      	ldrh	r3, [r7, #22]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d8d1      	bhi.n	8008ede <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008f3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f3e:	3301      	adds	r3, #1
 8008f40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008f44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d804      	bhi.n	8008f56 <USBH_ParseCfgDesc+0x13c>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	885a      	ldrh	r2, [r3, #2]
 8008f50:	8afb      	ldrh	r3, [r7, #22]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d8a4      	bhi.n	8008ea0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008f56:	bf00      	nop
 8008f58:	3728      	adds	r7, #40	; 0x28
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b083      	sub	sp, #12
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	781a      	ldrb	r2, [r3, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	785a      	ldrb	r2, [r3, #1]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	789a      	ldrb	r2, [r3, #2]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	78da      	ldrb	r2, [r3, #3]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	791a      	ldrb	r2, [r3, #4]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	795a      	ldrb	r2, [r3, #5]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	799a      	ldrb	r2, [r3, #6]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	79da      	ldrb	r2, [r3, #7]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	7a1a      	ldrb	r2, [r3, #8]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	721a      	strb	r2, [r3, #8]
}
 8008fb0:	bf00      	nop
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	781a      	ldrb	r2, [r3, #0]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	785a      	ldrb	r2, [r3, #1]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	789a      	ldrb	r2, [r3, #2]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	78da      	ldrb	r2, [r3, #3]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	3304      	adds	r3, #4
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	3305      	adds	r3, #5
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	021b      	lsls	r3, r3, #8
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	799a      	ldrb	r2, [r3, #6]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	719a      	strb	r2, [r3, #6]
}
 800900a:	bf00      	nop
 800900c:	370c      	adds	r7, #12
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009016:	b480      	push	{r7}
 8009018:	b087      	sub	sp, #28
 800901a:	af00      	add	r7, sp, #0
 800901c:	60f8      	str	r0, [r7, #12]
 800901e:	60b9      	str	r1, [r7, #8]
 8009020:	4613      	mov	r3, r2
 8009022:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	3301      	adds	r3, #1
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	2b03      	cmp	r3, #3
 800902c:	d120      	bne.n	8009070 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	1e9a      	subs	r2, r3, #2
 8009034:	88fb      	ldrh	r3, [r7, #6]
 8009036:	4293      	cmp	r3, r2
 8009038:	bf28      	it	cs
 800903a:	4613      	movcs	r3, r2
 800903c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	3302      	adds	r3, #2
 8009042:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009044:	2300      	movs	r3, #0
 8009046:	82fb      	strh	r3, [r7, #22]
 8009048:	e00b      	b.n	8009062 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800904a:	8afb      	ldrh	r3, [r7, #22]
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	4413      	add	r3, r2
 8009050:	781a      	ldrb	r2, [r3, #0]
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	3301      	adds	r3, #1
 800905a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800905c:	8afb      	ldrh	r3, [r7, #22]
 800905e:	3302      	adds	r3, #2
 8009060:	82fb      	strh	r3, [r7, #22]
 8009062:	8afa      	ldrh	r2, [r7, #22]
 8009064:	8abb      	ldrh	r3, [r7, #20]
 8009066:	429a      	cmp	r2, r3
 8009068:	d3ef      	bcc.n	800904a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	2200      	movs	r2, #0
 800906e:	701a      	strb	r2, [r3, #0]
  }
}
 8009070:	bf00      	nop
 8009072:	371c      	adds	r7, #28
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	881a      	ldrh	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	b29b      	uxth	r3, r3
 8009090:	4413      	add	r3, r2
 8009092:	b29a      	uxth	r2, r3
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4413      	add	r3, r2
 80090a2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80090a4:	68fb      	ldr	r3, [r7, #12]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3714      	adds	r7, #20
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b086      	sub	sp, #24
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	60f8      	str	r0, [r7, #12]
 80090ba:	60b9      	str	r1, [r7, #8]
 80090bc:	4613      	mov	r3, r2
 80090be:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80090c0:	2301      	movs	r3, #1
 80090c2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	789b      	ldrb	r3, [r3, #2]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d002      	beq.n	80090d2 <USBH_CtlReq+0x20>
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d01d      	beq.n	800910c <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80090d0:	e043      	b.n	800915a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	68ba      	ldr	r2, [r7, #8]
 80090d6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	88fa      	ldrh	r2, [r7, #6]
 80090dc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2201      	movs	r2, #1
 80090e2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2202      	movs	r2, #2
 80090e8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80090ea:	2301      	movs	r3, #1
 80090ec:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2203      	movs	r2, #3
 80090f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009102:	2200      	movs	r2, #0
 8009104:	4619      	mov	r1, r3
 8009106:	f000 fce9 	bl	8009adc <osMessagePut>
      break;
 800910a:	e026      	b.n	800915a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	f000 f829 	bl	8009164 <USBH_HandleControl>
 8009112:	4603      	mov	r3, r0
 8009114:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009116:	7dfb      	ldrb	r3, [r7, #23]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d002      	beq.n	8009122 <USBH_CtlReq+0x70>
 800911c:	7dfb      	ldrb	r3, [r7, #23]
 800911e:	2b03      	cmp	r3, #3
 8009120:	d106      	bne.n	8009130 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2201      	movs	r2, #1
 8009126:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2200      	movs	r2, #0
 800912c:	761a      	strb	r2, [r3, #24]
 800912e:	e005      	b.n	800913c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8009130:	7dfb      	ldrb	r3, [r7, #23]
 8009132:	2b02      	cmp	r3, #2
 8009134:	d102      	bne.n	800913c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2201      	movs	r2, #1
 800913a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2203      	movs	r2, #3
 8009140:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009150:	2200      	movs	r2, #0
 8009152:	4619      	mov	r1, r3
 8009154:	f000 fcc2 	bl	8009adc <osMessagePut>
      break;
 8009158:	bf00      	nop
  }
  return status;
 800915a:	7dfb      	ldrb	r3, [r7, #23]
}
 800915c:	4618      	mov	r0, r3
 800915e:	3718      	adds	r7, #24
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b086      	sub	sp, #24
 8009168:	af02      	add	r7, sp, #8
 800916a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800916c:	2301      	movs	r3, #1
 800916e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009170:	2300      	movs	r3, #0
 8009172:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	7e1b      	ldrb	r3, [r3, #24]
 8009178:	3b01      	subs	r3, #1
 800917a:	2b0a      	cmp	r3, #10
 800917c:	f200 822b 	bhi.w	80095d6 <USBH_HandleControl+0x472>
 8009180:	a201      	add	r2, pc, #4	; (adr r2, 8009188 <USBH_HandleControl+0x24>)
 8009182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009186:	bf00      	nop
 8009188:	080091b5 	.word	0x080091b5
 800918c:	080091cf 	.word	0x080091cf
 8009190:	08009271 	.word	0x08009271
 8009194:	08009297 	.word	0x08009297
 8009198:	08009323 	.word	0x08009323
 800919c:	0800934f 	.word	0x0800934f
 80091a0:	08009411 	.word	0x08009411
 80091a4:	08009433 	.word	0x08009433
 80091a8:	080094c5 	.word	0x080094c5
 80091ac:	080094ed 	.word	0x080094ed
 80091b0:	0800957f 	.word	0x0800957f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f103 0110 	add.w	r1, r3, #16
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	795b      	ldrb	r3, [r3, #5]
 80091be:	461a      	mov	r2, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fa19 	bl	80095f8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2202      	movs	r2, #2
 80091ca:	761a      	strb	r2, [r3, #24]
      break;
 80091cc:	e20e      	b.n	80095ec <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	795b      	ldrb	r3, [r3, #5]
 80091d2:	4619      	mov	r1, r3
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f003 fa3b 	bl	800c650 <USBH_LL_GetURBState>
 80091da:	4603      	mov	r3, r0
 80091dc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80091de:	7bbb      	ldrb	r3, [r7, #14]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d12c      	bne.n	800923e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	7c1b      	ldrb	r3, [r3, #16]
 80091e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80091ec:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	8adb      	ldrh	r3, [r3, #22]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00a      	beq.n	800920c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80091f6:	7b7b      	ldrb	r3, [r7, #13]
 80091f8:	2b80      	cmp	r3, #128	; 0x80
 80091fa:	d103      	bne.n	8009204 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2203      	movs	r2, #3
 8009200:	761a      	strb	r2, [r3, #24]
 8009202:	e00d      	b.n	8009220 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2205      	movs	r2, #5
 8009208:	761a      	strb	r2, [r3, #24]
 800920a:	e009      	b.n	8009220 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800920c:	7b7b      	ldrb	r3, [r7, #13]
 800920e:	2b80      	cmp	r3, #128	; 0x80
 8009210:	d103      	bne.n	800921a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2209      	movs	r2, #9
 8009216:	761a      	strb	r2, [r3, #24]
 8009218:	e002      	b.n	8009220 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2207      	movs	r2, #7
 800921e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2203      	movs	r2, #3
 8009224:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009234:	2200      	movs	r2, #0
 8009236:	4619      	mov	r1, r3
 8009238:	f000 fc50 	bl	8009adc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800923c:	e1cd      	b.n	80095da <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800923e:	7bbb      	ldrb	r3, [r7, #14]
 8009240:	2b04      	cmp	r3, #4
 8009242:	d003      	beq.n	800924c <USBH_HandleControl+0xe8>
 8009244:	7bbb      	ldrb	r3, [r7, #14]
 8009246:	2b02      	cmp	r3, #2
 8009248:	f040 81c7 	bne.w	80095da <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	220b      	movs	r2, #11
 8009250:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2203      	movs	r2, #3
 8009256:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009266:	2200      	movs	r2, #0
 8009268:	4619      	mov	r1, r3
 800926a:	f000 fc37 	bl	8009adc <osMessagePut>
      break;
 800926e:	e1b4      	b.n	80095da <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009276:	b29a      	uxth	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6899      	ldr	r1, [r3, #8]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	899a      	ldrh	r2, [r3, #12]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	791b      	ldrb	r3, [r3, #4]
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f9f4 	bl	8009676 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2204      	movs	r2, #4
 8009292:	761a      	strb	r2, [r3, #24]
      break;
 8009294:	e1aa      	b.n	80095ec <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	791b      	ldrb	r3, [r3, #4]
 800929a:	4619      	mov	r1, r3
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f003 f9d7 	bl	800c650 <USBH_LL_GetURBState>
 80092a2:	4603      	mov	r3, r0
 80092a4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80092a6:	7bbb      	ldrb	r3, [r7, #14]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d110      	bne.n	80092ce <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2209      	movs	r2, #9
 80092b0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2203      	movs	r2, #3
 80092b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80092c6:	2200      	movs	r2, #0
 80092c8:	4619      	mov	r1, r3
 80092ca:	f000 fc07 	bl	8009adc <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80092ce:	7bbb      	ldrb	r3, [r7, #14]
 80092d0:	2b05      	cmp	r3, #5
 80092d2:	d110      	bne.n	80092f6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80092d4:	2303      	movs	r3, #3
 80092d6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2203      	movs	r2, #3
 80092dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80092ec:	2200      	movs	r2, #0
 80092ee:	4619      	mov	r1, r3
 80092f0:	f000 fbf4 	bl	8009adc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80092f4:	e173      	b.n	80095de <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80092f6:	7bbb      	ldrb	r3, [r7, #14]
 80092f8:	2b04      	cmp	r3, #4
 80092fa:	f040 8170 	bne.w	80095de <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	220b      	movs	r2, #11
 8009302:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2203      	movs	r2, #3
 8009308:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009318:	2200      	movs	r2, #0
 800931a:	4619      	mov	r1, r3
 800931c:	f000 fbde 	bl	8009adc <osMessagePut>
      break;
 8009320:	e15d      	b.n	80095de <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6899      	ldr	r1, [r3, #8]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	899a      	ldrh	r2, [r3, #12]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	7958      	ldrb	r0, [r3, #5]
 800932e:	2301      	movs	r3, #1
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	4603      	mov	r3, r0
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f979 	bl	800962c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009340:	b29a      	uxth	r2, r3
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2206      	movs	r2, #6
 800934a:	761a      	strb	r2, [r3, #24]
      break;
 800934c:	e14e      	b.n	80095ec <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	795b      	ldrb	r3, [r3, #5]
 8009352:	4619      	mov	r1, r3
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f003 f97b 	bl	800c650 <USBH_LL_GetURBState>
 800935a:	4603      	mov	r3, r0
 800935c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800935e:	7bbb      	ldrb	r3, [r7, #14]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d111      	bne.n	8009388 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2207      	movs	r2, #7
 8009368:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2203      	movs	r2, #3
 800936e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800937e:	2200      	movs	r2, #0
 8009380:	4619      	mov	r1, r3
 8009382:	f000 fbab 	bl	8009adc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009386:	e12c      	b.n	80095e2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 8009388:	7bbb      	ldrb	r3, [r7, #14]
 800938a:	2b05      	cmp	r3, #5
 800938c:	d113      	bne.n	80093b6 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	220c      	movs	r2, #12
 8009392:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009394:	2303      	movs	r3, #3
 8009396:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2203      	movs	r2, #3
 800939c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80093ac:	2200      	movs	r2, #0
 80093ae:	4619      	mov	r1, r3
 80093b0:	f000 fb94 	bl	8009adc <osMessagePut>
      break;
 80093b4:	e115      	b.n	80095e2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 80093b6:	7bbb      	ldrb	r3, [r7, #14]
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	d111      	bne.n	80093e0 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2205      	movs	r2, #5
 80093c0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2203      	movs	r2, #3
 80093c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80093d6:	2200      	movs	r2, #0
 80093d8:	4619      	mov	r1, r3
 80093da:	f000 fb7f 	bl	8009adc <osMessagePut>
      break;
 80093de:	e100      	b.n	80095e2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 80093e0:	7bbb      	ldrb	r3, [r7, #14]
 80093e2:	2b04      	cmp	r3, #4
 80093e4:	f040 80fd 	bne.w	80095e2 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	220b      	movs	r2, #11
 80093ec:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80093ee:	2302      	movs	r3, #2
 80093f0:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2203      	movs	r2, #3
 80093f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009406:	2200      	movs	r2, #0
 8009408:	4619      	mov	r1, r3
 800940a:	f000 fb67 	bl	8009adc <osMessagePut>
      break;
 800940e:	e0e8      	b.n	80095e2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	791b      	ldrb	r3, [r3, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	2100      	movs	r1, #0
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f92c 	bl	8009676 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009424:	b29a      	uxth	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2208      	movs	r2, #8
 800942e:	761a      	strb	r2, [r3, #24]

      break;
 8009430:	e0dc      	b.n	80095ec <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	791b      	ldrb	r3, [r3, #4]
 8009436:	4619      	mov	r1, r3
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f003 f909 	bl	800c650 <USBH_LL_GetURBState>
 800943e:	4603      	mov	r3, r0
 8009440:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009442:	7bbb      	ldrb	r3, [r7, #14]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d113      	bne.n	8009470 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	220d      	movs	r2, #13
 800944c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800944e:	2300      	movs	r3, #0
 8009450:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2203      	movs	r2, #3
 8009456:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009466:	2200      	movs	r2, #0
 8009468:	4619      	mov	r1, r3
 800946a:	f000 fb37 	bl	8009adc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800946e:	e0ba      	b.n	80095e6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 8009470:	7bbb      	ldrb	r3, [r7, #14]
 8009472:	2b04      	cmp	r3, #4
 8009474:	d111      	bne.n	800949a <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	220b      	movs	r2, #11
 800947a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2203      	movs	r2, #3
 8009480:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009490:	2200      	movs	r2, #0
 8009492:	4619      	mov	r1, r3
 8009494:	f000 fb22 	bl	8009adc <osMessagePut>
      break;
 8009498:	e0a5      	b.n	80095e6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800949a:	7bbb      	ldrb	r3, [r7, #14]
 800949c:	2b05      	cmp	r3, #5
 800949e:	f040 80a2 	bne.w	80095e6 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 80094a2:	2303      	movs	r3, #3
 80094a4:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2203      	movs	r2, #3
 80094aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80094ba:	2200      	movs	r2, #0
 80094bc:	4619      	mov	r1, r3
 80094be:	f000 fb0d 	bl	8009adc <osMessagePut>
      break;
 80094c2:	e090      	b.n	80095e6 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	795a      	ldrb	r2, [r3, #5]
 80094c8:	2301      	movs	r3, #1
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	4613      	mov	r3, r2
 80094ce:	2200      	movs	r2, #0
 80094d0:	2100      	movs	r1, #0
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f8aa 	bl	800962c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80094de:	b29a      	uxth	r2, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	220a      	movs	r2, #10
 80094e8:	761a      	strb	r2, [r3, #24]
      break;
 80094ea:	e07f      	b.n	80095ec <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	795b      	ldrb	r3, [r3, #5]
 80094f0:	4619      	mov	r1, r3
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f003 f8ac 	bl	800c650 <USBH_LL_GetURBState>
 80094f8:	4603      	mov	r3, r0
 80094fa:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80094fc:	7bbb      	ldrb	r3, [r7, #14]
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d113      	bne.n	800952a <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 8009502:	2300      	movs	r3, #0
 8009504:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	220d      	movs	r2, #13
 800950a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2203      	movs	r2, #3
 8009510:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009520:	2200      	movs	r2, #0
 8009522:	4619      	mov	r1, r3
 8009524:	f000 fada 	bl	8009adc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009528:	e05f      	b.n	80095ea <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800952a:	7bbb      	ldrb	r3, [r7, #14]
 800952c:	2b02      	cmp	r3, #2
 800952e:	d111      	bne.n	8009554 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2209      	movs	r2, #9
 8009534:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2203      	movs	r2, #3
 800953a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800954a:	2200      	movs	r2, #0
 800954c:	4619      	mov	r1, r3
 800954e:	f000 fac5 	bl	8009adc <osMessagePut>
      break;
 8009552:	e04a      	b.n	80095ea <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 8009554:	7bbb      	ldrb	r3, [r7, #14]
 8009556:	2b04      	cmp	r3, #4
 8009558:	d147      	bne.n	80095ea <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	220b      	movs	r2, #11
 800955e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2203      	movs	r2, #3
 8009564:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009574:	2200      	movs	r2, #0
 8009576:	4619      	mov	r1, r3
 8009578:	f000 fab0 	bl	8009adc <osMessagePut>
      break;
 800957c:	e035      	b.n	80095ea <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	7e5b      	ldrb	r3, [r3, #25]
 8009582:	3301      	adds	r3, #1
 8009584:	b2da      	uxtb	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	765a      	strb	r2, [r3, #25]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	7e5b      	ldrb	r3, [r3, #25]
 800958e:	2b02      	cmp	r3, #2
 8009590:	d806      	bhi.n	80095a0 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2201      	movs	r2, #1
 8009596:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800959e:	e025      	b.n	80095ec <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095a6:	2106      	movs	r1, #6
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	795b      	ldrb	r3, [r3, #5]
 80095b6:	4619      	mov	r1, r3
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 f90d 	bl	80097d8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	791b      	ldrb	r3, [r3, #4]
 80095c2:	4619      	mov	r1, r3
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 f907 	bl	80097d8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80095d0:	2302      	movs	r3, #2
 80095d2:	73fb      	strb	r3, [r7, #15]
      break;
 80095d4:	e00a      	b.n	80095ec <USBH_HandleControl+0x488>

    default:
      break;
 80095d6:	bf00      	nop
 80095d8:	e008      	b.n	80095ec <USBH_HandleControl+0x488>
      break;
 80095da:	bf00      	nop
 80095dc:	e006      	b.n	80095ec <USBH_HandleControl+0x488>
      break;
 80095de:	bf00      	nop
 80095e0:	e004      	b.n	80095ec <USBH_HandleControl+0x488>
      break;
 80095e2:	bf00      	nop
 80095e4:	e002      	b.n	80095ec <USBH_HandleControl+0x488>
      break;
 80095e6:	bf00      	nop
 80095e8:	e000      	b.n	80095ec <USBH_HandleControl+0x488>
      break;
 80095ea:	bf00      	nop
  }

  return status;
 80095ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop

080095f8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b088      	sub	sp, #32
 80095fc:	af04      	add	r7, sp, #16
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	4613      	mov	r3, r2
 8009604:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009606:	79f9      	ldrb	r1, [r7, #7]
 8009608:	2300      	movs	r3, #0
 800960a:	9303      	str	r3, [sp, #12]
 800960c:	2308      	movs	r3, #8
 800960e:	9302      	str	r3, [sp, #8]
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	9301      	str	r3, [sp, #4]
 8009614:	2300      	movs	r3, #0
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	2300      	movs	r3, #0
 800961a:	2200      	movs	r2, #0
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f002 ffe6 	bl	800c5ee <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b088      	sub	sp, #32
 8009630:	af04      	add	r7, sp, #16
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	4611      	mov	r1, r2
 8009638:	461a      	mov	r2, r3
 800963a:	460b      	mov	r3, r1
 800963c:	80fb      	strh	r3, [r7, #6]
 800963e:	4613      	mov	r3, r2
 8009640:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009648:	2b00      	cmp	r3, #0
 800964a:	d001      	beq.n	8009650 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800964c:	2300      	movs	r3, #0
 800964e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009650:	7979      	ldrb	r1, [r7, #5]
 8009652:	7e3b      	ldrb	r3, [r7, #24]
 8009654:	9303      	str	r3, [sp, #12]
 8009656:	88fb      	ldrh	r3, [r7, #6]
 8009658:	9302      	str	r3, [sp, #8]
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	9301      	str	r3, [sp, #4]
 800965e:	2301      	movs	r3, #1
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	2300      	movs	r3, #0
 8009664:	2200      	movs	r2, #0
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f002 ffc1 	bl	800c5ee <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b088      	sub	sp, #32
 800967a:	af04      	add	r7, sp, #16
 800967c:	60f8      	str	r0, [r7, #12]
 800967e:	60b9      	str	r1, [r7, #8]
 8009680:	4611      	mov	r1, r2
 8009682:	461a      	mov	r2, r3
 8009684:	460b      	mov	r3, r1
 8009686:	80fb      	strh	r3, [r7, #6]
 8009688:	4613      	mov	r3, r2
 800968a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800968c:	7979      	ldrb	r1, [r7, #5]
 800968e:	2300      	movs	r3, #0
 8009690:	9303      	str	r3, [sp, #12]
 8009692:	88fb      	ldrh	r3, [r7, #6]
 8009694:	9302      	str	r3, [sp, #8]
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	9301      	str	r3, [sp, #4]
 800969a:	2301      	movs	r3, #1
 800969c:	9300      	str	r3, [sp, #0]
 800969e:	2300      	movs	r3, #0
 80096a0:	2201      	movs	r2, #1
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f002 ffa3 	bl	800c5ee <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80096a8:	2300      	movs	r3, #0

}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b088      	sub	sp, #32
 80096b6:	af04      	add	r7, sp, #16
 80096b8:	60f8      	str	r0, [r7, #12]
 80096ba:	60b9      	str	r1, [r7, #8]
 80096bc:	4611      	mov	r1, r2
 80096be:	461a      	mov	r2, r3
 80096c0:	460b      	mov	r3, r1
 80096c2:	80fb      	strh	r3, [r7, #6]
 80096c4:	4613      	mov	r3, r2
 80096c6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d001      	beq.n	80096d6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80096d2:	2300      	movs	r3, #0
 80096d4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80096d6:	7979      	ldrb	r1, [r7, #5]
 80096d8:	7e3b      	ldrb	r3, [r7, #24]
 80096da:	9303      	str	r3, [sp, #12]
 80096dc:	88fb      	ldrh	r3, [r7, #6]
 80096de:	9302      	str	r3, [sp, #8]
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	9301      	str	r3, [sp, #4]
 80096e4:	2301      	movs	r3, #1
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	2302      	movs	r3, #2
 80096ea:	2200      	movs	r2, #0
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f002 ff7e 	bl	800c5ee <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b088      	sub	sp, #32
 8009700:	af04      	add	r7, sp, #16
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	4611      	mov	r1, r2
 8009708:	461a      	mov	r2, r3
 800970a:	460b      	mov	r3, r1
 800970c:	80fb      	strh	r3, [r7, #6]
 800970e:	4613      	mov	r3, r2
 8009710:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009712:	7979      	ldrb	r1, [r7, #5]
 8009714:	2300      	movs	r3, #0
 8009716:	9303      	str	r3, [sp, #12]
 8009718:	88fb      	ldrh	r3, [r7, #6]
 800971a:	9302      	str	r3, [sp, #8]
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	9301      	str	r3, [sp, #4]
 8009720:	2301      	movs	r3, #1
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	2302      	movs	r3, #2
 8009726:	2201      	movs	r2, #1
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f002 ff60 	bl	800c5ee <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3710      	adds	r7, #16
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af04      	add	r7, sp, #16
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	4608      	mov	r0, r1
 8009742:	4611      	mov	r1, r2
 8009744:	461a      	mov	r2, r3
 8009746:	4603      	mov	r3, r0
 8009748:	70fb      	strb	r3, [r7, #3]
 800974a:	460b      	mov	r3, r1
 800974c:	70bb      	strb	r3, [r7, #2]
 800974e:	4613      	mov	r3, r2
 8009750:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009752:	7878      	ldrb	r0, [r7, #1]
 8009754:	78ba      	ldrb	r2, [r7, #2]
 8009756:	78f9      	ldrb	r1, [r7, #3]
 8009758:	8b3b      	ldrh	r3, [r7, #24]
 800975a:	9302      	str	r3, [sp, #8]
 800975c:	7d3b      	ldrb	r3, [r7, #20]
 800975e:	9301      	str	r3, [sp, #4]
 8009760:	7c3b      	ldrb	r3, [r7, #16]
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	4603      	mov	r3, r0
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f002 fef3 	bl	800c552 <USBH_LL_OpenPipe>

  return USBH_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b082      	sub	sp, #8
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
 800977e:	460b      	mov	r3, r1
 8009780:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009782:	78fb      	ldrb	r3, [r7, #3]
 8009784:	4619      	mov	r1, r3
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f002 ff12 	bl	800c5b0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b084      	sub	sp, #16
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
 800979e:	460b      	mov	r3, r1
 80097a0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f836 	bl	8009814 <USBH_GetFreePipe>
 80097a8:	4603      	mov	r3, r0
 80097aa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80097ac:	89fb      	ldrh	r3, [r7, #14]
 80097ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d00a      	beq.n	80097cc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80097b6:	78fa      	ldrb	r2, [r7, #3]
 80097b8:	89fb      	ldrh	r3, [r7, #14]
 80097ba:	f003 030f 	and.w	r3, r3, #15
 80097be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80097c2:	6879      	ldr	r1, [r7, #4]
 80097c4:	33e0      	adds	r3, #224	; 0xe0
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	440b      	add	r3, r1
 80097ca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80097cc:	89fb      	ldrh	r3, [r7, #14]
 80097ce:	b2db      	uxtb	r3, r3
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	460b      	mov	r3, r1
 80097e2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80097e4:	78fb      	ldrb	r3, [r7, #3]
 80097e6:	2b0a      	cmp	r3, #10
 80097e8:	d80d      	bhi.n	8009806 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80097ea:	78fb      	ldrb	r3, [r7, #3]
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	33e0      	adds	r3, #224	; 0xe0
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	4413      	add	r3, r2
 80097f4:	685a      	ldr	r2, [r3, #4]
 80097f6:	78fb      	ldrb	r3, [r7, #3]
 80097f8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80097fc:	6879      	ldr	r1, [r7, #4]
 80097fe:	33e0      	adds	r3, #224	; 0xe0
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	440b      	add	r3, r1
 8009804:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800981c:	2300      	movs	r3, #0
 800981e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009820:	2300      	movs	r3, #0
 8009822:	73fb      	strb	r3, [r7, #15]
 8009824:	e00f      	b.n	8009846 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009826:	7bfb      	ldrb	r3, [r7, #15]
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	33e0      	adds	r3, #224	; 0xe0
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	4413      	add	r3, r2
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009836:	2b00      	cmp	r3, #0
 8009838:	d102      	bne.n	8009840 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800983a:	7bfb      	ldrb	r3, [r7, #15]
 800983c:	b29b      	uxth	r3, r3
 800983e:	e007      	b.n	8009850 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009840:	7bfb      	ldrb	r3, [r7, #15]
 8009842:	3301      	adds	r3, #1
 8009844:	73fb      	strb	r3, [r7, #15]
 8009846:	7bfb      	ldrb	r3, [r7, #15]
 8009848:	2b0a      	cmp	r3, #10
 800984a:	d9ec      	bls.n	8009826 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800984c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009850:	4618      	mov	r0, r3
 8009852:	3714      	adds	r7, #20
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	4603      	mov	r3, r0
 8009864:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009866:	2300      	movs	r3, #0
 8009868:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800986a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800986e:	2b84      	cmp	r3, #132	; 0x84
 8009870:	d005      	beq.n	800987e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009872:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	4413      	add	r3, r2
 800987a:	3303      	adds	r3, #3
 800987c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800987e:	68fb      	ldr	r3, [r7, #12]
}
 8009880:	4618      	mov	r0, r3
 8009882:	3714      	adds	r7, #20
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009892:	f3ef 8305 	mrs	r3, IPSR
 8009896:	607b      	str	r3, [r7, #4]
  return(result);
 8009898:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800989a:	2b00      	cmp	r3, #0
 800989c:	bf14      	ite	ne
 800989e:	2301      	movne	r3, #1
 80098a0:	2300      	moveq	r3, #0
 80098a2:	b2db      	uxtb	r3, r3
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80098b4:	f001 fb2a 	bl	800af0c <vTaskStartScheduler>
  
  return osOK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	bd80      	pop	{r7, pc}

080098be <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80098c2:	f7ff ffe3 	bl	800988c <inHandlerMode>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d003      	beq.n	80098d4 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80098cc:	f001 fc38 	bl	800b140 <xTaskGetTickCountFromISR>
 80098d0:	4603      	mov	r3, r0
 80098d2:	e002      	b.n	80098da <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80098d4:	f001 fc24 	bl	800b120 <xTaskGetTickCount>
 80098d8:	4603      	mov	r3, r0
  }
}
 80098da:	4618      	mov	r0, r3
 80098dc:	bd80      	pop	{r7, pc}

080098de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80098de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098e0:	b089      	sub	sp, #36	; 0x24
 80098e2:	af04      	add	r7, sp, #16
 80098e4:	6078      	str	r0, [r7, #4]
 80098e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	695b      	ldr	r3, [r3, #20]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d020      	beq.n	8009932 <osThreadCreate+0x54>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	699b      	ldr	r3, [r3, #24]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d01c      	beq.n	8009932 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	685c      	ldr	r4, [r3, #4]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681d      	ldr	r5, [r3, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	691e      	ldr	r6, [r3, #16]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800990a:	4618      	mov	r0, r3
 800990c:	f7ff ffa6 	bl	800985c <makeFreeRtosPriority>
 8009910:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	695b      	ldr	r3, [r3, #20]
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800991a:	9202      	str	r2, [sp, #8]
 800991c:	9301      	str	r3, [sp, #4]
 800991e:	9100      	str	r1, [sp, #0]
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	4632      	mov	r2, r6
 8009924:	4629      	mov	r1, r5
 8009926:	4620      	mov	r0, r4
 8009928:	f001 f815 	bl	800a956 <xTaskCreateStatic>
 800992c:	4603      	mov	r3, r0
 800992e:	60fb      	str	r3, [r7, #12]
 8009930:	e01c      	b.n	800996c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	685c      	ldr	r4, [r3, #4]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800993e:	b29e      	uxth	r6, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009946:	4618      	mov	r0, r3
 8009948:	f7ff ff88 	bl	800985c <makeFreeRtosPriority>
 800994c:	4602      	mov	r2, r0
 800994e:	f107 030c 	add.w	r3, r7, #12
 8009952:	9301      	str	r3, [sp, #4]
 8009954:	9200      	str	r2, [sp, #0]
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	4632      	mov	r2, r6
 800995a:	4629      	mov	r1, r5
 800995c:	4620      	mov	r0, r4
 800995e:	f001 f854 	bl	800aa0a <xTaskCreate>
 8009962:	4603      	mov	r3, r0
 8009964:	2b01      	cmp	r3, #1
 8009966:	d001      	beq.n	800996c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009968:	2300      	movs	r3, #0
 800996a:	e000      	b.n	800996e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800996c:	68fb      	ldr	r3, [r7, #12]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3714      	adds	r7, #20
 8009972:	46bd      	mov	sp, r7
 8009974:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009976 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b082      	sub	sp, #8
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f001 f988 	bl	800ac94 <vTaskDelete>
  return osOK;
 8009984:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8009986:	4618      	mov	r0, r3
 8009988:	3708      	adds	r7, #8
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b084      	sub	sp, #16
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d001      	beq.n	80099a4 <osDelay+0x16>
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	e000      	b.n	80099a6 <osDelay+0x18>
 80099a4:	2301      	movs	r3, #1
 80099a6:	4618      	mov	r0, r3
 80099a8:	f001 fa7c 	bl	800aea4 <vTaskDelay>
  
  return osOK;
 80099ac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b086      	sub	sp, #24
 80099ba:	af02      	add	r7, sp, #8
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d010      	beq.n	80099ea <osSemaphoreCreate+0x34>
    if (count == 1) {
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d10b      	bne.n	80099e6 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	685a      	ldr	r2, [r3, #4]
 80099d2:	2303      	movs	r3, #3
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	4613      	mov	r3, r2
 80099d8:	2200      	movs	r2, #0
 80099da:	2100      	movs	r1, #0
 80099dc:	2001      	movs	r0, #1
 80099de:	f000 fa63 	bl	8009ea8 <xQueueGenericCreateStatic>
 80099e2:	4603      	mov	r3, r0
 80099e4:	e016      	b.n	8009a14 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80099e6:	2300      	movs	r3, #0
 80099e8:	e014      	b.n	8009a14 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d110      	bne.n	8009a12 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80099f0:	2203      	movs	r2, #3
 80099f2:	2100      	movs	r1, #0
 80099f4:	2001      	movs	r0, #1
 80099f6:	f000 faca 	bl	8009f8e <xQueueGenericCreate>
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d005      	beq.n	8009a0e <osSemaphoreCreate+0x58>
 8009a02:	2300      	movs	r3, #0
 8009a04:	2200      	movs	r2, #0
 8009a06:	2100      	movs	r1, #0
 8009a08:	68f8      	ldr	r0, [r7, #12]
 8009a0a:	f000 fb23 	bl	800a054 <xQueueGenericSend>
      return sema;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	e000      	b.n	8009a14 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009a12:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3710      	adds	r7, #16
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009a24:	2300      	movs	r3, #0
 8009a26:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009a2c:	f7ff ff2e 	bl	800988c <inHandlerMode>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d016      	beq.n	8009a64 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009a36:	f107 0308 	add.w	r3, r7, #8
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fc97 	bl	800a370 <xQueueGiveFromISR>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d001      	beq.n	8009a4c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009a48:	23ff      	movs	r3, #255	; 0xff
 8009a4a:	e017      	b.n	8009a7c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d013      	beq.n	8009a7a <osSemaphoreRelease+0x5e>
 8009a52:	4b0c      	ldr	r3, [pc, #48]	; (8009a84 <osSemaphoreRelease+0x68>)
 8009a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a58:	601a      	str	r2, [r3, #0]
 8009a5a:	f3bf 8f4f 	dsb	sy
 8009a5e:	f3bf 8f6f 	isb	sy
 8009a62:	e00a      	b.n	8009a7a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009a64:	2300      	movs	r3, #0
 8009a66:	2200      	movs	r2, #0
 8009a68:	2100      	movs	r1, #0
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 faf2 	bl	800a054 <xQueueGenericSend>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d001      	beq.n	8009a7a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009a76:	23ff      	movs	r3, #255	; 0xff
 8009a78:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3710      	adds	r7, #16
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	e000ed04 	.word	0xe000ed04

08009a88 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009a88:	b590      	push	{r4, r7, lr}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af02      	add	r7, sp, #8
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d012      	beq.n	8009ac0 <osMessageCreate+0x38>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00e      	beq.n	8009ac0 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6818      	ldr	r0, [r3, #0]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6859      	ldr	r1, [r3, #4]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	689a      	ldr	r2, [r3, #8]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	68dc      	ldr	r4, [r3, #12]
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	9300      	str	r3, [sp, #0]
 8009ab6:	4623      	mov	r3, r4
 8009ab8:	f000 f9f6 	bl	8009ea8 <xQueueGenericCreateStatic>
 8009abc:	4603      	mov	r3, r0
 8009abe:	e008      	b.n	8009ad2 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6818      	ldr	r0, [r3, #0]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	4619      	mov	r1, r3
 8009acc:	f000 fa5f 	bl	8009f8e <xQueueGenericCreate>
 8009ad0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd90      	pop	{r4, r7, pc}
	...

08009adc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b086      	sub	sp, #24
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d101      	bne.n	8009afa <osMessagePut+0x1e>
    ticks = 1;
 8009af6:	2301      	movs	r3, #1
 8009af8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009afa:	f7ff fec7 	bl	800988c <inHandlerMode>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d018      	beq.n	8009b36 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009b04:	f107 0210 	add.w	r2, r7, #16
 8009b08:	f107 0108 	add.w	r1, r7, #8
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f000 fb9a 	bl	800a248 <xQueueGenericSendFromISR>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d001      	beq.n	8009b1e <osMessagePut+0x42>
      return osErrorOS;
 8009b1a:	23ff      	movs	r3, #255	; 0xff
 8009b1c:	e018      	b.n	8009b50 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d014      	beq.n	8009b4e <osMessagePut+0x72>
 8009b24:	4b0c      	ldr	r3, [pc, #48]	; (8009b58 <osMessagePut+0x7c>)
 8009b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b2a:	601a      	str	r2, [r3, #0]
 8009b2c:	f3bf 8f4f 	dsb	sy
 8009b30:	f3bf 8f6f 	isb	sy
 8009b34:	e00b      	b.n	8009b4e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009b36:	f107 0108 	add.w	r1, r7, #8
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	697a      	ldr	r2, [r7, #20]
 8009b3e:	68f8      	ldr	r0, [r7, #12]
 8009b40:	f000 fa88 	bl	800a054 <xQueueGenericSend>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d001      	beq.n	8009b4e <osMessagePut+0x72>
      return osErrorOS;
 8009b4a:	23ff      	movs	r3, #255	; 0xff
 8009b4c:	e000      	b.n	8009b50 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3718      	adds	r7, #24
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	e000ed04 	.word	0xe000ed04

08009b5c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009b5c:	b590      	push	{r4, r7, lr}
 8009b5e:	b08b      	sub	sp, #44	; 0x2c
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d10a      	bne.n	8009b8c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009b76:	2380      	movs	r3, #128	; 0x80
 8009b78:	617b      	str	r3, [r7, #20]
    return event;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	461c      	mov	r4, r3
 8009b7e:	f107 0314 	add.w	r3, r7, #20
 8009b82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009b8a:	e054      	b.n	8009c36 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009b90:	2300      	movs	r3, #0
 8009b92:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b9a:	d103      	bne.n	8009ba4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8009ba2:	e009      	b.n	8009bb8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d006      	beq.n	8009bb8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d101      	bne.n	8009bb8 <osMessageGet+0x5c>
      ticks = 1;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009bb8:	f7ff fe68 	bl	800988c <inHandlerMode>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d01c      	beq.n	8009bfc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009bc2:	f107 0220 	add.w	r2, r7, #32
 8009bc6:	f107 0314 	add.w	r3, r7, #20
 8009bca:	3304      	adds	r3, #4
 8009bcc:	4619      	mov	r1, r3
 8009bce:	68b8      	ldr	r0, [r7, #8]
 8009bd0:	f000 fd34 	bl	800a63c <xQueueReceiveFromISR>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d102      	bne.n	8009be0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009bda:	2310      	movs	r3, #16
 8009bdc:	617b      	str	r3, [r7, #20]
 8009bde:	e001      	b.n	8009be4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009be0:	2300      	movs	r3, #0
 8009be2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009be4:	6a3b      	ldr	r3, [r7, #32]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d01d      	beq.n	8009c26 <osMessageGet+0xca>
 8009bea:	4b15      	ldr	r3, [pc, #84]	; (8009c40 <osMessageGet+0xe4>)
 8009bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bf0:	601a      	str	r2, [r3, #0]
 8009bf2:	f3bf 8f4f 	dsb	sy
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	e014      	b.n	8009c26 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009bfc:	f107 0314 	add.w	r3, r7, #20
 8009c00:	3304      	adds	r3, #4
 8009c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c04:	4619      	mov	r1, r3
 8009c06:	68b8      	ldr	r0, [r7, #8]
 8009c08:	f000 fc3c 	bl	800a484 <xQueueReceive>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d102      	bne.n	8009c18 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009c12:	2310      	movs	r3, #16
 8009c14:	617b      	str	r3, [r7, #20]
 8009c16:	e006      	b.n	8009c26 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d101      	bne.n	8009c22 <osMessageGet+0xc6>
 8009c1e:	2300      	movs	r3, #0
 8009c20:	e000      	b.n	8009c24 <osMessageGet+0xc8>
 8009c22:	2340      	movs	r3, #64	; 0x40
 8009c24:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	461c      	mov	r4, r3
 8009c2a:	f107 0314 	add.w	r3, r7, #20
 8009c2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009c32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	372c      	adds	r7, #44	; 0x2c
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd90      	pop	{r4, r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	e000ed04 	.word	0xe000ed04

08009c44 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d001      	beq.n	8009c5c <osDelayUntil+0x18>
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	e000      	b.n	8009c5e <osDelayUntil+0x1a>
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	4619      	mov	r1, r3
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f001 f8a5 	bl	800adb0 <vTaskDelayUntil>
  
  return osOK;
 8009c66:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f103 0208 	add.w	r2, r3, #8
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f04f 32ff 	mov.w	r2, #4294967295
 8009c88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f103 0208 	add.w	r2, r3, #8
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f103 0208 	add.w	r2, r3, #8
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009ca4:	bf00      	nop
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009cbe:	bf00      	nop
 8009cc0:	370c      	adds	r7, #12
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr

08009cca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009cca:	b480      	push	{r7}
 8009ccc:	b085      	sub	sp, #20
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
 8009cd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	689a      	ldr	r2, [r3, #8]
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	683a      	ldr	r2, [r7, #0]
 8009cee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	683a      	ldr	r2, [r7, #0]
 8009cf4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	1c5a      	adds	r2, r3, #1
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	601a      	str	r2, [r3, #0]
}
 8009d06:	bf00      	nop
 8009d08:	3714      	adds	r7, #20
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr

08009d12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d12:	b480      	push	{r7}
 8009d14:	b085      	sub	sp, #20
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
 8009d1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d28:	d103      	bne.n	8009d32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	691b      	ldr	r3, [r3, #16]
 8009d2e:	60fb      	str	r3, [r7, #12]
 8009d30:	e00c      	b.n	8009d4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	3308      	adds	r3, #8
 8009d36:	60fb      	str	r3, [r7, #12]
 8009d38:	e002      	b.n	8009d40 <vListInsert+0x2e>
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	60fb      	str	r3, [r7, #12]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d2f6      	bcs.n	8009d3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	685a      	ldr	r2, [r3, #4]
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	683a      	ldr	r2, [r7, #0]
 8009d5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	68fa      	ldr	r2, [r7, #12]
 8009d60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	1c5a      	adds	r2, r3, #1
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	601a      	str	r2, [r3, #0]
}
 8009d78:	bf00      	nop
 8009d7a:	3714      	adds	r7, #20
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	691b      	ldr	r3, [r3, #16]
 8009d90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	6892      	ldr	r2, [r2, #8]
 8009d9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	6852      	ldr	r2, [r2, #4]
 8009da4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d103      	bne.n	8009db8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	689a      	ldr	r2, [r3, #8]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	1e5a      	subs	r2, r3, #1
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3714      	adds	r7, #20
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d109      	bne.n	8009e00 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df0:	f383 8811 	msr	BASEPRI, r3
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	f3bf 8f4f 	dsb	sy
 8009dfc:	60bb      	str	r3, [r7, #8]
 8009dfe:	e7fe      	b.n	8009dfe <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009e00:	f001 fee4 	bl	800bbcc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e0c:	68f9      	ldr	r1, [r7, #12]
 8009e0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e10:	fb01 f303 	mul.w	r3, r1, r3
 8009e14:	441a      	add	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e30:	3b01      	subs	r3, #1
 8009e32:	68f9      	ldr	r1, [r7, #12]
 8009e34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e36:	fb01 f303 	mul.w	r3, r1, r3
 8009e3a:	441a      	add	r2, r3
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	22ff      	movs	r2, #255	; 0xff
 8009e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	22ff      	movs	r2, #255	; 0xff
 8009e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d114      	bne.n	8009e80 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d01a      	beq.n	8009e94 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	3310      	adds	r3, #16
 8009e62:	4618      	mov	r0, r3
 8009e64:	f001 fad0 	bl	800b408 <xTaskRemoveFromEventList>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d012      	beq.n	8009e94 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009e6e:	4b0d      	ldr	r3, [pc, #52]	; (8009ea4 <xQueueGenericReset+0xcc>)
 8009e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e74:	601a      	str	r2, [r3, #0]
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	f3bf 8f6f 	isb	sy
 8009e7e:	e009      	b.n	8009e94 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	3310      	adds	r3, #16
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7ff fef3 	bl	8009c70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	3324      	adds	r3, #36	; 0x24
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7ff feee 	bl	8009c70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009e94:	f001 fec8 	bl	800bc28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009e98:	2301      	movs	r3, #1
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	e000ed04 	.word	0xe000ed04

08009ea8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b08e      	sub	sp, #56	; 0x38
 8009eac:	af02      	add	r7, sp, #8
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
 8009eb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d109      	bne.n	8009ed0 <xQueueGenericCreateStatic+0x28>
 8009ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec0:	f383 8811 	msr	BASEPRI, r3
 8009ec4:	f3bf 8f6f 	isb	sy
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ece:	e7fe      	b.n	8009ece <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d109      	bne.n	8009eea <xQueueGenericCreateStatic+0x42>
 8009ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eda:	f383 8811 	msr	BASEPRI, r3
 8009ede:	f3bf 8f6f 	isb	sy
 8009ee2:	f3bf 8f4f 	dsb	sy
 8009ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8009ee8:	e7fe      	b.n	8009ee8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d002      	beq.n	8009ef6 <xQueueGenericCreateStatic+0x4e>
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d001      	beq.n	8009efa <xQueueGenericCreateStatic+0x52>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e000      	b.n	8009efc <xQueueGenericCreateStatic+0x54>
 8009efa:	2300      	movs	r3, #0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d109      	bne.n	8009f14 <xQueueGenericCreateStatic+0x6c>
 8009f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f04:	f383 8811 	msr	BASEPRI, r3
 8009f08:	f3bf 8f6f 	isb	sy
 8009f0c:	f3bf 8f4f 	dsb	sy
 8009f10:	623b      	str	r3, [r7, #32]
 8009f12:	e7fe      	b.n	8009f12 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d102      	bne.n	8009f20 <xQueueGenericCreateStatic+0x78>
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d101      	bne.n	8009f24 <xQueueGenericCreateStatic+0x7c>
 8009f20:	2301      	movs	r3, #1
 8009f22:	e000      	b.n	8009f26 <xQueueGenericCreateStatic+0x7e>
 8009f24:	2300      	movs	r3, #0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d109      	bne.n	8009f3e <xQueueGenericCreateStatic+0x96>
 8009f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2e:	f383 8811 	msr	BASEPRI, r3
 8009f32:	f3bf 8f6f 	isb	sy
 8009f36:	f3bf 8f4f 	dsb	sy
 8009f3a:	61fb      	str	r3, [r7, #28]
 8009f3c:	e7fe      	b.n	8009f3c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009f3e:	2350      	movs	r3, #80	; 0x50
 8009f40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	2b50      	cmp	r3, #80	; 0x50
 8009f46:	d009      	beq.n	8009f5c <xQueueGenericCreateStatic+0xb4>
 8009f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4c:	f383 8811 	msr	BASEPRI, r3
 8009f50:	f3bf 8f6f 	isb	sy
 8009f54:	f3bf 8f4f 	dsb	sy
 8009f58:	61bb      	str	r3, [r7, #24]
 8009f5a:	e7fe      	b.n	8009f5a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009f5c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00d      	beq.n	8009f84 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f70:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	4613      	mov	r3, r2
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	68b9      	ldr	r1, [r7, #8]
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f000 f844 	bl	800a00c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3730      	adds	r7, #48	; 0x30
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b08a      	sub	sp, #40	; 0x28
 8009f92:	af02      	add	r7, sp, #8
 8009f94:	60f8      	str	r0, [r7, #12]
 8009f96:	60b9      	str	r1, [r7, #8]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d109      	bne.n	8009fb6 <xQueueGenericCreate+0x28>
 8009fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa6:	f383 8811 	msr	BASEPRI, r3
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	f3bf 8f4f 	dsb	sy
 8009fb2:	613b      	str	r3, [r7, #16]
 8009fb4:	e7fe      	b.n	8009fb4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d102      	bne.n	8009fc2 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	61fb      	str	r3, [r7, #28]
 8009fc0:	e004      	b.n	8009fcc <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	68ba      	ldr	r2, [r7, #8]
 8009fc6:	fb02 f303 	mul.w	r3, r2, r3
 8009fca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	3350      	adds	r3, #80	; 0x50
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f001 ff15 	bl	800be00 <pvPortMalloc>
 8009fd6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d011      	beq.n	800a002 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	3350      	adds	r3, #80	; 0x50
 8009fe6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ff0:	79fa      	ldrb	r2, [r7, #7]
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	9300      	str	r3, [sp, #0]
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	697a      	ldr	r2, [r7, #20]
 8009ffa:	68b9      	ldr	r1, [r7, #8]
 8009ffc:	68f8      	ldr	r0, [r7, #12]
 8009ffe:	f000 f805 	bl	800a00c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a002:	69bb      	ldr	r3, [r7, #24]
	}
 800a004:	4618      	mov	r0, r3
 800a006:	3720      	adds	r7, #32
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
 800a018:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d103      	bne.n	800a028 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	69ba      	ldr	r2, [r7, #24]
 800a024:	601a      	str	r2, [r3, #0]
 800a026:	e002      	b.n	800a02e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	68ba      	ldr	r2, [r7, #8]
 800a038:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a03a:	2101      	movs	r1, #1
 800a03c:	69b8      	ldr	r0, [r7, #24]
 800a03e:	f7ff fecb 	bl	8009dd8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	78fa      	ldrb	r2, [r7, #3]
 800a046:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a04a:	bf00      	nop
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
	...

0800a054 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b08e      	sub	sp, #56	; 0x38
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
 800a060:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a062:	2300      	movs	r3, #0
 800a064:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d109      	bne.n	800a084 <xQueueGenericSend+0x30>
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	62bb      	str	r3, [r7, #40]	; 0x28
 800a082:	e7fe      	b.n	800a082 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d103      	bne.n	800a092 <xQueueGenericSend+0x3e>
 800a08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d101      	bne.n	800a096 <xQueueGenericSend+0x42>
 800a092:	2301      	movs	r3, #1
 800a094:	e000      	b.n	800a098 <xQueueGenericSend+0x44>
 800a096:	2300      	movs	r3, #0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d109      	bne.n	800a0b0 <xQueueGenericSend+0x5c>
 800a09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a0:	f383 8811 	msr	BASEPRI, r3
 800a0a4:	f3bf 8f6f 	isb	sy
 800a0a8:	f3bf 8f4f 	dsb	sy
 800a0ac:	627b      	str	r3, [r7, #36]	; 0x24
 800a0ae:	e7fe      	b.n	800a0ae <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	2b02      	cmp	r3, #2
 800a0b4:	d103      	bne.n	800a0be <xQueueGenericSend+0x6a>
 800a0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d101      	bne.n	800a0c2 <xQueueGenericSend+0x6e>
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e000      	b.n	800a0c4 <xQueueGenericSend+0x70>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d109      	bne.n	800a0dc <xQueueGenericSend+0x88>
 800a0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0cc:	f383 8811 	msr	BASEPRI, r3
 800a0d0:	f3bf 8f6f 	isb	sy
 800a0d4:	f3bf 8f4f 	dsb	sy
 800a0d8:	623b      	str	r3, [r7, #32]
 800a0da:	e7fe      	b.n	800a0da <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0dc:	f001 fb4a 	bl	800b774 <xTaskGetSchedulerState>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d102      	bne.n	800a0ec <xQueueGenericSend+0x98>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d101      	bne.n	800a0f0 <xQueueGenericSend+0x9c>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e000      	b.n	800a0f2 <xQueueGenericSend+0x9e>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d109      	bne.n	800a10a <xQueueGenericSend+0xb6>
 800a0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fa:	f383 8811 	msr	BASEPRI, r3
 800a0fe:	f3bf 8f6f 	isb	sy
 800a102:	f3bf 8f4f 	dsb	sy
 800a106:	61fb      	str	r3, [r7, #28]
 800a108:	e7fe      	b.n	800a108 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a10a:	f001 fd5f 	bl	800bbcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a116:	429a      	cmp	r2, r3
 800a118:	d302      	bcc.n	800a120 <xQueueGenericSend+0xcc>
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	2b02      	cmp	r3, #2
 800a11e:	d129      	bne.n	800a174 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a120:	683a      	ldr	r2, [r7, #0]
 800a122:	68b9      	ldr	r1, [r7, #8]
 800a124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a126:	f000 fb06 	bl	800a736 <prvCopyDataToQueue>
 800a12a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a130:	2b00      	cmp	r3, #0
 800a132:	d010      	beq.n	800a156 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a136:	3324      	adds	r3, #36	; 0x24
 800a138:	4618      	mov	r0, r3
 800a13a:	f001 f965 	bl	800b408 <xTaskRemoveFromEventList>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d013      	beq.n	800a16c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a144:	4b3f      	ldr	r3, [pc, #252]	; (800a244 <xQueueGenericSend+0x1f0>)
 800a146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a14a:	601a      	str	r2, [r3, #0]
 800a14c:	f3bf 8f4f 	dsb	sy
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	e00a      	b.n	800a16c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d007      	beq.n	800a16c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a15c:	4b39      	ldr	r3, [pc, #228]	; (800a244 <xQueueGenericSend+0x1f0>)
 800a15e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a162:	601a      	str	r2, [r3, #0]
 800a164:	f3bf 8f4f 	dsb	sy
 800a168:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a16c:	f001 fd5c 	bl	800bc28 <vPortExitCritical>
				return pdPASS;
 800a170:	2301      	movs	r3, #1
 800a172:	e063      	b.n	800a23c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d103      	bne.n	800a182 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a17a:	f001 fd55 	bl	800bc28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a17e:	2300      	movs	r3, #0
 800a180:	e05c      	b.n	800a23c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a184:	2b00      	cmp	r3, #0
 800a186:	d106      	bne.n	800a196 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a188:	f107 0314 	add.w	r3, r7, #20
 800a18c:	4618      	mov	r0, r3
 800a18e:	f001 f99d 	bl	800b4cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a192:	2301      	movs	r3, #1
 800a194:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a196:	f001 fd47 	bl	800bc28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a19a:	f000 ff17 	bl	800afcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a19e:	f001 fd15 	bl	800bbcc <vPortEnterCritical>
 800a1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1a8:	b25b      	sxtb	r3, r3
 800a1aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ae:	d103      	bne.n	800a1b8 <xQueueGenericSend+0x164>
 800a1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1be:	b25b      	sxtb	r3, r3
 800a1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c4:	d103      	bne.n	800a1ce <xQueueGenericSend+0x17a>
 800a1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1ce:	f001 fd2b 	bl	800bc28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1d2:	1d3a      	adds	r2, r7, #4
 800a1d4:	f107 0314 	add.w	r3, r7, #20
 800a1d8:	4611      	mov	r1, r2
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f001 f98c 	bl	800b4f8 <xTaskCheckForTimeOut>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d124      	bne.n	800a230 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a1e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1e8:	f000 fb9d 	bl	800a926 <prvIsQueueFull>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d018      	beq.n	800a224 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f4:	3310      	adds	r3, #16
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f001 f8e0 	bl	800b3c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a202:	f000 fb28 	bl	800a856 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a206:	f000 feef 	bl	800afe8 <xTaskResumeAll>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	f47f af7c 	bne.w	800a10a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a212:	4b0c      	ldr	r3, [pc, #48]	; (800a244 <xQueueGenericSend+0x1f0>)
 800a214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a218:	601a      	str	r2, [r3, #0]
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	f3bf 8f6f 	isb	sy
 800a222:	e772      	b.n	800a10a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a226:	f000 fb16 	bl	800a856 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a22a:	f000 fedd 	bl	800afe8 <xTaskResumeAll>
 800a22e:	e76c      	b.n	800a10a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a232:	f000 fb10 	bl	800a856 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a236:	f000 fed7 	bl	800afe8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a23a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3738      	adds	r7, #56	; 0x38
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	e000ed04 	.word	0xe000ed04

0800a248 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b08e      	sub	sp, #56	; 0x38
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	607a      	str	r2, [r7, #4]
 800a254:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d109      	bne.n	800a274 <xQueueGenericSendFromISR+0x2c>
 800a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	627b      	str	r3, [r7, #36]	; 0x24
 800a272:	e7fe      	b.n	800a272 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d103      	bne.n	800a282 <xQueueGenericSendFromISR+0x3a>
 800a27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d101      	bne.n	800a286 <xQueueGenericSendFromISR+0x3e>
 800a282:	2301      	movs	r3, #1
 800a284:	e000      	b.n	800a288 <xQueueGenericSendFromISR+0x40>
 800a286:	2300      	movs	r3, #0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d109      	bne.n	800a2a0 <xQueueGenericSendFromISR+0x58>
 800a28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a290:	f383 8811 	msr	BASEPRI, r3
 800a294:	f3bf 8f6f 	isb	sy
 800a298:	f3bf 8f4f 	dsb	sy
 800a29c:	623b      	str	r3, [r7, #32]
 800a29e:	e7fe      	b.n	800a29e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d103      	bne.n	800a2ae <xQueueGenericSendFromISR+0x66>
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d101      	bne.n	800a2b2 <xQueueGenericSendFromISR+0x6a>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e000      	b.n	800a2b4 <xQueueGenericSendFromISR+0x6c>
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d109      	bne.n	800a2cc <xQueueGenericSendFromISR+0x84>
 800a2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2bc:	f383 8811 	msr	BASEPRI, r3
 800a2c0:	f3bf 8f6f 	isb	sy
 800a2c4:	f3bf 8f4f 	dsb	sy
 800a2c8:	61fb      	str	r3, [r7, #28]
 800a2ca:	e7fe      	b.n	800a2ca <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a2cc:	f001 fd5a 	bl	800bd84 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a2d0:	f3ef 8211 	mrs	r2, BASEPRI
 800a2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	61ba      	str	r2, [r7, #24]
 800a2e6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a2e8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d302      	bcc.n	800a2fe <xQueueGenericSendFromISR+0xb6>
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	2b02      	cmp	r3, #2
 800a2fc:	d12c      	bne.n	800a358 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a300:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a308:	683a      	ldr	r2, [r7, #0]
 800a30a:	68b9      	ldr	r1, [r7, #8]
 800a30c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a30e:	f000 fa12 	bl	800a736 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a312:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a31a:	d112      	bne.n	800a342 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a320:	2b00      	cmp	r3, #0
 800a322:	d016      	beq.n	800a352 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a326:	3324      	adds	r3, #36	; 0x24
 800a328:	4618      	mov	r0, r3
 800a32a:	f001 f86d 	bl	800b408 <xTaskRemoveFromEventList>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00e      	beq.n	800a352 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00b      	beq.n	800a352 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2201      	movs	r2, #1
 800a33e:	601a      	str	r2, [r3, #0]
 800a340:	e007      	b.n	800a352 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a342:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a346:	3301      	adds	r3, #1
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	b25a      	sxtb	r2, r3
 800a34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a352:	2301      	movs	r3, #1
 800a354:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a356:	e001      	b.n	800a35c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a358:	2300      	movs	r3, #0
 800a35a:	637b      	str	r3, [r7, #52]	; 0x34
 800a35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3738      	adds	r7, #56	; 0x38
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b08e      	sub	sp, #56	; 0x38
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a380:	2b00      	cmp	r3, #0
 800a382:	d109      	bne.n	800a398 <xQueueGiveFromISR+0x28>
	__asm volatile
 800a384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a388:	f383 8811 	msr	BASEPRI, r3
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	623b      	str	r3, [r7, #32]
 800a396:	e7fe      	b.n	800a396 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d009      	beq.n	800a3b4 <xQueueGiveFromISR+0x44>
 800a3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	61fb      	str	r3, [r7, #28]
 800a3b2:	e7fe      	b.n	800a3b2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d103      	bne.n	800a3c4 <xQueueGiveFromISR+0x54>
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d101      	bne.n	800a3c8 <xQueueGiveFromISR+0x58>
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	e000      	b.n	800a3ca <xQueueGiveFromISR+0x5a>
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d109      	bne.n	800a3e2 <xQueueGiveFromISR+0x72>
 800a3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d2:	f383 8811 	msr	BASEPRI, r3
 800a3d6:	f3bf 8f6f 	isb	sy
 800a3da:	f3bf 8f4f 	dsb	sy
 800a3de:	61bb      	str	r3, [r7, #24]
 800a3e0:	e7fe      	b.n	800a3e0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3e2:	f001 fccf 	bl	800bd84 <vPortValidateInterruptPriority>
	__asm volatile
 800a3e6:	f3ef 8211 	mrs	r2, BASEPRI
 800a3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ee:	f383 8811 	msr	BASEPRI, r3
 800a3f2:	f3bf 8f6f 	isb	sy
 800a3f6:	f3bf 8f4f 	dsb	sy
 800a3fa:	617a      	str	r2, [r7, #20]
 800a3fc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a3fe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a400:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a406:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a40c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a40e:	429a      	cmp	r2, r3
 800a410:	d22b      	bcs.n	800a46a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41e:	1c5a      	adds	r2, r3, #1
 800a420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a422:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a424:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a42c:	d112      	bne.n	800a454 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a432:	2b00      	cmp	r3, #0
 800a434:	d016      	beq.n	800a464 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a438:	3324      	adds	r3, #36	; 0x24
 800a43a:	4618      	mov	r0, r3
 800a43c:	f000 ffe4 	bl	800b408 <xTaskRemoveFromEventList>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00e      	beq.n	800a464 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00b      	beq.n	800a464 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	2201      	movs	r2, #1
 800a450:	601a      	str	r2, [r3, #0]
 800a452:	e007      	b.n	800a464 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a458:	3301      	adds	r3, #1
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	b25a      	sxtb	r2, r3
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a464:	2301      	movs	r3, #1
 800a466:	637b      	str	r3, [r7, #52]	; 0x34
 800a468:	e001      	b.n	800a46e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a46a:	2300      	movs	r3, #0
 800a46c:	637b      	str	r3, [r7, #52]	; 0x34
 800a46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a470:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3738      	adds	r7, #56	; 0x38
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
	...

0800a484 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b08c      	sub	sp, #48	; 0x30
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a490:	2300      	movs	r3, #0
 800a492:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d109      	bne.n	800a4b2 <xQueueReceive+0x2e>
	__asm volatile
 800a49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a2:	f383 8811 	msr	BASEPRI, r3
 800a4a6:	f3bf 8f6f 	isb	sy
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	623b      	str	r3, [r7, #32]
 800a4b0:	e7fe      	b.n	800a4b0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d103      	bne.n	800a4c0 <xQueueReceive+0x3c>
 800a4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d101      	bne.n	800a4c4 <xQueueReceive+0x40>
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e000      	b.n	800a4c6 <xQueueReceive+0x42>
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d109      	bne.n	800a4de <xQueueReceive+0x5a>
 800a4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ce:	f383 8811 	msr	BASEPRI, r3
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	61fb      	str	r3, [r7, #28]
 800a4dc:	e7fe      	b.n	800a4dc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4de:	f001 f949 	bl	800b774 <xTaskGetSchedulerState>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d102      	bne.n	800a4ee <xQueueReceive+0x6a>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d101      	bne.n	800a4f2 <xQueueReceive+0x6e>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	e000      	b.n	800a4f4 <xQueueReceive+0x70>
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d109      	bne.n	800a50c <xQueueReceive+0x88>
 800a4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fc:	f383 8811 	msr	BASEPRI, r3
 800a500:	f3bf 8f6f 	isb	sy
 800a504:	f3bf 8f4f 	dsb	sy
 800a508:	61bb      	str	r3, [r7, #24]
 800a50a:	e7fe      	b.n	800a50a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a50c:	f001 fb5e 	bl	800bbcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a514:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d01f      	beq.n	800a55c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a51c:	68b9      	ldr	r1, [r7, #8]
 800a51e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a520:	f000 f973 	bl	800a80a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a526:	1e5a      	subs	r2, r3, #1
 800a528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52e:	691b      	ldr	r3, [r3, #16]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00f      	beq.n	800a554 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a536:	3310      	adds	r3, #16
 800a538:	4618      	mov	r0, r3
 800a53a:	f000 ff65 	bl	800b408 <xTaskRemoveFromEventList>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d007      	beq.n	800a554 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a544:	4b3c      	ldr	r3, [pc, #240]	; (800a638 <xQueueReceive+0x1b4>)
 800a546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a54a:	601a      	str	r2, [r3, #0]
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a554:	f001 fb68 	bl	800bc28 <vPortExitCritical>
				return pdPASS;
 800a558:	2301      	movs	r3, #1
 800a55a:	e069      	b.n	800a630 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d103      	bne.n	800a56a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a562:	f001 fb61 	bl	800bc28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a566:	2300      	movs	r3, #0
 800a568:	e062      	b.n	800a630 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d106      	bne.n	800a57e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a570:	f107 0310 	add.w	r3, r7, #16
 800a574:	4618      	mov	r0, r3
 800a576:	f000 ffa9 	bl	800b4cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a57a:	2301      	movs	r3, #1
 800a57c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a57e:	f001 fb53 	bl	800bc28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a582:	f000 fd23 	bl	800afcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a586:	f001 fb21 	bl	800bbcc <vPortEnterCritical>
 800a58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a590:	b25b      	sxtb	r3, r3
 800a592:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a596:	d103      	bne.n	800a5a0 <xQueueReceive+0x11c>
 800a598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59a:	2200      	movs	r2, #0
 800a59c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5a6:	b25b      	sxtb	r3, r3
 800a5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ac:	d103      	bne.n	800a5b6 <xQueueReceive+0x132>
 800a5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5b6:	f001 fb37 	bl	800bc28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5ba:	1d3a      	adds	r2, r7, #4
 800a5bc:	f107 0310 	add.w	r3, r7, #16
 800a5c0:	4611      	mov	r1, r2
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f000 ff98 	bl	800b4f8 <xTaskCheckForTimeOut>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d123      	bne.n	800a616 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5d0:	f000 f993 	bl	800a8fa <prvIsQueueEmpty>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d017      	beq.n	800a60a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5dc:	3324      	adds	r3, #36	; 0x24
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	4611      	mov	r1, r2
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f000 feec 	bl	800b3c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a5e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5ea:	f000 f934 	bl	800a856 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a5ee:	f000 fcfb 	bl	800afe8 <xTaskResumeAll>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d189      	bne.n	800a50c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800a5f8:	4b0f      	ldr	r3, [pc, #60]	; (800a638 <xQueueReceive+0x1b4>)
 800a5fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5fe:	601a      	str	r2, [r3, #0]
 800a600:	f3bf 8f4f 	dsb	sy
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	e780      	b.n	800a50c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a60a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a60c:	f000 f923 	bl	800a856 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a610:	f000 fcea 	bl	800afe8 <xTaskResumeAll>
 800a614:	e77a      	b.n	800a50c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a618:	f000 f91d 	bl	800a856 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a61c:	f000 fce4 	bl	800afe8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a622:	f000 f96a 	bl	800a8fa <prvIsQueueEmpty>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f43f af6f 	beq.w	800a50c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a62e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a630:	4618      	mov	r0, r3
 800a632:	3730      	adds	r7, #48	; 0x30
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	e000ed04 	.word	0xe000ed04

0800a63c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b08e      	sub	sp, #56	; 0x38
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d109      	bne.n	800a666 <xQueueReceiveFromISR+0x2a>
 800a652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a656:	f383 8811 	msr	BASEPRI, r3
 800a65a:	f3bf 8f6f 	isb	sy
 800a65e:	f3bf 8f4f 	dsb	sy
 800a662:	623b      	str	r3, [r7, #32]
 800a664:	e7fe      	b.n	800a664 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d103      	bne.n	800a674 <xQueueReceiveFromISR+0x38>
 800a66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a670:	2b00      	cmp	r3, #0
 800a672:	d101      	bne.n	800a678 <xQueueReceiveFromISR+0x3c>
 800a674:	2301      	movs	r3, #1
 800a676:	e000      	b.n	800a67a <xQueueReceiveFromISR+0x3e>
 800a678:	2300      	movs	r3, #0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d109      	bne.n	800a692 <xQueueReceiveFromISR+0x56>
 800a67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a682:	f383 8811 	msr	BASEPRI, r3
 800a686:	f3bf 8f6f 	isb	sy
 800a68a:	f3bf 8f4f 	dsb	sy
 800a68e:	61fb      	str	r3, [r7, #28]
 800a690:	e7fe      	b.n	800a690 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a692:	f001 fb77 	bl	800bd84 <vPortValidateInterruptPriority>
	__asm volatile
 800a696:	f3ef 8211 	mrs	r2, BASEPRI
 800a69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69e:	f383 8811 	msr	BASEPRI, r3
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	f3bf 8f4f 	dsb	sy
 800a6aa:	61ba      	str	r2, [r7, #24]
 800a6ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a6ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d02f      	beq.n	800a71e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6c8:	68b9      	ldr	r1, [r7, #8]
 800a6ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6cc:	f000 f89d 	bl	800a80a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	1e5a      	subs	r2, r3, #1
 800a6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a6d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e0:	d112      	bne.n	800a708 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d016      	beq.n	800a718 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ec:	3310      	adds	r3, #16
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 fe8a 	bl	800b408 <xTaskRemoveFromEventList>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00e      	beq.n	800a718 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00b      	beq.n	800a718 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	601a      	str	r2, [r3, #0]
 800a706:	e007      	b.n	800a718 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a70c:	3301      	adds	r3, #1
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	b25a      	sxtb	r2, r3
 800a712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a718:	2301      	movs	r3, #1
 800a71a:	637b      	str	r3, [r7, #52]	; 0x34
 800a71c:	e001      	b.n	800a722 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800a71e:	2300      	movs	r3, #0
 800a720:	637b      	str	r3, [r7, #52]	; 0x34
 800a722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a724:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a72c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3738      	adds	r7, #56	; 0x38
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b086      	sub	sp, #24
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	60f8      	str	r0, [r7, #12]
 800a73e:	60b9      	str	r1, [r7, #8]
 800a740:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a742:	2300      	movs	r3, #0
 800a744:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a750:	2b00      	cmp	r3, #0
 800a752:	d10d      	bne.n	800a770 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d14d      	bne.n	800a7f8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	4618      	mov	r0, r3
 800a762:	f001 f825 	bl	800b7b0 <xTaskPriorityDisinherit>
 800a766:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2200      	movs	r2, #0
 800a76c:	609a      	str	r2, [r3, #8]
 800a76e:	e043      	b.n	800a7f8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d119      	bne.n	800a7aa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	6858      	ldr	r0, [r3, #4]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77e:	461a      	mov	r2, r3
 800a780:	68b9      	ldr	r1, [r7, #8]
 800a782:	f002 f84f 	bl	800c824 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	685a      	ldr	r2, [r3, #4]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a78e:	441a      	add	r2, r3
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	685a      	ldr	r2, [r3, #4]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d32b      	bcc.n	800a7f8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	605a      	str	r2, [r3, #4]
 800a7a8:	e026      	b.n	800a7f8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	68d8      	ldr	r0, [r3, #12]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	68b9      	ldr	r1, [r7, #8]
 800a7b6:	f002 f835 	bl	800c824 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	68da      	ldr	r2, [r3, #12]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c2:	425b      	negs	r3, r3
 800a7c4:	441a      	add	r2, r3
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	68da      	ldr	r2, [r3, #12]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d207      	bcs.n	800a7e6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	689a      	ldr	r2, [r3, #8]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7de:	425b      	negs	r3, r3
 800a7e0:	441a      	add	r2, r3
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2b02      	cmp	r3, #2
 800a7ea:	d105      	bne.n	800a7f8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d002      	beq.n	800a7f8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	3b01      	subs	r3, #1
 800a7f6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	1c5a      	adds	r2, r3, #1
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a800:	697b      	ldr	r3, [r7, #20]
}
 800a802:	4618      	mov	r0, r3
 800a804:	3718      	adds	r7, #24
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}

0800a80a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a80a:	b580      	push	{r7, lr}
 800a80c:	b082      	sub	sp, #8
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
 800a812:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d018      	beq.n	800a84e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	68da      	ldr	r2, [r3, #12]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a824:	441a      	add	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	68da      	ldr	r2, [r3, #12]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	689b      	ldr	r3, [r3, #8]
 800a832:	429a      	cmp	r2, r3
 800a834:	d303      	bcc.n	800a83e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	68d9      	ldr	r1, [r3, #12]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a846:	461a      	mov	r2, r3
 800a848:	6838      	ldr	r0, [r7, #0]
 800a84a:	f001 ffeb 	bl	800c824 <memcpy>
	}
}
 800a84e:	bf00      	nop
 800a850:	3708      	adds	r7, #8
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a856:	b580      	push	{r7, lr}
 800a858:	b084      	sub	sp, #16
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a85e:	f001 f9b5 	bl	800bbcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a868:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a86a:	e011      	b.n	800a890 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a870:	2b00      	cmp	r3, #0
 800a872:	d012      	beq.n	800a89a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	3324      	adds	r3, #36	; 0x24
 800a878:	4618      	mov	r0, r3
 800a87a:	f000 fdc5 	bl	800b408 <xTaskRemoveFromEventList>
 800a87e:	4603      	mov	r3, r0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d001      	beq.n	800a888 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a884:	f000 fe98 	bl	800b5b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a888:	7bfb      	ldrb	r3, [r7, #15]
 800a88a:	3b01      	subs	r3, #1
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a894:	2b00      	cmp	r3, #0
 800a896:	dce9      	bgt.n	800a86c <prvUnlockQueue+0x16>
 800a898:	e000      	b.n	800a89c <prvUnlockQueue+0x46>
					break;
 800a89a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	22ff      	movs	r2, #255	; 0xff
 800a8a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a8a4:	f001 f9c0 	bl	800bc28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a8a8:	f001 f990 	bl	800bbcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8b2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8b4:	e011      	b.n	800a8da <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	691b      	ldr	r3, [r3, #16]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d012      	beq.n	800a8e4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	3310      	adds	r3, #16
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f000 fda0 	bl	800b408 <xTaskRemoveFromEventList>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d001      	beq.n	800a8d2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a8ce:	f000 fe73 	bl	800b5b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a8d2:	7bbb      	ldrb	r3, [r7, #14]
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	dce9      	bgt.n	800a8b6 <prvUnlockQueue+0x60>
 800a8e2:	e000      	b.n	800a8e6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a8e4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	22ff      	movs	r2, #255	; 0xff
 800a8ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a8ee:	f001 f99b 	bl	800bc28 <vPortExitCritical>
}
 800a8f2:	bf00      	nop
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b084      	sub	sp, #16
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a902:	f001 f963 	bl	800bbcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d102      	bne.n	800a914 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a90e:	2301      	movs	r3, #1
 800a910:	60fb      	str	r3, [r7, #12]
 800a912:	e001      	b.n	800a918 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a914:	2300      	movs	r3, #0
 800a916:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a918:	f001 f986 	bl	800bc28 <vPortExitCritical>

	return xReturn;
 800a91c:	68fb      	ldr	r3, [r7, #12]
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3710      	adds	r7, #16
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a926:	b580      	push	{r7, lr}
 800a928:	b084      	sub	sp, #16
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a92e:	f001 f94d 	bl	800bbcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d102      	bne.n	800a944 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a93e:	2301      	movs	r3, #1
 800a940:	60fb      	str	r3, [r7, #12]
 800a942:	e001      	b.n	800a948 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a944:	2300      	movs	r3, #0
 800a946:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a948:	f001 f96e 	bl	800bc28 <vPortExitCritical>

	return xReturn;
 800a94c:	68fb      	ldr	r3, [r7, #12]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a956:	b580      	push	{r7, lr}
 800a958:	b08e      	sub	sp, #56	; 0x38
 800a95a:	af04      	add	r7, sp, #16
 800a95c:	60f8      	str	r0, [r7, #12]
 800a95e:	60b9      	str	r1, [r7, #8]
 800a960:	607a      	str	r2, [r7, #4]
 800a962:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a966:	2b00      	cmp	r3, #0
 800a968:	d109      	bne.n	800a97e <xTaskCreateStatic+0x28>
	__asm volatile
 800a96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a96e:	f383 8811 	msr	BASEPRI, r3
 800a972:	f3bf 8f6f 	isb	sy
 800a976:	f3bf 8f4f 	dsb	sy
 800a97a:	623b      	str	r3, [r7, #32]
 800a97c:	e7fe      	b.n	800a97c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a980:	2b00      	cmp	r3, #0
 800a982:	d109      	bne.n	800a998 <xTaskCreateStatic+0x42>
 800a984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a988:	f383 8811 	msr	BASEPRI, r3
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	61fb      	str	r3, [r7, #28]
 800a996:	e7fe      	b.n	800a996 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a998:	2360      	movs	r3, #96	; 0x60
 800a99a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	2b60      	cmp	r3, #96	; 0x60
 800a9a0:	d009      	beq.n	800a9b6 <xTaskCreateStatic+0x60>
 800a9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a6:	f383 8811 	msr	BASEPRI, r3
 800a9aa:	f3bf 8f6f 	isb	sy
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	61bb      	str	r3, [r7, #24]
 800a9b4:	e7fe      	b.n	800a9b4 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a9b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d01e      	beq.n	800a9fc <xTaskCreateStatic+0xa6>
 800a9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d01b      	beq.n	800a9fc <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d0:	2202      	movs	r2, #2
 800a9d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	9303      	str	r3, [sp, #12]
 800a9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9dc:	9302      	str	r3, [sp, #8]
 800a9de:	f107 0314 	add.w	r3, r7, #20
 800a9e2:	9301      	str	r3, [sp, #4]
 800a9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e6:	9300      	str	r3, [sp, #0]
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	68b9      	ldr	r1, [r7, #8]
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	f000 f850 	bl	800aa94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9f6:	f000 f8df 	bl	800abb8 <prvAddNewTaskToReadyList>
 800a9fa:	e001      	b.n	800aa00 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aa00:	697b      	ldr	r3, [r7, #20]
	}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3728      	adds	r7, #40	; 0x28
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b08c      	sub	sp, #48	; 0x30
 800aa0e:	af04      	add	r7, sp, #16
 800aa10:	60f8      	str	r0, [r7, #12]
 800aa12:	60b9      	str	r1, [r7, #8]
 800aa14:	603b      	str	r3, [r7, #0]
 800aa16:	4613      	mov	r3, r2
 800aa18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aa1a:	88fb      	ldrh	r3, [r7, #6]
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f001 f9ee 	bl	800be00 <pvPortMalloc>
 800aa24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d00e      	beq.n	800aa4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aa2c:	2060      	movs	r0, #96	; 0x60
 800aa2e:	f001 f9e7 	bl	800be00 <pvPortMalloc>
 800aa32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d003      	beq.n	800aa42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	697a      	ldr	r2, [r7, #20]
 800aa3e:	631a      	str	r2, [r3, #48]	; 0x30
 800aa40:	e005      	b.n	800aa4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aa42:	6978      	ldr	r0, [r7, #20]
 800aa44:	f001 fa9e 	bl	800bf84 <vPortFree>
 800aa48:	e001      	b.n	800aa4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d017      	beq.n	800aa84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aa54:	69fb      	ldr	r3, [r7, #28]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aa5c:	88fa      	ldrh	r2, [r7, #6]
 800aa5e:	2300      	movs	r3, #0
 800aa60:	9303      	str	r3, [sp, #12]
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	9302      	str	r3, [sp, #8]
 800aa66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa68:	9301      	str	r3, [sp, #4]
 800aa6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6c:	9300      	str	r3, [sp, #0]
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	68b9      	ldr	r1, [r7, #8]
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f000 f80e 	bl	800aa94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa78:	69f8      	ldr	r0, [r7, #28]
 800aa7a:	f000 f89d 	bl	800abb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	61bb      	str	r3, [r7, #24]
 800aa82:	e002      	b.n	800aa8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aa84:	f04f 33ff 	mov.w	r3, #4294967295
 800aa88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aa8a:	69bb      	ldr	r3, [r7, #24]
	}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3720      	adds	r7, #32
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b088      	sub	sp, #32
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	607a      	str	r2, [r7, #4]
 800aaa0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	461a      	mov	r2, r3
 800aaac:	21a5      	movs	r1, #165	; 0xa5
 800aaae:	f001 fec4 	bl	800c83a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aabc:	3b01      	subs	r3, #1
 800aabe:	009b      	lsls	r3, r3, #2
 800aac0:	4413      	add	r3, r2
 800aac2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	f023 0307 	bic.w	r3, r3, #7
 800aaca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aacc:	69bb      	ldr	r3, [r7, #24]
 800aace:	f003 0307 	and.w	r3, r3, #7
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d009      	beq.n	800aaea <prvInitialiseNewTask+0x56>
 800aad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aada:	f383 8811 	msr	BASEPRI, r3
 800aade:	f3bf 8f6f 	isb	sy
 800aae2:	f3bf 8f4f 	dsb	sy
 800aae6:	617b      	str	r3, [r7, #20]
 800aae8:	e7fe      	b.n	800aae8 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d01f      	beq.n	800ab30 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	61fb      	str	r3, [r7, #28]
 800aaf4:	e012      	b.n	800ab1c <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aaf6:	68ba      	ldr	r2, [r7, #8]
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	4413      	add	r3, r2
 800aafc:	7819      	ldrb	r1, [r3, #0]
 800aafe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	4413      	add	r3, r2
 800ab04:	3334      	adds	r3, #52	; 0x34
 800ab06:	460a      	mov	r2, r1
 800ab08:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ab0a:	68ba      	ldr	r2, [r7, #8]
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	4413      	add	r3, r2
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d006      	beq.n	800ab24 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	61fb      	str	r3, [r7, #28]
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	2b0f      	cmp	r3, #15
 800ab20:	d9e9      	bls.n	800aaf6 <prvInitialiseNewTask+0x62>
 800ab22:	e000      	b.n	800ab26 <prvInitialiseNewTask+0x92>
			{
				break;
 800ab24:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab2e:	e003      	b.n	800ab38 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ab30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab32:	2200      	movs	r2, #0
 800ab34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3a:	2b06      	cmp	r3, #6
 800ab3c:	d901      	bls.n	800ab42 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ab3e:	2306      	movs	r3, #6
 800ab40:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ab42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab46:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ab48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab4c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ab4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab50:	2200      	movs	r2, #0
 800ab52:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab56:	3304      	adds	r3, #4
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7ff f8a9 	bl	8009cb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab60:	3318      	adds	r3, #24
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7ff f8a4 	bl	8009cb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab6c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab70:	f1c3 0207 	rsb	r2, r3, #7
 800ab74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab76:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ab78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab7c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab80:	2200      	movs	r2, #0
 800ab82:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ab84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab86:	2200      	movs	r2, #0
 800ab88:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ab92:	683a      	ldr	r2, [r7, #0]
 800ab94:	68f9      	ldr	r1, [r7, #12]
 800ab96:	69b8      	ldr	r0, [r7, #24]
 800ab98:	f000 fef4 	bl	800b984 <pxPortInitialiseStack>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d002      	beq.n	800abae <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abae:	bf00      	nop
 800abb0:	3720      	adds	r7, #32
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
	...

0800abb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800abc0:	f001 f804 	bl	800bbcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800abc4:	4b2c      	ldr	r3, [pc, #176]	; (800ac78 <prvAddNewTaskToReadyList+0xc0>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	3301      	adds	r3, #1
 800abca:	4a2b      	ldr	r2, [pc, #172]	; (800ac78 <prvAddNewTaskToReadyList+0xc0>)
 800abcc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800abce:	4b2b      	ldr	r3, [pc, #172]	; (800ac7c <prvAddNewTaskToReadyList+0xc4>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d109      	bne.n	800abea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800abd6:	4a29      	ldr	r2, [pc, #164]	; (800ac7c <prvAddNewTaskToReadyList+0xc4>)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800abdc:	4b26      	ldr	r3, [pc, #152]	; (800ac78 <prvAddNewTaskToReadyList+0xc0>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d110      	bne.n	800ac06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800abe4:	f000 fd0c 	bl	800b600 <prvInitialiseTaskLists>
 800abe8:	e00d      	b.n	800ac06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800abea:	4b25      	ldr	r3, [pc, #148]	; (800ac80 <prvAddNewTaskToReadyList+0xc8>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d109      	bne.n	800ac06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800abf2:	4b22      	ldr	r3, [pc, #136]	; (800ac7c <prvAddNewTaskToReadyList+0xc4>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d802      	bhi.n	800ac06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ac00:	4a1e      	ldr	r2, [pc, #120]	; (800ac7c <prvAddNewTaskToReadyList+0xc4>)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ac06:	4b1f      	ldr	r3, [pc, #124]	; (800ac84 <prvAddNewTaskToReadyList+0xcc>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	4a1d      	ldr	r2, [pc, #116]	; (800ac84 <prvAddNewTaskToReadyList+0xcc>)
 800ac0e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ac10:	4b1c      	ldr	r3, [pc, #112]	; (800ac84 <prvAddNewTaskToReadyList+0xcc>)
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	409a      	lsls	r2, r3
 800ac20:	4b19      	ldr	r3, [pc, #100]	; (800ac88 <prvAddNewTaskToReadyList+0xd0>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4313      	orrs	r3, r2
 800ac26:	4a18      	ldr	r2, [pc, #96]	; (800ac88 <prvAddNewTaskToReadyList+0xd0>)
 800ac28:	6013      	str	r3, [r2, #0]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac2e:	4613      	mov	r3, r2
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4413      	add	r3, r2
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	4a15      	ldr	r2, [pc, #84]	; (800ac8c <prvAddNewTaskToReadyList+0xd4>)
 800ac38:	441a      	add	r2, r3
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	3304      	adds	r3, #4
 800ac3e:	4619      	mov	r1, r3
 800ac40:	4610      	mov	r0, r2
 800ac42:	f7ff f842 	bl	8009cca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ac46:	f000 ffef 	bl	800bc28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ac4a:	4b0d      	ldr	r3, [pc, #52]	; (800ac80 <prvAddNewTaskToReadyList+0xc8>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d00e      	beq.n	800ac70 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ac52:	4b0a      	ldr	r3, [pc, #40]	; (800ac7c <prvAddNewTaskToReadyList+0xc4>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d207      	bcs.n	800ac70 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ac60:	4b0b      	ldr	r3, [pc, #44]	; (800ac90 <prvAddNewTaskToReadyList+0xd8>)
 800ac62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac66:	601a      	str	r2, [r3, #0]
 800ac68:	f3bf 8f4f 	dsb	sy
 800ac6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac70:	bf00      	nop
 800ac72:	3708      	adds	r7, #8
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	20000418 	.word	0x20000418
 800ac7c:	20000318 	.word	0x20000318
 800ac80:	20000424 	.word	0x20000424
 800ac84:	20000434 	.word	0x20000434
 800ac88:	20000420 	.word	0x20000420
 800ac8c:	2000031c 	.word	0x2000031c
 800ac90:	e000ed04 	.word	0xe000ed04

0800ac94 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ac9c:	f000 ff96 	bl	800bbcc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d102      	bne.n	800acac <vTaskDelete+0x18>
 800aca6:	4b38      	ldr	r3, [pc, #224]	; (800ad88 <vTaskDelete+0xf4>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	e000      	b.n	800acae <vTaskDelete+0x1a>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	3304      	adds	r3, #4
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7ff f865 	bl	8009d84 <uxListRemove>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d115      	bne.n	800acec <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc4:	4931      	ldr	r1, [pc, #196]	; (800ad8c <vTaskDelete+0xf8>)
 800acc6:	4613      	mov	r3, r2
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	4413      	add	r3, r2
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	440b      	add	r3, r1
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d10a      	bne.n	800acec <vTaskDelete+0x58>
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acda:	2201      	movs	r2, #1
 800acdc:	fa02 f303 	lsl.w	r3, r2, r3
 800ace0:	43da      	mvns	r2, r3
 800ace2:	4b2b      	ldr	r3, [pc, #172]	; (800ad90 <vTaskDelete+0xfc>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4013      	ands	r3, r2
 800ace8:	4a29      	ldr	r2, [pc, #164]	; (800ad90 <vTaskDelete+0xfc>)
 800acea:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d004      	beq.n	800acfe <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	3318      	adds	r3, #24
 800acf8:	4618      	mov	r0, r3
 800acfa:	f7ff f843 	bl	8009d84 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800acfe:	4b25      	ldr	r3, [pc, #148]	; (800ad94 <vTaskDelete+0x100>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	3301      	adds	r3, #1
 800ad04:	4a23      	ldr	r2, [pc, #140]	; (800ad94 <vTaskDelete+0x100>)
 800ad06:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800ad08:	4b1f      	ldr	r3, [pc, #124]	; (800ad88 <vTaskDelete+0xf4>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d10b      	bne.n	800ad2a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	3304      	adds	r3, #4
 800ad16:	4619      	mov	r1, r3
 800ad18:	481f      	ldr	r0, [pc, #124]	; (800ad98 <vTaskDelete+0x104>)
 800ad1a:	f7fe ffd6 	bl	8009cca <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800ad1e:	4b1f      	ldr	r3, [pc, #124]	; (800ad9c <vTaskDelete+0x108>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	3301      	adds	r3, #1
 800ad24:	4a1d      	ldr	r2, [pc, #116]	; (800ad9c <vTaskDelete+0x108>)
 800ad26:	6013      	str	r3, [r2, #0]
 800ad28:	e009      	b.n	800ad3e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800ad2a:	4b1d      	ldr	r3, [pc, #116]	; (800ada0 <vTaskDelete+0x10c>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	4a1b      	ldr	r2, [pc, #108]	; (800ada0 <vTaskDelete+0x10c>)
 800ad32:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800ad34:	68f8      	ldr	r0, [r7, #12]
 800ad36:	f000 fccf 	bl	800b6d8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ad3a:	f000 fcfb 	bl	800b734 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800ad3e:	f000 ff73 	bl	800bc28 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ad42:	4b18      	ldr	r3, [pc, #96]	; (800ada4 <vTaskDelete+0x110>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d01a      	beq.n	800ad80 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 800ad4a:	4b0f      	ldr	r3, [pc, #60]	; (800ad88 <vTaskDelete+0xf4>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d115      	bne.n	800ad80 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ad54:	4b14      	ldr	r3, [pc, #80]	; (800ada8 <vTaskDelete+0x114>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d009      	beq.n	800ad70 <vTaskDelete+0xdc>
 800ad5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad60:	f383 8811 	msr	BASEPRI, r3
 800ad64:	f3bf 8f6f 	isb	sy
 800ad68:	f3bf 8f4f 	dsb	sy
 800ad6c:	60bb      	str	r3, [r7, #8]
 800ad6e:	e7fe      	b.n	800ad6e <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 800ad70:	4b0e      	ldr	r3, [pc, #56]	; (800adac <vTaskDelete+0x118>)
 800ad72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad76:	601a      	str	r2, [r3, #0]
 800ad78:	f3bf 8f4f 	dsb	sy
 800ad7c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ad80:	bf00      	nop
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	20000318 	.word	0x20000318
 800ad8c:	2000031c 	.word	0x2000031c
 800ad90:	20000420 	.word	0x20000420
 800ad94:	20000434 	.word	0x20000434
 800ad98:	200003ec 	.word	0x200003ec
 800ad9c:	20000400 	.word	0x20000400
 800ada0:	20000418 	.word	0x20000418
 800ada4:	20000424 	.word	0x20000424
 800ada8:	20000440 	.word	0x20000440
 800adac:	e000ed04 	.word	0xe000ed04

0800adb0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b08a      	sub	sp, #40	; 0x28
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800adba:	2300      	movs	r3, #0
 800adbc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d109      	bne.n	800add8 <vTaskDelayUntil+0x28>
 800adc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc8:	f383 8811 	msr	BASEPRI, r3
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	617b      	str	r3, [r7, #20]
 800add6:	e7fe      	b.n	800add6 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d109      	bne.n	800adf2 <vTaskDelayUntil+0x42>
 800adde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade2:	f383 8811 	msr	BASEPRI, r3
 800ade6:	f3bf 8f6f 	isb	sy
 800adea:	f3bf 8f4f 	dsb	sy
 800adee:	613b      	str	r3, [r7, #16]
 800adf0:	e7fe      	b.n	800adf0 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800adf2:	4b29      	ldr	r3, [pc, #164]	; (800ae98 <vTaskDelayUntil+0xe8>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d009      	beq.n	800ae0e <vTaskDelayUntil+0x5e>
 800adfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfe:	f383 8811 	msr	BASEPRI, r3
 800ae02:	f3bf 8f6f 	isb	sy
 800ae06:	f3bf 8f4f 	dsb	sy
 800ae0a:	60fb      	str	r3, [r7, #12]
 800ae0c:	e7fe      	b.n	800ae0c <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800ae0e:	f000 f8dd 	bl	800afcc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800ae12:	4b22      	ldr	r3, [pc, #136]	; (800ae9c <vTaskDelayUntil+0xec>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	683a      	ldr	r2, [r7, #0]
 800ae1e:	4413      	add	r3, r2
 800ae20:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	6a3a      	ldr	r2, [r7, #32]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d20b      	bcs.n	800ae44 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	69fa      	ldr	r2, [r7, #28]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d211      	bcs.n	800ae5a <vTaskDelayUntil+0xaa>
 800ae36:	69fa      	ldr	r2, [r7, #28]
 800ae38:	6a3b      	ldr	r3, [r7, #32]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d90d      	bls.n	800ae5a <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	627b      	str	r3, [r7, #36]	; 0x24
 800ae42:	e00a      	b.n	800ae5a <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	69fa      	ldr	r2, [r7, #28]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d303      	bcc.n	800ae56 <vTaskDelayUntil+0xa6>
 800ae4e:	69fa      	ldr	r2, [r7, #28]
 800ae50:	6a3b      	ldr	r3, [r7, #32]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d901      	bls.n	800ae5a <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800ae56:	2301      	movs	r3, #1
 800ae58:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	69fa      	ldr	r2, [r7, #28]
 800ae5e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800ae60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d006      	beq.n	800ae74 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800ae66:	69fa      	ldr	r2, [r7, #28]
 800ae68:	6a3b      	ldr	r3, [r7, #32]
 800ae6a:	1ad3      	subs	r3, r2, r3
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f000 fd22 	bl	800b8b8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ae74:	f000 f8b8 	bl	800afe8 <xTaskResumeAll>
 800ae78:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d107      	bne.n	800ae90 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800ae80:	4b07      	ldr	r3, [pc, #28]	; (800aea0 <vTaskDelayUntil+0xf0>)
 800ae82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae86:	601a      	str	r2, [r3, #0]
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae90:	bf00      	nop
 800ae92:	3728      	adds	r7, #40	; 0x28
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	20000440 	.word	0x20000440
 800ae9c:	2000041c 	.word	0x2000041c
 800aea0:	e000ed04 	.word	0xe000ed04

0800aea4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aeac:	2300      	movs	r3, #0
 800aeae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d016      	beq.n	800aee4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aeb6:	4b13      	ldr	r3, [pc, #76]	; (800af04 <vTaskDelay+0x60>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d009      	beq.n	800aed2 <vTaskDelay+0x2e>
 800aebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec2:	f383 8811 	msr	BASEPRI, r3
 800aec6:	f3bf 8f6f 	isb	sy
 800aeca:	f3bf 8f4f 	dsb	sy
 800aece:	60bb      	str	r3, [r7, #8]
 800aed0:	e7fe      	b.n	800aed0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800aed2:	f000 f87b 	bl	800afcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aed6:	2100      	movs	r1, #0
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 fced 	bl	800b8b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aede:	f000 f883 	bl	800afe8 <xTaskResumeAll>
 800aee2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d107      	bne.n	800aefa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800aeea:	4b07      	ldr	r3, [pc, #28]	; (800af08 <vTaskDelay+0x64>)
 800aeec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aef0:	601a      	str	r2, [r3, #0]
 800aef2:	f3bf 8f4f 	dsb	sy
 800aef6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aefa:	bf00      	nop
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	20000440 	.word	0x20000440
 800af08:	e000ed04 	.word	0xe000ed04

0800af0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b08a      	sub	sp, #40	; 0x28
 800af10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af12:	2300      	movs	r3, #0
 800af14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af16:	2300      	movs	r3, #0
 800af18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af1a:	463a      	mov	r2, r7
 800af1c:	1d39      	adds	r1, r7, #4
 800af1e:	f107 0308 	add.w	r3, r7, #8
 800af22:	4618      	mov	r0, r3
 800af24:	f7f5 faec 	bl	8000500 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af28:	6839      	ldr	r1, [r7, #0]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	68ba      	ldr	r2, [r7, #8]
 800af2e:	9202      	str	r2, [sp, #8]
 800af30:	9301      	str	r3, [sp, #4]
 800af32:	2300      	movs	r3, #0
 800af34:	9300      	str	r3, [sp, #0]
 800af36:	2300      	movs	r3, #0
 800af38:	460a      	mov	r2, r1
 800af3a:	491e      	ldr	r1, [pc, #120]	; (800afb4 <vTaskStartScheduler+0xa8>)
 800af3c:	481e      	ldr	r0, [pc, #120]	; (800afb8 <vTaskStartScheduler+0xac>)
 800af3e:	f7ff fd0a 	bl	800a956 <xTaskCreateStatic>
 800af42:	4602      	mov	r2, r0
 800af44:	4b1d      	ldr	r3, [pc, #116]	; (800afbc <vTaskStartScheduler+0xb0>)
 800af46:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800af48:	4b1c      	ldr	r3, [pc, #112]	; (800afbc <vTaskStartScheduler+0xb0>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d002      	beq.n	800af56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800af50:	2301      	movs	r3, #1
 800af52:	617b      	str	r3, [r7, #20]
 800af54:	e001      	b.n	800af5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800af56:	2300      	movs	r3, #0
 800af58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d117      	bne.n	800af90 <vTaskStartScheduler+0x84>
 800af60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af64:	f383 8811 	msr	BASEPRI, r3
 800af68:	f3bf 8f6f 	isb	sy
 800af6c:	f3bf 8f4f 	dsb	sy
 800af70:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800af72:	4b13      	ldr	r3, [pc, #76]	; (800afc0 <vTaskStartScheduler+0xb4>)
 800af74:	f04f 32ff 	mov.w	r2, #4294967295
 800af78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800af7a:	4b12      	ldr	r3, [pc, #72]	; (800afc4 <vTaskStartScheduler+0xb8>)
 800af7c:	2201      	movs	r2, #1
 800af7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800af80:	4b11      	ldr	r3, [pc, #68]	; (800afc8 <vTaskStartScheduler+0xbc>)
 800af82:	2200      	movs	r2, #0
 800af84:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800af86:	f7f5 faab 	bl	80004e0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800af8a:	f000 fd81 	bl	800ba90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800af8e:	e00d      	b.n	800afac <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af96:	d109      	bne.n	800afac <vTaskStartScheduler+0xa0>
 800af98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9c:	f383 8811 	msr	BASEPRI, r3
 800afa0:	f3bf 8f6f 	isb	sy
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	60fb      	str	r3, [r7, #12]
 800afaa:	e7fe      	b.n	800afaa <vTaskStartScheduler+0x9e>
}
 800afac:	bf00      	nop
 800afae:	3718      	adds	r7, #24
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	0800d010 	.word	0x0800d010
 800afb8:	0800b5d1 	.word	0x0800b5d1
 800afbc:	2000043c 	.word	0x2000043c
 800afc0:	20000438 	.word	0x20000438
 800afc4:	20000424 	.word	0x20000424
 800afc8:	2000041c 	.word	0x2000041c

0800afcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800afcc:	b480      	push	{r7}
 800afce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800afd0:	4b04      	ldr	r3, [pc, #16]	; (800afe4 <vTaskSuspendAll+0x18>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	3301      	adds	r3, #1
 800afd6:	4a03      	ldr	r2, [pc, #12]	; (800afe4 <vTaskSuspendAll+0x18>)
 800afd8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800afda:	bf00      	nop
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr
 800afe4:	20000440 	.word	0x20000440

0800afe8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800afee:	2300      	movs	r3, #0
 800aff0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aff2:	2300      	movs	r3, #0
 800aff4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aff6:	4b41      	ldr	r3, [pc, #260]	; (800b0fc <xTaskResumeAll+0x114>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d109      	bne.n	800b012 <xTaskResumeAll+0x2a>
 800affe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b002:	f383 8811 	msr	BASEPRI, r3
 800b006:	f3bf 8f6f 	isb	sy
 800b00a:	f3bf 8f4f 	dsb	sy
 800b00e:	603b      	str	r3, [r7, #0]
 800b010:	e7fe      	b.n	800b010 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b012:	f000 fddb 	bl	800bbcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b016:	4b39      	ldr	r3, [pc, #228]	; (800b0fc <xTaskResumeAll+0x114>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	3b01      	subs	r3, #1
 800b01c:	4a37      	ldr	r2, [pc, #220]	; (800b0fc <xTaskResumeAll+0x114>)
 800b01e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b020:	4b36      	ldr	r3, [pc, #216]	; (800b0fc <xTaskResumeAll+0x114>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d161      	bne.n	800b0ec <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b028:	4b35      	ldr	r3, [pc, #212]	; (800b100 <xTaskResumeAll+0x118>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d05d      	beq.n	800b0ec <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b030:	e02e      	b.n	800b090 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b032:	4b34      	ldr	r3, [pc, #208]	; (800b104 <xTaskResumeAll+0x11c>)
 800b034:	68db      	ldr	r3, [r3, #12]
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	3318      	adds	r3, #24
 800b03e:	4618      	mov	r0, r3
 800b040:	f7fe fea0 	bl	8009d84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	3304      	adds	r3, #4
 800b048:	4618      	mov	r0, r3
 800b04a:	f7fe fe9b 	bl	8009d84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b052:	2201      	movs	r2, #1
 800b054:	409a      	lsls	r2, r3
 800b056:	4b2c      	ldr	r3, [pc, #176]	; (800b108 <xTaskResumeAll+0x120>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4313      	orrs	r3, r2
 800b05c:	4a2a      	ldr	r2, [pc, #168]	; (800b108 <xTaskResumeAll+0x120>)
 800b05e:	6013      	str	r3, [r2, #0]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b064:	4613      	mov	r3, r2
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	4413      	add	r3, r2
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	4a27      	ldr	r2, [pc, #156]	; (800b10c <xTaskResumeAll+0x124>)
 800b06e:	441a      	add	r2, r3
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	3304      	adds	r3, #4
 800b074:	4619      	mov	r1, r3
 800b076:	4610      	mov	r0, r2
 800b078:	f7fe fe27 	bl	8009cca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b080:	4b23      	ldr	r3, [pc, #140]	; (800b110 <xTaskResumeAll+0x128>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b086:	429a      	cmp	r2, r3
 800b088:	d302      	bcc.n	800b090 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800b08a:	4b22      	ldr	r3, [pc, #136]	; (800b114 <xTaskResumeAll+0x12c>)
 800b08c:	2201      	movs	r2, #1
 800b08e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b090:	4b1c      	ldr	r3, [pc, #112]	; (800b104 <xTaskResumeAll+0x11c>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d1cc      	bne.n	800b032 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d001      	beq.n	800b0a2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b09e:	f000 fb49 	bl	800b734 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b0a2:	4b1d      	ldr	r3, [pc, #116]	; (800b118 <xTaskResumeAll+0x130>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d010      	beq.n	800b0d0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b0ae:	f000 f859 	bl	800b164 <xTaskIncrementTick>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d002      	beq.n	800b0be <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800b0b8:	4b16      	ldr	r3, [pc, #88]	; (800b114 <xTaskResumeAll+0x12c>)
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	3b01      	subs	r3, #1
 800b0c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d1f1      	bne.n	800b0ae <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800b0ca:	4b13      	ldr	r3, [pc, #76]	; (800b118 <xTaskResumeAll+0x130>)
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b0d0:	4b10      	ldr	r3, [pc, #64]	; (800b114 <xTaskResumeAll+0x12c>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d009      	beq.n	800b0ec <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b0dc:	4b0f      	ldr	r3, [pc, #60]	; (800b11c <xTaskResumeAll+0x134>)
 800b0de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0e2:	601a      	str	r2, [r3, #0]
 800b0e4:	f3bf 8f4f 	dsb	sy
 800b0e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0ec:	f000 fd9c 	bl	800bc28 <vPortExitCritical>

	return xAlreadyYielded;
 800b0f0:	68bb      	ldr	r3, [r7, #8]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3710      	adds	r7, #16
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	20000440 	.word	0x20000440
 800b100:	20000418 	.word	0x20000418
 800b104:	200003d8 	.word	0x200003d8
 800b108:	20000420 	.word	0x20000420
 800b10c:	2000031c 	.word	0x2000031c
 800b110:	20000318 	.word	0x20000318
 800b114:	2000042c 	.word	0x2000042c
 800b118:	20000428 	.word	0x20000428
 800b11c:	e000ed04 	.word	0xe000ed04

0800b120 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b120:	b480      	push	{r7}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b126:	4b05      	ldr	r3, [pc, #20]	; (800b13c <xTaskGetTickCount+0x1c>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b12c:	687b      	ldr	r3, [r7, #4]
}
 800b12e:	4618      	mov	r0, r3
 800b130:	370c      	adds	r7, #12
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr
 800b13a:	bf00      	nop
 800b13c:	2000041c 	.word	0x2000041c

0800b140 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b146:	f000 fe1d 	bl	800bd84 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b14a:	2300      	movs	r3, #0
 800b14c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b14e:	4b04      	ldr	r3, [pc, #16]	; (800b160 <xTaskGetTickCountFromISR+0x20>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b154:	683b      	ldr	r3, [r7, #0]
}
 800b156:	4618      	mov	r0, r3
 800b158:	3708      	adds	r7, #8
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	2000041c 	.word	0x2000041c

0800b164 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b086      	sub	sp, #24
 800b168:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b16a:	2300      	movs	r3, #0
 800b16c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b16e:	4b4e      	ldr	r3, [pc, #312]	; (800b2a8 <xTaskIncrementTick+0x144>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	f040 8087 	bne.w	800b286 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b178:	4b4c      	ldr	r3, [pc, #304]	; (800b2ac <xTaskIncrementTick+0x148>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	3301      	adds	r3, #1
 800b17e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b180:	4a4a      	ldr	r2, [pc, #296]	; (800b2ac <xTaskIncrementTick+0x148>)
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d11f      	bne.n	800b1cc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b18c:	4b48      	ldr	r3, [pc, #288]	; (800b2b0 <xTaskIncrementTick+0x14c>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d009      	beq.n	800b1aa <xTaskIncrementTick+0x46>
 800b196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b19a:	f383 8811 	msr	BASEPRI, r3
 800b19e:	f3bf 8f6f 	isb	sy
 800b1a2:	f3bf 8f4f 	dsb	sy
 800b1a6:	603b      	str	r3, [r7, #0]
 800b1a8:	e7fe      	b.n	800b1a8 <xTaskIncrementTick+0x44>
 800b1aa:	4b41      	ldr	r3, [pc, #260]	; (800b2b0 <xTaskIncrementTick+0x14c>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	60fb      	str	r3, [r7, #12]
 800b1b0:	4b40      	ldr	r3, [pc, #256]	; (800b2b4 <xTaskIncrementTick+0x150>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a3e      	ldr	r2, [pc, #248]	; (800b2b0 <xTaskIncrementTick+0x14c>)
 800b1b6:	6013      	str	r3, [r2, #0]
 800b1b8:	4a3e      	ldr	r2, [pc, #248]	; (800b2b4 <xTaskIncrementTick+0x150>)
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	6013      	str	r3, [r2, #0]
 800b1be:	4b3e      	ldr	r3, [pc, #248]	; (800b2b8 <xTaskIncrementTick+0x154>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	4a3c      	ldr	r2, [pc, #240]	; (800b2b8 <xTaskIncrementTick+0x154>)
 800b1c6:	6013      	str	r3, [r2, #0]
 800b1c8:	f000 fab4 	bl	800b734 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b1cc:	4b3b      	ldr	r3, [pc, #236]	; (800b2bc <xTaskIncrementTick+0x158>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	693a      	ldr	r2, [r7, #16]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d348      	bcc.n	800b268 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1d6:	4b36      	ldr	r3, [pc, #216]	; (800b2b0 <xTaskIncrementTick+0x14c>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d104      	bne.n	800b1ea <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1e0:	4b36      	ldr	r3, [pc, #216]	; (800b2bc <xTaskIncrementTick+0x158>)
 800b1e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1e6:	601a      	str	r2, [r3, #0]
					break;
 800b1e8:	e03e      	b.n	800b268 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1ea:	4b31      	ldr	r3, [pc, #196]	; (800b2b0 <xTaskIncrementTick+0x14c>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	68db      	ldr	r3, [r3, #12]
 800b1f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b1fa:	693a      	ldr	r2, [r7, #16]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d203      	bcs.n	800b20a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b202:	4a2e      	ldr	r2, [pc, #184]	; (800b2bc <xTaskIncrementTick+0x158>)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b208:	e02e      	b.n	800b268 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	3304      	adds	r3, #4
 800b20e:	4618      	mov	r0, r3
 800b210:	f7fe fdb8 	bl	8009d84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d004      	beq.n	800b226 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	3318      	adds	r3, #24
 800b220:	4618      	mov	r0, r3
 800b222:	f7fe fdaf 	bl	8009d84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22a:	2201      	movs	r2, #1
 800b22c:	409a      	lsls	r2, r3
 800b22e:	4b24      	ldr	r3, [pc, #144]	; (800b2c0 <xTaskIncrementTick+0x15c>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4313      	orrs	r3, r2
 800b234:	4a22      	ldr	r2, [pc, #136]	; (800b2c0 <xTaskIncrementTick+0x15c>)
 800b236:	6013      	str	r3, [r2, #0]
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b23c:	4613      	mov	r3, r2
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	4413      	add	r3, r2
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	4a1f      	ldr	r2, [pc, #124]	; (800b2c4 <xTaskIncrementTick+0x160>)
 800b246:	441a      	add	r2, r3
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	3304      	adds	r3, #4
 800b24c:	4619      	mov	r1, r3
 800b24e:	4610      	mov	r0, r2
 800b250:	f7fe fd3b 	bl	8009cca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b258:	4b1b      	ldr	r3, [pc, #108]	; (800b2c8 <xTaskIncrementTick+0x164>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b25e:	429a      	cmp	r2, r3
 800b260:	d3b9      	bcc.n	800b1d6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b262:	2301      	movs	r3, #1
 800b264:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b266:	e7b6      	b.n	800b1d6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b268:	4b17      	ldr	r3, [pc, #92]	; (800b2c8 <xTaskIncrementTick+0x164>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b26e:	4915      	ldr	r1, [pc, #84]	; (800b2c4 <xTaskIncrementTick+0x160>)
 800b270:	4613      	mov	r3, r2
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	4413      	add	r3, r2
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	440b      	add	r3, r1
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d907      	bls.n	800b290 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800b280:	2301      	movs	r3, #1
 800b282:	617b      	str	r3, [r7, #20]
 800b284:	e004      	b.n	800b290 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b286:	4b11      	ldr	r3, [pc, #68]	; (800b2cc <xTaskIncrementTick+0x168>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	3301      	adds	r3, #1
 800b28c:	4a0f      	ldr	r2, [pc, #60]	; (800b2cc <xTaskIncrementTick+0x168>)
 800b28e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b290:	4b0f      	ldr	r3, [pc, #60]	; (800b2d0 <xTaskIncrementTick+0x16c>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d001      	beq.n	800b29c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800b298:	2301      	movs	r3, #1
 800b29a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b29c:	697b      	ldr	r3, [r7, #20]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3718      	adds	r7, #24
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	20000440 	.word	0x20000440
 800b2ac:	2000041c 	.word	0x2000041c
 800b2b0:	200003d0 	.word	0x200003d0
 800b2b4:	200003d4 	.word	0x200003d4
 800b2b8:	20000430 	.word	0x20000430
 800b2bc:	20000438 	.word	0x20000438
 800b2c0:	20000420 	.word	0x20000420
 800b2c4:	2000031c 	.word	0x2000031c
 800b2c8:	20000318 	.word	0x20000318
 800b2cc:	20000428 	.word	0x20000428
 800b2d0:	2000042c 	.word	0x2000042c

0800b2d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b086      	sub	sp, #24
 800b2d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b2da:	4b32      	ldr	r3, [pc, #200]	; (800b3a4 <vTaskSwitchContext+0xd0>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d003      	beq.n	800b2ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b2e2:	4b31      	ldr	r3, [pc, #196]	; (800b3a8 <vTaskSwitchContext+0xd4>)
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b2e8:	e057      	b.n	800b39a <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 800b2ea:	4b2f      	ldr	r3, [pc, #188]	; (800b3a8 <vTaskSwitchContext+0xd4>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b2f0:	f7f5 f8fd 	bl	80004ee <getRunTimeCounterValue>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	4b2d      	ldr	r3, [pc, #180]	; (800b3ac <vTaskSwitchContext+0xd8>)
 800b2f8:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b2fa:	4b2c      	ldr	r3, [pc, #176]	; (800b3ac <vTaskSwitchContext+0xd8>)
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	4b2c      	ldr	r3, [pc, #176]	; (800b3b0 <vTaskSwitchContext+0xdc>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	429a      	cmp	r2, r3
 800b304:	d909      	bls.n	800b31a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b306:	4b2b      	ldr	r3, [pc, #172]	; (800b3b4 <vTaskSwitchContext+0xe0>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b30c:	4a27      	ldr	r2, [pc, #156]	; (800b3ac <vTaskSwitchContext+0xd8>)
 800b30e:	6810      	ldr	r0, [r2, #0]
 800b310:	4a27      	ldr	r2, [pc, #156]	; (800b3b0 <vTaskSwitchContext+0xdc>)
 800b312:	6812      	ldr	r2, [r2, #0]
 800b314:	1a82      	subs	r2, r0, r2
 800b316:	440a      	add	r2, r1
 800b318:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800b31a:	4b24      	ldr	r3, [pc, #144]	; (800b3ac <vTaskSwitchContext+0xd8>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4a24      	ldr	r2, [pc, #144]	; (800b3b0 <vTaskSwitchContext+0xdc>)
 800b320:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b322:	4b25      	ldr	r3, [pc, #148]	; (800b3b8 <vTaskSwitchContext+0xe4>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	fab3 f383 	clz	r3, r3
 800b32e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b330:	7afb      	ldrb	r3, [r7, #11]
 800b332:	f1c3 031f 	rsb	r3, r3, #31
 800b336:	617b      	str	r3, [r7, #20]
 800b338:	4920      	ldr	r1, [pc, #128]	; (800b3bc <vTaskSwitchContext+0xe8>)
 800b33a:	697a      	ldr	r2, [r7, #20]
 800b33c:	4613      	mov	r3, r2
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	4413      	add	r3, r2
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	440b      	add	r3, r1
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d109      	bne.n	800b360 <vTaskSwitchContext+0x8c>
	__asm volatile
 800b34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b350:	f383 8811 	msr	BASEPRI, r3
 800b354:	f3bf 8f6f 	isb	sy
 800b358:	f3bf 8f4f 	dsb	sy
 800b35c:	607b      	str	r3, [r7, #4]
 800b35e:	e7fe      	b.n	800b35e <vTaskSwitchContext+0x8a>
 800b360:	697a      	ldr	r2, [r7, #20]
 800b362:	4613      	mov	r3, r2
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	4413      	add	r3, r2
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	4a14      	ldr	r2, [pc, #80]	; (800b3bc <vTaskSwitchContext+0xe8>)
 800b36c:	4413      	add	r3, r2
 800b36e:	613b      	str	r3, [r7, #16]
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	685a      	ldr	r2, [r3, #4]
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	605a      	str	r2, [r3, #4]
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	685a      	ldr	r2, [r3, #4]
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	3308      	adds	r3, #8
 800b382:	429a      	cmp	r2, r3
 800b384:	d104      	bne.n	800b390 <vTaskSwitchContext+0xbc>
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	685a      	ldr	r2, [r3, #4]
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	605a      	str	r2, [r3, #4]
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	4a07      	ldr	r2, [pc, #28]	; (800b3b4 <vTaskSwitchContext+0xe0>)
 800b398:	6013      	str	r3, [r2, #0]
}
 800b39a:	bf00      	nop
 800b39c:	3718      	adds	r7, #24
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	20000440 	.word	0x20000440
 800b3a8:	2000042c 	.word	0x2000042c
 800b3ac:	20000448 	.word	0x20000448
 800b3b0:	20000444 	.word	0x20000444
 800b3b4:	20000318 	.word	0x20000318
 800b3b8:	20000420 	.word	0x20000420
 800b3bc:	2000031c 	.word	0x2000031c

0800b3c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d109      	bne.n	800b3e4 <vTaskPlaceOnEventList+0x24>
 800b3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d4:	f383 8811 	msr	BASEPRI, r3
 800b3d8:	f3bf 8f6f 	isb	sy
 800b3dc:	f3bf 8f4f 	dsb	sy
 800b3e0:	60fb      	str	r3, [r7, #12]
 800b3e2:	e7fe      	b.n	800b3e2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3e4:	4b07      	ldr	r3, [pc, #28]	; (800b404 <vTaskPlaceOnEventList+0x44>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	3318      	adds	r3, #24
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f7fe fc90 	bl	8009d12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b3f2:	2101      	movs	r1, #1
 800b3f4:	6838      	ldr	r0, [r7, #0]
 800b3f6:	f000 fa5f 	bl	800b8b8 <prvAddCurrentTaskToDelayedList>
}
 800b3fa:	bf00      	nop
 800b3fc:	3710      	adds	r7, #16
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	20000318 	.word	0x20000318

0800b408 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b086      	sub	sp, #24
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	68db      	ldr	r3, [r3, #12]
 800b416:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d109      	bne.n	800b432 <xTaskRemoveFromEventList+0x2a>
 800b41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b422:	f383 8811 	msr	BASEPRI, r3
 800b426:	f3bf 8f6f 	isb	sy
 800b42a:	f3bf 8f4f 	dsb	sy
 800b42e:	60fb      	str	r3, [r7, #12]
 800b430:	e7fe      	b.n	800b430 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	3318      	adds	r3, #24
 800b436:	4618      	mov	r0, r3
 800b438:	f7fe fca4 	bl	8009d84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b43c:	4b1d      	ldr	r3, [pc, #116]	; (800b4b4 <xTaskRemoveFromEventList+0xac>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d11c      	bne.n	800b47e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	3304      	adds	r3, #4
 800b448:	4618      	mov	r0, r3
 800b44a:	f7fe fc9b 	bl	8009d84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b452:	2201      	movs	r2, #1
 800b454:	409a      	lsls	r2, r3
 800b456:	4b18      	ldr	r3, [pc, #96]	; (800b4b8 <xTaskRemoveFromEventList+0xb0>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4313      	orrs	r3, r2
 800b45c:	4a16      	ldr	r2, [pc, #88]	; (800b4b8 <xTaskRemoveFromEventList+0xb0>)
 800b45e:	6013      	str	r3, [r2, #0]
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b464:	4613      	mov	r3, r2
 800b466:	009b      	lsls	r3, r3, #2
 800b468:	4413      	add	r3, r2
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	4a13      	ldr	r2, [pc, #76]	; (800b4bc <xTaskRemoveFromEventList+0xb4>)
 800b46e:	441a      	add	r2, r3
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	3304      	adds	r3, #4
 800b474:	4619      	mov	r1, r3
 800b476:	4610      	mov	r0, r2
 800b478:	f7fe fc27 	bl	8009cca <vListInsertEnd>
 800b47c:	e005      	b.n	800b48a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	3318      	adds	r3, #24
 800b482:	4619      	mov	r1, r3
 800b484:	480e      	ldr	r0, [pc, #56]	; (800b4c0 <xTaskRemoveFromEventList+0xb8>)
 800b486:	f7fe fc20 	bl	8009cca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b48e:	4b0d      	ldr	r3, [pc, #52]	; (800b4c4 <xTaskRemoveFromEventList+0xbc>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b494:	429a      	cmp	r2, r3
 800b496:	d905      	bls.n	800b4a4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b498:	2301      	movs	r3, #1
 800b49a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b49c:	4b0a      	ldr	r3, [pc, #40]	; (800b4c8 <xTaskRemoveFromEventList+0xc0>)
 800b49e:	2201      	movs	r2, #1
 800b4a0:	601a      	str	r2, [r3, #0]
 800b4a2:	e001      	b.n	800b4a8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b4a8:	697b      	ldr	r3, [r7, #20]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3718      	adds	r7, #24
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	20000440 	.word	0x20000440
 800b4b8:	20000420 	.word	0x20000420
 800b4bc:	2000031c 	.word	0x2000031c
 800b4c0:	200003d8 	.word	0x200003d8
 800b4c4:	20000318 	.word	0x20000318
 800b4c8:	2000042c 	.word	0x2000042c

0800b4cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b4d4:	4b06      	ldr	r3, [pc, #24]	; (800b4f0 <vTaskInternalSetTimeOutState+0x24>)
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b4dc:	4b05      	ldr	r3, [pc, #20]	; (800b4f4 <vTaskInternalSetTimeOutState+0x28>)
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	605a      	str	r2, [r3, #4]
}
 800b4e4:	bf00      	nop
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr
 800b4f0:	20000430 	.word	0x20000430
 800b4f4:	2000041c 	.word	0x2000041c

0800b4f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b088      	sub	sp, #32
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d109      	bne.n	800b51c <xTaskCheckForTimeOut+0x24>
 800b508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b50c:	f383 8811 	msr	BASEPRI, r3
 800b510:	f3bf 8f6f 	isb	sy
 800b514:	f3bf 8f4f 	dsb	sy
 800b518:	613b      	str	r3, [r7, #16]
 800b51a:	e7fe      	b.n	800b51a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d109      	bne.n	800b536 <xTaskCheckForTimeOut+0x3e>
 800b522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b526:	f383 8811 	msr	BASEPRI, r3
 800b52a:	f3bf 8f6f 	isb	sy
 800b52e:	f3bf 8f4f 	dsb	sy
 800b532:	60fb      	str	r3, [r7, #12]
 800b534:	e7fe      	b.n	800b534 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800b536:	f000 fb49 	bl	800bbcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b53a:	4b1d      	ldr	r3, [pc, #116]	; (800b5b0 <xTaskCheckForTimeOut+0xb8>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	69ba      	ldr	r2, [r7, #24]
 800b546:	1ad3      	subs	r3, r2, r3
 800b548:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b552:	d102      	bne.n	800b55a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b554:	2300      	movs	r3, #0
 800b556:	61fb      	str	r3, [r7, #28]
 800b558:	e023      	b.n	800b5a2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	4b15      	ldr	r3, [pc, #84]	; (800b5b4 <xTaskCheckForTimeOut+0xbc>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	429a      	cmp	r2, r3
 800b564:	d007      	beq.n	800b576 <xTaskCheckForTimeOut+0x7e>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	69ba      	ldr	r2, [r7, #24]
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d302      	bcc.n	800b576 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b570:	2301      	movs	r3, #1
 800b572:	61fb      	str	r3, [r7, #28]
 800b574:	e015      	b.n	800b5a2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	697a      	ldr	r2, [r7, #20]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d20b      	bcs.n	800b598 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	1ad2      	subs	r2, r2, r3
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f7ff ff9d 	bl	800b4cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b592:	2300      	movs	r3, #0
 800b594:	61fb      	str	r3, [r7, #28]
 800b596:	e004      	b.n	800b5a2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	2200      	movs	r2, #0
 800b59c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b5a2:	f000 fb41 	bl	800bc28 <vPortExitCritical>

	return xReturn;
 800b5a6:	69fb      	ldr	r3, [r7, #28]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3720      	adds	r7, #32
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	2000041c 	.word	0x2000041c
 800b5b4:	20000430 	.word	0x20000430

0800b5b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b5bc:	4b03      	ldr	r3, [pc, #12]	; (800b5cc <vTaskMissedYield+0x14>)
 800b5be:	2201      	movs	r2, #1
 800b5c0:	601a      	str	r2, [r3, #0]
}
 800b5c2:	bf00      	nop
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr
 800b5cc:	2000042c 	.word	0x2000042c

0800b5d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b5d8:	f000 f852 	bl	800b680 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b5dc:	4b06      	ldr	r3, [pc, #24]	; (800b5f8 <prvIdleTask+0x28>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d9f9      	bls.n	800b5d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b5e4:	4b05      	ldr	r3, [pc, #20]	; (800b5fc <prvIdleTask+0x2c>)
 800b5e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5ea:	601a      	str	r2, [r3, #0]
 800b5ec:	f3bf 8f4f 	dsb	sy
 800b5f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b5f4:	e7f0      	b.n	800b5d8 <prvIdleTask+0x8>
 800b5f6:	bf00      	nop
 800b5f8:	2000031c 	.word	0x2000031c
 800b5fc:	e000ed04 	.word	0xe000ed04

0800b600 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b606:	2300      	movs	r3, #0
 800b608:	607b      	str	r3, [r7, #4]
 800b60a:	e00c      	b.n	800b626 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	4613      	mov	r3, r2
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	4413      	add	r3, r2
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	4a12      	ldr	r2, [pc, #72]	; (800b660 <prvInitialiseTaskLists+0x60>)
 800b618:	4413      	add	r3, r2
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7fe fb28 	bl	8009c70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	3301      	adds	r3, #1
 800b624:	607b      	str	r3, [r7, #4]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2b06      	cmp	r3, #6
 800b62a:	d9ef      	bls.n	800b60c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b62c:	480d      	ldr	r0, [pc, #52]	; (800b664 <prvInitialiseTaskLists+0x64>)
 800b62e:	f7fe fb1f 	bl	8009c70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b632:	480d      	ldr	r0, [pc, #52]	; (800b668 <prvInitialiseTaskLists+0x68>)
 800b634:	f7fe fb1c 	bl	8009c70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b638:	480c      	ldr	r0, [pc, #48]	; (800b66c <prvInitialiseTaskLists+0x6c>)
 800b63a:	f7fe fb19 	bl	8009c70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b63e:	480c      	ldr	r0, [pc, #48]	; (800b670 <prvInitialiseTaskLists+0x70>)
 800b640:	f7fe fb16 	bl	8009c70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b644:	480b      	ldr	r0, [pc, #44]	; (800b674 <prvInitialiseTaskLists+0x74>)
 800b646:	f7fe fb13 	bl	8009c70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b64a:	4b0b      	ldr	r3, [pc, #44]	; (800b678 <prvInitialiseTaskLists+0x78>)
 800b64c:	4a05      	ldr	r2, [pc, #20]	; (800b664 <prvInitialiseTaskLists+0x64>)
 800b64e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b650:	4b0a      	ldr	r3, [pc, #40]	; (800b67c <prvInitialiseTaskLists+0x7c>)
 800b652:	4a05      	ldr	r2, [pc, #20]	; (800b668 <prvInitialiseTaskLists+0x68>)
 800b654:	601a      	str	r2, [r3, #0]
}
 800b656:	bf00      	nop
 800b658:	3708      	adds	r7, #8
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop
 800b660:	2000031c 	.word	0x2000031c
 800b664:	200003a8 	.word	0x200003a8
 800b668:	200003bc 	.word	0x200003bc
 800b66c:	200003d8 	.word	0x200003d8
 800b670:	200003ec 	.word	0x200003ec
 800b674:	20000404 	.word	0x20000404
 800b678:	200003d0 	.word	0x200003d0
 800b67c:	200003d4 	.word	0x200003d4

0800b680 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b686:	e019      	b.n	800b6bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b688:	f000 faa0 	bl	800bbcc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b68c:	4b0f      	ldr	r3, [pc, #60]	; (800b6cc <prvCheckTasksWaitingTermination+0x4c>)
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	3304      	adds	r3, #4
 800b698:	4618      	mov	r0, r3
 800b69a:	f7fe fb73 	bl	8009d84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b69e:	4b0c      	ldr	r3, [pc, #48]	; (800b6d0 <prvCheckTasksWaitingTermination+0x50>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	3b01      	subs	r3, #1
 800b6a4:	4a0a      	ldr	r2, [pc, #40]	; (800b6d0 <prvCheckTasksWaitingTermination+0x50>)
 800b6a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b6a8:	4b0a      	ldr	r3, [pc, #40]	; (800b6d4 <prvCheckTasksWaitingTermination+0x54>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	3b01      	subs	r3, #1
 800b6ae:	4a09      	ldr	r2, [pc, #36]	; (800b6d4 <prvCheckTasksWaitingTermination+0x54>)
 800b6b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b6b2:	f000 fab9 	bl	800bc28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 f80e 	bl	800b6d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6bc:	4b05      	ldr	r3, [pc, #20]	; (800b6d4 <prvCheckTasksWaitingTermination+0x54>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d1e1      	bne.n	800b688 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b6c4:	bf00      	nop
 800b6c6:	3708      	adds	r7, #8
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	200003ec 	.word	0x200003ec
 800b6d0:	20000418 	.word	0x20000418
 800b6d4:	20000400 	.word	0x20000400

0800b6d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d108      	bne.n	800b6fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f000 fc48 	bl	800bf84 <vPortFree>
				vPortFree( pxTCB );
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 fc45 	bl	800bf84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b6fa:	e017      	b.n	800b72c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b702:	2b01      	cmp	r3, #1
 800b704:	d103      	bne.n	800b70e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fc3c 	bl	800bf84 <vPortFree>
	}
 800b70c:	e00e      	b.n	800b72c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b714:	2b02      	cmp	r3, #2
 800b716:	d009      	beq.n	800b72c <prvDeleteTCB+0x54>
 800b718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71c:	f383 8811 	msr	BASEPRI, r3
 800b720:	f3bf 8f6f 	isb	sy
 800b724:	f3bf 8f4f 	dsb	sy
 800b728:	60fb      	str	r3, [r7, #12]
 800b72a:	e7fe      	b.n	800b72a <prvDeleteTCB+0x52>
	}
 800b72c:	bf00      	nop
 800b72e:	3710      	adds	r7, #16
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b734:	b480      	push	{r7}
 800b736:	b083      	sub	sp, #12
 800b738:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b73a:	4b0c      	ldr	r3, [pc, #48]	; (800b76c <prvResetNextTaskUnblockTime+0x38>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d104      	bne.n	800b74e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b744:	4b0a      	ldr	r3, [pc, #40]	; (800b770 <prvResetNextTaskUnblockTime+0x3c>)
 800b746:	f04f 32ff 	mov.w	r2, #4294967295
 800b74a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b74c:	e008      	b.n	800b760 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b74e:	4b07      	ldr	r3, [pc, #28]	; (800b76c <prvResetNextTaskUnblockTime+0x38>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	68db      	ldr	r3, [r3, #12]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	4a04      	ldr	r2, [pc, #16]	; (800b770 <prvResetNextTaskUnblockTime+0x3c>)
 800b75e:	6013      	str	r3, [r2, #0]
}
 800b760:	bf00      	nop
 800b762:	370c      	adds	r7, #12
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr
 800b76c:	200003d0 	.word	0x200003d0
 800b770:	20000438 	.word	0x20000438

0800b774 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b77a:	4b0b      	ldr	r3, [pc, #44]	; (800b7a8 <xTaskGetSchedulerState+0x34>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d102      	bne.n	800b788 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b782:	2301      	movs	r3, #1
 800b784:	607b      	str	r3, [r7, #4]
 800b786:	e008      	b.n	800b79a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b788:	4b08      	ldr	r3, [pc, #32]	; (800b7ac <xTaskGetSchedulerState+0x38>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d102      	bne.n	800b796 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b790:	2302      	movs	r3, #2
 800b792:	607b      	str	r3, [r7, #4]
 800b794:	e001      	b.n	800b79a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b796:	2300      	movs	r3, #0
 800b798:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b79a:	687b      	ldr	r3, [r7, #4]
	}
 800b79c:	4618      	mov	r0, r3
 800b79e:	370c      	adds	r7, #12
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr
 800b7a8:	20000424 	.word	0x20000424
 800b7ac:	20000440 	.word	0x20000440

0800b7b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b086      	sub	sp, #24
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d06c      	beq.n	800b8a0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b7c6:	4b39      	ldr	r3, [pc, #228]	; (800b8ac <xTaskPriorityDisinherit+0xfc>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	693a      	ldr	r2, [r7, #16]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d009      	beq.n	800b7e4 <xTaskPriorityDisinherit+0x34>
 800b7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d4:	f383 8811 	msr	BASEPRI, r3
 800b7d8:	f3bf 8f6f 	isb	sy
 800b7dc:	f3bf 8f4f 	dsb	sy
 800b7e0:	60fb      	str	r3, [r7, #12]
 800b7e2:	e7fe      	b.n	800b7e2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d109      	bne.n	800b800 <xTaskPriorityDisinherit+0x50>
 800b7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f0:	f383 8811 	msr	BASEPRI, r3
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	f3bf 8f4f 	dsb	sy
 800b7fc:	60bb      	str	r3, [r7, #8]
 800b7fe:	e7fe      	b.n	800b7fe <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b804:	1e5a      	subs	r2, r3, #1
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b812:	429a      	cmp	r2, r3
 800b814:	d044      	beq.n	800b8a0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d140      	bne.n	800b8a0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	3304      	adds	r3, #4
 800b822:	4618      	mov	r0, r3
 800b824:	f7fe faae 	bl	8009d84 <uxListRemove>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d115      	bne.n	800b85a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b832:	491f      	ldr	r1, [pc, #124]	; (800b8b0 <xTaskPriorityDisinherit+0x100>)
 800b834:	4613      	mov	r3, r2
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	4413      	add	r3, r2
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	440b      	add	r3, r1
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d10a      	bne.n	800b85a <xTaskPriorityDisinherit+0xaa>
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b848:	2201      	movs	r2, #1
 800b84a:	fa02 f303 	lsl.w	r3, r2, r3
 800b84e:	43da      	mvns	r2, r3
 800b850:	4b18      	ldr	r3, [pc, #96]	; (800b8b4 <xTaskPriorityDisinherit+0x104>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4013      	ands	r3, r2
 800b856:	4a17      	ldr	r2, [pc, #92]	; (800b8b4 <xTaskPriorityDisinherit+0x104>)
 800b858:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b866:	f1c3 0207 	rsb	r2, r3, #7
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b872:	2201      	movs	r2, #1
 800b874:	409a      	lsls	r2, r3
 800b876:	4b0f      	ldr	r3, [pc, #60]	; (800b8b4 <xTaskPriorityDisinherit+0x104>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4313      	orrs	r3, r2
 800b87c:	4a0d      	ldr	r2, [pc, #52]	; (800b8b4 <xTaskPriorityDisinherit+0x104>)
 800b87e:	6013      	str	r3, [r2, #0]
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b884:	4613      	mov	r3, r2
 800b886:	009b      	lsls	r3, r3, #2
 800b888:	4413      	add	r3, r2
 800b88a:	009b      	lsls	r3, r3, #2
 800b88c:	4a08      	ldr	r2, [pc, #32]	; (800b8b0 <xTaskPriorityDisinherit+0x100>)
 800b88e:	441a      	add	r2, r3
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	3304      	adds	r3, #4
 800b894:	4619      	mov	r1, r3
 800b896:	4610      	mov	r0, r2
 800b898:	f7fe fa17 	bl	8009cca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b89c:	2301      	movs	r3, #1
 800b89e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b8a0:	697b      	ldr	r3, [r7, #20]
	}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3718      	adds	r7, #24
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	20000318 	.word	0x20000318
 800b8b0:	2000031c 	.word	0x2000031c
 800b8b4:	20000420 	.word	0x20000420

0800b8b8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b8c2:	4b29      	ldr	r3, [pc, #164]	; (800b968 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8c8:	4b28      	ldr	r3, [pc, #160]	; (800b96c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	3304      	adds	r3, #4
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7fe fa58 	bl	8009d84 <uxListRemove>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d10b      	bne.n	800b8f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b8da:	4b24      	ldr	r3, [pc, #144]	; (800b96c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b8e6:	43da      	mvns	r2, r3
 800b8e8:	4b21      	ldr	r3, [pc, #132]	; (800b970 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4013      	ands	r3, r2
 800b8ee:	4a20      	ldr	r2, [pc, #128]	; (800b970 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b8f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f8:	d10a      	bne.n	800b910 <prvAddCurrentTaskToDelayedList+0x58>
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d007      	beq.n	800b910 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b900:	4b1a      	ldr	r3, [pc, #104]	; (800b96c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	3304      	adds	r3, #4
 800b906:	4619      	mov	r1, r3
 800b908:	481a      	ldr	r0, [pc, #104]	; (800b974 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b90a:	f7fe f9de 	bl	8009cca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b90e:	e026      	b.n	800b95e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	4413      	add	r3, r2
 800b916:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b918:	4b14      	ldr	r3, [pc, #80]	; (800b96c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	68ba      	ldr	r2, [r7, #8]
 800b91e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b920:	68ba      	ldr	r2, [r7, #8]
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	429a      	cmp	r2, r3
 800b926:	d209      	bcs.n	800b93c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b928:	4b13      	ldr	r3, [pc, #76]	; (800b978 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b92a:	681a      	ldr	r2, [r3, #0]
 800b92c:	4b0f      	ldr	r3, [pc, #60]	; (800b96c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	3304      	adds	r3, #4
 800b932:	4619      	mov	r1, r3
 800b934:	4610      	mov	r0, r2
 800b936:	f7fe f9ec 	bl	8009d12 <vListInsert>
}
 800b93a:	e010      	b.n	800b95e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b93c:	4b0f      	ldr	r3, [pc, #60]	; (800b97c <prvAddCurrentTaskToDelayedList+0xc4>)
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	4b0a      	ldr	r3, [pc, #40]	; (800b96c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	3304      	adds	r3, #4
 800b946:	4619      	mov	r1, r3
 800b948:	4610      	mov	r0, r2
 800b94a:	f7fe f9e2 	bl	8009d12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b94e:	4b0c      	ldr	r3, [pc, #48]	; (800b980 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	68ba      	ldr	r2, [r7, #8]
 800b954:	429a      	cmp	r2, r3
 800b956:	d202      	bcs.n	800b95e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b958:	4a09      	ldr	r2, [pc, #36]	; (800b980 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	6013      	str	r3, [r2, #0]
}
 800b95e:	bf00      	nop
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	2000041c 	.word	0x2000041c
 800b96c:	20000318 	.word	0x20000318
 800b970:	20000420 	.word	0x20000420
 800b974:	20000404 	.word	0x20000404
 800b978:	200003d4 	.word	0x200003d4
 800b97c:	200003d0 	.word	0x200003d0
 800b980:	20000438 	.word	0x20000438

0800b984 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b984:	b480      	push	{r7}
 800b986:	b085      	sub	sp, #20
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	3b04      	subs	r3, #4
 800b994:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b99c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	3b04      	subs	r3, #4
 800b9a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	f023 0201 	bic.w	r2, r3, #1
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	3b04      	subs	r3, #4
 800b9b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b9b4:	4a0c      	ldr	r2, [pc, #48]	; (800b9e8 <pxPortInitialiseStack+0x64>)
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	3b14      	subs	r3, #20
 800b9be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	3b04      	subs	r3, #4
 800b9ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f06f 0202 	mvn.w	r2, #2
 800b9d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	3b20      	subs	r3, #32
 800b9d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b9da:	68fb      	ldr	r3, [r7, #12]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3714      	adds	r7, #20
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr
 800b9e8:	0800b9ed 	.word	0x0800b9ed

0800b9ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b085      	sub	sp, #20
 800b9f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b9f6:	4b11      	ldr	r3, [pc, #68]	; (800ba3c <prvTaskExitError+0x50>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9fe:	d009      	beq.n	800ba14 <prvTaskExitError+0x28>
 800ba00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	60fb      	str	r3, [r7, #12]
 800ba12:	e7fe      	b.n	800ba12 <prvTaskExitError+0x26>
 800ba14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba18:	f383 8811 	msr	BASEPRI, r3
 800ba1c:	f3bf 8f6f 	isb	sy
 800ba20:	f3bf 8f4f 	dsb	sy
 800ba24:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ba26:	bf00      	nop
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d0fc      	beq.n	800ba28 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ba2e:	bf00      	nop
 800ba30:	3714      	adds	r7, #20
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop
 800ba3c:	2000002c 	.word	0x2000002c

0800ba40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ba40:	4b07      	ldr	r3, [pc, #28]	; (800ba60 <pxCurrentTCBConst2>)
 800ba42:	6819      	ldr	r1, [r3, #0]
 800ba44:	6808      	ldr	r0, [r1, #0]
 800ba46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba4a:	f380 8809 	msr	PSP, r0
 800ba4e:	f3bf 8f6f 	isb	sy
 800ba52:	f04f 0000 	mov.w	r0, #0
 800ba56:	f380 8811 	msr	BASEPRI, r0
 800ba5a:	4770      	bx	lr
 800ba5c:	f3af 8000 	nop.w

0800ba60 <pxCurrentTCBConst2>:
 800ba60:	20000318 	.word	0x20000318
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ba64:	bf00      	nop
 800ba66:	bf00      	nop

0800ba68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ba68:	4808      	ldr	r0, [pc, #32]	; (800ba8c <prvPortStartFirstTask+0x24>)
 800ba6a:	6800      	ldr	r0, [r0, #0]
 800ba6c:	6800      	ldr	r0, [r0, #0]
 800ba6e:	f380 8808 	msr	MSP, r0
 800ba72:	f04f 0000 	mov.w	r0, #0
 800ba76:	f380 8814 	msr	CONTROL, r0
 800ba7a:	b662      	cpsie	i
 800ba7c:	b661      	cpsie	f
 800ba7e:	f3bf 8f4f 	dsb	sy
 800ba82:	f3bf 8f6f 	isb	sy
 800ba86:	df00      	svc	0
 800ba88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ba8a:	bf00      	nop
 800ba8c:	e000ed08 	.word	0xe000ed08

0800ba90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b086      	sub	sp, #24
 800ba94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ba96:	4b44      	ldr	r3, [pc, #272]	; (800bba8 <xPortStartScheduler+0x118>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a44      	ldr	r2, [pc, #272]	; (800bbac <xPortStartScheduler+0x11c>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d109      	bne.n	800bab4 <xPortStartScheduler+0x24>
 800baa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa4:	f383 8811 	msr	BASEPRI, r3
 800baa8:	f3bf 8f6f 	isb	sy
 800baac:	f3bf 8f4f 	dsb	sy
 800bab0:	613b      	str	r3, [r7, #16]
 800bab2:	e7fe      	b.n	800bab2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bab4:	4b3c      	ldr	r3, [pc, #240]	; (800bba8 <xPortStartScheduler+0x118>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a3d      	ldr	r2, [pc, #244]	; (800bbb0 <xPortStartScheduler+0x120>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d109      	bne.n	800bad2 <xPortStartScheduler+0x42>
 800babe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac2:	f383 8811 	msr	BASEPRI, r3
 800bac6:	f3bf 8f6f 	isb	sy
 800baca:	f3bf 8f4f 	dsb	sy
 800bace:	60fb      	str	r3, [r7, #12]
 800bad0:	e7fe      	b.n	800bad0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bad2:	4b38      	ldr	r3, [pc, #224]	; (800bbb4 <xPortStartScheduler+0x124>)
 800bad4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	b2db      	uxtb	r3, r3
 800badc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	22ff      	movs	r2, #255	; 0xff
 800bae2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800baec:	78fb      	ldrb	r3, [r7, #3]
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800baf4:	b2da      	uxtb	r2, r3
 800baf6:	4b30      	ldr	r3, [pc, #192]	; (800bbb8 <xPortStartScheduler+0x128>)
 800baf8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bafa:	4b30      	ldr	r3, [pc, #192]	; (800bbbc <xPortStartScheduler+0x12c>)
 800bafc:	2207      	movs	r2, #7
 800bafe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb00:	e009      	b.n	800bb16 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800bb02:	4b2e      	ldr	r3, [pc, #184]	; (800bbbc <xPortStartScheduler+0x12c>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	3b01      	subs	r3, #1
 800bb08:	4a2c      	ldr	r2, [pc, #176]	; (800bbbc <xPortStartScheduler+0x12c>)
 800bb0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb0c:	78fb      	ldrb	r3, [r7, #3]
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	005b      	lsls	r3, r3, #1
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb16:	78fb      	ldrb	r3, [r7, #3]
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb1e:	2b80      	cmp	r3, #128	; 0x80
 800bb20:	d0ef      	beq.n	800bb02 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb22:	4b26      	ldr	r3, [pc, #152]	; (800bbbc <xPortStartScheduler+0x12c>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f1c3 0307 	rsb	r3, r3, #7
 800bb2a:	2b04      	cmp	r3, #4
 800bb2c:	d009      	beq.n	800bb42 <xPortStartScheduler+0xb2>
 800bb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb32:	f383 8811 	msr	BASEPRI, r3
 800bb36:	f3bf 8f6f 	isb	sy
 800bb3a:	f3bf 8f4f 	dsb	sy
 800bb3e:	60bb      	str	r3, [r7, #8]
 800bb40:	e7fe      	b.n	800bb40 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bb42:	4b1e      	ldr	r3, [pc, #120]	; (800bbbc <xPortStartScheduler+0x12c>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	021b      	lsls	r3, r3, #8
 800bb48:	4a1c      	ldr	r2, [pc, #112]	; (800bbbc <xPortStartScheduler+0x12c>)
 800bb4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bb4c:	4b1b      	ldr	r3, [pc, #108]	; (800bbbc <xPortStartScheduler+0x12c>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb54:	4a19      	ldr	r2, [pc, #100]	; (800bbbc <xPortStartScheduler+0x12c>)
 800bb56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	b2da      	uxtb	r2, r3
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb60:	4b17      	ldr	r3, [pc, #92]	; (800bbc0 <xPortStartScheduler+0x130>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4a16      	ldr	r2, [pc, #88]	; (800bbc0 <xPortStartScheduler+0x130>)
 800bb66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb6c:	4b14      	ldr	r3, [pc, #80]	; (800bbc0 <xPortStartScheduler+0x130>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	4a13      	ldr	r2, [pc, #76]	; (800bbc0 <xPortStartScheduler+0x130>)
 800bb72:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bb76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bb78:	f000 f8d6 	bl	800bd28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bb7c:	4b11      	ldr	r3, [pc, #68]	; (800bbc4 <xPortStartScheduler+0x134>)
 800bb7e:	2200      	movs	r2, #0
 800bb80:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bb82:	f000 f8f5 	bl	800bd70 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bb86:	4b10      	ldr	r3, [pc, #64]	; (800bbc8 <xPortStartScheduler+0x138>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a0f      	ldr	r2, [pc, #60]	; (800bbc8 <xPortStartScheduler+0x138>)
 800bb8c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bb90:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bb92:	f7ff ff69 	bl	800ba68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bb96:	f7ff fb9d 	bl	800b2d4 <vTaskSwitchContext>
	prvTaskExitError();
 800bb9a:	f7ff ff27 	bl	800b9ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bb9e:	2300      	movs	r3, #0
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3718      	adds	r7, #24
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	e000ed00 	.word	0xe000ed00
 800bbac:	410fc271 	.word	0x410fc271
 800bbb0:	410fc270 	.word	0x410fc270
 800bbb4:	e000e400 	.word	0xe000e400
 800bbb8:	2000044c 	.word	0x2000044c
 800bbbc:	20000450 	.word	0x20000450
 800bbc0:	e000ed20 	.word	0xe000ed20
 800bbc4:	2000002c 	.word	0x2000002c
 800bbc8:	e000ef34 	.word	0xe000ef34

0800bbcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b083      	sub	sp, #12
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd6:	f383 8811 	msr	BASEPRI, r3
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	f3bf 8f4f 	dsb	sy
 800bbe2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bbe4:	4b0e      	ldr	r3, [pc, #56]	; (800bc20 <vPortEnterCritical+0x54>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	3301      	adds	r3, #1
 800bbea:	4a0d      	ldr	r2, [pc, #52]	; (800bc20 <vPortEnterCritical+0x54>)
 800bbec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bbee:	4b0c      	ldr	r3, [pc, #48]	; (800bc20 <vPortEnterCritical+0x54>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d10e      	bne.n	800bc14 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bbf6:	4b0b      	ldr	r3, [pc, #44]	; (800bc24 <vPortEnterCritical+0x58>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	b2db      	uxtb	r3, r3
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d009      	beq.n	800bc14 <vPortEnterCritical+0x48>
 800bc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc04:	f383 8811 	msr	BASEPRI, r3
 800bc08:	f3bf 8f6f 	isb	sy
 800bc0c:	f3bf 8f4f 	dsb	sy
 800bc10:	603b      	str	r3, [r7, #0]
 800bc12:	e7fe      	b.n	800bc12 <vPortEnterCritical+0x46>
	}
}
 800bc14:	bf00      	nop
 800bc16:	370c      	adds	r7, #12
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr
 800bc20:	2000002c 	.word	0x2000002c
 800bc24:	e000ed04 	.word	0xe000ed04

0800bc28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc2e:	4b11      	ldr	r3, [pc, #68]	; (800bc74 <vPortExitCritical+0x4c>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d109      	bne.n	800bc4a <vPortExitCritical+0x22>
 800bc36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc3a:	f383 8811 	msr	BASEPRI, r3
 800bc3e:	f3bf 8f6f 	isb	sy
 800bc42:	f3bf 8f4f 	dsb	sy
 800bc46:	607b      	str	r3, [r7, #4]
 800bc48:	e7fe      	b.n	800bc48 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800bc4a:	4b0a      	ldr	r3, [pc, #40]	; (800bc74 <vPortExitCritical+0x4c>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	3b01      	subs	r3, #1
 800bc50:	4a08      	ldr	r2, [pc, #32]	; (800bc74 <vPortExitCritical+0x4c>)
 800bc52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc54:	4b07      	ldr	r3, [pc, #28]	; (800bc74 <vPortExitCritical+0x4c>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d104      	bne.n	800bc66 <vPortExitCritical+0x3e>
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800bc66:	bf00      	nop
 800bc68:	370c      	adds	r7, #12
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	2000002c 	.word	0x2000002c
	...

0800bc80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bc80:	f3ef 8009 	mrs	r0, PSP
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	4b15      	ldr	r3, [pc, #84]	; (800bce0 <pxCurrentTCBConst>)
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	f01e 0f10 	tst.w	lr, #16
 800bc90:	bf08      	it	eq
 800bc92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bc96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc9a:	6010      	str	r0, [r2, #0]
 800bc9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bca4:	f380 8811 	msr	BASEPRI, r0
 800bca8:	f3bf 8f4f 	dsb	sy
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	f7ff fb10 	bl	800b2d4 <vTaskSwitchContext>
 800bcb4:	f04f 0000 	mov.w	r0, #0
 800bcb8:	f380 8811 	msr	BASEPRI, r0
 800bcbc:	bc09      	pop	{r0, r3}
 800bcbe:	6819      	ldr	r1, [r3, #0]
 800bcc0:	6808      	ldr	r0, [r1, #0]
 800bcc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc6:	f01e 0f10 	tst.w	lr, #16
 800bcca:	bf08      	it	eq
 800bccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bcd0:	f380 8809 	msr	PSP, r0
 800bcd4:	f3bf 8f6f 	isb	sy
 800bcd8:	4770      	bx	lr
 800bcda:	bf00      	nop
 800bcdc:	f3af 8000 	nop.w

0800bce0 <pxCurrentTCBConst>:
 800bce0:	20000318 	.word	0x20000318
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bce4:	bf00      	nop
 800bce6:	bf00      	nop

0800bce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
	__asm volatile
 800bcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf2:	f383 8811 	msr	BASEPRI, r3
 800bcf6:	f3bf 8f6f 	isb	sy
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bd00:	f7ff fa30 	bl	800b164 <xTaskIncrementTick>
 800bd04:	4603      	mov	r3, r0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d003      	beq.n	800bd12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bd0a:	4b06      	ldr	r3, [pc, #24]	; (800bd24 <SysTick_Handler+0x3c>)
 800bd0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd10:	601a      	str	r2, [r3, #0]
 800bd12:	2300      	movs	r3, #0
 800bd14:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd1c:	bf00      	nop
 800bd1e:	3708      	adds	r7, #8
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	e000ed04 	.word	0xe000ed04

0800bd28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd28:	b480      	push	{r7}
 800bd2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd2c:	4b0b      	ldr	r3, [pc, #44]	; (800bd5c <vPortSetupTimerInterrupt+0x34>)
 800bd2e:	2200      	movs	r2, #0
 800bd30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd32:	4b0b      	ldr	r3, [pc, #44]	; (800bd60 <vPortSetupTimerInterrupt+0x38>)
 800bd34:	2200      	movs	r2, #0
 800bd36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd38:	4b0a      	ldr	r3, [pc, #40]	; (800bd64 <vPortSetupTimerInterrupt+0x3c>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	4a0a      	ldr	r2, [pc, #40]	; (800bd68 <vPortSetupTimerInterrupt+0x40>)
 800bd3e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd42:	099b      	lsrs	r3, r3, #6
 800bd44:	4a09      	ldr	r2, [pc, #36]	; (800bd6c <vPortSetupTimerInterrupt+0x44>)
 800bd46:	3b01      	subs	r3, #1
 800bd48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd4a:	4b04      	ldr	r3, [pc, #16]	; (800bd5c <vPortSetupTimerInterrupt+0x34>)
 800bd4c:	2207      	movs	r2, #7
 800bd4e:	601a      	str	r2, [r3, #0]
}
 800bd50:	bf00      	nop
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr
 800bd5a:	bf00      	nop
 800bd5c:	e000e010 	.word	0xe000e010
 800bd60:	e000e018 	.word	0xe000e018
 800bd64:	20000000 	.word	0x20000000
 800bd68:	10624dd3 	.word	0x10624dd3
 800bd6c:	e000e014 	.word	0xe000e014

0800bd70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bd70:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bd80 <vPortEnableVFP+0x10>
 800bd74:	6801      	ldr	r1, [r0, #0]
 800bd76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bd7a:	6001      	str	r1, [r0, #0]
 800bd7c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bd7e:	bf00      	nop
 800bd80:	e000ed88 	.word	0xe000ed88

0800bd84 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bd84:	b480      	push	{r7}
 800bd86:	b085      	sub	sp, #20
 800bd88:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bd8a:	f3ef 8305 	mrs	r3, IPSR
 800bd8e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2b0f      	cmp	r3, #15
 800bd94:	d913      	bls.n	800bdbe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bd96:	4a16      	ldr	r2, [pc, #88]	; (800bdf0 <vPortValidateInterruptPriority+0x6c>)
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	4413      	add	r3, r2
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bda0:	4b14      	ldr	r3, [pc, #80]	; (800bdf4 <vPortValidateInterruptPriority+0x70>)
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	7afa      	ldrb	r2, [r7, #11]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d209      	bcs.n	800bdbe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800bdaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdae:	f383 8811 	msr	BASEPRI, r3
 800bdb2:	f3bf 8f6f 	isb	sy
 800bdb6:	f3bf 8f4f 	dsb	sy
 800bdba:	607b      	str	r3, [r7, #4]
 800bdbc:	e7fe      	b.n	800bdbc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bdbe:	4b0e      	ldr	r3, [pc, #56]	; (800bdf8 <vPortValidateInterruptPriority+0x74>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bdc6:	4b0d      	ldr	r3, [pc, #52]	; (800bdfc <vPortValidateInterruptPriority+0x78>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d909      	bls.n	800bde2 <vPortValidateInterruptPriority+0x5e>
 800bdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd2:	f383 8811 	msr	BASEPRI, r3
 800bdd6:	f3bf 8f6f 	isb	sy
 800bdda:	f3bf 8f4f 	dsb	sy
 800bdde:	603b      	str	r3, [r7, #0]
 800bde0:	e7fe      	b.n	800bde0 <vPortValidateInterruptPriority+0x5c>
	}
 800bde2:	bf00      	nop
 800bde4:	3714      	adds	r7, #20
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr
 800bdee:	bf00      	nop
 800bdf0:	e000e3f0 	.word	0xe000e3f0
 800bdf4:	2000044c 	.word	0x2000044c
 800bdf8:	e000ed0c 	.word	0xe000ed0c
 800bdfc:	20000450 	.word	0x20000450

0800be00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b08a      	sub	sp, #40	; 0x28
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800be08:	2300      	movs	r3, #0
 800be0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800be0c:	f7ff f8de 	bl	800afcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800be10:	4b57      	ldr	r3, [pc, #348]	; (800bf70 <pvPortMalloc+0x170>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d101      	bne.n	800be1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800be18:	f000 f90c 	bl	800c034 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800be1c:	4b55      	ldr	r3, [pc, #340]	; (800bf74 <pvPortMalloc+0x174>)
 800be1e:	681a      	ldr	r2, [r3, #0]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	4013      	ands	r3, r2
 800be24:	2b00      	cmp	r3, #0
 800be26:	f040 808c 	bne.w	800bf42 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d01c      	beq.n	800be6a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800be30:	2208      	movs	r2, #8
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4413      	add	r3, r2
 800be36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f003 0307 	and.w	r3, r3, #7
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d013      	beq.n	800be6a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f023 0307 	bic.w	r3, r3, #7
 800be48:	3308      	adds	r3, #8
 800be4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f003 0307 	and.w	r3, r3, #7
 800be52:	2b00      	cmp	r3, #0
 800be54:	d009      	beq.n	800be6a <pvPortMalloc+0x6a>
 800be56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be5a:	f383 8811 	msr	BASEPRI, r3
 800be5e:	f3bf 8f6f 	isb	sy
 800be62:	f3bf 8f4f 	dsb	sy
 800be66:	617b      	str	r3, [r7, #20]
 800be68:	e7fe      	b.n	800be68 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d068      	beq.n	800bf42 <pvPortMalloc+0x142>
 800be70:	4b41      	ldr	r3, [pc, #260]	; (800bf78 <pvPortMalloc+0x178>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	429a      	cmp	r2, r3
 800be78:	d863      	bhi.n	800bf42 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800be7a:	4b40      	ldr	r3, [pc, #256]	; (800bf7c <pvPortMalloc+0x17c>)
 800be7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800be7e:	4b3f      	ldr	r3, [pc, #252]	; (800bf7c <pvPortMalloc+0x17c>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be84:	e004      	b.n	800be90 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800be86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800be8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	429a      	cmp	r2, r3
 800be98:	d903      	bls.n	800bea2 <pvPortMalloc+0xa2>
 800be9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d1f1      	bne.n	800be86 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bea2:	4b33      	ldr	r3, [pc, #204]	; (800bf70 <pvPortMalloc+0x170>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d04a      	beq.n	800bf42 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800beac:	6a3b      	ldr	r3, [r7, #32]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2208      	movs	r2, #8
 800beb2:	4413      	add	r3, r2
 800beb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800beb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	6a3b      	ldr	r3, [r7, #32]
 800bebc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec0:	685a      	ldr	r2, [r3, #4]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	1ad2      	subs	r2, r2, r3
 800bec6:	2308      	movs	r3, #8
 800bec8:	005b      	lsls	r3, r3, #1
 800beca:	429a      	cmp	r2, r3
 800becc:	d91e      	bls.n	800bf0c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	4413      	add	r3, r2
 800bed4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bed6:	69bb      	ldr	r3, [r7, #24]
 800bed8:	f003 0307 	and.w	r3, r3, #7
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d009      	beq.n	800bef4 <pvPortMalloc+0xf4>
 800bee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee4:	f383 8811 	msr	BASEPRI, r3
 800bee8:	f3bf 8f6f 	isb	sy
 800beec:	f3bf 8f4f 	dsb	sy
 800bef0:	613b      	str	r3, [r7, #16]
 800bef2:	e7fe      	b.n	800bef2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef6:	685a      	ldr	r2, [r3, #4]
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	1ad2      	subs	r2, r2, r3
 800befc:	69bb      	ldr	r3, [r7, #24]
 800befe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bf00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bf06:	69b8      	ldr	r0, [r7, #24]
 800bf08:	f000 f8f6 	bl	800c0f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bf0c:	4b1a      	ldr	r3, [pc, #104]	; (800bf78 <pvPortMalloc+0x178>)
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	1ad3      	subs	r3, r2, r3
 800bf16:	4a18      	ldr	r2, [pc, #96]	; (800bf78 <pvPortMalloc+0x178>)
 800bf18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bf1a:	4b17      	ldr	r3, [pc, #92]	; (800bf78 <pvPortMalloc+0x178>)
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	4b18      	ldr	r3, [pc, #96]	; (800bf80 <pvPortMalloc+0x180>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d203      	bcs.n	800bf2e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bf26:	4b14      	ldr	r3, [pc, #80]	; (800bf78 <pvPortMalloc+0x178>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a15      	ldr	r2, [pc, #84]	; (800bf80 <pvPortMalloc+0x180>)
 800bf2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bf2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf30:	685a      	ldr	r2, [r3, #4]
 800bf32:	4b10      	ldr	r3, [pc, #64]	; (800bf74 <pvPortMalloc+0x174>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	431a      	orrs	r2, r3
 800bf38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3e:	2200      	movs	r2, #0
 800bf40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bf42:	f7ff f851 	bl	800afe8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf46:	69fb      	ldr	r3, [r7, #28]
 800bf48:	f003 0307 	and.w	r3, r3, #7
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d009      	beq.n	800bf64 <pvPortMalloc+0x164>
 800bf50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf54:	f383 8811 	msr	BASEPRI, r3
 800bf58:	f3bf 8f6f 	isb	sy
 800bf5c:	f3bf 8f4f 	dsb	sy
 800bf60:	60fb      	str	r3, [r7, #12]
 800bf62:	e7fe      	b.n	800bf62 <pvPortMalloc+0x162>
	return pvReturn;
 800bf64:	69fb      	ldr	r3, [r7, #28]
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3728      	adds	r7, #40	; 0x28
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	2000405c 	.word	0x2000405c
 800bf74:	20004068 	.word	0x20004068
 800bf78:	20004060 	.word	0x20004060
 800bf7c:	20004054 	.word	0x20004054
 800bf80:	20004064 	.word	0x20004064

0800bf84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b086      	sub	sp, #24
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d046      	beq.n	800c024 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bf96:	2308      	movs	r3, #8
 800bf98:	425b      	negs	r3, r3
 800bf9a:	697a      	ldr	r2, [r7, #20]
 800bf9c:	4413      	add	r3, r2
 800bf9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	685a      	ldr	r2, [r3, #4]
 800bfa8:	4b20      	ldr	r3, [pc, #128]	; (800c02c <vPortFree+0xa8>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4013      	ands	r3, r2
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d109      	bne.n	800bfc6 <vPortFree+0x42>
 800bfb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb6:	f383 8811 	msr	BASEPRI, r3
 800bfba:	f3bf 8f6f 	isb	sy
 800bfbe:	f3bf 8f4f 	dsb	sy
 800bfc2:	60fb      	str	r3, [r7, #12]
 800bfc4:	e7fe      	b.n	800bfc4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d009      	beq.n	800bfe2 <vPortFree+0x5e>
 800bfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd2:	f383 8811 	msr	BASEPRI, r3
 800bfd6:	f3bf 8f6f 	isb	sy
 800bfda:	f3bf 8f4f 	dsb	sy
 800bfde:	60bb      	str	r3, [r7, #8]
 800bfe0:	e7fe      	b.n	800bfe0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	685a      	ldr	r2, [r3, #4]
 800bfe6:	4b11      	ldr	r3, [pc, #68]	; (800c02c <vPortFree+0xa8>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	4013      	ands	r3, r2
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d019      	beq.n	800c024 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d115      	bne.n	800c024 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	685a      	ldr	r2, [r3, #4]
 800bffc:	4b0b      	ldr	r3, [pc, #44]	; (800c02c <vPortFree+0xa8>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	43db      	mvns	r3, r3
 800c002:	401a      	ands	r2, r3
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c008:	f7fe ffe0 	bl	800afcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	685a      	ldr	r2, [r3, #4]
 800c010:	4b07      	ldr	r3, [pc, #28]	; (800c030 <vPortFree+0xac>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4413      	add	r3, r2
 800c016:	4a06      	ldr	r2, [pc, #24]	; (800c030 <vPortFree+0xac>)
 800c018:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c01a:	6938      	ldr	r0, [r7, #16]
 800c01c:	f000 f86c 	bl	800c0f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c020:	f7fe ffe2 	bl	800afe8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c024:	bf00      	nop
 800c026:	3718      	adds	r7, #24
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	20004068 	.word	0x20004068
 800c030:	20004060 	.word	0x20004060

0800c034 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c034:	b480      	push	{r7}
 800c036:	b085      	sub	sp, #20
 800c038:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c03a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c03e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c040:	4b27      	ldr	r3, [pc, #156]	; (800c0e0 <prvHeapInit+0xac>)
 800c042:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f003 0307 	and.w	r3, r3, #7
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d00c      	beq.n	800c068 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	3307      	adds	r3, #7
 800c052:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f023 0307 	bic.w	r3, r3, #7
 800c05a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c05c:	68ba      	ldr	r2, [r7, #8]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	1ad3      	subs	r3, r2, r3
 800c062:	4a1f      	ldr	r2, [pc, #124]	; (800c0e0 <prvHeapInit+0xac>)
 800c064:	4413      	add	r3, r2
 800c066:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c06c:	4a1d      	ldr	r2, [pc, #116]	; (800c0e4 <prvHeapInit+0xb0>)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c072:	4b1c      	ldr	r3, [pc, #112]	; (800c0e4 <prvHeapInit+0xb0>)
 800c074:	2200      	movs	r2, #0
 800c076:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	68ba      	ldr	r2, [r7, #8]
 800c07c:	4413      	add	r3, r2
 800c07e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c080:	2208      	movs	r2, #8
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	1a9b      	subs	r3, r3, r2
 800c086:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f023 0307 	bic.w	r3, r3, #7
 800c08e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	4a15      	ldr	r2, [pc, #84]	; (800c0e8 <prvHeapInit+0xb4>)
 800c094:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c096:	4b14      	ldr	r3, [pc, #80]	; (800c0e8 <prvHeapInit+0xb4>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	2200      	movs	r2, #0
 800c09c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c09e:	4b12      	ldr	r3, [pc, #72]	; (800c0e8 <prvHeapInit+0xb4>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	68fa      	ldr	r2, [r7, #12]
 800c0ae:	1ad2      	subs	r2, r2, r3
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c0b4:	4b0c      	ldr	r3, [pc, #48]	; (800c0e8 <prvHeapInit+0xb4>)
 800c0b6:	681a      	ldr	r2, [r3, #0]
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	4a0a      	ldr	r2, [pc, #40]	; (800c0ec <prvHeapInit+0xb8>)
 800c0c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	685b      	ldr	r3, [r3, #4]
 800c0c8:	4a09      	ldr	r2, [pc, #36]	; (800c0f0 <prvHeapInit+0xbc>)
 800c0ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c0cc:	4b09      	ldr	r3, [pc, #36]	; (800c0f4 <prvHeapInit+0xc0>)
 800c0ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c0d2:	601a      	str	r2, [r3, #0]
}
 800c0d4:	bf00      	nop
 800c0d6:	3714      	adds	r7, #20
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr
 800c0e0:	20000454 	.word	0x20000454
 800c0e4:	20004054 	.word	0x20004054
 800c0e8:	2000405c 	.word	0x2000405c
 800c0ec:	20004064 	.word	0x20004064
 800c0f0:	20004060 	.word	0x20004060
 800c0f4:	20004068 	.word	0x20004068

0800c0f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b085      	sub	sp, #20
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c100:	4b28      	ldr	r3, [pc, #160]	; (800c1a4 <prvInsertBlockIntoFreeList+0xac>)
 800c102:	60fb      	str	r3, [r7, #12]
 800c104:	e002      	b.n	800c10c <prvInsertBlockIntoFreeList+0x14>
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	60fb      	str	r3, [r7, #12]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	429a      	cmp	r2, r3
 800c114:	d8f7      	bhi.n	800c106 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	68ba      	ldr	r2, [r7, #8]
 800c120:	4413      	add	r3, r2
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	429a      	cmp	r2, r3
 800c126:	d108      	bne.n	800c13a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	685a      	ldr	r2, [r3, #4]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	441a      	add	r2, r3
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	68ba      	ldr	r2, [r7, #8]
 800c144:	441a      	add	r2, r3
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d118      	bne.n	800c180 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	4b15      	ldr	r3, [pc, #84]	; (800c1a8 <prvInsertBlockIntoFreeList+0xb0>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	429a      	cmp	r2, r3
 800c158:	d00d      	beq.n	800c176 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	685a      	ldr	r2, [r3, #4]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	441a      	add	r2, r3
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	681a      	ldr	r2, [r3, #0]
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	601a      	str	r2, [r3, #0]
 800c174:	e008      	b.n	800c188 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c176:	4b0c      	ldr	r3, [pc, #48]	; (800c1a8 <prvInsertBlockIntoFreeList+0xb0>)
 800c178:	681a      	ldr	r2, [r3, #0]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	601a      	str	r2, [r3, #0]
 800c17e:	e003      	b.n	800c188 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681a      	ldr	r2, [r3, #0]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c188:	68fa      	ldr	r2, [r7, #12]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d002      	beq.n	800c196 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	687a      	ldr	r2, [r7, #4]
 800c194:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c196:	bf00      	nop
 800c198:	3714      	adds	r7, #20
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr
 800c1a2:	bf00      	nop
 800c1a4:	20004054 	.word	0x20004054
 800c1a8:	2000405c 	.word	0x2000405c

0800c1ac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	490e      	ldr	r1, [pc, #56]	; (800c1ec <MX_USB_HOST_Init+0x40>)
 800c1b4:	480e      	ldr	r0, [pc, #56]	; (800c1f0 <MX_USB_HOST_Init+0x44>)
 800c1b6:	f7fb fdc3 	bl	8007d40 <USBH_Init>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d001      	beq.n	800c1c4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c1c0:	f7f5 fa91 	bl	80016e6 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c1c4:	490b      	ldr	r1, [pc, #44]	; (800c1f4 <MX_USB_HOST_Init+0x48>)
 800c1c6:	480a      	ldr	r0, [pc, #40]	; (800c1f0 <MX_USB_HOST_Init+0x44>)
 800c1c8:	f7fb fe70 	bl	8007eac <USBH_RegisterClass>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d001      	beq.n	800c1d6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c1d2:	f7f5 fa88 	bl	80016e6 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c1d6:	4806      	ldr	r0, [pc, #24]	; (800c1f0 <MX_USB_HOST_Init+0x44>)
 800c1d8:	f7fb fef4 	bl	8007fc4 <USBH_Start>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d001      	beq.n	800c1e6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c1e2:	f7f5 fa80 	bl	80016e6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c1e6:	bf00      	nop
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	0800c1f9 	.word	0x0800c1f9
 800c1f0:	200042c0 	.word	0x200042c0
 800c1f4:	2000000c 	.word	0x2000000c

0800c1f8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b083      	sub	sp, #12
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	460b      	mov	r3, r1
 800c202:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c204:	78fb      	ldrb	r3, [r7, #3]
 800c206:	3b01      	subs	r3, #1
 800c208:	2b04      	cmp	r3, #4
 800c20a:	d819      	bhi.n	800c240 <USBH_UserProcess+0x48>
 800c20c:	a201      	add	r2, pc, #4	; (adr r2, 800c214 <USBH_UserProcess+0x1c>)
 800c20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c212:	bf00      	nop
 800c214:	0800c241 	.word	0x0800c241
 800c218:	0800c231 	.word	0x0800c231
 800c21c:	0800c241 	.word	0x0800c241
 800c220:	0800c239 	.word	0x0800c239
 800c224:	0800c229 	.word	0x0800c229
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c228:	4b09      	ldr	r3, [pc, #36]	; (800c250 <USBH_UserProcess+0x58>)
 800c22a:	2203      	movs	r2, #3
 800c22c:	701a      	strb	r2, [r3, #0]
  break;
 800c22e:	e008      	b.n	800c242 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c230:	4b07      	ldr	r3, [pc, #28]	; (800c250 <USBH_UserProcess+0x58>)
 800c232:	2202      	movs	r2, #2
 800c234:	701a      	strb	r2, [r3, #0]
  break;
 800c236:	e004      	b.n	800c242 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c238:	4b05      	ldr	r3, [pc, #20]	; (800c250 <USBH_UserProcess+0x58>)
 800c23a:	2201      	movs	r2, #1
 800c23c:	701a      	strb	r2, [r3, #0]
  break;
 800c23e:	e000      	b.n	800c242 <USBH_UserProcess+0x4a>

  default:
  break;
 800c240:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c242:	bf00      	nop
 800c244:	370c      	adds	r7, #12
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop
 800c250:	2000406c 	.word	0x2000406c

0800c254 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b08a      	sub	sp, #40	; 0x28
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c25c:	f107 0314 	add.w	r3, r7, #20
 800c260:	2200      	movs	r2, #0
 800c262:	601a      	str	r2, [r3, #0]
 800c264:	605a      	str	r2, [r3, #4]
 800c266:	609a      	str	r2, [r3, #8]
 800c268:	60da      	str	r2, [r3, #12]
 800c26a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c274:	d147      	bne.n	800c306 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c276:	2300      	movs	r3, #0
 800c278:	613b      	str	r3, [r7, #16]
 800c27a:	4b25      	ldr	r3, [pc, #148]	; (800c310 <HAL_HCD_MspInit+0xbc>)
 800c27c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c27e:	4a24      	ldr	r2, [pc, #144]	; (800c310 <HAL_HCD_MspInit+0xbc>)
 800c280:	f043 0301 	orr.w	r3, r3, #1
 800c284:	6313      	str	r3, [r2, #48]	; 0x30
 800c286:	4b22      	ldr	r3, [pc, #136]	; (800c310 <HAL_HCD_MspInit+0xbc>)
 800c288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c28a:	f003 0301 	and.w	r3, r3, #1
 800c28e:	613b      	str	r3, [r7, #16]
 800c290:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c292:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c298:	2300      	movs	r3, #0
 800c29a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c29c:	2300      	movs	r3, #0
 800c29e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c2a0:	f107 0314 	add.w	r3, r7, #20
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	481b      	ldr	r0, [pc, #108]	; (800c314 <HAL_HCD_MspInit+0xc0>)
 800c2a8:	f7f5 fe34 	bl	8001f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c2ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c2b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2b2:	2302      	movs	r3, #2
 800c2b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c2be:	230a      	movs	r3, #10
 800c2c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2c2:	f107 0314 	add.w	r3, r7, #20
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	4812      	ldr	r0, [pc, #72]	; (800c314 <HAL_HCD_MspInit+0xc0>)
 800c2ca:	f7f5 fe23 	bl	8001f14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c2ce:	4b10      	ldr	r3, [pc, #64]	; (800c310 <HAL_HCD_MspInit+0xbc>)
 800c2d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2d2:	4a0f      	ldr	r2, [pc, #60]	; (800c310 <HAL_HCD_MspInit+0xbc>)
 800c2d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2d8:	6353      	str	r3, [r2, #52]	; 0x34
 800c2da:	2300      	movs	r3, #0
 800c2dc:	60fb      	str	r3, [r7, #12]
 800c2de:	4b0c      	ldr	r3, [pc, #48]	; (800c310 <HAL_HCD_MspInit+0xbc>)
 800c2e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2e2:	4a0b      	ldr	r2, [pc, #44]	; (800c310 <HAL_HCD_MspInit+0xbc>)
 800c2e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c2e8:	6453      	str	r3, [r2, #68]	; 0x44
 800c2ea:	4b09      	ldr	r3, [pc, #36]	; (800c310 <HAL_HCD_MspInit+0xbc>)
 800c2ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c2f2:	60fb      	str	r3, [r7, #12]
 800c2f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	2043      	movs	r0, #67	; 0x43
 800c2fc:	f7f5 fdb0 	bl	8001e60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c300:	2043      	movs	r0, #67	; 0x43
 800c302:	f7f5 fdc9 	bl	8001e98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c306:	bf00      	nop
 800c308:	3728      	adds	r7, #40	; 0x28
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	40023800 	.word	0x40023800
 800c314:	40020000 	.word	0x40020000

0800c318 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c326:	4618      	mov	r0, r3
 800c328:	f7fc faf9 	bl	800891e <USBH_LL_IncTimer>
}
 800c32c:	bf00      	nop
 800c32e:	3708      	adds	r7, #8
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c342:	4618      	mov	r0, r3
 800c344:	f7fc fb3d 	bl	80089c2 <USBH_LL_Connect>
}
 800c348:	bf00      	nop
 800c34a:	3708      	adds	r7, #8
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c35e:	4618      	mov	r0, r3
 800c360:	f7fc fb52 	bl	8008a08 <USBH_LL_Disconnect>
}
 800c364:	bf00      	nop
 800c366:	3708      	adds	r7, #8
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	460b      	mov	r3, r1
 800c376:	70fb      	strb	r3, [r7, #3]
 800c378:	4613      	mov	r3, r2
 800c37a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c382:	4618      	mov	r0, r3
 800c384:	f7fc fb87 	bl	8008a96 <USBH_LL_NotifyURBChange>
#endif
}
 800c388:	bf00      	nop
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7fc fae7 	bl	8008972 <USBH_LL_PortEnabled>
}
 800c3a4:	bf00      	nop
 800c3a6:	3708      	adds	r7, #8
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b082      	sub	sp, #8
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7fc faf3 	bl	80089a6 <USBH_LL_PortDisabled>
}
 800c3c0:	bf00      	nop
 800c3c2:	3708      	adds	r7, #8
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	d12a      	bne.n	800c430 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c3da:	4a18      	ldr	r2, [pc, #96]	; (800c43c <USBH_LL_Init+0x74>)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	4a15      	ldr	r2, [pc, #84]	; (800c43c <USBH_LL_Init+0x74>)
 800c3e6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c3ea:	4b14      	ldr	r3, [pc, #80]	; (800c43c <USBH_LL_Init+0x74>)
 800c3ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c3f0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c3f2:	4b12      	ldr	r3, [pc, #72]	; (800c43c <USBH_LL_Init+0x74>)
 800c3f4:	2208      	movs	r2, #8
 800c3f6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c3f8:	4b10      	ldr	r3, [pc, #64]	; (800c43c <USBH_LL_Init+0x74>)
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c3fe:	4b0f      	ldr	r3, [pc, #60]	; (800c43c <USBH_LL_Init+0x74>)
 800c400:	2200      	movs	r2, #0
 800c402:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c404:	4b0d      	ldr	r3, [pc, #52]	; (800c43c <USBH_LL_Init+0x74>)
 800c406:	2202      	movs	r2, #2
 800c408:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c40a:	4b0c      	ldr	r3, [pc, #48]	; (800c43c <USBH_LL_Init+0x74>)
 800c40c:	2200      	movs	r2, #0
 800c40e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c410:	480a      	ldr	r0, [pc, #40]	; (800c43c <USBH_LL_Init+0x74>)
 800c412:	f7f5 ff56 	bl	80022c2 <HAL_HCD_Init>
 800c416:	4603      	mov	r3, r0
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d001      	beq.n	800c420 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c41c:	f7f5 f963 	bl	80016e6 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c420:	4806      	ldr	r0, [pc, #24]	; (800c43c <USBH_LL_Init+0x74>)
 800c422:	f7f6 fb59 	bl	8002ad8 <HAL_HCD_GetCurrentFrame>
 800c426:	4603      	mov	r3, r0
 800c428:	4619      	mov	r1, r3
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f7fc fa68 	bl	8008900 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c430:	2300      	movs	r3, #0
}
 800c432:	4618      	mov	r0, r3
 800c434:	3708      	adds	r7, #8
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
 800c43a:	bf00      	nop
 800c43c:	200046a4 	.word	0x200046a4

0800c440 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c448:	2300      	movs	r3, #0
 800c44a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c44c:	2300      	movs	r3, #0
 800c44e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c456:	4618      	mov	r0, r3
 800c458:	f7f6 fac6 	bl	80029e8 <HAL_HCD_Start>
 800c45c:	4603      	mov	r3, r0
 800c45e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c460:	7bfb      	ldrb	r3, [r7, #15]
 800c462:	4618      	mov	r0, r3
 800c464:	f000 f95c 	bl	800c720 <USBH_Get_USB_Status>
 800c468:	4603      	mov	r3, r0
 800c46a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c46c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3710      	adds	r7, #16
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}

0800c476 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c476:	b580      	push	{r7, lr}
 800c478:	b084      	sub	sp, #16
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c47e:	2300      	movs	r3, #0
 800c480:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c482:	2300      	movs	r3, #0
 800c484:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7f6 face 	bl	8002a2e <HAL_HCD_Stop>
 800c492:	4603      	mov	r3, r0
 800c494:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c496:	7bfb      	ldrb	r3, [r7, #15]
 800c498:	4618      	mov	r0, r3
 800c49a:	f000 f941 	bl	800c720 <USBH_Get_USB_Status>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3710      	adds	r7, #16
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7f6 fb18 	bl	8002af4 <HAL_HCD_GetCurrentSpeed>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	d007      	beq.n	800c4da <USBH_LL_GetSpeed+0x2e>
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	d302      	bcc.n	800c4d4 <USBH_LL_GetSpeed+0x28>
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d006      	beq.n	800c4e0 <USBH_LL_GetSpeed+0x34>
 800c4d2:	e008      	b.n	800c4e6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c4d8:	e008      	b.n	800c4ec <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c4da:	2301      	movs	r3, #1
 800c4dc:	73fb      	strb	r3, [r7, #15]
    break;
 800c4de:	e005      	b.n	800c4ec <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c4e0:	2302      	movs	r3, #2
 800c4e2:	73fb      	strb	r3, [r7, #15]
    break;
 800c4e4:	e002      	b.n	800c4ec <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	73fb      	strb	r3, [r7, #15]
    break;
 800c4ea:	bf00      	nop
  }
  return  speed;
 800c4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3710      	adds	r7, #16
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}

0800c4f6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b084      	sub	sp, #16
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4fe:	2300      	movs	r3, #0
 800c500:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c502:	2300      	movs	r3, #0
 800c504:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c50c:	4618      	mov	r0, r3
 800c50e:	f7f6 faab 	bl	8002a68 <HAL_HCD_ResetPort>
 800c512:	4603      	mov	r3, r0
 800c514:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c516:	7bfb      	ldrb	r3, [r7, #15]
 800c518:	4618      	mov	r0, r3
 800c51a:	f000 f901 	bl	800c720 <USBH_Get_USB_Status>
 800c51e:	4603      	mov	r3, r0
 800c520:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c522:	7bbb      	ldrb	r3, [r7, #14]
}
 800c524:	4618      	mov	r0, r3
 800c526:	3710      	adds	r7, #16
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	460b      	mov	r3, r1
 800c536:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c53e:	78fa      	ldrb	r2, [r7, #3]
 800c540:	4611      	mov	r1, r2
 800c542:	4618      	mov	r0, r3
 800c544:	f7f6 fab3 	bl	8002aae <HAL_HCD_HC_GetXferCount>
 800c548:	4603      	mov	r3, r0
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3708      	adds	r7, #8
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}

0800c552 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c552:	b590      	push	{r4, r7, lr}
 800c554:	b089      	sub	sp, #36	; 0x24
 800c556:	af04      	add	r7, sp, #16
 800c558:	6078      	str	r0, [r7, #4]
 800c55a:	4608      	mov	r0, r1
 800c55c:	4611      	mov	r1, r2
 800c55e:	461a      	mov	r2, r3
 800c560:	4603      	mov	r3, r0
 800c562:	70fb      	strb	r3, [r7, #3]
 800c564:	460b      	mov	r3, r1
 800c566:	70bb      	strb	r3, [r7, #2]
 800c568:	4613      	mov	r3, r2
 800c56a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c56c:	2300      	movs	r3, #0
 800c56e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c570:	2300      	movs	r3, #0
 800c572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c57a:	787c      	ldrb	r4, [r7, #1]
 800c57c:	78ba      	ldrb	r2, [r7, #2]
 800c57e:	78f9      	ldrb	r1, [r7, #3]
 800c580:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c582:	9302      	str	r3, [sp, #8]
 800c584:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c588:	9301      	str	r3, [sp, #4]
 800c58a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c58e:	9300      	str	r3, [sp, #0]
 800c590:	4623      	mov	r3, r4
 800c592:	f7f5 fef8 	bl	8002386 <HAL_HCD_HC_Init>
 800c596:	4603      	mov	r3, r0
 800c598:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c59a:	7bfb      	ldrb	r3, [r7, #15]
 800c59c:	4618      	mov	r0, r3
 800c59e:	f000 f8bf 	bl	800c720 <USBH_Get_USB_Status>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3714      	adds	r7, #20
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd90      	pop	{r4, r7, pc}

0800c5b0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c5ca:	78fa      	ldrb	r2, [r7, #3]
 800c5cc:	4611      	mov	r1, r2
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7f5 ff71 	bl	80024b6 <HAL_HCD_HC_Halt>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c5d8:	7bfb      	ldrb	r3, [r7, #15]
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f000 f8a0 	bl	800c720 <USBH_Get_USB_Status>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}

0800c5ee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c5ee:	b590      	push	{r4, r7, lr}
 800c5f0:	b089      	sub	sp, #36	; 0x24
 800c5f2:	af04      	add	r7, sp, #16
 800c5f4:	6078      	str	r0, [r7, #4]
 800c5f6:	4608      	mov	r0, r1
 800c5f8:	4611      	mov	r1, r2
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	70fb      	strb	r3, [r7, #3]
 800c600:	460b      	mov	r3, r1
 800c602:	70bb      	strb	r3, [r7, #2]
 800c604:	4613      	mov	r3, r2
 800c606:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c608:	2300      	movs	r3, #0
 800c60a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c60c:	2300      	movs	r3, #0
 800c60e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c616:	787c      	ldrb	r4, [r7, #1]
 800c618:	78ba      	ldrb	r2, [r7, #2]
 800c61a:	78f9      	ldrb	r1, [r7, #3]
 800c61c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c620:	9303      	str	r3, [sp, #12]
 800c622:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c624:	9302      	str	r3, [sp, #8]
 800c626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c628:	9301      	str	r3, [sp, #4]
 800c62a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c62e:	9300      	str	r3, [sp, #0]
 800c630:	4623      	mov	r3, r4
 800c632:	f7f5 ff63 	bl	80024fc <HAL_HCD_HC_SubmitRequest>
 800c636:	4603      	mov	r3, r0
 800c638:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c63a:	7bfb      	ldrb	r3, [r7, #15]
 800c63c:	4618      	mov	r0, r3
 800c63e:	f000 f86f 	bl	800c720 <USBH_Get_USB_Status>
 800c642:	4603      	mov	r3, r0
 800c644:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c646:	7bbb      	ldrb	r3, [r7, #14]
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3714      	adds	r7, #20
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd90      	pop	{r4, r7, pc}

0800c650 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	460b      	mov	r3, r1
 800c65a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c662:	78fa      	ldrb	r2, [r7, #3]
 800c664:	4611      	mov	r1, r2
 800c666:	4618      	mov	r0, r3
 800c668:	f7f6 fa0c 	bl	8002a84 <HAL_HCD_HC_GetURBState>
 800c66c:	4603      	mov	r3, r0
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3708      	adds	r7, #8
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}

0800c676 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c676:	b580      	push	{r7, lr}
 800c678:	b082      	sub	sp, #8
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
 800c67e:	460b      	mov	r3, r1
 800c680:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d103      	bne.n	800c694 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c68c:	78fb      	ldrb	r3, [r7, #3]
 800c68e:	4618      	mov	r0, r3
 800c690:	f000 f872 	bl	800c778 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c694:	20c8      	movs	r0, #200	; 0xc8
 800c696:	f7f5 fae7 	bl	8001c68 <HAL_Delay>
  return USBH_OK;
 800c69a:	2300      	movs	r3, #0
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3708      	adds	r7, #8
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}

0800c6a4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b085      	sub	sp, #20
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	70fb      	strb	r3, [r7, #3]
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c6ba:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c6bc:	78fa      	ldrb	r2, [r7, #3]
 800c6be:	68f9      	ldr	r1, [r7, #12]
 800c6c0:	4613      	mov	r3, r2
 800c6c2:	009b      	lsls	r3, r3, #2
 800c6c4:	4413      	add	r3, r2
 800c6c6:	00db      	lsls	r3, r3, #3
 800c6c8:	440b      	add	r3, r1
 800c6ca:	333b      	adds	r3, #59	; 0x3b
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d00a      	beq.n	800c6e8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c6d2:	78fa      	ldrb	r2, [r7, #3]
 800c6d4:	68f9      	ldr	r1, [r7, #12]
 800c6d6:	4613      	mov	r3, r2
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	4413      	add	r3, r2
 800c6dc:	00db      	lsls	r3, r3, #3
 800c6de:	440b      	add	r3, r1
 800c6e0:	3350      	adds	r3, #80	; 0x50
 800c6e2:	78ba      	ldrb	r2, [r7, #2]
 800c6e4:	701a      	strb	r2, [r3, #0]
 800c6e6:	e009      	b.n	800c6fc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c6e8:	78fa      	ldrb	r2, [r7, #3]
 800c6ea:	68f9      	ldr	r1, [r7, #12]
 800c6ec:	4613      	mov	r3, r2
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	4413      	add	r3, r2
 800c6f2:	00db      	lsls	r3, r3, #3
 800c6f4:	440b      	add	r3, r1
 800c6f6:	3351      	adds	r3, #81	; 0x51
 800c6f8:	78ba      	ldrb	r2, [r7, #2]
 800c6fa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c6fc:	2300      	movs	r3, #0
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3714      	adds	r7, #20
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr

0800c70a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b082      	sub	sp, #8
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f7f5 faa8 	bl	8001c68 <HAL_Delay>
}
 800c718:	bf00      	nop
 800c71a:	3708      	adds	r7, #8
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c720:	b480      	push	{r7}
 800c722:	b085      	sub	sp, #20
 800c724:	af00      	add	r7, sp, #0
 800c726:	4603      	mov	r3, r0
 800c728:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c72a:	2300      	movs	r3, #0
 800c72c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c72e:	79fb      	ldrb	r3, [r7, #7]
 800c730:	2b03      	cmp	r3, #3
 800c732:	d817      	bhi.n	800c764 <USBH_Get_USB_Status+0x44>
 800c734:	a201      	add	r2, pc, #4	; (adr r2, 800c73c <USBH_Get_USB_Status+0x1c>)
 800c736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c73a:	bf00      	nop
 800c73c:	0800c74d 	.word	0x0800c74d
 800c740:	0800c753 	.word	0x0800c753
 800c744:	0800c759 	.word	0x0800c759
 800c748:	0800c75f 	.word	0x0800c75f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c74c:	2300      	movs	r3, #0
 800c74e:	73fb      	strb	r3, [r7, #15]
    break;
 800c750:	e00b      	b.n	800c76a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c752:	2302      	movs	r3, #2
 800c754:	73fb      	strb	r3, [r7, #15]
    break;
 800c756:	e008      	b.n	800c76a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c758:	2301      	movs	r3, #1
 800c75a:	73fb      	strb	r3, [r7, #15]
    break;
 800c75c:	e005      	b.n	800c76a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c75e:	2302      	movs	r3, #2
 800c760:	73fb      	strb	r3, [r7, #15]
    break;
 800c762:	e002      	b.n	800c76a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c764:	2302      	movs	r3, #2
 800c766:	73fb      	strb	r3, [r7, #15]
    break;
 800c768:	bf00      	nop
  }
  return usb_status;
 800c76a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3714      	adds	r7, #20
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr

0800c778 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	4603      	mov	r3, r0
 800c780:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c782:	79fb      	ldrb	r3, [r7, #7]
 800c784:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c786:	79fb      	ldrb	r3, [r7, #7]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d102      	bne.n	800c792 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800c78c:	2301      	movs	r3, #1
 800c78e:	73fb      	strb	r3, [r7, #15]
 800c790:	e001      	b.n	800c796 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c792:	2300      	movs	r3, #0
 800c794:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c796:	7bfb      	ldrb	r3, [r7, #15]
 800c798:	461a      	mov	r2, r3
 800c79a:	2101      	movs	r1, #1
 800c79c:	4803      	ldr	r0, [pc, #12]	; (800c7ac <MX_DriverVbusFS+0x34>)
 800c79e:	f7f5 fd53 	bl	8002248 <HAL_GPIO_WritePin>
}
 800c7a2:	bf00      	nop
 800c7a4:	3710      	adds	r7, #16
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	40020800 	.word	0x40020800

0800c7b0 <__errno>:
 800c7b0:	4b01      	ldr	r3, [pc, #4]	; (800c7b8 <__errno+0x8>)
 800c7b2:	6818      	ldr	r0, [r3, #0]
 800c7b4:	4770      	bx	lr
 800c7b6:	bf00      	nop
 800c7b8:	20000030 	.word	0x20000030

0800c7bc <__libc_init_array>:
 800c7bc:	b570      	push	{r4, r5, r6, lr}
 800c7be:	4e0d      	ldr	r6, [pc, #52]	; (800c7f4 <__libc_init_array+0x38>)
 800c7c0:	4c0d      	ldr	r4, [pc, #52]	; (800c7f8 <__libc_init_array+0x3c>)
 800c7c2:	1ba4      	subs	r4, r4, r6
 800c7c4:	10a4      	asrs	r4, r4, #2
 800c7c6:	2500      	movs	r5, #0
 800c7c8:	42a5      	cmp	r5, r4
 800c7ca:	d109      	bne.n	800c7e0 <__libc_init_array+0x24>
 800c7cc:	4e0b      	ldr	r6, [pc, #44]	; (800c7fc <__libc_init_array+0x40>)
 800c7ce:	4c0c      	ldr	r4, [pc, #48]	; (800c800 <__libc_init_array+0x44>)
 800c7d0:	f000 f8f6 	bl	800c9c0 <_init>
 800c7d4:	1ba4      	subs	r4, r4, r6
 800c7d6:	10a4      	asrs	r4, r4, #2
 800c7d8:	2500      	movs	r5, #0
 800c7da:	42a5      	cmp	r5, r4
 800c7dc:	d105      	bne.n	800c7ea <__libc_init_array+0x2e>
 800c7de:	bd70      	pop	{r4, r5, r6, pc}
 800c7e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c7e4:	4798      	blx	r3
 800c7e6:	3501      	adds	r5, #1
 800c7e8:	e7ee      	b.n	800c7c8 <__libc_init_array+0xc>
 800c7ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c7ee:	4798      	blx	r3
 800c7f0:	3501      	adds	r5, #1
 800c7f2:	e7f2      	b.n	800c7da <__libc_init_array+0x1e>
 800c7f4:	0800d060 	.word	0x0800d060
 800c7f8:	0800d060 	.word	0x0800d060
 800c7fc:	0800d060 	.word	0x0800d060
 800c800:	0800d064 	.word	0x0800d064

0800c804 <malloc>:
 800c804:	4b02      	ldr	r3, [pc, #8]	; (800c810 <malloc+0xc>)
 800c806:	4601      	mov	r1, r0
 800c808:	6818      	ldr	r0, [r3, #0]
 800c80a:	f000 b86d 	b.w	800c8e8 <_malloc_r>
 800c80e:	bf00      	nop
 800c810:	20000030 	.word	0x20000030

0800c814 <free>:
 800c814:	4b02      	ldr	r3, [pc, #8]	; (800c820 <free+0xc>)
 800c816:	4601      	mov	r1, r0
 800c818:	6818      	ldr	r0, [r3, #0]
 800c81a:	f000 b817 	b.w	800c84c <_free_r>
 800c81e:	bf00      	nop
 800c820:	20000030 	.word	0x20000030

0800c824 <memcpy>:
 800c824:	b510      	push	{r4, lr}
 800c826:	1e43      	subs	r3, r0, #1
 800c828:	440a      	add	r2, r1
 800c82a:	4291      	cmp	r1, r2
 800c82c:	d100      	bne.n	800c830 <memcpy+0xc>
 800c82e:	bd10      	pop	{r4, pc}
 800c830:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c834:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c838:	e7f7      	b.n	800c82a <memcpy+0x6>

0800c83a <memset>:
 800c83a:	4402      	add	r2, r0
 800c83c:	4603      	mov	r3, r0
 800c83e:	4293      	cmp	r3, r2
 800c840:	d100      	bne.n	800c844 <memset+0xa>
 800c842:	4770      	bx	lr
 800c844:	f803 1b01 	strb.w	r1, [r3], #1
 800c848:	e7f9      	b.n	800c83e <memset+0x4>
	...

0800c84c <_free_r>:
 800c84c:	b538      	push	{r3, r4, r5, lr}
 800c84e:	4605      	mov	r5, r0
 800c850:	2900      	cmp	r1, #0
 800c852:	d045      	beq.n	800c8e0 <_free_r+0x94>
 800c854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c858:	1f0c      	subs	r4, r1, #4
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	bfb8      	it	lt
 800c85e:	18e4      	addlt	r4, r4, r3
 800c860:	f000 f8ac 	bl	800c9bc <__malloc_lock>
 800c864:	4a1f      	ldr	r2, [pc, #124]	; (800c8e4 <_free_r+0x98>)
 800c866:	6813      	ldr	r3, [r2, #0]
 800c868:	4610      	mov	r0, r2
 800c86a:	b933      	cbnz	r3, 800c87a <_free_r+0x2e>
 800c86c:	6063      	str	r3, [r4, #4]
 800c86e:	6014      	str	r4, [r2, #0]
 800c870:	4628      	mov	r0, r5
 800c872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c876:	f000 b8a2 	b.w	800c9be <__malloc_unlock>
 800c87a:	42a3      	cmp	r3, r4
 800c87c:	d90c      	bls.n	800c898 <_free_r+0x4c>
 800c87e:	6821      	ldr	r1, [r4, #0]
 800c880:	1862      	adds	r2, r4, r1
 800c882:	4293      	cmp	r3, r2
 800c884:	bf04      	itt	eq
 800c886:	681a      	ldreq	r2, [r3, #0]
 800c888:	685b      	ldreq	r3, [r3, #4]
 800c88a:	6063      	str	r3, [r4, #4]
 800c88c:	bf04      	itt	eq
 800c88e:	1852      	addeq	r2, r2, r1
 800c890:	6022      	streq	r2, [r4, #0]
 800c892:	6004      	str	r4, [r0, #0]
 800c894:	e7ec      	b.n	800c870 <_free_r+0x24>
 800c896:	4613      	mov	r3, r2
 800c898:	685a      	ldr	r2, [r3, #4]
 800c89a:	b10a      	cbz	r2, 800c8a0 <_free_r+0x54>
 800c89c:	42a2      	cmp	r2, r4
 800c89e:	d9fa      	bls.n	800c896 <_free_r+0x4a>
 800c8a0:	6819      	ldr	r1, [r3, #0]
 800c8a2:	1858      	adds	r0, r3, r1
 800c8a4:	42a0      	cmp	r0, r4
 800c8a6:	d10b      	bne.n	800c8c0 <_free_r+0x74>
 800c8a8:	6820      	ldr	r0, [r4, #0]
 800c8aa:	4401      	add	r1, r0
 800c8ac:	1858      	adds	r0, r3, r1
 800c8ae:	4282      	cmp	r2, r0
 800c8b0:	6019      	str	r1, [r3, #0]
 800c8b2:	d1dd      	bne.n	800c870 <_free_r+0x24>
 800c8b4:	6810      	ldr	r0, [r2, #0]
 800c8b6:	6852      	ldr	r2, [r2, #4]
 800c8b8:	605a      	str	r2, [r3, #4]
 800c8ba:	4401      	add	r1, r0
 800c8bc:	6019      	str	r1, [r3, #0]
 800c8be:	e7d7      	b.n	800c870 <_free_r+0x24>
 800c8c0:	d902      	bls.n	800c8c8 <_free_r+0x7c>
 800c8c2:	230c      	movs	r3, #12
 800c8c4:	602b      	str	r3, [r5, #0]
 800c8c6:	e7d3      	b.n	800c870 <_free_r+0x24>
 800c8c8:	6820      	ldr	r0, [r4, #0]
 800c8ca:	1821      	adds	r1, r4, r0
 800c8cc:	428a      	cmp	r2, r1
 800c8ce:	bf04      	itt	eq
 800c8d0:	6811      	ldreq	r1, [r2, #0]
 800c8d2:	6852      	ldreq	r2, [r2, #4]
 800c8d4:	6062      	str	r2, [r4, #4]
 800c8d6:	bf04      	itt	eq
 800c8d8:	1809      	addeq	r1, r1, r0
 800c8da:	6021      	streq	r1, [r4, #0]
 800c8dc:	605c      	str	r4, [r3, #4]
 800c8de:	e7c7      	b.n	800c870 <_free_r+0x24>
 800c8e0:	bd38      	pop	{r3, r4, r5, pc}
 800c8e2:	bf00      	nop
 800c8e4:	20004070 	.word	0x20004070

0800c8e8 <_malloc_r>:
 800c8e8:	b570      	push	{r4, r5, r6, lr}
 800c8ea:	1ccd      	adds	r5, r1, #3
 800c8ec:	f025 0503 	bic.w	r5, r5, #3
 800c8f0:	3508      	adds	r5, #8
 800c8f2:	2d0c      	cmp	r5, #12
 800c8f4:	bf38      	it	cc
 800c8f6:	250c      	movcc	r5, #12
 800c8f8:	2d00      	cmp	r5, #0
 800c8fa:	4606      	mov	r6, r0
 800c8fc:	db01      	blt.n	800c902 <_malloc_r+0x1a>
 800c8fe:	42a9      	cmp	r1, r5
 800c900:	d903      	bls.n	800c90a <_malloc_r+0x22>
 800c902:	230c      	movs	r3, #12
 800c904:	6033      	str	r3, [r6, #0]
 800c906:	2000      	movs	r0, #0
 800c908:	bd70      	pop	{r4, r5, r6, pc}
 800c90a:	f000 f857 	bl	800c9bc <__malloc_lock>
 800c90e:	4a21      	ldr	r2, [pc, #132]	; (800c994 <_malloc_r+0xac>)
 800c910:	6814      	ldr	r4, [r2, #0]
 800c912:	4621      	mov	r1, r4
 800c914:	b991      	cbnz	r1, 800c93c <_malloc_r+0x54>
 800c916:	4c20      	ldr	r4, [pc, #128]	; (800c998 <_malloc_r+0xb0>)
 800c918:	6823      	ldr	r3, [r4, #0]
 800c91a:	b91b      	cbnz	r3, 800c924 <_malloc_r+0x3c>
 800c91c:	4630      	mov	r0, r6
 800c91e:	f000 f83d 	bl	800c99c <_sbrk_r>
 800c922:	6020      	str	r0, [r4, #0]
 800c924:	4629      	mov	r1, r5
 800c926:	4630      	mov	r0, r6
 800c928:	f000 f838 	bl	800c99c <_sbrk_r>
 800c92c:	1c43      	adds	r3, r0, #1
 800c92e:	d124      	bne.n	800c97a <_malloc_r+0x92>
 800c930:	230c      	movs	r3, #12
 800c932:	6033      	str	r3, [r6, #0]
 800c934:	4630      	mov	r0, r6
 800c936:	f000 f842 	bl	800c9be <__malloc_unlock>
 800c93a:	e7e4      	b.n	800c906 <_malloc_r+0x1e>
 800c93c:	680b      	ldr	r3, [r1, #0]
 800c93e:	1b5b      	subs	r3, r3, r5
 800c940:	d418      	bmi.n	800c974 <_malloc_r+0x8c>
 800c942:	2b0b      	cmp	r3, #11
 800c944:	d90f      	bls.n	800c966 <_malloc_r+0x7e>
 800c946:	600b      	str	r3, [r1, #0]
 800c948:	50cd      	str	r5, [r1, r3]
 800c94a:	18cc      	adds	r4, r1, r3
 800c94c:	4630      	mov	r0, r6
 800c94e:	f000 f836 	bl	800c9be <__malloc_unlock>
 800c952:	f104 000b 	add.w	r0, r4, #11
 800c956:	1d23      	adds	r3, r4, #4
 800c958:	f020 0007 	bic.w	r0, r0, #7
 800c95c:	1ac3      	subs	r3, r0, r3
 800c95e:	d0d3      	beq.n	800c908 <_malloc_r+0x20>
 800c960:	425a      	negs	r2, r3
 800c962:	50e2      	str	r2, [r4, r3]
 800c964:	e7d0      	b.n	800c908 <_malloc_r+0x20>
 800c966:	428c      	cmp	r4, r1
 800c968:	684b      	ldr	r3, [r1, #4]
 800c96a:	bf16      	itet	ne
 800c96c:	6063      	strne	r3, [r4, #4]
 800c96e:	6013      	streq	r3, [r2, #0]
 800c970:	460c      	movne	r4, r1
 800c972:	e7eb      	b.n	800c94c <_malloc_r+0x64>
 800c974:	460c      	mov	r4, r1
 800c976:	6849      	ldr	r1, [r1, #4]
 800c978:	e7cc      	b.n	800c914 <_malloc_r+0x2c>
 800c97a:	1cc4      	adds	r4, r0, #3
 800c97c:	f024 0403 	bic.w	r4, r4, #3
 800c980:	42a0      	cmp	r0, r4
 800c982:	d005      	beq.n	800c990 <_malloc_r+0xa8>
 800c984:	1a21      	subs	r1, r4, r0
 800c986:	4630      	mov	r0, r6
 800c988:	f000 f808 	bl	800c99c <_sbrk_r>
 800c98c:	3001      	adds	r0, #1
 800c98e:	d0cf      	beq.n	800c930 <_malloc_r+0x48>
 800c990:	6025      	str	r5, [r4, #0]
 800c992:	e7db      	b.n	800c94c <_malloc_r+0x64>
 800c994:	20004070 	.word	0x20004070
 800c998:	20004074 	.word	0x20004074

0800c99c <_sbrk_r>:
 800c99c:	b538      	push	{r3, r4, r5, lr}
 800c99e:	4c06      	ldr	r4, [pc, #24]	; (800c9b8 <_sbrk_r+0x1c>)
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	4605      	mov	r5, r0
 800c9a4:	4608      	mov	r0, r1
 800c9a6:	6023      	str	r3, [r4, #0]
 800c9a8:	f7f5 f8a6 	bl	8001af8 <_sbrk>
 800c9ac:	1c43      	adds	r3, r0, #1
 800c9ae:	d102      	bne.n	800c9b6 <_sbrk_r+0x1a>
 800c9b0:	6823      	ldr	r3, [r4, #0]
 800c9b2:	b103      	cbz	r3, 800c9b6 <_sbrk_r+0x1a>
 800c9b4:	602b      	str	r3, [r5, #0]
 800c9b6:	bd38      	pop	{r3, r4, r5, pc}
 800c9b8:	20004968 	.word	0x20004968

0800c9bc <__malloc_lock>:
 800c9bc:	4770      	bx	lr

0800c9be <__malloc_unlock>:
 800c9be:	4770      	bx	lr

0800c9c0 <_init>:
 800c9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9c2:	bf00      	nop
 800c9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9c6:	bc08      	pop	{r3}
 800c9c8:	469e      	mov	lr, r3
 800c9ca:	4770      	bx	lr

0800c9cc <_fini>:
 800c9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ce:	bf00      	nop
 800c9d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9d2:	bc08      	pop	{r3}
 800c9d4:	469e      	mov	lr, r3
 800c9d6:	4770      	bx	lr
