
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006454  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080065e4  080065e4  000165e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006718  08006718  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  08006718  08006718  00016718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006720  08006720  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006720  08006720  00016720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006724  08006724  00016724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  08006728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004280  2000022c  08006954  0002022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044ac  08006954  000244ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016733  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003005  00000000  00000000  0003698f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001288  00000000  00000000  00039998  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001120  00000000  00000000  0003ac20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002439a  00000000  00000000  0003bd40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f6b6  00000000  00000000  000600da  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d489c  00000000  00000000  0006f790  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014402c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053d4  00000000  00000000  001440a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000022c 	.word	0x2000022c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065cc 	.word	0x080065cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000230 	.word	0x20000230
 80001cc:	080065cc 	.word	0x080065cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
return 0;
 8000582:	2300      	movs	r3, #0
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
	...

08000590 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <vApplicationGetIdleTaskMemory+0x2c>)
 80005a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <vApplicationGetIdleTaskMemory+0x30>)
 80005a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ae:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	20000248 	.word	0x20000248
 80005c0:	200002a8 	.word	0x200002a8

080005c4 <SystemClock_Config>:
#include "init.h"

void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	; 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f005 f8a9 	bl	800572a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b28      	ldr	r3, [pc, #160]	; (8000690 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a27      	ldr	r2, [pc, #156]	; (8000690 <SystemClock_Config+0xcc>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b25      	ldr	r3, [pc, #148]	; (8000690 <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b22      	ldr	r3, [pc, #136]	; (8000694 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a21      	ldr	r2, [pc, #132]	; (8000694 <SystemClock_Config+0xd0>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000634:	2308      	movs	r3, #8
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000638:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800063c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000642:	2307      	movs	r3, #7
 8000644:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	4618      	mov	r0, r3
 800064c:	f001 fa58 	bl	8001b00 <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000656:	f000 fd0d 	bl	8001074 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2302      	movs	r3, #2
 8000660:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000666:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800066a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000670:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	2105      	movs	r1, #5
 8000678:	4618      	mov	r0, r3
 800067a:	f001 fcb1 	bl	8001fe0 <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000684:	f000 fcf6 	bl	8001074 <Error_Handler>
  }
}
 8000688:	bf00      	nop
 800068a:	3750      	adds	r7, #80	; 0x50
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init()
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <MX_USART2_UART_Init+0x50>)
 80006a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006d0:	f002 f8e8 	bl	80028a4 <HAL_UART_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006da:	f000 fccb 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000440c 	.word	0x2000440c
 80006e8:	40004400 	.word	0x40004400

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	4b44      	ldr	r3, [pc, #272]	; (8000818 <MX_GPIO_Init+0x12c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a43      	ldr	r2, [pc, #268]	; (8000818 <MX_GPIO_Init+0x12c>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b41      	ldr	r3, [pc, #260]	; (8000818 <MX_GPIO_Init+0x12c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	4b3d      	ldr	r3, [pc, #244]	; (8000818 <MX_GPIO_Init+0x12c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a3c      	ldr	r2, [pc, #240]	; (8000818 <MX_GPIO_Init+0x12c>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b3a      	ldr	r3, [pc, #232]	; (8000818 <MX_GPIO_Init+0x12c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	4b36      	ldr	r3, [pc, #216]	; (8000818 <MX_GPIO_Init+0x12c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a35      	ldr	r2, [pc, #212]	; (8000818 <MX_GPIO_Init+0x12c>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b33      	ldr	r3, [pc, #204]	; (8000818 <MX_GPIO_Init+0x12c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b2f      	ldr	r3, [pc, #188]	; (8000818 <MX_GPIO_Init+0x12c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a2e      	ldr	r2, [pc, #184]	; (8000818 <MX_GPIO_Init+0x12c>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b2c      	ldr	r3, [pc, #176]	; (8000818 <MX_GPIO_Init+0x12c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b28      	ldr	r3, [pc, #160]	; (8000818 <MX_GPIO_Init+0x12c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a27      	ldr	r2, [pc, #156]	; (8000818 <MX_GPIO_Init+0x12c>)
 800077c:	f043 0308 	orr.w	r3, r3, #8
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b25      	ldr	r3, [pc, #148]	; (8000818 <MX_GPIO_Init+0x12c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0308 	and.w	r3, r3, #8
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000794:	4821      	ldr	r0, [pc, #132]	; (800081c <MX_GPIO_Init+0x130>)
 8000796:	f001 f975 	bl	8001a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800079a:	230f      	movs	r3, #15
 800079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007a2:	2302      	movs	r3, #2
 80007a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	481c      	ldr	r0, [pc, #112]	; (8000820 <MX_GPIO_Init+0x134>)
 80007ae:	f000 ffb7 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007b2:	2301      	movs	r3, #1
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b6:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_GPIO_Init+0x138>)
 80007b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007ba:	2302      	movs	r3, #2
 80007bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	4818      	ldr	r0, [pc, #96]	; (8000828 <MX_GPIO_Init+0x13c>)
 80007c6:	f000 ffab 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007ca:	2304      	movs	r3, #4
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	4813      	ldr	r0, [pc, #76]	; (800082c <MX_GPIO_Init+0x140>)
 80007de:	f000 ff9f 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80007e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	4808      	ldr	r0, [pc, #32]	; (800081c <MX_GPIO_Init+0x130>)
 80007fc:	f000 ff90 	bl	8001720 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	2006      	movs	r0, #6
 8000806:	f000 ff53 	bl	80016b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800080a:	2006      	movs	r0, #6
 800080c:	f000 ff6c 	bl	80016e8 <HAL_NVIC_EnableIRQ>

}
 8000810:	bf00      	nop
 8000812:	3728      	adds	r7, #40	; 0x28
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40020c00 	.word	0x40020c00
 8000820:	40020800 	.word	0x40020800
 8000824:	10110000 	.word	0x10110000
 8000828:	40020000 	.word	0x40020000
 800082c:	40020400 	.word	0x40020400

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b5b0      	push	{r4, r5, r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000836:	f000 fe1f 	bl	8001478 <HAL_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  SystemClock_Config();
 800083a:	f7ff fec3 	bl	80005c4 <SystemClock_Config>
  MX_USART2_UART_Init();
 800083e:	f7ff ff2b 	bl	8000698 <MX_USART2_UART_Init>
  MX_GPIO_Init();
 8000842:	f7ff ff53 	bl	80006ec <MX_GPIO_Init>
  //Foam = Brushing = Washing = Drying = &Process;
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  Mutex = xSemaphoreCreateMutex();
 8000846:	2001      	movs	r0, #1
 8000848:	f002 ffa2 	bl	8003790 <xQueueCreateMutex>
 800084c:	4602      	mov	r2, r0
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <main+0x4c>)
 8000850:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1280);
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <main+0x50>)
 8000854:	1d3c      	adds	r4, r7, #4
 8000856:	461d      	mov	r5, r3
 8000858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800085a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800085c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000860:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f002 fd8c 	bl	8003386 <osThreadCreate>
 800086e:	4602      	mov	r2, r0
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <main+0x54>)
 8000872:	601a      	str	r2, [r3, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000874:	f002 fd80 	bl	8003378 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000878:	e7fe      	b.n	8000878 <main+0x48>
 800087a:	bf00      	nop
 800087c:	20004450 	.word	0x20004450
 8000880:	080065f0 	.word	0x080065f0
 8000884:	2000444c 	.word	0x2000444c

08000888 <PrintF>:

/* USER CODE BEGIN 4 */


void PrintF(uint8_t Process, char Words[][35], uint16_t WashPlace, xSemaphoreHandle* Mutex, uint32_t Delay)
{
 8000888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088a:	b08b      	sub	sp, #44	; 0x2c
 800088c:	af06      	add	r7, sp, #24
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4603      	mov	r3, r0
 8000894:	73fb      	strb	r3, [r7, #15]
 8000896:	4613      	mov	r3, r2
 8000898:	81bb      	strh	r3, [r7, #12]
	xSemaphoreTake(*Mutex, portMAX_DELAY);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f04f 31ff 	mov.w	r1, #4294967295
 80008a2:	4618      	mov	r0, r3
 80008a4:	f003 f886 	bl	80039b4 <xQueueSemaphoreTake>
	switch(Process)
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	2b03      	cmp	r3, #3
 80008ae:	f200 80cf 	bhi.w	8000a50 <PrintF+0x1c8>
 80008b2:	a201      	add	r2, pc, #4	; (adr r2, 80008b8 <PrintF+0x30>)
 80008b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b8:	080008c9 	.word	0x080008c9
 80008bc:	0800092b 	.word	0x0800092b
 80008c0:	0800098d 	.word	0x0800098d
 80008c4:	080009ef 	.word	0x080009ef
	{
		case 1:;
			printf("%s %s %s %lu %s %s %d %s", Words[Process - 1], Words[3 + WashPlace], Words[8] , Delay/1000, Words[9], Words[10], WashPlace, Words[11]);
 80008c8:	7bfa      	ldrb	r2, [r7, #15]
 80008ca:	4613      	mov	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	4413      	add	r3, r2
 80008d0:	00da      	lsls	r2, r3, #3
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	3b23      	subs	r3, #35	; 0x23
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	18d5      	adds	r5, r2, r3
 80008da:	89bb      	ldrh	r3, [r7, #12]
 80008dc:	3303      	adds	r3, #3
 80008de:	461a      	mov	r2, r3
 80008e0:	4613      	mov	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	4413      	add	r3, r2
 80008e6:	00da      	lsls	r2, r3, #3
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	18d6      	adds	r6, r2, r3
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	f503 7c8c 	add.w	ip, r3, #280	; 0x118
 80008f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f6:	4a5c      	ldr	r2, [pc, #368]	; (8000a68 <PrintF+0x1e0>)
 80008f8:	fba2 2303 	umull	r2, r3, r2, r3
 80008fc:	099b      	lsrs	r3, r3, #6
 80008fe:	68ba      	ldr	r2, [r7, #8]
 8000900:	f202 123b 	addw	r2, r2, #315	; 0x13b
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	f501 71af 	add.w	r1, r1, #350	; 0x15e
 800090a:	89b8      	ldrh	r0, [r7, #12]
 800090c:	68bc      	ldr	r4, [r7, #8]
 800090e:	f204 1481 	addw	r4, r4, #385	; 0x181
 8000912:	9404      	str	r4, [sp, #16]
 8000914:	9003      	str	r0, [sp, #12]
 8000916:	9102      	str	r1, [sp, #8]
 8000918:	9201      	str	r2, [sp, #4]
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	4663      	mov	r3, ip
 800091e:	4632      	mov	r2, r6
 8000920:	4629      	mov	r1, r5
 8000922:	4852      	ldr	r0, [pc, #328]	; (8000a6c <PrintF+0x1e4>)
 8000924:	f004 ff0a 	bl	800573c <iprintf>
			break;
 8000928:	e093      	b.n	8000a52 <PrintF+0x1ca>
		case 2:;
			printf("%s %s %s %lu %s %s %d %s", Words[Process - 1], Words[3 + WashPlace], Words[8] , Delay/1000, Words[9], Words[10], WashPlace, Words[11]);
 800092a:	7bfa      	ldrb	r2, [r7, #15]
 800092c:	4613      	mov	r3, r2
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	4413      	add	r3, r2
 8000932:	00da      	lsls	r2, r3, #3
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	3b23      	subs	r3, #35	; 0x23
 8000938:	68ba      	ldr	r2, [r7, #8]
 800093a:	18d5      	adds	r5, r2, r3
 800093c:	89bb      	ldrh	r3, [r7, #12]
 800093e:	3303      	adds	r3, #3
 8000940:	461a      	mov	r2, r3
 8000942:	4613      	mov	r3, r2
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	4413      	add	r3, r2
 8000948:	00da      	lsls	r2, r3, #3
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	68ba      	ldr	r2, [r7, #8]
 800094e:	18d6      	adds	r6, r2, r3
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	f503 7c8c 	add.w	ip, r3, #280	; 0x118
 8000956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000958:	4a43      	ldr	r2, [pc, #268]	; (8000a68 <PrintF+0x1e0>)
 800095a:	fba2 2303 	umull	r2, r3, r2, r3
 800095e:	099b      	lsrs	r3, r3, #6
 8000960:	68ba      	ldr	r2, [r7, #8]
 8000962:	f202 123b 	addw	r2, r2, #315	; 0x13b
 8000966:	68b9      	ldr	r1, [r7, #8]
 8000968:	f501 71af 	add.w	r1, r1, #350	; 0x15e
 800096c:	89b8      	ldrh	r0, [r7, #12]
 800096e:	68bc      	ldr	r4, [r7, #8]
 8000970:	f204 1481 	addw	r4, r4, #385	; 0x181
 8000974:	9404      	str	r4, [sp, #16]
 8000976:	9003      	str	r0, [sp, #12]
 8000978:	9102      	str	r1, [sp, #8]
 800097a:	9201      	str	r2, [sp, #4]
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	4663      	mov	r3, ip
 8000980:	4632      	mov	r2, r6
 8000982:	4629      	mov	r1, r5
 8000984:	4839      	ldr	r0, [pc, #228]	; (8000a6c <PrintF+0x1e4>)
 8000986:	f004 fed9 	bl	800573c <iprintf>
			break;
 800098a:	e062      	b.n	8000a52 <PrintF+0x1ca>
		case 3:;
			printf("%s %s %s %lu %s %s %d %s", Words[Process - 1], Words[3 + WashPlace], Words[8] , Delay/1000, Words[9], Words[10], WashPlace, Words[11]);
 800098c:	7bfa      	ldrb	r2, [r7, #15]
 800098e:	4613      	mov	r3, r2
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	4413      	add	r3, r2
 8000994:	00da      	lsls	r2, r3, #3
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	3b23      	subs	r3, #35	; 0x23
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	18d5      	adds	r5, r2, r3
 800099e:	89bb      	ldrh	r3, [r7, #12]
 80009a0:	3303      	adds	r3, #3
 80009a2:	461a      	mov	r2, r3
 80009a4:	4613      	mov	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	4413      	add	r3, r2
 80009aa:	00da      	lsls	r2, r3, #3
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	18d6      	adds	r6, r2, r3
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	f503 7c8c 	add.w	ip, r3, #280	; 0x118
 80009b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ba:	4a2b      	ldr	r2, [pc, #172]	; (8000a68 <PrintF+0x1e0>)
 80009bc:	fba2 2303 	umull	r2, r3, r2, r3
 80009c0:	099b      	lsrs	r3, r3, #6
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	f202 123b 	addw	r2, r2, #315	; 0x13b
 80009c8:	68b9      	ldr	r1, [r7, #8]
 80009ca:	f501 71af 	add.w	r1, r1, #350	; 0x15e
 80009ce:	89b8      	ldrh	r0, [r7, #12]
 80009d0:	68bc      	ldr	r4, [r7, #8]
 80009d2:	f204 1481 	addw	r4, r4, #385	; 0x181
 80009d6:	9404      	str	r4, [sp, #16]
 80009d8:	9003      	str	r0, [sp, #12]
 80009da:	9102      	str	r1, [sp, #8]
 80009dc:	9201      	str	r2, [sp, #4]
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	4663      	mov	r3, ip
 80009e2:	4632      	mov	r2, r6
 80009e4:	4629      	mov	r1, r5
 80009e6:	4821      	ldr	r0, [pc, #132]	; (8000a6c <PrintF+0x1e4>)
 80009e8:	f004 fea8 	bl	800573c <iprintf>
			break;
 80009ec:	e031      	b.n	8000a52 <PrintF+0x1ca>
		case 4:;
			printf("%s %s %s %lu %s %s %d %s", Words[Process - 1], Words[3 + WashPlace], Words[8] , Delay/1000, Words[9], Words[10], WashPlace, Words[11]);
 80009ee:	7bfa      	ldrb	r2, [r7, #15]
 80009f0:	4613      	mov	r3, r2
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	4413      	add	r3, r2
 80009f6:	00da      	lsls	r2, r3, #3
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	3b23      	subs	r3, #35	; 0x23
 80009fc:	68ba      	ldr	r2, [r7, #8]
 80009fe:	18d5      	adds	r5, r2, r3
 8000a00:	89bb      	ldrh	r3, [r7, #12]
 8000a02:	3303      	adds	r3, #3
 8000a04:	461a      	mov	r2, r3
 8000a06:	4613      	mov	r3, r2
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	4413      	add	r3, r2
 8000a0c:	00da      	lsls	r2, r3, #3
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	18d6      	adds	r6, r2, r3
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	f503 7c8c 	add.w	ip, r3, #280	; 0x118
 8000a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1c:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <PrintF+0x1e0>)
 8000a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a22:	099b      	lsrs	r3, r3, #6
 8000a24:	68ba      	ldr	r2, [r7, #8]
 8000a26:	f202 123b 	addw	r2, r2, #315	; 0x13b
 8000a2a:	68b9      	ldr	r1, [r7, #8]
 8000a2c:	f501 71af 	add.w	r1, r1, #350	; 0x15e
 8000a30:	89b8      	ldrh	r0, [r7, #12]
 8000a32:	68bc      	ldr	r4, [r7, #8]
 8000a34:	f204 1481 	addw	r4, r4, #385	; 0x181
 8000a38:	9404      	str	r4, [sp, #16]
 8000a3a:	9003      	str	r0, [sp, #12]
 8000a3c:	9102      	str	r1, [sp, #8]
 8000a3e:	9201      	str	r2, [sp, #4]
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	4663      	mov	r3, ip
 8000a44:	4632      	mov	r2, r6
 8000a46:	4629      	mov	r1, r5
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <PrintF+0x1e4>)
 8000a4a:	f004 fe77 	bl	800573c <iprintf>
			break;
 8000a4e:	e000      	b.n	8000a52 <PrintF+0x1ca>
		default:;
			break;
 8000a50:	bf00      	nop
	}
	xSemaphoreGive(*Mutex);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6818      	ldr	r0, [r3, #0]
 8000a56:	2300      	movs	r3, #0
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f002 feb0 	bl	80037c0 <xQueueGenericSend>
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a68:	10624dd3 	.word	0x10624dd3
 8000a6c:	0800660c 	.word	0x0800660c

08000a70 <TaskCreate>:

void TaskCreate(void (*CarsWash)(void const * argument), osThreadId* Handle, char* Tsk, uint8_t Copies, uint16_t StackSize, osPriority Priority)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08c      	sub	sp, #48	; 0x30
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	70fb      	strb	r3, [r7, #3]
	osThreadDef(Tsk, CarsWash, Priority, Copies, StackSize);
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <TaskCreate+0x44>)
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	61bb      	str	r3, [r7, #24]
 8000a86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a88:	83bb      	strh	r3, [r7, #28]
 8000a8a:	78fb      	ldrb	r3, [r7, #3]
 8000a8c:	623b      	str	r3, [r7, #32]
 8000a8e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    *Handle = osThreadCreate(osThread(Tsk), NULL);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f002 fc70 	bl	8003386 <osThreadCreate>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	601a      	str	r2, [r3, #0]
}
 8000aac:	bf00      	nop
 8000aae:	3730      	adds	r7, #48	; 0x30
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	08006628 	.word	0x08006628

08000ab8 <PinDetect>:

uint16_t PinDetect(GPIO_TypeDef* Port, uint16_t* Pin, uint8_t PinRange)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	71fb      	strb	r3, [r7, #7]
	uint16_t* PtrPin = Pin;
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	617b      	str	r3, [r7, #20]
	uint8_t ReturnedValue = 1;
 8000aca:	2301      	movs	r3, #1
 8000acc:	74fb      	strb	r3, [r7, #19]
	while(1)
	{
		if(HAL_GPIO_ReadPin(Port, *PtrPin)==GPIO_PIN_SET)
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	68f8      	ldr	r0, [r7, #12]
 8000ad6:	f000 ffbd 	bl	8001a54 <HAL_GPIO_ReadPin>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d102      	bne.n	8000ae6 <PinDetect+0x2e>
		{
			return ReturnedValue;
 8000ae0:	7cfb      	ldrb	r3, [r7, #19]
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	e011      	b.n	8000b0a <PinDetect+0x52>
		}
		if(PtrPin == Pin + PinRange)
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	4413      	add	r3, r2
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d103      	bne.n	8000afc <PinDetect+0x44>
		{
			PtrPin = Pin;
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	617b      	str	r3, [r7, #20]
			ReturnedValue = 1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	74fb      	strb	r3, [r7, #19]
	    }
		PtrPin++;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	3302      	adds	r3, #2
 8000b00:	617b      	str	r3, [r7, #20]
		ReturnedValue++;
 8000b02:	7cfb      	ldrb	r3, [r7, #19]
 8000b04:	3301      	adds	r3, #1
 8000b06:	74fb      	strb	r3, [r7, #19]
		if(HAL_GPIO_ReadPin(Port, *PtrPin)==GPIO_PIN_SET)
 8000b08:	e7e1      	b.n	8000ace <PinDetect+0x16>
	}
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <Foam>:

void Foam(uint8_t Process, char Words[][35], unsigned char WashPlace, xSemaphoreHandle* Mutex, uint32_t Delay)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b086      	sub	sp, #24
 8000b16:	af02      	add	r7, sp, #8
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	73fb      	strb	r3, [r7, #15]
 8000b20:	4613      	mov	r3, r2
 8000b22:	73bb      	strb	r3, [r7, #14]
	osDelay(Delay);
 8000b24:	69b8      	ldr	r0, [r7, #24]
 8000b26:	f002 fc86 	bl	8003436 <osDelay>
	PrintF(Process, Words, WashPlace, Mutex, Delay);
 8000b2a:	7bbb      	ldrb	r3, [r7, #14]
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	7bf8      	ldrb	r0, [r7, #15]
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	68b9      	ldr	r1, [r7, #8]
 8000b38:	f7ff fea6 	bl	8000888 <PrintF>
}
 8000b3c:	bf00      	nop
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <Brushing>:

void Brushing(uint8_t Process, char Words[][35], unsigned char WashPlace, xSemaphoreHandle* Mutex, uint32_t Delay)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af02      	add	r7, sp, #8
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4603      	mov	r3, r0
 8000b50:	73fb      	strb	r3, [r7, #15]
 8000b52:	4613      	mov	r3, r2
 8000b54:	73bb      	strb	r3, [r7, #14]
	osDelay(Delay);
 8000b56:	69b8      	ldr	r0, [r7, #24]
 8000b58:	f002 fc6d 	bl	8003436 <osDelay>
	PrintF(Process, Words, WashPlace, Mutex, Delay);
 8000b5c:	7bbb      	ldrb	r3, [r7, #14]
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	7bf8      	ldrb	r0, [r7, #15]
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	f7ff fe8d 	bl	8000888 <PrintF>
}
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <Washing>:

void Washing(uint8_t Process, char Words[][35], unsigned char WashPlace, xSemaphoreHandle* Mutex, uint32_t Delay)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b086      	sub	sp, #24
 8000b7a:	af02      	add	r7, sp, #8
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	4603      	mov	r3, r0
 8000b82:	73fb      	strb	r3, [r7, #15]
 8000b84:	4613      	mov	r3, r2
 8000b86:	73bb      	strb	r3, [r7, #14]
	osDelay(Delay);
 8000b88:	69b8      	ldr	r0, [r7, #24]
 8000b8a:	f002 fc54 	bl	8003436 <osDelay>
	PrintF(Process, Words, WashPlace, Mutex, Delay);
 8000b8e:	7bbb      	ldrb	r3, [r7, #14]
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	7bf8      	ldrb	r0, [r7, #15]
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	68b9      	ldr	r1, [r7, #8]
 8000b9c:	f7ff fe74 	bl	8000888 <PrintF>
}
 8000ba0:	bf00      	nop
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <Drying>:

void Drying(uint8_t Process, char Words[][35], unsigned char WashPlace, xSemaphoreHandle* Mutex, uint32_t Delay)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af02      	add	r7, sp, #8
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	73fb      	strb	r3, [r7, #15]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	73bb      	strb	r3, [r7, #14]
	osDelay(Delay);
 8000bba:	69b8      	ldr	r0, [r7, #24]
 8000bbc:	f002 fc3b 	bl	8003436 <osDelay>
	PrintF(Process, Words, WashPlace, Mutex, Delay);
 8000bc0:	7bbb      	ldrb	r3, [r7, #14]
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	7bf8      	ldrb	r0, [r7, #15]
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	f7ff fe5b 	bl	8000888 <PrintF>
}
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000be0:	2006      	movs	r0, #6
 8000be2:	f000 fd8f 	bl	8001704 <HAL_NVIC_DisableIRQ>
	printf("Pushing\r\n");
 8000be6:	4809      	ldr	r0, [pc, #36]	; (8000c0c <EXTI0_IRQHandler+0x30>)
 8000be8:	f004 fe1c 	bl	8005824 <puts>
    MainButtonStatus = !MainButtonStatus;
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <EXTI0_IRQHandler+0x34>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	bf0c      	ite	eq
 8000bf6:	2301      	moveq	r3, #1
 8000bf8:	2300      	movne	r3, #0
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <EXTI0_IRQHandler+0x34>)
 8000c00:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c02:	2001      	movs	r0, #1
 8000c04:	f000 ff58 	bl	8001ab8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	0800662c 	.word	0x0800662c
 8000c10:	200006a8 	.word	0x200006a8

08000c14 <CarWash1>:

void CarWash1(void const * argument)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af02      	add	r7, sp, #8
 8000c1a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		Foam(1, Words, WashPlace, &Mutex, 30000);
 8000c1c:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <CarWash1+0x90>)
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	f247 5330 	movw	r3, #30000	; 0x7530
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <CarWash1+0x94>)
 8000c2c:	491f      	ldr	r1, [pc, #124]	; (8000cac <CarWash1+0x98>)
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f7ff ff6f 	bl	8000b12 <Foam>
		Brushing(2, Words, WashPlace, &Mutex, 30000);
 8000c34:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <CarWash1+0x90>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	f247 5330 	movw	r3, #30000	; 0x7530
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <CarWash1+0x94>)
 8000c44:	4919      	ldr	r1, [pc, #100]	; (8000cac <CarWash1+0x98>)
 8000c46:	2002      	movs	r0, #2
 8000c48:	f7ff ff7c 	bl	8000b44 <Brushing>
		Washing(3, Words, WashPlace, &Mutex, 60000);
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <CarWash1+0x90>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <CarWash1+0x94>)
 8000c5c:	4913      	ldr	r1, [pc, #76]	; (8000cac <CarWash1+0x98>)
 8000c5e:	2003      	movs	r0, #3
 8000c60:	f7ff ff89 	bl	8000b76 <Washing>
		Drying(4, Words, WashPlace, &Mutex, 30000);
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <CarWash1+0x90>)
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	f247 5330 	movw	r3, #30000	; 0x7530
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <CarWash1+0x94>)
 8000c74:	490d      	ldr	r1, [pc, #52]	; (8000cac <CarWash1+0x98>)
 8000c76:	2004      	movs	r0, #4
 8000c78:	f7ff ff96 	bl	8000ba8 <Drying>
		WashPlace--;
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <CarWash1+0x90>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	3b01      	subs	r3, #1
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <CarWash1+0x90>)
 8000c88:	801a      	strh	r2, [r3, #0]
		TaskProtect |= 0x01;
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <CarWash1+0x9c>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <CarWash1+0x9c>)
 8000c98:	701a      	strb	r2, [r3, #0]
		osThreadTerminate(NULL);
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f002 fbbf 	bl	800341e <osThreadTerminate>
		Foam(1, Words, WashPlace, &Mutex, 30000);
 8000ca0:	e7bc      	b.n	8000c1c <CarWash1+0x8>
 8000ca2:	bf00      	nop
 8000ca4:	200001a6 	.word	0x200001a6
 8000ca8:	20004450 	.word	0x20004450
 8000cac:	20000020 	.word	0x20000020
 8000cb0:	200001a4 	.word	0x200001a4

08000cb4 <CarWash2>:
	}
}

void CarWash2(void const * argument)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af02      	add	r7, sp, #8
 8000cba:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		Foam(1, Words, WashPlace, &Mutex, 30000);
 8000cbc:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <CarWash2+0x90>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	f247 5330 	movw	r3, #30000	; 0x7530
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <CarWash2+0x94>)
 8000ccc:	491f      	ldr	r1, [pc, #124]	; (8000d4c <CarWash2+0x98>)
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f7ff ff1f 	bl	8000b12 <Foam>
		Brushing(2, Words, WashPlace, &Mutex, 30000);
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <CarWash2+0x90>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	f247 5330 	movw	r3, #30000	; 0x7530
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <CarWash2+0x94>)
 8000ce4:	4919      	ldr	r1, [pc, #100]	; (8000d4c <CarWash2+0x98>)
 8000ce6:	2002      	movs	r0, #2
 8000ce8:	f7ff ff2c 	bl	8000b44 <Brushing>
		Washing(3, Words, WashPlace, &Mutex, 60000);
 8000cec:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <CarWash2+0x90>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <CarWash2+0x94>)
 8000cfc:	4913      	ldr	r1, [pc, #76]	; (8000d4c <CarWash2+0x98>)
 8000cfe:	2003      	movs	r0, #3
 8000d00:	f7ff ff39 	bl	8000b76 <Washing>
		Drying(4, Words, WashPlace, &Mutex, 30000);
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <CarWash2+0x90>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	f247 5330 	movw	r3, #30000	; 0x7530
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <CarWash2+0x94>)
 8000d14:	490d      	ldr	r1, [pc, #52]	; (8000d4c <CarWash2+0x98>)
 8000d16:	2004      	movs	r0, #4
 8000d18:	f7ff ff46 	bl	8000ba8 <Drying>
		TaskProtect |= 0x02;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <CarWash2+0x9c>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	f043 0302 	orr.w	r3, r3, #2
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <CarWash2+0x9c>)
 8000d2a:	701a      	strb	r2, [r3, #0]
		WashPlace--;
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <CarWash2+0x90>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	3b01      	subs	r3, #1
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <CarWash2+0x90>)
 8000d38:	801a      	strh	r2, [r3, #0]
		osThreadTerminate(NULL);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f002 fb6f 	bl	800341e <osThreadTerminate>
		Foam(1, Words, WashPlace, &Mutex, 30000);
 8000d40:	e7bc      	b.n	8000cbc <CarWash2+0x8>
 8000d42:	bf00      	nop
 8000d44:	200001a6 	.word	0x200001a6
 8000d48:	20004450 	.word	0x20004450
 8000d4c:	20000020 	.word	0x20000020
 8000d50:	200001a4 	.word	0x200001a4

08000d54 <CarWash3>:
	}
}

void CarWash3(void const * argument)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		Foam(1, Words, WashPlace, &Mutex, 30000);
 8000d5c:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <CarWash3+0x90>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	f247 5330 	movw	r3, #30000	; 0x7530
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <CarWash3+0x94>)
 8000d6c:	491f      	ldr	r1, [pc, #124]	; (8000dec <CarWash3+0x98>)
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f7ff fecf 	bl	8000b12 <Foam>
		Brushing(2, Words, WashPlace, &Mutex, 30000);
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <CarWash3+0x90>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	f247 5330 	movw	r3, #30000	; 0x7530
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <CarWash3+0x94>)
 8000d84:	4919      	ldr	r1, [pc, #100]	; (8000dec <CarWash3+0x98>)
 8000d86:	2002      	movs	r0, #2
 8000d88:	f7ff fedc 	bl	8000b44 <Brushing>
		Washing(3, Words, WashPlace, &Mutex, 60000);
 8000d8c:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <CarWash3+0x90>)
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <CarWash3+0x94>)
 8000d9c:	4913      	ldr	r1, [pc, #76]	; (8000dec <CarWash3+0x98>)
 8000d9e:	2003      	movs	r0, #3
 8000da0:	f7ff fee9 	bl	8000b76 <Washing>
		Drying(4, Words, WashPlace, &Mutex, 30000);
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <CarWash3+0x90>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	f247 5330 	movw	r3, #30000	; 0x7530
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <CarWash3+0x94>)
 8000db4:	490d      	ldr	r1, [pc, #52]	; (8000dec <CarWash3+0x98>)
 8000db6:	2004      	movs	r0, #4
 8000db8:	f7ff fef6 	bl	8000ba8 <Drying>
		WashPlace--;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <CarWash3+0x90>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <CarWash3+0x90>)
 8000dc8:	801a      	strh	r2, [r3, #0]
		TaskProtect |= 0x04;
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <CarWash3+0x9c>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	f043 0304 	orr.w	r3, r3, #4
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <CarWash3+0x9c>)
 8000dd8:	701a      	strb	r2, [r3, #0]
		osThreadTerminate(NULL);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f002 fb1f 	bl	800341e <osThreadTerminate>
		Foam(1, Words, WashPlace, &Mutex, 30000);
 8000de0:	e7bc      	b.n	8000d5c <CarWash3+0x8>
 8000de2:	bf00      	nop
 8000de4:	200001a6 	.word	0x200001a6
 8000de8:	20004450 	.word	0x20004450
 8000dec:	20000020 	.word	0x20000020
 8000df0:	200001a4 	.word	0x200001a4

08000df4 <CarWash4>:
	}
}

void CarWash4(void const * argument)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af02      	add	r7, sp, #8
 8000dfa:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		Foam(1, Words, WashPlace, &Mutex, 30000);
 8000dfc:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <CarWash4+0x90>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	f247 5330 	movw	r3, #30000	; 0x7530
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <CarWash4+0x94>)
 8000e0c:	491f      	ldr	r1, [pc, #124]	; (8000e8c <CarWash4+0x98>)
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f7ff fe7f 	bl	8000b12 <Foam>
		Brushing(2, Words, WashPlace, &Mutex, 30000);
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <CarWash4+0x90>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	f247 5330 	movw	r3, #30000	; 0x7530
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <CarWash4+0x94>)
 8000e24:	4919      	ldr	r1, [pc, #100]	; (8000e8c <CarWash4+0x98>)
 8000e26:	2002      	movs	r0, #2
 8000e28:	f7ff fe8c 	bl	8000b44 <Brushing>
		Washing(3, Words, WashPlace, &Mutex, 60000);
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <CarWash4+0x90>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <CarWash4+0x94>)
 8000e3c:	4913      	ldr	r1, [pc, #76]	; (8000e8c <CarWash4+0x98>)
 8000e3e:	2003      	movs	r0, #3
 8000e40:	f7ff fe99 	bl	8000b76 <Washing>
		Drying(4, Words, WashPlace, &Mutex, 30000);
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <CarWash4+0x90>)
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	f247 5330 	movw	r3, #30000	; 0x7530
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <CarWash4+0x94>)
 8000e54:	490d      	ldr	r1, [pc, #52]	; (8000e8c <CarWash4+0x98>)
 8000e56:	2004      	movs	r0, #4
 8000e58:	f7ff fea6 	bl	8000ba8 <Drying>
		WashPlace--;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <CarWash4+0x90>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	3b01      	subs	r3, #1
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <CarWash4+0x90>)
 8000e68:	801a      	strh	r2, [r3, #0]
		TaskProtect |= 0x08;
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <CarWash4+0x9c>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <CarWash4+0x9c>)
 8000e78:	701a      	strb	r2, [r3, #0]
		osThreadTerminate(NULL);
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f002 facf 	bl	800341e <osThreadTerminate>
		Foam(1, Words, WashPlace, &Mutex, 30000);
 8000e80:	e7bc      	b.n	8000dfc <CarWash4+0x8>
 8000e82:	bf00      	nop
 8000e84:	200001a6 	.word	0x200001a6
 8000e88:	20004450 	.word	0x20004450
 8000e8c:	20000020 	.word	0x20000020
 8000e90:	200001a4 	.word	0x200001a4

08000e94 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af02      	add	r7, sp, #8
 8000e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	  /* Infinite loop */
	  for(;;)
	  {
		  if (MainButtonStatus)
 8000e9c:	4b5e      	ldr	r3, [pc, #376]	; (8001018 <StartDefaultTask+0x184>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 80a5 	beq.w	8000ff2 <StartDefaultTask+0x15e>
		  {
			  osDelay(30);
 8000ea8:	201e      	movs	r0, #30
 8000eaa:	f002 fac4 	bl	8003436 <osDelay>
			  switch(PinDetect(GPIOC, Pin, 3))
 8000eae:	2203      	movs	r2, #3
 8000eb0:	495a      	ldr	r1, [pc, #360]	; (800101c <StartDefaultTask+0x188>)
 8000eb2:	485b      	ldr	r0, [pc, #364]	; (8001020 <StartDefaultTask+0x18c>)
 8000eb4:	f7ff fe00 	bl	8000ab8 <PinDetect>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	f200 809a 	bhi.w	8000ff6 <StartDefaultTask+0x162>
 8000ec2:	a201      	add	r2, pc, #4	; (adr r2, 8000ec8 <StartDefaultTask+0x34>)
 8000ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec8:	08000ed9 	.word	0x08000ed9
 8000ecc:	08000f21 	.word	0x08000f21
 8000ed0:	08000f67 	.word	0x08000f67
 8000ed4:	08000fad 	.word	0x08000fad
			  {
			  	  case 1: ;
			  	  	  if(TaskProtect & 0x01)
 8000ed8:	4b52      	ldr	r3, [pc, #328]	; (8001024 <StartDefaultTask+0x190>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 8089 	beq.w	8000ffa <StartDefaultTask+0x166>
			  	  	  {
				  	  	  TaskCreate(CarsWash[0], &CarWash[0], TaskName[0], 0, 1280, osPriorityNormal);
 8000ee8:	4b4f      	ldr	r3, [pc, #316]	; (8001028 <StartDefaultTask+0x194>)
 8000eea:	6818      	ldr	r0, [r3, #0]
 8000eec:	2300      	movs	r3, #0
 8000eee:	9301      	str	r3, [sp, #4]
 8000ef0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	4a4c      	ldr	r2, [pc, #304]	; (800102c <StartDefaultTask+0x198>)
 8000efa:	494d      	ldr	r1, [pc, #308]	; (8001030 <StartDefaultTask+0x19c>)
 8000efc:	f7ff fdb8 	bl	8000a70 <TaskCreate>
				  	  	  TaskProtect &= 0xFE;
 8000f00:	4b48      	ldr	r3, [pc, #288]	; (8001024 <StartDefaultTask+0x190>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	f023 0301 	bic.w	r3, r3, #1
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b45      	ldr	r3, [pc, #276]	; (8001024 <StartDefaultTask+0x190>)
 8000f0e:	701a      	strb	r2, [r3, #0]
				  	  	  WashPlace++;
 8000f10:	4b48      	ldr	r3, [pc, #288]	; (8001034 <StartDefaultTask+0x1a0>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	3301      	adds	r3, #1
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	4b46      	ldr	r3, [pc, #280]	; (8001034 <StartDefaultTask+0x1a0>)
 8000f1c:	801a      	strh	r2, [r3, #0]
			  	  	  }
			  	  	  break;
 8000f1e:	e06c      	b.n	8000ffa <StartDefaultTask+0x166>
			  	  case 2: ;
			  	  	  if(TaskProtect & 0x02)
 8000f20:	4b40      	ldr	r3, [pc, #256]	; (8001024 <StartDefaultTask+0x190>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d067      	beq.n	8000ffe <StartDefaultTask+0x16a>
			  	  	  {
				  	  	  TaskCreate(CarsWash[1], &CarWash[1], TaskName[1], 0, 1280, osPriorityNormal);
 8000f2e:	4b3e      	ldr	r3, [pc, #248]	; (8001028 <StartDefaultTask+0x194>)
 8000f30:	6858      	ldr	r0, [r3, #4]
 8000f32:	2300      	movs	r3, #0
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	4a3e      	ldr	r2, [pc, #248]	; (8001038 <StartDefaultTask+0x1a4>)
 8000f40:	493e      	ldr	r1, [pc, #248]	; (800103c <StartDefaultTask+0x1a8>)
 8000f42:	f7ff fd95 	bl	8000a70 <TaskCreate>
				  	  	  TaskProtect &= 0xFD;
 8000f46:	4b37      	ldr	r3, [pc, #220]	; (8001024 <StartDefaultTask+0x190>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	f023 0302 	bic.w	r3, r3, #2
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b34      	ldr	r3, [pc, #208]	; (8001024 <StartDefaultTask+0x190>)
 8000f54:	701a      	strb	r2, [r3, #0]
				  	  	  WashPlace++;
 8000f56:	4b37      	ldr	r3, [pc, #220]	; (8001034 <StartDefaultTask+0x1a0>)
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b34      	ldr	r3, [pc, #208]	; (8001034 <StartDefaultTask+0x1a0>)
 8000f62:	801a      	strh	r2, [r3, #0]
			  	  	  }
			  	  	  break;
 8000f64:	e04b      	b.n	8000ffe <StartDefaultTask+0x16a>
			  	  case 3: ;
			  	  	  if(TaskProtect & 0x04)
 8000f66:	4b2f      	ldr	r3, [pc, #188]	; (8001024 <StartDefaultTask+0x190>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d046      	beq.n	8001002 <StartDefaultTask+0x16e>
			  	  	  {
				  	  	  TaskCreate(CarsWash[2], &CarWash[2], TaskName[2], 0, 1280, osPriorityNormal);
 8000f74:	4b2c      	ldr	r3, [pc, #176]	; (8001028 <StartDefaultTask+0x194>)
 8000f76:	6898      	ldr	r0, [r3, #8]
 8000f78:	2300      	movs	r3, #0
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2300      	movs	r3, #0
 8000f84:	4a2e      	ldr	r2, [pc, #184]	; (8001040 <StartDefaultTask+0x1ac>)
 8000f86:	492f      	ldr	r1, [pc, #188]	; (8001044 <StartDefaultTask+0x1b0>)
 8000f88:	f7ff fd72 	bl	8000a70 <TaskCreate>
				  	  	  TaskProtect &= 0xFB;
 8000f8c:	4b25      	ldr	r3, [pc, #148]	; (8001024 <StartDefaultTask+0x190>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	f023 0304 	bic.w	r3, r3, #4
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b22      	ldr	r3, [pc, #136]	; (8001024 <StartDefaultTask+0x190>)
 8000f9a:	701a      	strb	r2, [r3, #0]
				  	  	  WashPlace++;
 8000f9c:	4b25      	ldr	r3, [pc, #148]	; (8001034 <StartDefaultTask+0x1a0>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	4b23      	ldr	r3, [pc, #140]	; (8001034 <StartDefaultTask+0x1a0>)
 8000fa8:	801a      	strh	r2, [r3, #0]

			  	  	  }
			  	  	  break;
 8000faa:	e02a      	b.n	8001002 <StartDefaultTask+0x16e>
			  	  case 4: ;
			  	  	  if(TaskProtect & 0x08)
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <StartDefaultTask+0x190>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	f003 0308 	and.w	r3, r3, #8
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d025      	beq.n	8001006 <StartDefaultTask+0x172>
			  	  	  {
			  	  		  TaskCreate(CarsWash[3], &CarWash[3], TaskName[3], 0, 1280, osPriorityNormal);
 8000fba:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <StartDefaultTask+0x194>)
 8000fbc:	68d8      	ldr	r0, [r3, #12]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2300      	movs	r3, #0
 8000fca:	4a1f      	ldr	r2, [pc, #124]	; (8001048 <StartDefaultTask+0x1b4>)
 8000fcc:	491f      	ldr	r1, [pc, #124]	; (800104c <StartDefaultTask+0x1b8>)
 8000fce:	f7ff fd4f 	bl	8000a70 <TaskCreate>
			  	  		  TaskProtect &= 0xF7;
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <StartDefaultTask+0x190>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	f023 0308 	bic.w	r3, r3, #8
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <StartDefaultTask+0x190>)
 8000fe0:	701a      	strb	r2, [r3, #0]
			  	  		  WashPlace++;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <StartDefaultTask+0x1a0>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	3301      	adds	r3, #1
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <StartDefaultTask+0x1a0>)
 8000fee:	801a      	strh	r2, [r3, #0]
			  	  	  }
			  	  	  break;
 8000ff0:	e009      	b.n	8001006 <StartDefaultTask+0x172>
			  	  default: ;
			  	  	  break;
			 	}

		  }
 8000ff2:	bf00      	nop
 8000ff4:	e008      	b.n	8001008 <StartDefaultTask+0x174>
			  	  	  break;
 8000ff6:	bf00      	nop
 8000ff8:	e006      	b.n	8001008 <StartDefaultTask+0x174>
			  	  	  break;
 8000ffa:	bf00      	nop
 8000ffc:	e004      	b.n	8001008 <StartDefaultTask+0x174>
			  	  	  break;
 8000ffe:	bf00      	nop
 8001000:	e002      	b.n	8001008 <StartDefaultTask+0x174>
			  	  	  break;
 8001002:	bf00      	nop
 8001004:	e000      	b.n	8001008 <StartDefaultTask+0x174>
			  	  	  break;
 8001006:	bf00      	nop
		  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001008:	2006      	movs	r0, #6
 800100a:	f000 fb6d 	bl	80016e8 <HAL_NVIC_EnableIRQ>
		  osDelay(1);
 800100e:	2001      	movs	r0, #1
 8001010:	f002 fa11 	bl	8003436 <osDelay>
		  if (MainButtonStatus)
 8001014:	e742      	b.n	8000e9c <StartDefaultTask+0x8>
 8001016:	bf00      	nop
 8001018:	200006a8 	.word	0x200006a8
 800101c:	20000000 	.word	0x20000000
 8001020:	40020800 	.word	0x40020800
 8001024:	200001a4 	.word	0x200001a4
 8001028:	200001a8 	.word	0x200001a8
 800102c:	20000180 	.word	0x20000180
 8001030:	20004454 	.word	0x20004454
 8001034:	200001a6 	.word	0x200001a6
 8001038:	20000189 	.word	0x20000189
 800103c:	20004458 	.word	0x20004458
 8001040:	20000192 	.word	0x20000192
 8001044:	2000445c 	.word	0x2000445c
 8001048:	2000019b 	.word	0x2000019b
 800104c:	20004460 	.word	0x20004460

08001050 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d101      	bne.n	8001066 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001062:	f000 fa2b 	bl	80014bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40010000 	.word	0x40010000

08001074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <HAL_MspInit+0x4c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a0f      	ldr	r2, [pc, #60]	; (80010d0 <HAL_MspInit+0x4c>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <HAL_MspInit+0x4c>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	603b      	str	r3, [r7, #0]
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <HAL_MspInit+0x4c>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <HAL_MspInit+0x4c>)
 80010b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b4:	6413      	str	r3, [r2, #64]	; 0x40
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_MspInit+0x4c>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800

080010d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a19      	ldr	r2, [pc, #100]	; (8001158 <HAL_UART_MspInit+0x84>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d12b      	bne.n	800114e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <HAL_UART_MspInit+0x88>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	4a17      	ldr	r2, [pc, #92]	; (800115c <HAL_UART_MspInit+0x88>)
 8001100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001104:	6413      	str	r3, [r2, #64]	; 0x40
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_UART_MspInit+0x88>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <HAL_UART_MspInit+0x88>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a10      	ldr	r2, [pc, #64]	; (800115c <HAL_UART_MspInit+0x88>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <HAL_UART_MspInit+0x88>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800112e:	230c      	movs	r3, #12
 8001130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800113e:	2307      	movs	r3, #7
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	4805      	ldr	r0, [pc, #20]	; (8001160 <HAL_UART_MspInit+0x8c>)
 800114a:	f000 fae9 	bl	8001720 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800114e:	bf00      	nop
 8001150:	3728      	adds	r7, #40	; 0x28
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40004400 	.word	0x40004400
 800115c:	40023800 	.word	0x40023800
 8001160:	40020000 	.word	0x40020000

08001164 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08c      	sub	sp, #48	; 0x30
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001174:	2200      	movs	r2, #0
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	2019      	movs	r0, #25
 800117a:	f000 fa99 	bl	80016b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800117e:	2019      	movs	r0, #25
 8001180:	f000 fab2 	bl	80016e8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <HAL_InitTick+0xa4>)
 800118a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118c:	4a1e      	ldr	r2, [pc, #120]	; (8001208 <HAL_InitTick+0xa4>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6453      	str	r3, [r2, #68]	; 0x44
 8001194:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <HAL_InitTick+0xa4>)
 8001196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011a0:	f107 0210 	add.w	r2, r7, #16
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4611      	mov	r1, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 f90a 	bl	80023c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80011b0:	f001 f8f4 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 80011b4:	4603      	mov	r3, r0
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80011ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011bc:	4a13      	ldr	r2, [pc, #76]	; (800120c <HAL_InitTick+0xa8>)
 80011be:	fba2 2303 	umull	r2, r3, r2, r3
 80011c2:	0c9b      	lsrs	r3, r3, #18
 80011c4:	3b01      	subs	r3, #1
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_InitTick+0xac>)
 80011ca:	4a12      	ldr	r2, [pc, #72]	; (8001214 <HAL_InitTick+0xb0>)
 80011cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <HAL_InitTick+0xac>)
 80011d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011d4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011d6:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <HAL_InitTick+0xac>)
 80011d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011da:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <HAL_InitTick+0xac>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_InitTick+0xac>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80011e8:	4809      	ldr	r0, [pc, #36]	; (8001210 <HAL_InitTick+0xac>)
 80011ea:	f001 f91d 	bl	8002428 <HAL_TIM_Base_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d104      	bne.n	80011fe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80011f4:	4806      	ldr	r0, [pc, #24]	; (8001210 <HAL_InitTick+0xac>)
 80011f6:	f001 f94c 	bl	8002492 <HAL_TIM_Base_Start_IT>
 80011fa:	4603      	mov	r3, r0
 80011fc:	e000      	b.n	8001200 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	3730      	adds	r7, #48	; 0x30
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800
 800120c:	431bde83 	.word	0x431bde83
 8001210:	20004464 	.word	0x20004464
 8001214:	40010000 	.word	0x40010000

08001218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <HardFault_Handler+0x4>

0800122c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <MemManage_Handler+0x4>

08001232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <BusFault_Handler+0x4>

08001238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <UsageFault_Handler+0x4>

0800123e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001252:	f001 f942 	bl	80024da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20004464 	.word	0x20004464

08001260 <__io_putchar>:


/* Functions */

int __io_putchar(int ch)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	uint8_t ch8=ch;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2,(uint8_t *)&ch8,1,HAL_MAX_DELAY);
 800126e:	f107 010f 	add.w	r1, r7, #15
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	2201      	movs	r2, #1
 8001278:	4803      	ldr	r0, [pc, #12]	; (8001288 <__io_putchar+0x28>)
 800127a:	f001 fb60 	bl	800293e <HAL_UART_Transmit>
	return ch;
 800127e:	687b      	ldr	r3, [r7, #4]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	2000440c 	.word	0x2000440c

0800128c <__io_getchar>:

int __io_getchar()
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
	uint8_t ch8;
	HAL_UART_Receive(&huart2,&ch8,1,HAL_MAX_DELAY);
 8001292:	1df9      	adds	r1, r7, #7
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
 8001298:	2201      	movs	r2, #1
 800129a:	4804      	ldr	r0, [pc, #16]	; (80012ac <__io_getchar+0x20>)
 800129c:	f001 fbe8 	bl	8002a70 <HAL_UART_Receive>
	return ch8;
 80012a0:	79fb      	ldrb	r3, [r7, #7]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000440c 	.word	0x2000440c

080012b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	e00a      	b.n	80012d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012c2:	f7ff ffe3 	bl	800128c <__io_getchar>
 80012c6:	4601      	mov	r1, r0
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	60ba      	str	r2, [r7, #8]
 80012ce:	b2ca      	uxtb	r2, r1
 80012d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	3301      	adds	r3, #1
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	429a      	cmp	r2, r3
 80012de:	dbf0      	blt.n	80012c2 <_read+0x12>
	}

return len;
 80012e0:	687b      	ldr	r3, [r7, #4]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	60f8      	str	r0, [r7, #12]
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	e009      	b.n	8001310 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	60ba      	str	r2, [r7, #8]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ffab 	bl	8001260 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	3301      	adds	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	429a      	cmp	r2, r3
 8001316:	dbf1      	blt.n	80012fc <_write+0x12>
	}
	return len;
 8001318:	687b      	ldr	r3, [r7, #4]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <_close>:

int _close(int file)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
	return -1;
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800134a:	605a      	str	r2, [r3, #4]
	return 0;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <_isatty>:

int _isatty(int file)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
	return 1;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
	return 0;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001394:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <_sbrk+0x5c>)
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <_sbrk+0x60>)
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d102      	bne.n	80013ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <_sbrk+0x64>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <_sbrk+0x68>)
 80013ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d207      	bcs.n	80013cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013bc:	f004 f980 	bl	80056c0 <__errno>
 80013c0:	4602      	mov	r2, r0
 80013c2:	230c      	movs	r3, #12
 80013c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	e009      	b.n	80013e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <_sbrk+0x64>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <_sbrk+0x64>)
 80013dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20020000 	.word	0x20020000
 80013ec:	00000400 	.word	0x00000400
 80013f0:	200006ac 	.word	0x200006ac
 80013f4:	200044b0 	.word	0x200044b0

080013f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <SystemInit+0x28>)
 80013fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001402:	4a07      	ldr	r2, [pc, #28]	; (8001420 <SystemInit+0x28>)
 8001404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <SystemInit+0x28>)
 800140e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001412:	609a      	str	r2, [r3, #8]
#endif
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800145c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001428:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800142a:	e003      	b.n	8001434 <LoopCopyDataInit>

0800142c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800142e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001430:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001432:	3104      	adds	r1, #4

08001434 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001434:	480b      	ldr	r0, [pc, #44]	; (8001464 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001438:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800143a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800143c:	d3f6      	bcc.n	800142c <CopyDataInit>
  ldr  r2, =_sbss
 800143e:	4a0b      	ldr	r2, [pc, #44]	; (800146c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001440:	e002      	b.n	8001448 <LoopFillZerobss>

08001442 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001442:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001444:	f842 3b04 	str.w	r3, [r2], #4

08001448 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800144a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800144c:	d3f9      	bcc.n	8001442 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800144e:	f7ff ffd3 	bl	80013f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001452:	f004 f93b 	bl	80056cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001456:	f7ff f9eb 	bl	8000830 <main>
  bx  lr    
 800145a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800145c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001460:	08006728 	.word	0x08006728
  ldr  r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001468:	2000022c 	.word	0x2000022c
  ldr  r2, =_sbss
 800146c:	2000022c 	.word	0x2000022c
  ldr  r3, = _ebss
 8001470:	200044ac 	.word	0x200044ac

08001474 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC_IRQHandler>
	...

08001478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <HAL_Init+0x40>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0d      	ldr	r2, [pc, #52]	; (80014b8 <HAL_Init+0x40>)
 8001482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001486:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <HAL_Init+0x40>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <HAL_Init+0x40>)
 800148e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001492:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <HAL_Init+0x40>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <HAL_Init+0x40>)
 800149a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a0:	2003      	movs	r0, #3
 80014a2:	f000 f8fa 	bl	800169a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff fe5c 	bl	8001164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ac:	f7ff fdea 	bl	8001084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023c00 	.word	0x40023c00

080014bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_IncTick+0x20>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_IncTick+0x24>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_IncTick+0x24>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	200001c0 	.word	0x200001c0
 80014e0:	200044a4 	.word	0x200044a4

080014e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return uwTick;
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <HAL_GetTick+0x14>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	200044a4 	.word	0x200044a4

080014fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001518:	4013      	ands	r3, r2
 800151a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <__NVIC_GetPriorityGrouping+0x18>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	f003 0307 	and.w	r3, r3, #7
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	2b00      	cmp	r3, #0
 8001570:	db0b      	blt.n	800158a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	f003 021f 	and.w	r2, r3, #31
 8001578:	4907      	ldr	r1, [pc, #28]	; (8001598 <__NVIC_EnableIRQ+0x38>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	095b      	lsrs	r3, r3, #5
 8001580:	2001      	movs	r0, #1
 8001582:	fa00 f202 	lsl.w	r2, r0, r2
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000e100 	.word	0xe000e100

0800159c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	db10      	blt.n	80015d0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	f003 021f 	and.w	r2, r3, #31
 80015b4:	4909      	ldr	r1, [pc, #36]	; (80015dc <__NVIC_DisableIRQ+0x40>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	095b      	lsrs	r3, r3, #5
 80015bc:	2001      	movs	r0, #1
 80015be:	fa00 f202 	lsl.w	r2, r0, r2
 80015c2:	3320      	adds	r3, #32
 80015c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80015cc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000e100 	.word	0xe000e100

080015e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	db0a      	blt.n	800160a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	490c      	ldr	r1, [pc, #48]	; (800162c <__NVIC_SetPriority+0x4c>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	0112      	lsls	r2, r2, #4
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	440b      	add	r3, r1
 8001604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001608:	e00a      	b.n	8001620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4908      	ldr	r1, [pc, #32]	; (8001630 <__NVIC_SetPriority+0x50>)
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	3b04      	subs	r3, #4
 8001618:	0112      	lsls	r2, r2, #4
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	440b      	add	r3, r1
 800161e:	761a      	strb	r2, [r3, #24]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000e100 	.word	0xe000e100
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	; 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f1c3 0307 	rsb	r3, r3, #7
 800164e:	2b04      	cmp	r3, #4
 8001650:	bf28      	it	cs
 8001652:	2304      	movcs	r3, #4
 8001654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3304      	adds	r3, #4
 800165a:	2b06      	cmp	r3, #6
 800165c:	d902      	bls.n	8001664 <NVIC_EncodePriority+0x30>
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3b03      	subs	r3, #3
 8001662:	e000      	b.n	8001666 <NVIC_EncodePriority+0x32>
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	f04f 32ff 	mov.w	r2, #4294967295
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43da      	mvns	r2, r3
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	401a      	ands	r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800167c:	f04f 31ff 	mov.w	r1, #4294967295
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
 8001686:	43d9      	mvns	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	4313      	orrs	r3, r2
         );
}
 800168e:	4618      	mov	r0, r3
 8001690:	3724      	adds	r7, #36	; 0x24
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff ff2a 	bl	80014fc <__NVIC_SetPriorityGrouping>
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c2:	f7ff ff3f 	bl	8001544 <__NVIC_GetPriorityGrouping>
 80016c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	68b9      	ldr	r1, [r7, #8]
 80016cc:	6978      	ldr	r0, [r7, #20]
 80016ce:	f7ff ffb1 	bl	8001634 <NVIC_EncodePriority>
 80016d2:	4602      	mov	r2, r0
 80016d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff ff80 	bl	80015e0 <__NVIC_SetPriority>
}
 80016e0:	bf00      	nop
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff32 	bl	8001560 <__NVIC_EnableIRQ>
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ff42 	bl	800159c <__NVIC_DisableIRQ>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	; 0x24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
 800173a:	e16b      	b.n	8001a14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800173c:	2201      	movs	r2, #1
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	429a      	cmp	r2, r3
 8001756:	f040 815a 	bne.w	8001a0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d00b      	beq.n	800177a <HAL_GPIO_Init+0x5a>
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d007      	beq.n	800177a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800176e:	2b11      	cmp	r3, #17
 8001770:	d003      	beq.n	800177a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b12      	cmp	r3, #18
 8001778:	d130      	bne.n	80017dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	2203      	movs	r2, #3
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b0:	2201      	movs	r2, #1
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	091b      	lsrs	r3, r3, #4
 80017c6:	f003 0201 	and.w	r2, r3, #1
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0xfc>
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b12      	cmp	r3, #18
 800181a:	d123      	bne.n	8001864 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	08da      	lsrs	r2, r3, #3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3208      	adds	r2, #8
 8001824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	220f      	movs	r2, #15
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	691a      	ldr	r2, [r3, #16]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	08da      	lsrs	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3208      	adds	r2, #8
 800185e:	69b9      	ldr	r1, [r7, #24]
 8001860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	2203      	movs	r2, #3
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0203 	and.w	r2, r3, #3
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80b4 	beq.w	8001a0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b5f      	ldr	r3, [pc, #380]	; (8001a28 <HAL_GPIO_Init+0x308>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	4a5e      	ldr	r2, [pc, #376]	; (8001a28 <HAL_GPIO_Init+0x308>)
 80018b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b4:	6453      	str	r3, [r2, #68]	; 0x44
 80018b6:	4b5c      	ldr	r3, [pc, #368]	; (8001a28 <HAL_GPIO_Init+0x308>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018c2:	4a5a      	ldr	r2, [pc, #360]	; (8001a2c <HAL_GPIO_Init+0x30c>)
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	3302      	adds	r3, #2
 80018ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	220f      	movs	r2, #15
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a51      	ldr	r2, [pc, #324]	; (8001a30 <HAL_GPIO_Init+0x310>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d02b      	beq.n	8001946 <HAL_GPIO_Init+0x226>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a50      	ldr	r2, [pc, #320]	; (8001a34 <HAL_GPIO_Init+0x314>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d025      	beq.n	8001942 <HAL_GPIO_Init+0x222>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4f      	ldr	r2, [pc, #316]	; (8001a38 <HAL_GPIO_Init+0x318>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d01f      	beq.n	800193e <HAL_GPIO_Init+0x21e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4e      	ldr	r2, [pc, #312]	; (8001a3c <HAL_GPIO_Init+0x31c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d019      	beq.n	800193a <HAL_GPIO_Init+0x21a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4d      	ldr	r2, [pc, #308]	; (8001a40 <HAL_GPIO_Init+0x320>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d013      	beq.n	8001936 <HAL_GPIO_Init+0x216>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4c      	ldr	r2, [pc, #304]	; (8001a44 <HAL_GPIO_Init+0x324>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d00d      	beq.n	8001932 <HAL_GPIO_Init+0x212>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4b      	ldr	r2, [pc, #300]	; (8001a48 <HAL_GPIO_Init+0x328>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d007      	beq.n	800192e <HAL_GPIO_Init+0x20e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4a      	ldr	r2, [pc, #296]	; (8001a4c <HAL_GPIO_Init+0x32c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d101      	bne.n	800192a <HAL_GPIO_Init+0x20a>
 8001926:	2307      	movs	r3, #7
 8001928:	e00e      	b.n	8001948 <HAL_GPIO_Init+0x228>
 800192a:	2308      	movs	r3, #8
 800192c:	e00c      	b.n	8001948 <HAL_GPIO_Init+0x228>
 800192e:	2306      	movs	r3, #6
 8001930:	e00a      	b.n	8001948 <HAL_GPIO_Init+0x228>
 8001932:	2305      	movs	r3, #5
 8001934:	e008      	b.n	8001948 <HAL_GPIO_Init+0x228>
 8001936:	2304      	movs	r3, #4
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x228>
 800193a:	2303      	movs	r3, #3
 800193c:	e004      	b.n	8001948 <HAL_GPIO_Init+0x228>
 800193e:	2302      	movs	r3, #2
 8001940:	e002      	b.n	8001948 <HAL_GPIO_Init+0x228>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_GPIO_Init+0x228>
 8001946:	2300      	movs	r3, #0
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	f002 0203 	and.w	r2, r2, #3
 800194e:	0092      	lsls	r2, r2, #2
 8001950:	4093      	lsls	r3, r2
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001958:	4934      	ldr	r1, [pc, #208]	; (8001a2c <HAL_GPIO_Init+0x30c>)
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	3302      	adds	r3, #2
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001966:	4b3a      	ldr	r3, [pc, #232]	; (8001a50 <HAL_GPIO_Init+0x330>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800198a:	4a31      	ldr	r2, [pc, #196]	; (8001a50 <HAL_GPIO_Init+0x330>)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001990:	4b2f      	ldr	r3, [pc, #188]	; (8001a50 <HAL_GPIO_Init+0x330>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019b4:	4a26      	ldr	r2, [pc, #152]	; (8001a50 <HAL_GPIO_Init+0x330>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ba:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <HAL_GPIO_Init+0x330>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019de:	4a1c      	ldr	r2, [pc, #112]	; (8001a50 <HAL_GPIO_Init+0x330>)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e4:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <HAL_GPIO_Init+0x330>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a08:	4a11      	ldr	r2, [pc, #68]	; (8001a50 <HAL_GPIO_Init+0x330>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3301      	adds	r3, #1
 8001a12:	61fb      	str	r3, [r7, #28]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	2b0f      	cmp	r3, #15
 8001a18:	f67f ae90 	bls.w	800173c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	3724      	adds	r7, #36	; 0x24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40013800 	.word	0x40013800
 8001a30:	40020000 	.word	0x40020000
 8001a34:	40020400 	.word	0x40020400
 8001a38:	40020800 	.word	0x40020800
 8001a3c:	40020c00 	.word	0x40020c00
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40021400 	.word	0x40021400
 8001a48:	40021800 	.word	0x40021800
 8001a4c:	40021c00 	.word	0x40021c00
 8001a50:	40013c00 	.word	0x40013c00

08001a54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	887b      	ldrh	r3, [r7, #2]
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
 8001a70:	e001      	b.n	8001a76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	807b      	strh	r3, [r7, #2]
 8001a90:	4613      	mov	r3, r2
 8001a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a94:	787b      	ldrb	r3, [r7, #1]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9a:	887a      	ldrh	r2, [r7, #2]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001aa0:	e003      	b.n	8001aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aa2:	887b      	ldrh	r3, [r7, #2]
 8001aa4:	041a      	lsls	r2, r3, #16
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	619a      	str	r2, [r3, #24]
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d006      	beq.n	8001adc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ace:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 f806 	bl	8001ae8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40013c00 	.word	0x40013c00

08001ae8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e25b      	b.n	8001fca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d075      	beq.n	8001c0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b1e:	4ba3      	ldr	r3, [pc, #652]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d00c      	beq.n	8001b44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b2a:	4ba0      	ldr	r3, [pc, #640]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d112      	bne.n	8001b5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b36:	4b9d      	ldr	r3, [pc, #628]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b42:	d10b      	bne.n	8001b5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b44:	4b99      	ldr	r3, [pc, #612]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d05b      	beq.n	8001c08 <HAL_RCC_OscConfig+0x108>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d157      	bne.n	8001c08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e236      	b.n	8001fca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b64:	d106      	bne.n	8001b74 <HAL_RCC_OscConfig+0x74>
 8001b66:	4b91      	ldr	r3, [pc, #580]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a90      	ldr	r2, [pc, #576]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e01d      	b.n	8001bb0 <HAL_RCC_OscConfig+0xb0>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b7c:	d10c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x98>
 8001b7e:	4b8b      	ldr	r3, [pc, #556]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a8a      	ldr	r2, [pc, #552]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	4b88      	ldr	r3, [pc, #544]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a87      	ldr	r2, [pc, #540]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e00b      	b.n	8001bb0 <HAL_RCC_OscConfig+0xb0>
 8001b98:	4b84      	ldr	r3, [pc, #528]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a83      	ldr	r2, [pc, #524]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b81      	ldr	r3, [pc, #516]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a80      	ldr	r2, [pc, #512]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d013      	beq.n	8001be0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fc94 	bl	80014e4 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7ff fc90 	bl	80014e4 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	; 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e1fb      	b.n	8001fca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	4b76      	ldr	r3, [pc, #472]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0xc0>
 8001bde:	e014      	b.n	8001c0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff fc80 	bl	80014e4 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001be8:	f7ff fc7c 	bl	80014e4 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b64      	cmp	r3, #100	; 0x64
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e1e7      	b.n	8001fca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfa:	4b6c      	ldr	r3, [pc, #432]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0xe8>
 8001c06:	e000      	b.n	8001c0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d063      	beq.n	8001cde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c16:	4b65      	ldr	r3, [pc, #404]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00b      	beq.n	8001c3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c22:	4b62      	ldr	r3, [pc, #392]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d11c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c2e:	4b5f      	ldr	r3, [pc, #380]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d116      	bne.n	8001c68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3a:	4b5c      	ldr	r3, [pc, #368]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d005      	beq.n	8001c52 <HAL_RCC_OscConfig+0x152>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d001      	beq.n	8001c52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e1bb      	b.n	8001fca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c52:	4b56      	ldr	r3, [pc, #344]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4952      	ldr	r1, [pc, #328]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c66:	e03a      	b.n	8001cde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d020      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c70:	4b4f      	ldr	r3, [pc, #316]	; (8001db0 <HAL_RCC_OscConfig+0x2b0>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c76:	f7ff fc35 	bl	80014e4 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c7e:	f7ff fc31 	bl	80014e4 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e19c      	b.n	8001fca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c90:	4b46      	ldr	r3, [pc, #280]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9c:	4b43      	ldr	r3, [pc, #268]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4940      	ldr	r1, [pc, #256]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	600b      	str	r3, [r1, #0]
 8001cb0:	e015      	b.n	8001cde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb2:	4b3f      	ldr	r3, [pc, #252]	; (8001db0 <HAL_RCC_OscConfig+0x2b0>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fc14 	bl	80014e4 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc0:	f7ff fc10 	bl	80014e4 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e17b      	b.n	8001fca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd2:	4b36      	ldr	r3, [pc, #216]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d030      	beq.n	8001d4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d016      	beq.n	8001d20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf2:	4b30      	ldr	r3, [pc, #192]	; (8001db4 <HAL_RCC_OscConfig+0x2b4>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf8:	f7ff fbf4 	bl	80014e4 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d00:	f7ff fbf0 	bl	80014e4 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e15b      	b.n	8001fca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d12:	4b26      	ldr	r3, [pc, #152]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x200>
 8001d1e:	e015      	b.n	8001d4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d20:	4b24      	ldr	r3, [pc, #144]	; (8001db4 <HAL_RCC_OscConfig+0x2b4>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d26:	f7ff fbdd 	bl	80014e4 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d2e:	f7ff fbd9 	bl	80014e4 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e144      	b.n	8001fca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d40:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1f0      	bne.n	8001d2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80a0 	beq.w	8001e9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5e:	4b13      	ldr	r3, [pc, #76]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10f      	bne.n	8001d8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d86:	2301      	movs	r3, #1
 8001d88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_RCC_OscConfig+0x2b8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d121      	bne.n	8001dda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_RCC_OscConfig+0x2b8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a07      	ldr	r2, [pc, #28]	; (8001db8 <HAL_RCC_OscConfig+0x2b8>)
 8001d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001da2:	f7ff fb9f 	bl	80014e4 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da8:	e011      	b.n	8001dce <HAL_RCC_OscConfig+0x2ce>
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	42470000 	.word	0x42470000
 8001db4:	42470e80 	.word	0x42470e80
 8001db8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dbc:	f7ff fb92 	bl	80014e4 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e0fd      	b.n	8001fca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dce:	4b81      	ldr	r3, [pc, #516]	; (8001fd4 <HAL_RCC_OscConfig+0x4d4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d106      	bne.n	8001df0 <HAL_RCC_OscConfig+0x2f0>
 8001de2:	4b7d      	ldr	r3, [pc, #500]	; (8001fd8 <HAL_RCC_OscConfig+0x4d8>)
 8001de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de6:	4a7c      	ldr	r2, [pc, #496]	; (8001fd8 <HAL_RCC_OscConfig+0x4d8>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6713      	str	r3, [r2, #112]	; 0x70
 8001dee:	e01c      	b.n	8001e2a <HAL_RCC_OscConfig+0x32a>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b05      	cmp	r3, #5
 8001df6:	d10c      	bne.n	8001e12 <HAL_RCC_OscConfig+0x312>
 8001df8:	4b77      	ldr	r3, [pc, #476]	; (8001fd8 <HAL_RCC_OscConfig+0x4d8>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfc:	4a76      	ldr	r2, [pc, #472]	; (8001fd8 <HAL_RCC_OscConfig+0x4d8>)
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	6713      	str	r3, [r2, #112]	; 0x70
 8001e04:	4b74      	ldr	r3, [pc, #464]	; (8001fd8 <HAL_RCC_OscConfig+0x4d8>)
 8001e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e08:	4a73      	ldr	r2, [pc, #460]	; (8001fd8 <HAL_RCC_OscConfig+0x4d8>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e10:	e00b      	b.n	8001e2a <HAL_RCC_OscConfig+0x32a>
 8001e12:	4b71      	ldr	r3, [pc, #452]	; (8001fd8 <HAL_RCC_OscConfig+0x4d8>)
 8001e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e16:	4a70      	ldr	r2, [pc, #448]	; (8001fd8 <HAL_RCC_OscConfig+0x4d8>)
 8001e18:	f023 0301 	bic.w	r3, r3, #1
 8001e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1e:	4b6e      	ldr	r3, [pc, #440]	; (8001fd8 <HAL_RCC_OscConfig+0x4d8>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e22:	4a6d      	ldr	r2, [pc, #436]	; (8001fd8 <HAL_RCC_OscConfig+0x4d8>)
 8001e24:	f023 0304 	bic.w	r3, r3, #4
 8001e28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d015      	beq.n	8001e5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e32:	f7ff fb57 	bl	80014e4 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e38:	e00a      	b.n	8001e50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	f7ff fb53 	bl	80014e4 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e0bc      	b.n	8001fca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e50:	4b61      	ldr	r3, [pc, #388]	; (8001fd8 <HAL_RCC_OscConfig+0x4d8>)
 8001e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0ee      	beq.n	8001e3a <HAL_RCC_OscConfig+0x33a>
 8001e5c:	e014      	b.n	8001e88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5e:	f7ff fb41 	bl	80014e4 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e64:	e00a      	b.n	8001e7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e66:	f7ff fb3d 	bl	80014e4 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e0a6      	b.n	8001fca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7c:	4b56      	ldr	r3, [pc, #344]	; (8001fd8 <HAL_RCC_OscConfig+0x4d8>)
 8001e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1ee      	bne.n	8001e66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e88:	7dfb      	ldrb	r3, [r7, #23]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d105      	bne.n	8001e9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e8e:	4b52      	ldr	r3, [pc, #328]	; (8001fd8 <HAL_RCC_OscConfig+0x4d8>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	4a51      	ldr	r2, [pc, #324]	; (8001fd8 <HAL_RCC_OscConfig+0x4d8>)
 8001e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 8092 	beq.w	8001fc8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ea4:	4b4c      	ldr	r3, [pc, #304]	; (8001fd8 <HAL_RCC_OscConfig+0x4d8>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d05c      	beq.n	8001f6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d141      	bne.n	8001f3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb8:	4b48      	ldr	r3, [pc, #288]	; (8001fdc <HAL_RCC_OscConfig+0x4dc>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebe:	f7ff fb11 	bl	80014e4 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec6:	f7ff fb0d 	bl	80014e4 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e078      	b.n	8001fca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed8:	4b3f      	ldr	r3, [pc, #252]	; (8001fd8 <HAL_RCC_OscConfig+0x4d8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f0      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69da      	ldr	r2, [r3, #28]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	019b      	lsls	r3, r3, #6
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efa:	085b      	lsrs	r3, r3, #1
 8001efc:	3b01      	subs	r3, #1
 8001efe:	041b      	lsls	r3, r3, #16
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f06:	061b      	lsls	r3, r3, #24
 8001f08:	4933      	ldr	r1, [pc, #204]	; (8001fd8 <HAL_RCC_OscConfig+0x4d8>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f0e:	4b33      	ldr	r3, [pc, #204]	; (8001fdc <HAL_RCC_OscConfig+0x4dc>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f14:	f7ff fae6 	bl	80014e4 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7ff fae2 	bl	80014e4 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e04d      	b.n	8001fca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2e:	4b2a      	ldr	r3, [pc, #168]	; (8001fd8 <HAL_RCC_OscConfig+0x4d8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0x41c>
 8001f3a:	e045      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3c:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <HAL_RCC_OscConfig+0x4dc>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f42:	f7ff facf 	bl	80014e4 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f4a:	f7ff facb 	bl	80014e4 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e036      	b.n	8001fca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5c:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <HAL_RCC_OscConfig+0x4d8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f0      	bne.n	8001f4a <HAL_RCC_OscConfig+0x44a>
 8001f68:	e02e      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e029      	b.n	8001fca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f76:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <HAL_RCC_OscConfig+0x4d8>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d11c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d115      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d10d      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d106      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40007000 	.word	0x40007000
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	42470060 	.word	0x42470060

08001fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0cc      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff4:	4b68      	ldr	r3, [pc, #416]	; (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d90c      	bls.n	800201c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002002:	4b65      	ldr	r3, [pc, #404]	; (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b63      	ldr	r3, [pc, #396]	; (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0b8      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d020      	beq.n	800206a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002034:	4b59      	ldr	r3, [pc, #356]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4a58      	ldr	r2, [pc, #352]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800203e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800204c:	4b53      	ldr	r3, [pc, #332]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4a52      	ldr	r2, [pc, #328]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002056:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002058:	4b50      	ldr	r3, [pc, #320]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	494d      	ldr	r1, [pc, #308]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	4313      	orrs	r3, r2
 8002068:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d044      	beq.n	8002100 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	4b47      	ldr	r3, [pc, #284]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d119      	bne.n	80020be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e07f      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d003      	beq.n	800209e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800209a:	2b03      	cmp	r3, #3
 800209c:	d107      	bne.n	80020ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209e:	4b3f      	ldr	r3, [pc, #252]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d109      	bne.n	80020be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e06f      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ae:	4b3b      	ldr	r3, [pc, #236]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e067      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020be:	4b37      	ldr	r3, [pc, #220]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f023 0203 	bic.w	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	4934      	ldr	r1, [pc, #208]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020d0:	f7ff fa08 	bl	80014e4 <HAL_GetTick>
 80020d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d6:	e00a      	b.n	80020ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d8:	f7ff fa04 	bl	80014e4 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e04f      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ee:	4b2b      	ldr	r3, [pc, #172]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 020c 	and.w	r2, r3, #12
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d1eb      	bne.n	80020d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002100:	4b25      	ldr	r3, [pc, #148]	; (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d20c      	bcs.n	8002128 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b22      	ldr	r3, [pc, #136]	; (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e032      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002134:	4b19      	ldr	r3, [pc, #100]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	4916      	ldr	r1, [pc, #88]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d009      	beq.n	8002166 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002152:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	490e      	ldr	r1, [pc, #56]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	4313      	orrs	r3, r2
 8002164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002166:	f000 f821 	bl	80021ac <HAL_RCC_GetSysClockFreq>
 800216a:	4601      	mov	r1, r0
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	5cd3      	ldrb	r3, [r2, r3]
 800217a:	fa21 f303 	lsr.w	r3, r1, r3
 800217e:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002182:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe ffec 	bl	8001164 <HAL_InitTick>

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023c00 	.word	0x40023c00
 800219c:	40023800 	.word	0x40023800
 80021a0:	08006668 	.word	0x08006668
 80021a4:	200001b8 	.word	0x200001b8
 80021a8:	200001bc 	.word	0x200001bc

080021ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	2300      	movs	r3, #0
 80021bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021c2:	4b63      	ldr	r3, [pc, #396]	; (8002350 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d007      	beq.n	80021de <HAL_RCC_GetSysClockFreq+0x32>
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d008      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0x38>
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f040 80b4 	bne.w	8002340 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021d8:	4b5e      	ldr	r3, [pc, #376]	; (8002354 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80021da:	60bb      	str	r3, [r7, #8]
       break;
 80021dc:	e0b3      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021de:	4b5e      	ldr	r3, [pc, #376]	; (8002358 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80021e0:	60bb      	str	r3, [r7, #8]
      break;
 80021e2:	e0b0      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021e4:	4b5a      	ldr	r3, [pc, #360]	; (8002350 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ee:	4b58      	ldr	r3, [pc, #352]	; (8002350 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d04a      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021fa:	4b55      	ldr	r3, [pc, #340]	; (8002350 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	099b      	lsrs	r3, r3, #6
 8002200:	f04f 0400 	mov.w	r4, #0
 8002204:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	ea03 0501 	and.w	r5, r3, r1
 8002210:	ea04 0602 	and.w	r6, r4, r2
 8002214:	4629      	mov	r1, r5
 8002216:	4632      	mov	r2, r6
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	f04f 0400 	mov.w	r4, #0
 8002220:	0154      	lsls	r4, r2, #5
 8002222:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002226:	014b      	lsls	r3, r1, #5
 8002228:	4619      	mov	r1, r3
 800222a:	4622      	mov	r2, r4
 800222c:	1b49      	subs	r1, r1, r5
 800222e:	eb62 0206 	sbc.w	r2, r2, r6
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	f04f 0400 	mov.w	r4, #0
 800223a:	0194      	lsls	r4, r2, #6
 800223c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002240:	018b      	lsls	r3, r1, #6
 8002242:	1a5b      	subs	r3, r3, r1
 8002244:	eb64 0402 	sbc.w	r4, r4, r2
 8002248:	f04f 0100 	mov.w	r1, #0
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	00e2      	lsls	r2, r4, #3
 8002252:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002256:	00d9      	lsls	r1, r3, #3
 8002258:	460b      	mov	r3, r1
 800225a:	4614      	mov	r4, r2
 800225c:	195b      	adds	r3, r3, r5
 800225e:	eb44 0406 	adc.w	r4, r4, r6
 8002262:	f04f 0100 	mov.w	r1, #0
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	0262      	lsls	r2, r4, #9
 800226c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002270:	0259      	lsls	r1, r3, #9
 8002272:	460b      	mov	r3, r1
 8002274:	4614      	mov	r4, r2
 8002276:	4618      	mov	r0, r3
 8002278:	4621      	mov	r1, r4
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f04f 0400 	mov.w	r4, #0
 8002280:	461a      	mov	r2, r3
 8002282:	4623      	mov	r3, r4
 8002284:	f7fd fff4 	bl	8000270 <__aeabi_uldivmod>
 8002288:	4603      	mov	r3, r0
 800228a:	460c      	mov	r4, r1
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	e049      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002290:	4b2f      	ldr	r3, [pc, #188]	; (8002350 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	099b      	lsrs	r3, r3, #6
 8002296:	f04f 0400 	mov.w	r4, #0
 800229a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	ea03 0501 	and.w	r5, r3, r1
 80022a6:	ea04 0602 	and.w	r6, r4, r2
 80022aa:	4629      	mov	r1, r5
 80022ac:	4632      	mov	r2, r6
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	f04f 0400 	mov.w	r4, #0
 80022b6:	0154      	lsls	r4, r2, #5
 80022b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022bc:	014b      	lsls	r3, r1, #5
 80022be:	4619      	mov	r1, r3
 80022c0:	4622      	mov	r2, r4
 80022c2:	1b49      	subs	r1, r1, r5
 80022c4:	eb62 0206 	sbc.w	r2, r2, r6
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	f04f 0400 	mov.w	r4, #0
 80022d0:	0194      	lsls	r4, r2, #6
 80022d2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022d6:	018b      	lsls	r3, r1, #6
 80022d8:	1a5b      	subs	r3, r3, r1
 80022da:	eb64 0402 	sbc.w	r4, r4, r2
 80022de:	f04f 0100 	mov.w	r1, #0
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	00e2      	lsls	r2, r4, #3
 80022e8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022ec:	00d9      	lsls	r1, r3, #3
 80022ee:	460b      	mov	r3, r1
 80022f0:	4614      	mov	r4, r2
 80022f2:	195b      	adds	r3, r3, r5
 80022f4:	eb44 0406 	adc.w	r4, r4, r6
 80022f8:	f04f 0100 	mov.w	r1, #0
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	02a2      	lsls	r2, r4, #10
 8002302:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002306:	0299      	lsls	r1, r3, #10
 8002308:	460b      	mov	r3, r1
 800230a:	4614      	mov	r4, r2
 800230c:	4618      	mov	r0, r3
 800230e:	4621      	mov	r1, r4
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f04f 0400 	mov.w	r4, #0
 8002316:	461a      	mov	r2, r3
 8002318:	4623      	mov	r3, r4
 800231a:	f7fd ffa9 	bl	8000270 <__aeabi_uldivmod>
 800231e:	4603      	mov	r3, r0
 8002320:	460c      	mov	r4, r1
 8002322:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002324:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	0c1b      	lsrs	r3, r3, #16
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	3301      	adds	r3, #1
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	fbb2 f3f3 	udiv	r3, r2, r3
 800233c:	60bb      	str	r3, [r7, #8]
      break;
 800233e:	e002      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002342:	60bb      	str	r3, [r7, #8]
      break;
 8002344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002346:	68bb      	ldr	r3, [r7, #8]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002350:	40023800 	.word	0x40023800
 8002354:	00f42400 	.word	0x00f42400
 8002358:	007a1200 	.word	0x007a1200

0800235c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002360:	4b03      	ldr	r3, [pc, #12]	; (8002370 <HAL_RCC_GetHCLKFreq+0x14>)
 8002362:	681b      	ldr	r3, [r3, #0]
}
 8002364:	4618      	mov	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	200001b8 	.word	0x200001b8

08002374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002378:	f7ff fff0 	bl	800235c <HAL_RCC_GetHCLKFreq>
 800237c:	4601      	mov	r1, r0
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	0a9b      	lsrs	r3, r3, #10
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	4a03      	ldr	r2, [pc, #12]	; (8002398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800238a:	5cd3      	ldrb	r3, [r2, r3]
 800238c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002390:	4618      	mov	r0, r3
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40023800 	.word	0x40023800
 8002398:	08006678 	.word	0x08006678

0800239c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023a0:	f7ff ffdc 	bl	800235c <HAL_RCC_GetHCLKFreq>
 80023a4:	4601      	mov	r1, r0
 80023a6:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	0b5b      	lsrs	r3, r3, #13
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	4a03      	ldr	r2, [pc, #12]	; (80023c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023b2:	5cd3      	ldrb	r3, [r2, r3]
 80023b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40023800 	.word	0x40023800
 80023c0:	08006678 	.word	0x08006678

080023c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	220f      	movs	r2, #15
 80023d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <HAL_RCC_GetClockConfig+0x5c>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 0203 	and.w	r2, r3, #3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <HAL_RCC_GetClockConfig+0x5c>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023ec:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <HAL_RCC_GetClockConfig+0x5c>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023f8:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_RCC_GetClockConfig+0x5c>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	08db      	lsrs	r3, r3, #3
 80023fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <HAL_RCC_GetClockConfig+0x60>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 020f 	and.w	r2, r3, #15
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	601a      	str	r2, [r3, #0]
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	40023c00 	.word	0x40023c00

08002428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e01d      	b.n	8002476 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d106      	bne.n	8002454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f815 	bl	800247e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3304      	adds	r3, #4
 8002464:	4619      	mov	r1, r3
 8002466:	4610      	mov	r0, r2
 8002468:	f000 f968 	bl	800273c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002492:	b480      	push	{r7}
 8002494:	b085      	sub	sp, #20
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 0201 	orr.w	r2, r2, #1
 80024a8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2b06      	cmp	r3, #6
 80024ba:	d007      	beq.n	80024cc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d122      	bne.n	8002536 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d11b      	bne.n	8002536 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f06f 0202 	mvn.w	r2, #2
 8002506:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f8ee 	bl	80026fe <HAL_TIM_IC_CaptureCallback>
 8002522:	e005      	b.n	8002530 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f8e0 	bl	80026ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f8f1 	bl	8002712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b04      	cmp	r3, #4
 8002542:	d122      	bne.n	800258a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b04      	cmp	r3, #4
 8002550:	d11b      	bne.n	800258a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f06f 0204 	mvn.w	r2, #4
 800255a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f8c4 	bl	80026fe <HAL_TIM_IC_CaptureCallback>
 8002576:	e005      	b.n	8002584 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f8b6 	bl	80026ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f8c7 	bl	8002712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b08      	cmp	r3, #8
 8002596:	d122      	bne.n	80025de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d11b      	bne.n	80025de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f06f 0208 	mvn.w	r2, #8
 80025ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2204      	movs	r2, #4
 80025b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f89a 	bl	80026fe <HAL_TIM_IC_CaptureCallback>
 80025ca:	e005      	b.n	80025d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f88c 	bl	80026ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f89d 	bl	8002712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	2b10      	cmp	r3, #16
 80025ea:	d122      	bne.n	8002632 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	2b10      	cmp	r3, #16
 80025f8:	d11b      	bne.n	8002632 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f06f 0210 	mvn.w	r2, #16
 8002602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2208      	movs	r2, #8
 8002608:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f870 	bl	80026fe <HAL_TIM_IC_CaptureCallback>
 800261e:	e005      	b.n	800262c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f862 	bl	80026ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f873 	bl	8002712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b01      	cmp	r3, #1
 800263e:	d10e      	bne.n	800265e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b01      	cmp	r3, #1
 800264c:	d107      	bne.n	800265e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f06f 0201 	mvn.w	r2, #1
 8002656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7fe fcf9 	bl	8001050 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002668:	2b80      	cmp	r3, #128	; 0x80
 800266a:	d10e      	bne.n	800268a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002676:	2b80      	cmp	r3, #128	; 0x80
 8002678:	d107      	bne.n	800268a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f903 	bl	8002890 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002694:	2b40      	cmp	r3, #64	; 0x40
 8002696:	d10e      	bne.n	80026b6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a2:	2b40      	cmp	r3, #64	; 0x40
 80026a4:	d107      	bne.n	80026b6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f838 	bl	8002726 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d10e      	bne.n	80026e2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	d107      	bne.n	80026e2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f06f 0220 	mvn.w	r2, #32
 80026da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f8cd 	bl	800287c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a40      	ldr	r2, [pc, #256]	; (8002850 <TIM_Base_SetConfig+0x114>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d013      	beq.n	800277c <TIM_Base_SetConfig+0x40>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800275a:	d00f      	beq.n	800277c <TIM_Base_SetConfig+0x40>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a3d      	ldr	r2, [pc, #244]	; (8002854 <TIM_Base_SetConfig+0x118>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d00b      	beq.n	800277c <TIM_Base_SetConfig+0x40>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a3c      	ldr	r2, [pc, #240]	; (8002858 <TIM_Base_SetConfig+0x11c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d007      	beq.n	800277c <TIM_Base_SetConfig+0x40>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a3b      	ldr	r2, [pc, #236]	; (800285c <TIM_Base_SetConfig+0x120>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d003      	beq.n	800277c <TIM_Base_SetConfig+0x40>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a3a      	ldr	r2, [pc, #232]	; (8002860 <TIM_Base_SetConfig+0x124>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d108      	bne.n	800278e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a2f      	ldr	r2, [pc, #188]	; (8002850 <TIM_Base_SetConfig+0x114>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d02b      	beq.n	80027ee <TIM_Base_SetConfig+0xb2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279c:	d027      	beq.n	80027ee <TIM_Base_SetConfig+0xb2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a2c      	ldr	r2, [pc, #176]	; (8002854 <TIM_Base_SetConfig+0x118>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d023      	beq.n	80027ee <TIM_Base_SetConfig+0xb2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a2b      	ldr	r2, [pc, #172]	; (8002858 <TIM_Base_SetConfig+0x11c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d01f      	beq.n	80027ee <TIM_Base_SetConfig+0xb2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a2a      	ldr	r2, [pc, #168]	; (800285c <TIM_Base_SetConfig+0x120>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d01b      	beq.n	80027ee <TIM_Base_SetConfig+0xb2>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a29      	ldr	r2, [pc, #164]	; (8002860 <TIM_Base_SetConfig+0x124>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d017      	beq.n	80027ee <TIM_Base_SetConfig+0xb2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a28      	ldr	r2, [pc, #160]	; (8002864 <TIM_Base_SetConfig+0x128>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d013      	beq.n	80027ee <TIM_Base_SetConfig+0xb2>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a27      	ldr	r2, [pc, #156]	; (8002868 <TIM_Base_SetConfig+0x12c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d00f      	beq.n	80027ee <TIM_Base_SetConfig+0xb2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a26      	ldr	r2, [pc, #152]	; (800286c <TIM_Base_SetConfig+0x130>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d00b      	beq.n	80027ee <TIM_Base_SetConfig+0xb2>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a25      	ldr	r2, [pc, #148]	; (8002870 <TIM_Base_SetConfig+0x134>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d007      	beq.n	80027ee <TIM_Base_SetConfig+0xb2>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a24      	ldr	r2, [pc, #144]	; (8002874 <TIM_Base_SetConfig+0x138>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d003      	beq.n	80027ee <TIM_Base_SetConfig+0xb2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a23      	ldr	r2, [pc, #140]	; (8002878 <TIM_Base_SetConfig+0x13c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d108      	bne.n	8002800 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	4313      	orrs	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <TIM_Base_SetConfig+0x114>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d003      	beq.n	8002834 <TIM_Base_SetConfig+0xf8>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a0c      	ldr	r2, [pc, #48]	; (8002860 <TIM_Base_SetConfig+0x124>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d103      	bne.n	800283c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	615a      	str	r2, [r3, #20]
}
 8002842:	bf00      	nop
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40010000 	.word	0x40010000
 8002854:	40000400 	.word	0x40000400
 8002858:	40000800 	.word	0x40000800
 800285c:	40000c00 	.word	0x40000c00
 8002860:	40010400 	.word	0x40010400
 8002864:	40014000 	.word	0x40014000
 8002868:	40014400 	.word	0x40014400
 800286c:	40014800 	.word	0x40014800
 8002870:	40001800 	.word	0x40001800
 8002874:	40001c00 	.word	0x40001c00
 8002878:	40002000 	.word	0x40002000

0800287c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e03f      	b.n	8002936 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fe fc02 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2224      	movs	r2, #36	; 0x24
 80028d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f9b1 	bl	8002c50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695a      	ldr	r2, [r3, #20]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800290c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800291c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b088      	sub	sp, #32
 8002942:	af02      	add	r7, sp, #8
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	603b      	str	r3, [r7, #0]
 800294a:	4613      	mov	r3, r2
 800294c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b20      	cmp	r3, #32
 800295c:	f040 8083 	bne.w	8002a66 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <HAL_UART_Transmit+0x2e>
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e07b      	b.n	8002a68 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_UART_Transmit+0x40>
 800297a:	2302      	movs	r3, #2
 800297c:	e074      	b.n	8002a68 <HAL_UART_Transmit+0x12a>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2221      	movs	r2, #33	; 0x21
 8002990:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002994:	f7fe fda6 	bl	80014e4 <HAL_GetTick>
 8002998:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	88fa      	ldrh	r2, [r7, #6]
 800299e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	88fa      	ldrh	r2, [r7, #6]
 80029a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80029ae:	e042      	b.n	8002a36 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c6:	d122      	bne.n	8002a0e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2200      	movs	r2, #0
 80029d0:	2180      	movs	r1, #128	; 0x80
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 f8f2 	bl	8002bbc <UART_WaitOnFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e042      	b.n	8002a68 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029f4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d103      	bne.n	8002a06 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	3302      	adds	r3, #2
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	e017      	b.n	8002a36 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	e013      	b.n	8002a36 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2200      	movs	r2, #0
 8002a16:	2180      	movs	r1, #128	; 0x80
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 f8cf 	bl	8002bbc <UART_WaitOnFlagUntilTimeout>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e01f      	b.n	8002a68 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	60ba      	str	r2, [r7, #8]
 8002a2e:	781a      	ldrb	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1b7      	bne.n	80029b0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	2200      	movs	r2, #0
 8002a48:	2140      	movs	r1, #64	; 0x40
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f8b6 	bl	8002bbc <UART_WaitOnFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e006      	b.n	8002a68 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e000      	b.n	8002a68 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002a66:	2302      	movs	r3, #2
  }
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	f040 8090 	bne.w	8002bb2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <HAL_UART_Receive+0x2e>
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e088      	b.n	8002bb4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_UART_Receive+0x40>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e081      	b.n	8002bb4 <HAL_UART_Receive+0x144>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2222      	movs	r2, #34	; 0x22
 8002ac2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ac6:	f7fe fd0d 	bl	80014e4 <HAL_GetTick>
 8002aca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	88fa      	ldrh	r2, [r7, #6]
 8002ad0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	88fa      	ldrh	r2, [r7, #6]
 8002ad6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002ae0:	e05c      	b.n	8002b9c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af8:	d12b      	bne.n	8002b52 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2200      	movs	r2, #0
 8002b02:	2120      	movs	r1, #32
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f859 	bl	8002bbc <UART_WaitOnFlagUntilTimeout>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e04f      	b.n	8002bb4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10c      	bne.n	8002b3a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	3302      	adds	r3, #2
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	e030      	b.n	8002b9c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	e024      	b.n	8002b9c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2120      	movs	r1, #32
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 f82d 	bl	8002bbc <UART_WaitOnFlagUntilTimeout>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e023      	b.n	8002bb4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d108      	bne.n	8002b86 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6859      	ldr	r1, [r3, #4]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	60ba      	str	r2, [r7, #8]
 8002b80:	b2ca      	uxtb	r2, r1
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	e00a      	b.n	8002b9c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	1c59      	adds	r1, r3, #1
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d19d      	bne.n	8002ae2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e000      	b.n	8002bb4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8002bb2:	2302      	movs	r3, #2
  }
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bcc:	e02c      	b.n	8002c28 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd4:	d028      	beq.n	8002c28 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d007      	beq.n	8002bec <UART_WaitOnFlagUntilTimeout+0x30>
 8002bdc:	f7fe fc82 	bl	80014e4 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d21d      	bcs.n	8002c28 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bfa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0201 	bic.w	r2, r2, #1
 8002c0a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e00f      	b.n	8002c48 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	4013      	ands	r3, r2
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	461a      	mov	r2, r3
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d0c3      	beq.n	8002bce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c54:	b085      	sub	sp, #20
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c92:	f023 030c 	bic.w	r3, r3, #12
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6812      	ldr	r2, [r2, #0]
 8002c9a:	68f9      	ldr	r1, [r7, #12]
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699a      	ldr	r2, [r3, #24]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cbe:	f040 818b 	bne.w	8002fd8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4ac1      	ldr	r2, [pc, #772]	; (8002fcc <UART_SetConfig+0x37c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d005      	beq.n	8002cd8 <UART_SetConfig+0x88>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4abf      	ldr	r2, [pc, #764]	; (8002fd0 <UART_SetConfig+0x380>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	f040 80bd 	bne.w	8002e52 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cd8:	f7ff fb60 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 8002cdc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	461d      	mov	r5, r3
 8002ce2:	f04f 0600 	mov.w	r6, #0
 8002ce6:	46a8      	mov	r8, r5
 8002ce8:	46b1      	mov	r9, r6
 8002cea:	eb18 0308 	adds.w	r3, r8, r8
 8002cee:	eb49 0409 	adc.w	r4, r9, r9
 8002cf2:	4698      	mov	r8, r3
 8002cf4:	46a1      	mov	r9, r4
 8002cf6:	eb18 0805 	adds.w	r8, r8, r5
 8002cfa:	eb49 0906 	adc.w	r9, r9, r6
 8002cfe:	f04f 0100 	mov.w	r1, #0
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d0a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d0e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d12:	4688      	mov	r8, r1
 8002d14:	4691      	mov	r9, r2
 8002d16:	eb18 0005 	adds.w	r0, r8, r5
 8002d1a:	eb49 0106 	adc.w	r1, r9, r6
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	461d      	mov	r5, r3
 8002d24:	f04f 0600 	mov.w	r6, #0
 8002d28:	196b      	adds	r3, r5, r5
 8002d2a:	eb46 0406 	adc.w	r4, r6, r6
 8002d2e:	461a      	mov	r2, r3
 8002d30:	4623      	mov	r3, r4
 8002d32:	f7fd fa9d 	bl	8000270 <__aeabi_uldivmod>
 8002d36:	4603      	mov	r3, r0
 8002d38:	460c      	mov	r4, r1
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	4ba5      	ldr	r3, [pc, #660]	; (8002fd4 <UART_SetConfig+0x384>)
 8002d3e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	461d      	mov	r5, r3
 8002d4c:	f04f 0600 	mov.w	r6, #0
 8002d50:	46a9      	mov	r9, r5
 8002d52:	46b2      	mov	sl, r6
 8002d54:	eb19 0309 	adds.w	r3, r9, r9
 8002d58:	eb4a 040a 	adc.w	r4, sl, sl
 8002d5c:	4699      	mov	r9, r3
 8002d5e:	46a2      	mov	sl, r4
 8002d60:	eb19 0905 	adds.w	r9, r9, r5
 8002d64:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d68:	f04f 0100 	mov.w	r1, #0
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d7c:	4689      	mov	r9, r1
 8002d7e:	4692      	mov	sl, r2
 8002d80:	eb19 0005 	adds.w	r0, r9, r5
 8002d84:	eb4a 0106 	adc.w	r1, sl, r6
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	461d      	mov	r5, r3
 8002d8e:	f04f 0600 	mov.w	r6, #0
 8002d92:	196b      	adds	r3, r5, r5
 8002d94:	eb46 0406 	adc.w	r4, r6, r6
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4623      	mov	r3, r4
 8002d9c:	f7fd fa68 	bl	8000270 <__aeabi_uldivmod>
 8002da0:	4603      	mov	r3, r0
 8002da2:	460c      	mov	r4, r1
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b8b      	ldr	r3, [pc, #556]	; (8002fd4 <UART_SetConfig+0x384>)
 8002da8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dac:	095b      	lsrs	r3, r3, #5
 8002dae:	2164      	movs	r1, #100	; 0x64
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	3332      	adds	r3, #50	; 0x32
 8002dba:	4a86      	ldr	r2, [pc, #536]	; (8002fd4 <UART_SetConfig+0x384>)
 8002dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc0:	095b      	lsrs	r3, r3, #5
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dc8:	4498      	add	r8, r3
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	461d      	mov	r5, r3
 8002dce:	f04f 0600 	mov.w	r6, #0
 8002dd2:	46a9      	mov	r9, r5
 8002dd4:	46b2      	mov	sl, r6
 8002dd6:	eb19 0309 	adds.w	r3, r9, r9
 8002dda:	eb4a 040a 	adc.w	r4, sl, sl
 8002dde:	4699      	mov	r9, r3
 8002de0:	46a2      	mov	sl, r4
 8002de2:	eb19 0905 	adds.w	r9, r9, r5
 8002de6:	eb4a 0a06 	adc.w	sl, sl, r6
 8002dea:	f04f 0100 	mov.w	r1, #0
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002df6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002dfe:	4689      	mov	r9, r1
 8002e00:	4692      	mov	sl, r2
 8002e02:	eb19 0005 	adds.w	r0, r9, r5
 8002e06:	eb4a 0106 	adc.w	r1, sl, r6
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	461d      	mov	r5, r3
 8002e10:	f04f 0600 	mov.w	r6, #0
 8002e14:	196b      	adds	r3, r5, r5
 8002e16:	eb46 0406 	adc.w	r4, r6, r6
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4623      	mov	r3, r4
 8002e1e:	f7fd fa27 	bl	8000270 <__aeabi_uldivmod>
 8002e22:	4603      	mov	r3, r0
 8002e24:	460c      	mov	r4, r1
 8002e26:	461a      	mov	r2, r3
 8002e28:	4b6a      	ldr	r3, [pc, #424]	; (8002fd4 <UART_SetConfig+0x384>)
 8002e2a:	fba3 1302 	umull	r1, r3, r3, r2
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	2164      	movs	r1, #100	; 0x64
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	3332      	adds	r3, #50	; 0x32
 8002e3c:	4a65      	ldr	r2, [pc, #404]	; (8002fd4 <UART_SetConfig+0x384>)
 8002e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	f003 0207 	and.w	r2, r3, #7
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4442      	add	r2, r8
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	e26f      	b.n	8003332 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e52:	f7ff fa8f 	bl	8002374 <HAL_RCC_GetPCLK1Freq>
 8002e56:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	461d      	mov	r5, r3
 8002e5c:	f04f 0600 	mov.w	r6, #0
 8002e60:	46a8      	mov	r8, r5
 8002e62:	46b1      	mov	r9, r6
 8002e64:	eb18 0308 	adds.w	r3, r8, r8
 8002e68:	eb49 0409 	adc.w	r4, r9, r9
 8002e6c:	4698      	mov	r8, r3
 8002e6e:	46a1      	mov	r9, r4
 8002e70:	eb18 0805 	adds.w	r8, r8, r5
 8002e74:	eb49 0906 	adc.w	r9, r9, r6
 8002e78:	f04f 0100 	mov.w	r1, #0
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e84:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e88:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e8c:	4688      	mov	r8, r1
 8002e8e:	4691      	mov	r9, r2
 8002e90:	eb18 0005 	adds.w	r0, r8, r5
 8002e94:	eb49 0106 	adc.w	r1, r9, r6
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	461d      	mov	r5, r3
 8002e9e:	f04f 0600 	mov.w	r6, #0
 8002ea2:	196b      	adds	r3, r5, r5
 8002ea4:	eb46 0406 	adc.w	r4, r6, r6
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4623      	mov	r3, r4
 8002eac:	f7fd f9e0 	bl	8000270 <__aeabi_uldivmod>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	460c      	mov	r4, r1
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b47      	ldr	r3, [pc, #284]	; (8002fd4 <UART_SetConfig+0x384>)
 8002eb8:	fba3 2302 	umull	r2, r3, r3, r2
 8002ebc:	095b      	lsrs	r3, r3, #5
 8002ebe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	461d      	mov	r5, r3
 8002ec6:	f04f 0600 	mov.w	r6, #0
 8002eca:	46a9      	mov	r9, r5
 8002ecc:	46b2      	mov	sl, r6
 8002ece:	eb19 0309 	adds.w	r3, r9, r9
 8002ed2:	eb4a 040a 	adc.w	r4, sl, sl
 8002ed6:	4699      	mov	r9, r3
 8002ed8:	46a2      	mov	sl, r4
 8002eda:	eb19 0905 	adds.w	r9, r9, r5
 8002ede:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ee2:	f04f 0100 	mov.w	r1, #0
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ef2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ef6:	4689      	mov	r9, r1
 8002ef8:	4692      	mov	sl, r2
 8002efa:	eb19 0005 	adds.w	r0, r9, r5
 8002efe:	eb4a 0106 	adc.w	r1, sl, r6
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	461d      	mov	r5, r3
 8002f08:	f04f 0600 	mov.w	r6, #0
 8002f0c:	196b      	adds	r3, r5, r5
 8002f0e:	eb46 0406 	adc.w	r4, r6, r6
 8002f12:	461a      	mov	r2, r3
 8002f14:	4623      	mov	r3, r4
 8002f16:	f7fd f9ab 	bl	8000270 <__aeabi_uldivmod>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	460c      	mov	r4, r1
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4b2c      	ldr	r3, [pc, #176]	; (8002fd4 <UART_SetConfig+0x384>)
 8002f22:	fba3 1302 	umull	r1, r3, r3, r2
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	2164      	movs	r1, #100	; 0x64
 8002f2a:	fb01 f303 	mul.w	r3, r1, r3
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	3332      	adds	r3, #50	; 0x32
 8002f34:	4a27      	ldr	r2, [pc, #156]	; (8002fd4 <UART_SetConfig+0x384>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f42:	4498      	add	r8, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	461d      	mov	r5, r3
 8002f48:	f04f 0600 	mov.w	r6, #0
 8002f4c:	46a9      	mov	r9, r5
 8002f4e:	46b2      	mov	sl, r6
 8002f50:	eb19 0309 	adds.w	r3, r9, r9
 8002f54:	eb4a 040a 	adc.w	r4, sl, sl
 8002f58:	4699      	mov	r9, r3
 8002f5a:	46a2      	mov	sl, r4
 8002f5c:	eb19 0905 	adds.w	r9, r9, r5
 8002f60:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f64:	f04f 0100 	mov.w	r1, #0
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f78:	4689      	mov	r9, r1
 8002f7a:	4692      	mov	sl, r2
 8002f7c:	eb19 0005 	adds.w	r0, r9, r5
 8002f80:	eb4a 0106 	adc.w	r1, sl, r6
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	461d      	mov	r5, r3
 8002f8a:	f04f 0600 	mov.w	r6, #0
 8002f8e:	196b      	adds	r3, r5, r5
 8002f90:	eb46 0406 	adc.w	r4, r6, r6
 8002f94:	461a      	mov	r2, r3
 8002f96:	4623      	mov	r3, r4
 8002f98:	f7fd f96a 	bl	8000270 <__aeabi_uldivmod>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	460c      	mov	r4, r1
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <UART_SetConfig+0x384>)
 8002fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	2164      	movs	r1, #100	; 0x64
 8002fac:	fb01 f303 	mul.w	r3, r1, r3
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	3332      	adds	r3, #50	; 0x32
 8002fb6:	4a07      	ldr	r2, [pc, #28]	; (8002fd4 <UART_SetConfig+0x384>)
 8002fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbc:	095b      	lsrs	r3, r3, #5
 8002fbe:	f003 0207 	and.w	r2, r3, #7
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4442      	add	r2, r8
 8002fc8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002fca:	e1b2      	b.n	8003332 <UART_SetConfig+0x6e2>
 8002fcc:	40011000 	.word	0x40011000
 8002fd0:	40011400 	.word	0x40011400
 8002fd4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4ad7      	ldr	r2, [pc, #860]	; (800333c <UART_SetConfig+0x6ec>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d005      	beq.n	8002fee <UART_SetConfig+0x39e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4ad6      	ldr	r2, [pc, #856]	; (8003340 <UART_SetConfig+0x6f0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	f040 80d1 	bne.w	8003190 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fee:	f7ff f9d5 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 8002ff2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	469a      	mov	sl, r3
 8002ff8:	f04f 0b00 	mov.w	fp, #0
 8002ffc:	46d0      	mov	r8, sl
 8002ffe:	46d9      	mov	r9, fp
 8003000:	eb18 0308 	adds.w	r3, r8, r8
 8003004:	eb49 0409 	adc.w	r4, r9, r9
 8003008:	4698      	mov	r8, r3
 800300a:	46a1      	mov	r9, r4
 800300c:	eb18 080a 	adds.w	r8, r8, sl
 8003010:	eb49 090b 	adc.w	r9, r9, fp
 8003014:	f04f 0100 	mov.w	r1, #0
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003020:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003024:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003028:	4688      	mov	r8, r1
 800302a:	4691      	mov	r9, r2
 800302c:	eb1a 0508 	adds.w	r5, sl, r8
 8003030:	eb4b 0609 	adc.w	r6, fp, r9
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	4619      	mov	r1, r3
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	f04f 0400 	mov.w	r4, #0
 8003046:	0094      	lsls	r4, r2, #2
 8003048:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800304c:	008b      	lsls	r3, r1, #2
 800304e:	461a      	mov	r2, r3
 8003050:	4623      	mov	r3, r4
 8003052:	4628      	mov	r0, r5
 8003054:	4631      	mov	r1, r6
 8003056:	f7fd f90b 	bl	8000270 <__aeabi_uldivmod>
 800305a:	4603      	mov	r3, r0
 800305c:	460c      	mov	r4, r1
 800305e:	461a      	mov	r2, r3
 8003060:	4bb8      	ldr	r3, [pc, #736]	; (8003344 <UART_SetConfig+0x6f4>)
 8003062:	fba3 2302 	umull	r2, r3, r3, r2
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	469b      	mov	fp, r3
 8003070:	f04f 0c00 	mov.w	ip, #0
 8003074:	46d9      	mov	r9, fp
 8003076:	46e2      	mov	sl, ip
 8003078:	eb19 0309 	adds.w	r3, r9, r9
 800307c:	eb4a 040a 	adc.w	r4, sl, sl
 8003080:	4699      	mov	r9, r3
 8003082:	46a2      	mov	sl, r4
 8003084:	eb19 090b 	adds.w	r9, r9, fp
 8003088:	eb4a 0a0c 	adc.w	sl, sl, ip
 800308c:	f04f 0100 	mov.w	r1, #0
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003098:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800309c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030a0:	4689      	mov	r9, r1
 80030a2:	4692      	mov	sl, r2
 80030a4:	eb1b 0509 	adds.w	r5, fp, r9
 80030a8:	eb4c 060a 	adc.w	r6, ip, sl
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4619      	mov	r1, r3
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	f04f 0400 	mov.w	r4, #0
 80030be:	0094      	lsls	r4, r2, #2
 80030c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030c4:	008b      	lsls	r3, r1, #2
 80030c6:	461a      	mov	r2, r3
 80030c8:	4623      	mov	r3, r4
 80030ca:	4628      	mov	r0, r5
 80030cc:	4631      	mov	r1, r6
 80030ce:	f7fd f8cf 	bl	8000270 <__aeabi_uldivmod>
 80030d2:	4603      	mov	r3, r0
 80030d4:	460c      	mov	r4, r1
 80030d6:	461a      	mov	r2, r3
 80030d8:	4b9a      	ldr	r3, [pc, #616]	; (8003344 <UART_SetConfig+0x6f4>)
 80030da:	fba3 1302 	umull	r1, r3, r3, r2
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	2164      	movs	r1, #100	; 0x64
 80030e2:	fb01 f303 	mul.w	r3, r1, r3
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	3332      	adds	r3, #50	; 0x32
 80030ec:	4a95      	ldr	r2, [pc, #596]	; (8003344 <UART_SetConfig+0x6f4>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030f8:	4498      	add	r8, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	469b      	mov	fp, r3
 80030fe:	f04f 0c00 	mov.w	ip, #0
 8003102:	46d9      	mov	r9, fp
 8003104:	46e2      	mov	sl, ip
 8003106:	eb19 0309 	adds.w	r3, r9, r9
 800310a:	eb4a 040a 	adc.w	r4, sl, sl
 800310e:	4699      	mov	r9, r3
 8003110:	46a2      	mov	sl, r4
 8003112:	eb19 090b 	adds.w	r9, r9, fp
 8003116:	eb4a 0a0c 	adc.w	sl, sl, ip
 800311a:	f04f 0100 	mov.w	r1, #0
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003126:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800312a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800312e:	4689      	mov	r9, r1
 8003130:	4692      	mov	sl, r2
 8003132:	eb1b 0509 	adds.w	r5, fp, r9
 8003136:	eb4c 060a 	adc.w	r6, ip, sl
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4619      	mov	r1, r3
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	f04f 0400 	mov.w	r4, #0
 800314c:	0094      	lsls	r4, r2, #2
 800314e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003152:	008b      	lsls	r3, r1, #2
 8003154:	461a      	mov	r2, r3
 8003156:	4623      	mov	r3, r4
 8003158:	4628      	mov	r0, r5
 800315a:	4631      	mov	r1, r6
 800315c:	f7fd f888 	bl	8000270 <__aeabi_uldivmod>
 8003160:	4603      	mov	r3, r0
 8003162:	460c      	mov	r4, r1
 8003164:	461a      	mov	r2, r3
 8003166:	4b77      	ldr	r3, [pc, #476]	; (8003344 <UART_SetConfig+0x6f4>)
 8003168:	fba3 1302 	umull	r1, r3, r3, r2
 800316c:	095b      	lsrs	r3, r3, #5
 800316e:	2164      	movs	r1, #100	; 0x64
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	3332      	adds	r3, #50	; 0x32
 800317a:	4a72      	ldr	r2, [pc, #456]	; (8003344 <UART_SetConfig+0x6f4>)
 800317c:	fba2 2303 	umull	r2, r3, r2, r3
 8003180:	095b      	lsrs	r3, r3, #5
 8003182:	f003 020f 	and.w	r2, r3, #15
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4442      	add	r2, r8
 800318c:	609a      	str	r2, [r3, #8]
 800318e:	e0d0      	b.n	8003332 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003190:	f7ff f8f0 	bl	8002374 <HAL_RCC_GetPCLK1Freq>
 8003194:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	469a      	mov	sl, r3
 800319a:	f04f 0b00 	mov.w	fp, #0
 800319e:	46d0      	mov	r8, sl
 80031a0:	46d9      	mov	r9, fp
 80031a2:	eb18 0308 	adds.w	r3, r8, r8
 80031a6:	eb49 0409 	adc.w	r4, r9, r9
 80031aa:	4698      	mov	r8, r3
 80031ac:	46a1      	mov	r9, r4
 80031ae:	eb18 080a 	adds.w	r8, r8, sl
 80031b2:	eb49 090b 	adc.w	r9, r9, fp
 80031b6:	f04f 0100 	mov.w	r1, #0
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80031c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031ca:	4688      	mov	r8, r1
 80031cc:	4691      	mov	r9, r2
 80031ce:	eb1a 0508 	adds.w	r5, sl, r8
 80031d2:	eb4b 0609 	adc.w	r6, fp, r9
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4619      	mov	r1, r3
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	f04f 0400 	mov.w	r4, #0
 80031e8:	0094      	lsls	r4, r2, #2
 80031ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031ee:	008b      	lsls	r3, r1, #2
 80031f0:	461a      	mov	r2, r3
 80031f2:	4623      	mov	r3, r4
 80031f4:	4628      	mov	r0, r5
 80031f6:	4631      	mov	r1, r6
 80031f8:	f7fd f83a 	bl	8000270 <__aeabi_uldivmod>
 80031fc:	4603      	mov	r3, r0
 80031fe:	460c      	mov	r4, r1
 8003200:	461a      	mov	r2, r3
 8003202:	4b50      	ldr	r3, [pc, #320]	; (8003344 <UART_SetConfig+0x6f4>)
 8003204:	fba3 2302 	umull	r2, r3, r3, r2
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	469b      	mov	fp, r3
 8003212:	f04f 0c00 	mov.w	ip, #0
 8003216:	46d9      	mov	r9, fp
 8003218:	46e2      	mov	sl, ip
 800321a:	eb19 0309 	adds.w	r3, r9, r9
 800321e:	eb4a 040a 	adc.w	r4, sl, sl
 8003222:	4699      	mov	r9, r3
 8003224:	46a2      	mov	sl, r4
 8003226:	eb19 090b 	adds.w	r9, r9, fp
 800322a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800322e:	f04f 0100 	mov.w	r1, #0
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800323a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800323e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003242:	4689      	mov	r9, r1
 8003244:	4692      	mov	sl, r2
 8003246:	eb1b 0509 	adds.w	r5, fp, r9
 800324a:	eb4c 060a 	adc.w	r6, ip, sl
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	4619      	mov	r1, r3
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	f04f 0400 	mov.w	r4, #0
 8003260:	0094      	lsls	r4, r2, #2
 8003262:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003266:	008b      	lsls	r3, r1, #2
 8003268:	461a      	mov	r2, r3
 800326a:	4623      	mov	r3, r4
 800326c:	4628      	mov	r0, r5
 800326e:	4631      	mov	r1, r6
 8003270:	f7fc fffe 	bl	8000270 <__aeabi_uldivmod>
 8003274:	4603      	mov	r3, r0
 8003276:	460c      	mov	r4, r1
 8003278:	461a      	mov	r2, r3
 800327a:	4b32      	ldr	r3, [pc, #200]	; (8003344 <UART_SetConfig+0x6f4>)
 800327c:	fba3 1302 	umull	r1, r3, r3, r2
 8003280:	095b      	lsrs	r3, r3, #5
 8003282:	2164      	movs	r1, #100	; 0x64
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	3332      	adds	r3, #50	; 0x32
 800328e:	4a2d      	ldr	r2, [pc, #180]	; (8003344 <UART_SetConfig+0x6f4>)
 8003290:	fba2 2303 	umull	r2, r3, r2, r3
 8003294:	095b      	lsrs	r3, r3, #5
 8003296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800329a:	4498      	add	r8, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	469b      	mov	fp, r3
 80032a0:	f04f 0c00 	mov.w	ip, #0
 80032a4:	46d9      	mov	r9, fp
 80032a6:	46e2      	mov	sl, ip
 80032a8:	eb19 0309 	adds.w	r3, r9, r9
 80032ac:	eb4a 040a 	adc.w	r4, sl, sl
 80032b0:	4699      	mov	r9, r3
 80032b2:	46a2      	mov	sl, r4
 80032b4:	eb19 090b 	adds.w	r9, r9, fp
 80032b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80032bc:	f04f 0100 	mov.w	r1, #0
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032d0:	4689      	mov	r9, r1
 80032d2:	4692      	mov	sl, r2
 80032d4:	eb1b 0509 	adds.w	r5, fp, r9
 80032d8:	eb4c 060a 	adc.w	r6, ip, sl
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	4619      	mov	r1, r3
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	f04f 0400 	mov.w	r4, #0
 80032ee:	0094      	lsls	r4, r2, #2
 80032f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032f4:	008b      	lsls	r3, r1, #2
 80032f6:	461a      	mov	r2, r3
 80032f8:	4623      	mov	r3, r4
 80032fa:	4628      	mov	r0, r5
 80032fc:	4631      	mov	r1, r6
 80032fe:	f7fc ffb7 	bl	8000270 <__aeabi_uldivmod>
 8003302:	4603      	mov	r3, r0
 8003304:	460c      	mov	r4, r1
 8003306:	461a      	mov	r2, r3
 8003308:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <UART_SetConfig+0x6f4>)
 800330a:	fba3 1302 	umull	r1, r3, r3, r2
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	2164      	movs	r1, #100	; 0x64
 8003312:	fb01 f303 	mul.w	r3, r1, r3
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	3332      	adds	r3, #50	; 0x32
 800331c:	4a09      	ldr	r2, [pc, #36]	; (8003344 <UART_SetConfig+0x6f4>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	f003 020f 	and.w	r2, r3, #15
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4442      	add	r2, r8
 800332e:	609a      	str	r2, [r3, #8]
}
 8003330:	e7ff      	b.n	8003332 <UART_SetConfig+0x6e2>
 8003332:	bf00      	nop
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800333c:	40011000 	.word	0x40011000
 8003340:	40011400 	.word	0x40011400
 8003344:	51eb851f 	.word	0x51eb851f

08003348 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003356:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800335a:	2b84      	cmp	r3, #132	; 0x84
 800335c:	d005      	beq.n	800336a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800335e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4413      	add	r3, r2
 8003366:	3303      	adds	r3, #3
 8003368:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800336a:	68fb      	ldr	r3, [r7, #12]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800337c:	f000 ff84 	bl	8004288 <vTaskStartScheduler>
  
  return osOK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	bd80      	pop	{r7, pc}

08003386 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003386:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003388:	b089      	sub	sp, #36	; 0x24
 800338a:	af04      	add	r7, sp, #16
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d020      	beq.n	80033da <osThreadCreate+0x54>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01c      	beq.n	80033da <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685c      	ldr	r4, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681d      	ldr	r5, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691e      	ldr	r6, [r3, #16]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff ffc8 	bl	8003348 <makeFreeRtosPriority>
 80033b8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033c2:	9202      	str	r2, [sp, #8]
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	9100      	str	r1, [sp, #0]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	4632      	mov	r2, r6
 80033cc:	4629      	mov	r1, r5
 80033ce:	4620      	mov	r0, r4
 80033d0:	f000 fcfa 	bl	8003dc8 <xTaskCreateStatic>
 80033d4:	4603      	mov	r3, r0
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	e01c      	b.n	8003414 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685c      	ldr	r4, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033e6:	b29e      	uxth	r6, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff ffaa 	bl	8003348 <makeFreeRtosPriority>
 80033f4:	4602      	mov	r2, r0
 80033f6:	f107 030c 	add.w	r3, r7, #12
 80033fa:	9301      	str	r3, [sp, #4]
 80033fc:	9200      	str	r2, [sp, #0]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	4632      	mov	r2, r6
 8003402:	4629      	mov	r1, r5
 8003404:	4620      	mov	r0, r4
 8003406:	f000 fd39 	bl	8003e7c <xTaskCreate>
 800340a:	4603      	mov	r3, r0
 800340c:	2b01      	cmp	r3, #1
 800340e:	d001      	beq.n	8003414 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003410:	2300      	movs	r3, #0
 8003412:	e000      	b.n	8003416 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003414:	68fb      	ldr	r3, [r7, #12]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800341e <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fe6c 	bl	8004104 <vTaskDelete>
  return osOK;
 800342c:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <osDelay+0x16>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	e000      	b.n	800344e <osDelay+0x18>
 800344c:	2301      	movs	r3, #1
 800344e:	4618      	mov	r0, r3
 8003450:	f000 fee6 	bl	8004220 <vTaskDelay>
  
  return osOK;
 8003454:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f103 0208 	add.w	r2, r3, #8
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f04f 32ff 	mov.w	r2, #4294967295
 8003476:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f103 0208 	add.w	r2, r3, #8
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f103 0208 	add.w	r2, r3, #8
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	601a      	str	r2, [r3, #0]
}
 80034f4:	bf00      	nop
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003516:	d103      	bne.n	8003520 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	e00c      	b.n	800353a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3308      	adds	r3, #8
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	e002      	b.n	800352e <vListInsert+0x2e>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	429a      	cmp	r2, r3
 8003538:	d2f6      	bcs.n	8003528 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	601a      	str	r2, [r3, #0]
}
 8003566:	bf00      	nop
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003572:	b480      	push	{r7}
 8003574:	b085      	sub	sp, #20
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6892      	ldr	r2, [r2, #8]
 8003588:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6852      	ldr	r2, [r2, #4]
 8003592:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	429a      	cmp	r2, r3
 800359c:	d103      	bne.n	80035a6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	1e5a      	subs	r2, r3, #1
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
	...

080035c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d109      	bne.n	80035f0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	e7fe      	b.n	80035ee <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80035f0:	f001 fdb4 	bl	800515c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fc:	68f9      	ldr	r1, [r7, #12]
 80035fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003600:	fb01 f303 	mul.w	r3, r1, r3
 8003604:	441a      	add	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003620:	3b01      	subs	r3, #1
 8003622:	68f9      	ldr	r1, [r7, #12]
 8003624:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003626:	fb01 f303 	mul.w	r3, r1, r3
 800362a:	441a      	add	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	22ff      	movs	r2, #255	; 0xff
 8003634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	22ff      	movs	r2, #255	; 0xff
 800363c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d114      	bne.n	8003670 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d01a      	beq.n	8003684 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	3310      	adds	r3, #16
 8003652:	4618      	mov	r0, r3
 8003654:	f001 f874 	bl	8004740 <xTaskRemoveFromEventList>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d012      	beq.n	8003684 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800365e:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <xQueueGenericReset+0xcc>)
 8003660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	f3bf 8f4f 	dsb	sy
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	e009      	b.n	8003684 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	3310      	adds	r3, #16
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fef2 	bl	800345e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	3324      	adds	r3, #36	; 0x24
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff feed 	bl	800345e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003684:	f001 fd98 	bl	80051b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003688:	2301      	movs	r3, #1
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	e000ed04 	.word	0xe000ed04

08003698 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08a      	sub	sp, #40	; 0x28
 800369c:	af02      	add	r7, sp, #8
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	4613      	mov	r3, r2
 80036a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d109      	bne.n	80036c0 <xQueueGenericCreate+0x28>
 80036ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	e7fe      	b.n	80036be <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d102      	bne.n	80036cc <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	e004      	b.n	80036d6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	fb02 f303 	mul.w	r3, r2, r3
 80036d4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	3350      	adds	r3, #80	; 0x50
 80036da:	4618      	mov	r0, r3
 80036dc:	f001 fe1a 	bl	8005314 <pvPortMalloc>
 80036e0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d011      	beq.n	800370c <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	3350      	adds	r3, #80	; 0x50
 80036f0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036fa:	79fa      	ldrb	r2, [r7, #7]
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	4613      	mov	r3, r2
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 f805 	bl	8003716 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800370c:	69bb      	ldr	r3, [r7, #24]
	}
 800370e:	4618      	mov	r0, r3
 8003710:	3720      	adds	r7, #32
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	607a      	str	r2, [r7, #4]
 8003722:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d103      	bne.n	8003732 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	e002      	b.n	8003738 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003744:	2101      	movs	r1, #1
 8003746:	69b8      	ldr	r0, [r7, #24]
 8003748:	f7ff ff3e 	bl	80035c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	78fa      	ldrb	r2, [r7, #3]
 8003750:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003754:	bf00      	nop
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00e      	beq.n	8003788 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800377c:	2300      	movs	r3, #0
 800377e:	2200      	movs	r2, #0
 8003780:	2100      	movs	r1, #0
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f81c 	bl	80037c0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003788:	bf00      	nop
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800379a:	2301      	movs	r3, #1
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	2300      	movs	r3, #0
 80037a0:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	461a      	mov	r2, r3
 80037a6:	6939      	ldr	r1, [r7, #16]
 80037a8:	6978      	ldr	r0, [r7, #20]
 80037aa:	f7ff ff75 	bl	8003698 <xQueueGenericCreate>
 80037ae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f7ff ffd3 	bl	800375c <prvInitialiseMutex>

		return xNewQueue;
 80037b6:	68fb      	ldr	r3, [r7, #12]
	}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08e      	sub	sp, #56	; 0x38
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037ce:	2300      	movs	r3, #0
 80037d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <xQueueGenericSend+0x30>
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ee:	e7fe      	b.n	80037ee <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d103      	bne.n	80037fe <xQueueGenericSend+0x3e>
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <xQueueGenericSend+0x42>
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <xQueueGenericSend+0x44>
 8003802:	2300      	movs	r3, #0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d109      	bne.n	800381c <xQueueGenericSend+0x5c>
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
 800381a:	e7fe      	b.n	800381a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d103      	bne.n	800382a <xQueueGenericSend+0x6a>
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <xQueueGenericSend+0x6e>
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <xQueueGenericSend+0x70>
 800382e:	2300      	movs	r3, #0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d109      	bne.n	8003848 <xQueueGenericSend+0x88>
 8003834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003838:	f383 8811 	msr	BASEPRI, r3
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	623b      	str	r3, [r7, #32]
 8003846:	e7fe      	b.n	8003846 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003848:	f001 f930 	bl	8004aac <xTaskGetSchedulerState>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d102      	bne.n	8003858 <xQueueGenericSend+0x98>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <xQueueGenericSend+0x9c>
 8003858:	2301      	movs	r3, #1
 800385a:	e000      	b.n	800385e <xQueueGenericSend+0x9e>
 800385c:	2300      	movs	r3, #0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d109      	bne.n	8003876 <xQueueGenericSend+0xb6>
 8003862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003866:	f383 8811 	msr	BASEPRI, r3
 800386a:	f3bf 8f6f 	isb	sy
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	61fb      	str	r3, [r7, #28]
 8003874:	e7fe      	b.n	8003874 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003876:	f001 fc71 	bl	800515c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800387e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003882:	429a      	cmp	r2, r3
 8003884:	d302      	bcc.n	800388c <xQueueGenericSend+0xcc>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b02      	cmp	r3, #2
 800388a:	d129      	bne.n	80038e0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003892:	f000 f9af 	bl	8003bf4 <prvCopyDataToQueue>
 8003896:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	2b00      	cmp	r3, #0
 800389e:	d010      	beq.n	80038c2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	3324      	adds	r3, #36	; 0x24
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 ff4b 	bl	8004740 <xTaskRemoveFromEventList>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d013      	beq.n	80038d8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80038b0:	4b3f      	ldr	r3, [pc, #252]	; (80039b0 <xQueueGenericSend+0x1f0>)
 80038b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	e00a      	b.n	80038d8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80038c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d007      	beq.n	80038d8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80038c8:	4b39      	ldr	r3, [pc, #228]	; (80039b0 <xQueueGenericSend+0x1f0>)
 80038ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80038d8:	f001 fc6e 	bl	80051b8 <vPortExitCritical>
				return pdPASS;
 80038dc:	2301      	movs	r3, #1
 80038de:	e063      	b.n	80039a8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d103      	bne.n	80038ee <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038e6:	f001 fc67 	bl	80051b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	e05c      	b.n	80039a8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d106      	bne.n	8003902 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038f4:	f107 0314 	add.w	r3, r7, #20
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 ff83 	bl	8004804 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038fe:	2301      	movs	r3, #1
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003902:	f001 fc59 	bl	80051b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003906:	f000 fd1f 	bl	8004348 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800390a:	f001 fc27 	bl	800515c <vPortEnterCritical>
 800390e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003910:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003914:	b25b      	sxtb	r3, r3
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391a:	d103      	bne.n	8003924 <xQueueGenericSend+0x164>
 800391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003926:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800392a:	b25b      	sxtb	r3, r3
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003930:	d103      	bne.n	800393a <xQueueGenericSend+0x17a>
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800393a:	f001 fc3d 	bl	80051b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800393e:	1d3a      	adds	r2, r7, #4
 8003940:	f107 0314 	add.w	r3, r7, #20
 8003944:	4611      	mov	r1, r2
 8003946:	4618      	mov	r0, r3
 8003948:	f000 ff72 	bl	8004830 <xTaskCheckForTimeOut>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d124      	bne.n	800399c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003952:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003954:	f000 fa20 	bl	8003d98 <prvIsQueueFull>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d018      	beq.n	8003990 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003960:	3310      	adds	r3, #16
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	4611      	mov	r1, r2
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fec6 	bl	80046f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800396c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800396e:	f000 f9ab 	bl	8003cc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003972:	f000 fcf7 	bl	8004364 <xTaskResumeAll>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	f47f af7c 	bne.w	8003876 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800397e:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <xQueueGenericSend+0x1f0>)
 8003980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	e772      	b.n	8003876 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003992:	f000 f999 	bl	8003cc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003996:	f000 fce5 	bl	8004364 <xTaskResumeAll>
 800399a:	e76c      	b.n	8003876 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800399c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800399e:	f000 f993 	bl	8003cc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039a2:	f000 fcdf 	bl	8004364 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80039a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3738      	adds	r7, #56	; 0x38
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	e000ed04 	.word	0xe000ed04

080039b4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08e      	sub	sp, #56	; 0x38
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80039be:	2300      	movs	r3, #0
 80039c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80039c6:	2300      	movs	r3, #0
 80039c8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d109      	bne.n	80039e4 <xQueueSemaphoreTake+0x30>
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	623b      	str	r3, [r7, #32]
 80039e2:	e7fe      	b.n	80039e2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80039e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d009      	beq.n	8003a00 <xQueueSemaphoreTake+0x4c>
 80039ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f0:	f383 8811 	msr	BASEPRI, r3
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	e7fe      	b.n	80039fe <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a00:	f001 f854 	bl	8004aac <xTaskGetSchedulerState>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d102      	bne.n	8003a10 <xQueueSemaphoreTake+0x5c>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <xQueueSemaphoreTake+0x60>
 8003a10:	2301      	movs	r3, #1
 8003a12:	e000      	b.n	8003a16 <xQueueSemaphoreTake+0x62>
 8003a14:	2300      	movs	r3, #0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <xQueueSemaphoreTake+0x7a>
 8003a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1e:	f383 8811 	msr	BASEPRI, r3
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	f3bf 8f4f 	dsb	sy
 8003a2a:	61bb      	str	r3, [r7, #24]
 8003a2c:	e7fe      	b.n	8003a2c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a2e:	f001 fb95 	bl	800515c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a36:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d024      	beq.n	8003a88 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a40:	1e5a      	subs	r2, r3, #1
 8003a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a44:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d104      	bne.n	8003a58 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003a4e:	f001 f9e7 	bl	8004e20 <pvTaskIncrementMutexHeldCount>
 8003a52:	4602      	mov	r2, r0
 8003a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a56:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00f      	beq.n	8003a80 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a62:	3310      	adds	r3, #16
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 fe6b 	bl	8004740 <xTaskRemoveFromEventList>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d007      	beq.n	8003a80 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a70:	4b53      	ldr	r3, [pc, #332]	; (8003bc0 <xQueueSemaphoreTake+0x20c>)
 8003a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a80:	f001 fb9a 	bl	80051b8 <vPortExitCritical>
				return pdPASS;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e096      	b.n	8003bb6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d110      	bne.n	8003ab0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d009      	beq.n	8003aa8 <xQueueSemaphoreTake+0xf4>
 8003a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	e7fe      	b.n	8003aa6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003aa8:	f001 fb86 	bl	80051b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003aac:	2300      	movs	r3, #0
 8003aae:	e082      	b.n	8003bb6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ab6:	f107 030c 	add.w	r3, r7, #12
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fea2 	bl	8004804 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ac4:	f001 fb78 	bl	80051b8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ac8:	f000 fc3e 	bl	8004348 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003acc:	f001 fb46 	bl	800515c <vPortEnterCritical>
 8003ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ad6:	b25b      	sxtb	r3, r3
 8003ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003adc:	d103      	bne.n	8003ae6 <xQueueSemaphoreTake+0x132>
 8003ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003aec:	b25b      	sxtb	r3, r3
 8003aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af2:	d103      	bne.n	8003afc <xQueueSemaphoreTake+0x148>
 8003af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003afc:	f001 fb5c 	bl	80051b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b00:	463a      	mov	r2, r7
 8003b02:	f107 030c 	add.w	r3, r7, #12
 8003b06:	4611      	mov	r1, r2
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 fe91 	bl	8004830 <xTaskCheckForTimeOut>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d132      	bne.n	8003b7a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b16:	f000 f929 	bl	8003d6c <prvIsQueueEmpty>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d026      	beq.n	8003b6e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d109      	bne.n	8003b3c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8003b28:	f001 fb18 	bl	800515c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 ffd9 	bl	8004ae8 <xTaskPriorityInherit>
 8003b36:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003b38:	f001 fb3e 	bl	80051b8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3e:	3324      	adds	r3, #36	; 0x24
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	4611      	mov	r1, r2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fdd7 	bl	80046f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b4c:	f000 f8bc 	bl	8003cc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b50:	f000 fc08 	bl	8004364 <xTaskResumeAll>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f47f af69 	bne.w	8003a2e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8003b5c:	4b18      	ldr	r3, [pc, #96]	; (8003bc0 <xQueueSemaphoreTake+0x20c>)
 8003b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	e75f      	b.n	8003a2e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003b6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b70:	f000 f8aa 	bl	8003cc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b74:	f000 fbf6 	bl	8004364 <xTaskResumeAll>
 8003b78:	e759      	b.n	8003a2e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003b7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b7c:	f000 f8a4 	bl	8003cc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b80:	f000 fbf0 	bl	8004364 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b86:	f000 f8f1 	bl	8003d6c <prvIsQueueEmpty>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f43f af4e 	beq.w	8003a2e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00d      	beq.n	8003bb4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8003b98:	f001 fae0 	bl	800515c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003b9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b9e:	f000 f811 	bl	8003bc4 <prvGetDisinheritPriorityAfterTimeout>
 8003ba2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003baa:	4618      	mov	r0, r3
 8003bac:	f001 f8a0 	bl	8004cf0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003bb0:	f001 fb02 	bl	80051b8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003bb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3738      	adds	r7, #56	; 0x38
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	e000ed04 	.word	0xe000ed04

08003bc4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d006      	beq.n	8003be2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f1c3 0307 	rsb	r3, r3, #7
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	e001      	b.n	8003be6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003be6:	68fb      	ldr	r3, [r7, #12]
	}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10d      	bne.n	8003c2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d14d      	bne.n	8003cb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 ffe2 	bl	8004be8 <xTaskPriorityDisinherit>
 8003c24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	609a      	str	r2, [r3, #8]
 8003c2c:	e043      	b.n	8003cb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d119      	bne.n	8003c68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6858      	ldr	r0, [r3, #4]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	f001 fd68 	bl	8005714 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	441a      	add	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d32b      	bcc.n	8003cb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	605a      	str	r2, [r3, #4]
 8003c66:	e026      	b.n	8003cb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	68d8      	ldr	r0, [r3, #12]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	461a      	mov	r2, r3
 8003c72:	68b9      	ldr	r1, [r7, #8]
 8003c74:	f001 fd4e 	bl	8005714 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	425b      	negs	r3, r3
 8003c82:	441a      	add	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d207      	bcs.n	8003ca4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	425b      	negs	r3, r3
 8003c9e:	441a      	add	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d105      	bne.n	8003cb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003cbe:	697b      	ldr	r3, [r7, #20]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003cd0:	f001 fa44 	bl	800515c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cdc:	e011      	b.n	8003d02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d012      	beq.n	8003d0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3324      	adds	r3, #36	; 0x24
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fd28 	bl	8004740 <xTaskRemoveFromEventList>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003cf6:	f000 fdfb 	bl	80048f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	dce9      	bgt.n	8003cde <prvUnlockQueue+0x16>
 8003d0a:	e000      	b.n	8003d0e <prvUnlockQueue+0x46>
					break;
 8003d0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	22ff      	movs	r2, #255	; 0xff
 8003d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003d16:	f001 fa4f 	bl	80051b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d1a:	f001 fa1f 	bl	800515c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d26:	e011      	b.n	8003d4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d012      	beq.n	8003d56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3310      	adds	r3, #16
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 fd03 	bl	8004740 <xTaskRemoveFromEventList>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d40:	f000 fdd6 	bl	80048f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d44:	7bbb      	ldrb	r3, [r7, #14]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	dce9      	bgt.n	8003d28 <prvUnlockQueue+0x60>
 8003d54:	e000      	b.n	8003d58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	22ff      	movs	r2, #255	; 0xff
 8003d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003d60:	f001 fa2a 	bl	80051b8 <vPortExitCritical>
}
 8003d64:	bf00      	nop
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d74:	f001 f9f2 	bl	800515c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d102      	bne.n	8003d86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d80:	2301      	movs	r3, #1
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	e001      	b.n	8003d8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d8a:	f001 fa15 	bl	80051b8 <vPortExitCritical>

	return xReturn;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003da0:	f001 f9dc 	bl	800515c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d102      	bne.n	8003db6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003db0:	2301      	movs	r3, #1
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	e001      	b.n	8003dba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003dba:	f001 f9fd 	bl	80051b8 <vPortExitCritical>

	return xReturn;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08e      	sub	sp, #56	; 0x38
 8003dcc:	af04      	add	r7, sp, #16
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d109      	bne.n	8003df0 <xTaskCreateStatic+0x28>
 8003ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	623b      	str	r3, [r7, #32]
 8003dee:	e7fe      	b.n	8003dee <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d109      	bne.n	8003e0a <xTaskCreateStatic+0x42>
 8003df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	61fb      	str	r3, [r7, #28]
 8003e08:	e7fe      	b.n	8003e08 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e0a:	2360      	movs	r3, #96	; 0x60
 8003e0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b60      	cmp	r3, #96	; 0x60
 8003e12:	d009      	beq.n	8003e28 <xTaskCreateStatic+0x60>
 8003e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e18:	f383 8811 	msr	BASEPRI, r3
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	e7fe      	b.n	8003e26 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e28:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d01e      	beq.n	8003e6e <xTaskCreateStatic+0xa6>
 8003e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d01b      	beq.n	8003e6e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e48:	2300      	movs	r3, #0
 8003e4a:	9303      	str	r3, [sp, #12]
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	9302      	str	r3, [sp, #8]
 8003e50:	f107 0314 	add.w	r3, r7, #20
 8003e54:	9301      	str	r3, [sp, #4]
 8003e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	68b9      	ldr	r1, [r7, #8]
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 f850 	bl	8003f06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e68:	f000 f8de 	bl	8004028 <prvAddNewTaskToReadyList>
 8003e6c:	e001      	b.n	8003e72 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e72:	697b      	ldr	r3, [r7, #20]
	}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3728      	adds	r7, #40	; 0x28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08c      	sub	sp, #48	; 0x30
 8003e80:	af04      	add	r7, sp, #16
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e8c:	88fb      	ldrh	r3, [r7, #6]
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 fa3f 	bl	8005314 <pvPortMalloc>
 8003e96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00e      	beq.n	8003ebc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e9e:	2060      	movs	r0, #96	; 0x60
 8003ea0:	f001 fa38 	bl	8005314 <pvPortMalloc>
 8003ea4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	631a      	str	r2, [r3, #48]	; 0x30
 8003eb2:	e005      	b.n	8003ec0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003eb4:	6978      	ldr	r0, [r7, #20]
 8003eb6:	f001 faef 	bl	8005498 <vPortFree>
 8003eba:	e001      	b.n	8003ec0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d017      	beq.n	8003ef6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ece:	88fa      	ldrh	r2, [r7, #6]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	9303      	str	r3, [sp, #12]
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	9302      	str	r3, [sp, #8]
 8003ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	68b9      	ldr	r1, [r7, #8]
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 f80e 	bl	8003f06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003eea:	69f8      	ldr	r0, [r7, #28]
 8003eec:	f000 f89c 	bl	8004028 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	61bb      	str	r3, [r7, #24]
 8003ef4:	e002      	b.n	8003efc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8003efa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003efc:	69bb      	ldr	r3, [r7, #24]
	}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3720      	adds	r7, #32
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b088      	sub	sp, #32
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	60f8      	str	r0, [r7, #12]
 8003f0e:	60b9      	str	r1, [r7, #8]
 8003f10:	607a      	str	r2, [r7, #4]
 8003f12:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	21a5      	movs	r1, #165	; 0xa5
 8003f20:	f001 fc03 	bl	800572a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	f023 0307 	bic.w	r3, r3, #7
 8003f3c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d009      	beq.n	8003f5c <prvInitialiseNewTask+0x56>
 8003f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	e7fe      	b.n	8003f5a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d01f      	beq.n	8003fa2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
 8003f66:	e012      	b.n	8003f8e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	7819      	ldrb	r1, [r3, #0]
 8003f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	4413      	add	r3, r2
 8003f76:	3334      	adds	r3, #52	; 0x34
 8003f78:	460a      	mov	r2, r1
 8003f7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	4413      	add	r3, r2
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d006      	beq.n	8003f96 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	61fb      	str	r3, [r7, #28]
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	2b0f      	cmp	r3, #15
 8003f92:	d9e9      	bls.n	8003f68 <prvInitialiseNewTask+0x62>
 8003f94:	e000      	b.n	8003f98 <prvInitialiseNewTask+0x92>
			{
				break;
 8003f96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fa0:	e003      	b.n	8003faa <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fac:	2b06      	cmp	r3, #6
 8003fae:	d901      	bls.n	8003fb4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003fb0:	2306      	movs	r3, #6
 8003fb2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fb8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fbe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc8:	3304      	adds	r3, #4
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff fa67 	bl	800349e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	3318      	adds	r3, #24
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff fa62 	bl	800349e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe2:	f1c3 0207 	rsb	r2, r3, #7
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	68f9      	ldr	r1, [r7, #12]
 8004008:	69b8      	ldr	r0, [r7, #24]
 800400a:	f000 ff83 	bl	8004f14 <pxPortInitialiseStack>
 800400e:	4602      	mov	r2, r0
 8004010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004012:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800401a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800401e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004020:	bf00      	nop
 8004022:	3720      	adds	r7, #32
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004030:	f001 f894 	bl	800515c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004034:	4b2c      	ldr	r3, [pc, #176]	; (80040e8 <prvAddNewTaskToReadyList+0xc0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3301      	adds	r3, #1
 800403a:	4a2b      	ldr	r2, [pc, #172]	; (80040e8 <prvAddNewTaskToReadyList+0xc0>)
 800403c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800403e:	4b2b      	ldr	r3, [pc, #172]	; (80040ec <prvAddNewTaskToReadyList+0xc4>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d109      	bne.n	800405a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004046:	4a29      	ldr	r2, [pc, #164]	; (80040ec <prvAddNewTaskToReadyList+0xc4>)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800404c:	4b26      	ldr	r3, [pc, #152]	; (80040e8 <prvAddNewTaskToReadyList+0xc0>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d110      	bne.n	8004076 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004054:	f000 fc70 	bl	8004938 <prvInitialiseTaskLists>
 8004058:	e00d      	b.n	8004076 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800405a:	4b25      	ldr	r3, [pc, #148]	; (80040f0 <prvAddNewTaskToReadyList+0xc8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d109      	bne.n	8004076 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004062:	4b22      	ldr	r3, [pc, #136]	; (80040ec <prvAddNewTaskToReadyList+0xc4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	429a      	cmp	r2, r3
 800406e:	d802      	bhi.n	8004076 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004070:	4a1e      	ldr	r2, [pc, #120]	; (80040ec <prvAddNewTaskToReadyList+0xc4>)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004076:	4b1f      	ldr	r3, [pc, #124]	; (80040f4 <prvAddNewTaskToReadyList+0xcc>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3301      	adds	r3, #1
 800407c:	4a1d      	ldr	r2, [pc, #116]	; (80040f4 <prvAddNewTaskToReadyList+0xcc>)
 800407e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004080:	4b1c      	ldr	r3, [pc, #112]	; (80040f4 <prvAddNewTaskToReadyList+0xcc>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408c:	2201      	movs	r2, #1
 800408e:	409a      	lsls	r2, r3
 8004090:	4b19      	ldr	r3, [pc, #100]	; (80040f8 <prvAddNewTaskToReadyList+0xd0>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4313      	orrs	r3, r2
 8004096:	4a18      	ldr	r2, [pc, #96]	; (80040f8 <prvAddNewTaskToReadyList+0xd0>)
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4a15      	ldr	r2, [pc, #84]	; (80040fc <prvAddNewTaskToReadyList+0xd4>)
 80040a8:	441a      	add	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3304      	adds	r3, #4
 80040ae:	4619      	mov	r1, r3
 80040b0:	4610      	mov	r0, r2
 80040b2:	f7ff fa01 	bl	80034b8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040b6:	f001 f87f 	bl	80051b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040ba:	4b0d      	ldr	r3, [pc, #52]	; (80040f0 <prvAddNewTaskToReadyList+0xc8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00e      	beq.n	80040e0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040c2:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <prvAddNewTaskToReadyList+0xc4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d207      	bcs.n	80040e0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80040d0:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <prvAddNewTaskToReadyList+0xd8>)
 80040d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040e0:	bf00      	nop
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	200007b0 	.word	0x200007b0
 80040ec:	200006b0 	.word	0x200006b0
 80040f0:	200007bc 	.word	0x200007bc
 80040f4:	200007cc 	.word	0x200007cc
 80040f8:	200007b8 	.word	0x200007b8
 80040fc:	200006b4 	.word	0x200006b4
 8004100:	e000ed04 	.word	0xe000ed04

08004104 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800410c:	f001 f826 	bl	800515c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d102      	bne.n	800411c <vTaskDelete+0x18>
 8004116:	4b38      	ldr	r3, [pc, #224]	; (80041f8 <vTaskDelete+0xf4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	e000      	b.n	800411e <vTaskDelete+0x1a>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3304      	adds	r3, #4
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff fa24 	bl	8003572 <uxListRemove>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d115      	bne.n	800415c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004134:	4931      	ldr	r1, [pc, #196]	; (80041fc <vTaskDelete+0xf8>)
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10a      	bne.n	800415c <vTaskDelete+0x58>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414a:	2201      	movs	r2, #1
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	43da      	mvns	r2, r3
 8004152:	4b2b      	ldr	r3, [pc, #172]	; (8004200 <vTaskDelete+0xfc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4013      	ands	r3, r2
 8004158:	4a29      	ldr	r2, [pc, #164]	; (8004200 <vTaskDelete+0xfc>)
 800415a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004160:	2b00      	cmp	r3, #0
 8004162:	d004      	beq.n	800416e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	3318      	adds	r3, #24
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff fa02 	bl	8003572 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800416e:	4b25      	ldr	r3, [pc, #148]	; (8004204 <vTaskDelete+0x100>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3301      	adds	r3, #1
 8004174:	4a23      	ldr	r2, [pc, #140]	; (8004204 <vTaskDelete+0x100>)
 8004176:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004178:	4b1f      	ldr	r3, [pc, #124]	; (80041f8 <vTaskDelete+0xf4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	429a      	cmp	r2, r3
 8004180:	d10b      	bne.n	800419a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	3304      	adds	r3, #4
 8004186:	4619      	mov	r1, r3
 8004188:	481f      	ldr	r0, [pc, #124]	; (8004208 <vTaskDelete+0x104>)
 800418a:	f7ff f995 	bl	80034b8 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800418e:	4b1f      	ldr	r3, [pc, #124]	; (800420c <vTaskDelete+0x108>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3301      	adds	r3, #1
 8004194:	4a1d      	ldr	r2, [pc, #116]	; (800420c <vTaskDelete+0x108>)
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	e009      	b.n	80041ae <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800419a:	4b1d      	ldr	r3, [pc, #116]	; (8004210 <vTaskDelete+0x10c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3b01      	subs	r3, #1
 80041a0:	4a1b      	ldr	r2, [pc, #108]	; (8004210 <vTaskDelete+0x10c>)
 80041a2:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 fc33 	bl	8004a10 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80041aa:	f000 fc5f 	bl	8004a6c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80041ae:	f001 f803 	bl	80051b8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80041b2:	4b18      	ldr	r3, [pc, #96]	; (8004214 <vTaskDelete+0x110>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d01a      	beq.n	80041f0 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 80041ba:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <vTaskDelete+0xf4>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d115      	bne.n	80041f0 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80041c4:	4b14      	ldr	r3, [pc, #80]	; (8004218 <vTaskDelete+0x114>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d009      	beq.n	80041e0 <vTaskDelete+0xdc>
 80041cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d0:	f383 8811 	msr	BASEPRI, r3
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	60bb      	str	r3, [r7, #8]
 80041de:	e7fe      	b.n	80041de <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 80041e0:	4b0e      	ldr	r3, [pc, #56]	; (800421c <vTaskDelete+0x118>)
 80041e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80041f0:	bf00      	nop
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	200006b0 	.word	0x200006b0
 80041fc:	200006b4 	.word	0x200006b4
 8004200:	200007b8 	.word	0x200007b8
 8004204:	200007cc 	.word	0x200007cc
 8004208:	20000784 	.word	0x20000784
 800420c:	20000798 	.word	0x20000798
 8004210:	200007b0 	.word	0x200007b0
 8004214:	200007bc 	.word	0x200007bc
 8004218:	200007d8 	.word	0x200007d8
 800421c:	e000ed04 	.word	0xe000ed04

08004220 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004228:	2300      	movs	r3, #0
 800422a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d016      	beq.n	8004260 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004232:	4b13      	ldr	r3, [pc, #76]	; (8004280 <vTaskDelay+0x60>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d009      	beq.n	800424e <vTaskDelay+0x2e>
 800423a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423e:	f383 8811 	msr	BASEPRI, r3
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	60bb      	str	r3, [r7, #8]
 800424c:	e7fe      	b.n	800424c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800424e:	f000 f87b 	bl	8004348 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004252:	2100      	movs	r1, #0
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fdf7 	bl	8004e48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800425a:	f000 f883 	bl	8004364 <xTaskResumeAll>
 800425e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d107      	bne.n	8004276 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004266:	4b07      	ldr	r3, [pc, #28]	; (8004284 <vTaskDelay+0x64>)
 8004268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004276:	bf00      	nop
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	200007d8 	.word	0x200007d8
 8004284:	e000ed04 	.word	0xe000ed04

08004288 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08a      	sub	sp, #40	; 0x28
 800428c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800428e:	2300      	movs	r3, #0
 8004290:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004292:	2300      	movs	r3, #0
 8004294:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004296:	463a      	mov	r2, r7
 8004298:	1d39      	adds	r1, r7, #4
 800429a:	f107 0308 	add.w	r3, r7, #8
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fc f976 	bl	8000590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80042a4:	6839      	ldr	r1, [r7, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	9202      	str	r2, [sp, #8]
 80042ac:	9301      	str	r3, [sp, #4]
 80042ae:	2300      	movs	r3, #0
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	2300      	movs	r3, #0
 80042b4:	460a      	mov	r2, r1
 80042b6:	491e      	ldr	r1, [pc, #120]	; (8004330 <vTaskStartScheduler+0xa8>)
 80042b8:	481e      	ldr	r0, [pc, #120]	; (8004334 <vTaskStartScheduler+0xac>)
 80042ba:	f7ff fd85 	bl	8003dc8 <xTaskCreateStatic>
 80042be:	4602      	mov	r2, r0
 80042c0:	4b1d      	ldr	r3, [pc, #116]	; (8004338 <vTaskStartScheduler+0xb0>)
 80042c2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042c4:	4b1c      	ldr	r3, [pc, #112]	; (8004338 <vTaskStartScheduler+0xb0>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042cc:	2301      	movs	r3, #1
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	e001      	b.n	80042d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d117      	bne.n	800430c <vTaskStartScheduler+0x84>
 80042dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042ee:	4b13      	ldr	r3, [pc, #76]	; (800433c <vTaskStartScheduler+0xb4>)
 80042f0:	f04f 32ff 	mov.w	r2, #4294967295
 80042f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042f6:	4b12      	ldr	r3, [pc, #72]	; (8004340 <vTaskStartScheduler+0xb8>)
 80042f8:	2201      	movs	r2, #1
 80042fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80042fc:	4b11      	ldr	r3, [pc, #68]	; (8004344 <vTaskStartScheduler+0xbc>)
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8004302:	f7fc f935 	bl	8000570 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004306:	f000 fe8b 	bl	8005020 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800430a:	e00d      	b.n	8004328 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004312:	d109      	bne.n	8004328 <vTaskStartScheduler+0xa0>
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	e7fe      	b.n	8004326 <vTaskStartScheduler+0x9e>
}
 8004328:	bf00      	nop
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	08006638 	.word	0x08006638
 8004334:	08004909 	.word	0x08004909
 8004338:	200007d4 	.word	0x200007d4
 800433c:	200007d0 	.word	0x200007d0
 8004340:	200007bc 	.word	0x200007bc
 8004344:	200007b4 	.word	0x200007b4

08004348 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <vTaskSuspendAll+0x18>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3301      	adds	r3, #1
 8004352:	4a03      	ldr	r2, [pc, #12]	; (8004360 <vTaskSuspendAll+0x18>)
 8004354:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004356:	bf00      	nop
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	200007d8 	.word	0x200007d8

08004364 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800436e:	2300      	movs	r3, #0
 8004370:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004372:	4b41      	ldr	r3, [pc, #260]	; (8004478 <xTaskResumeAll+0x114>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <xTaskResumeAll+0x2a>
 800437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	e7fe      	b.n	800438c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800438e:	f000 fee5 	bl	800515c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004392:	4b39      	ldr	r3, [pc, #228]	; (8004478 <xTaskResumeAll+0x114>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3b01      	subs	r3, #1
 8004398:	4a37      	ldr	r2, [pc, #220]	; (8004478 <xTaskResumeAll+0x114>)
 800439a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800439c:	4b36      	ldr	r3, [pc, #216]	; (8004478 <xTaskResumeAll+0x114>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d161      	bne.n	8004468 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043a4:	4b35      	ldr	r3, [pc, #212]	; (800447c <xTaskResumeAll+0x118>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d05d      	beq.n	8004468 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043ac:	e02e      	b.n	800440c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ae:	4b34      	ldr	r3, [pc, #208]	; (8004480 <xTaskResumeAll+0x11c>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	3318      	adds	r3, #24
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff f8d9 	bl	8003572 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	3304      	adds	r3, #4
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff f8d4 	bl	8003572 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ce:	2201      	movs	r2, #1
 80043d0:	409a      	lsls	r2, r3
 80043d2:	4b2c      	ldr	r3, [pc, #176]	; (8004484 <xTaskResumeAll+0x120>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	4a2a      	ldr	r2, [pc, #168]	; (8004484 <xTaskResumeAll+0x120>)
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e0:	4613      	mov	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4a27      	ldr	r2, [pc, #156]	; (8004488 <xTaskResumeAll+0x124>)
 80043ea:	441a      	add	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	3304      	adds	r3, #4
 80043f0:	4619      	mov	r1, r3
 80043f2:	4610      	mov	r0, r2
 80043f4:	f7ff f860 	bl	80034b8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fc:	4b23      	ldr	r3, [pc, #140]	; (800448c <xTaskResumeAll+0x128>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	429a      	cmp	r2, r3
 8004404:	d302      	bcc.n	800440c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004406:	4b22      	ldr	r3, [pc, #136]	; (8004490 <xTaskResumeAll+0x12c>)
 8004408:	2201      	movs	r2, #1
 800440a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800440c:	4b1c      	ldr	r3, [pc, #112]	; (8004480 <xTaskResumeAll+0x11c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1cc      	bne.n	80043ae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800441a:	f000 fb27 	bl	8004a6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800441e:	4b1d      	ldr	r3, [pc, #116]	; (8004494 <xTaskResumeAll+0x130>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d010      	beq.n	800444c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800442a:	f000 f837 	bl	800449c <xTaskIncrementTick>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004434:	4b16      	ldr	r3, [pc, #88]	; (8004490 <xTaskResumeAll+0x12c>)
 8004436:	2201      	movs	r2, #1
 8004438:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3b01      	subs	r3, #1
 800443e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f1      	bne.n	800442a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004446:	4b13      	ldr	r3, [pc, #76]	; (8004494 <xTaskResumeAll+0x130>)
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800444c:	4b10      	ldr	r3, [pc, #64]	; (8004490 <xTaskResumeAll+0x12c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d009      	beq.n	8004468 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004454:	2301      	movs	r3, #1
 8004456:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004458:	4b0f      	ldr	r3, [pc, #60]	; (8004498 <xTaskResumeAll+0x134>)
 800445a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004468:	f000 fea6 	bl	80051b8 <vPortExitCritical>

	return xAlreadyYielded;
 800446c:	68bb      	ldr	r3, [r7, #8]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	200007d8 	.word	0x200007d8
 800447c:	200007b0 	.word	0x200007b0
 8004480:	20000770 	.word	0x20000770
 8004484:	200007b8 	.word	0x200007b8
 8004488:	200006b4 	.word	0x200006b4
 800448c:	200006b0 	.word	0x200006b0
 8004490:	200007c4 	.word	0x200007c4
 8004494:	200007c0 	.word	0x200007c0
 8004498:	e000ed04 	.word	0xe000ed04

0800449c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044a6:	4b4e      	ldr	r3, [pc, #312]	; (80045e0 <xTaskIncrementTick+0x144>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f040 8087 	bne.w	80045be <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044b0:	4b4c      	ldr	r3, [pc, #304]	; (80045e4 <xTaskIncrementTick+0x148>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3301      	adds	r3, #1
 80044b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044b8:	4a4a      	ldr	r2, [pc, #296]	; (80045e4 <xTaskIncrementTick+0x148>)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d11f      	bne.n	8004504 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80044c4:	4b48      	ldr	r3, [pc, #288]	; (80045e8 <xTaskIncrementTick+0x14c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d009      	beq.n	80044e2 <xTaskIncrementTick+0x46>
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	603b      	str	r3, [r7, #0]
 80044e0:	e7fe      	b.n	80044e0 <xTaskIncrementTick+0x44>
 80044e2:	4b41      	ldr	r3, [pc, #260]	; (80045e8 <xTaskIncrementTick+0x14c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	4b40      	ldr	r3, [pc, #256]	; (80045ec <xTaskIncrementTick+0x150>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a3e      	ldr	r2, [pc, #248]	; (80045e8 <xTaskIncrementTick+0x14c>)
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	4a3e      	ldr	r2, [pc, #248]	; (80045ec <xTaskIncrementTick+0x150>)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	4b3e      	ldr	r3, [pc, #248]	; (80045f0 <xTaskIncrementTick+0x154>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3301      	adds	r3, #1
 80044fc:	4a3c      	ldr	r2, [pc, #240]	; (80045f0 <xTaskIncrementTick+0x154>)
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	f000 fab4 	bl	8004a6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004504:	4b3b      	ldr	r3, [pc, #236]	; (80045f4 <xTaskIncrementTick+0x158>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	429a      	cmp	r2, r3
 800450c:	d348      	bcc.n	80045a0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800450e:	4b36      	ldr	r3, [pc, #216]	; (80045e8 <xTaskIncrementTick+0x14c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d104      	bne.n	8004522 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004518:	4b36      	ldr	r3, [pc, #216]	; (80045f4 <xTaskIncrementTick+0x158>)
 800451a:	f04f 32ff 	mov.w	r2, #4294967295
 800451e:	601a      	str	r2, [r3, #0]
					break;
 8004520:	e03e      	b.n	80045a0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004522:	4b31      	ldr	r3, [pc, #196]	; (80045e8 <xTaskIncrementTick+0x14c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	429a      	cmp	r2, r3
 8004538:	d203      	bcs.n	8004542 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800453a:	4a2e      	ldr	r2, [pc, #184]	; (80045f4 <xTaskIncrementTick+0x158>)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004540:	e02e      	b.n	80045a0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	3304      	adds	r3, #4
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff f813 	bl	8003572 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004550:	2b00      	cmp	r3, #0
 8004552:	d004      	beq.n	800455e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	3318      	adds	r3, #24
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff f80a 	bl	8003572 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004562:	2201      	movs	r2, #1
 8004564:	409a      	lsls	r2, r3
 8004566:	4b24      	ldr	r3, [pc, #144]	; (80045f8 <xTaskIncrementTick+0x15c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4313      	orrs	r3, r2
 800456c:	4a22      	ldr	r2, [pc, #136]	; (80045f8 <xTaskIncrementTick+0x15c>)
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4a1f      	ldr	r2, [pc, #124]	; (80045fc <xTaskIncrementTick+0x160>)
 800457e:	441a      	add	r2, r3
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	3304      	adds	r3, #4
 8004584:	4619      	mov	r1, r3
 8004586:	4610      	mov	r0, r2
 8004588:	f7fe ff96 	bl	80034b8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004590:	4b1b      	ldr	r3, [pc, #108]	; (8004600 <xTaskIncrementTick+0x164>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	429a      	cmp	r2, r3
 8004598:	d3b9      	bcc.n	800450e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800459a:	2301      	movs	r3, #1
 800459c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800459e:	e7b6      	b.n	800450e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045a0:	4b17      	ldr	r3, [pc, #92]	; (8004600 <xTaskIncrementTick+0x164>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a6:	4915      	ldr	r1, [pc, #84]	; (80045fc <xTaskIncrementTick+0x160>)
 80045a8:	4613      	mov	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d907      	bls.n	80045c8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80045b8:	2301      	movs	r3, #1
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	e004      	b.n	80045c8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80045be:	4b11      	ldr	r3, [pc, #68]	; (8004604 <xTaskIncrementTick+0x168>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3301      	adds	r3, #1
 80045c4:	4a0f      	ldr	r2, [pc, #60]	; (8004604 <xTaskIncrementTick+0x168>)
 80045c6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80045c8:	4b0f      	ldr	r3, [pc, #60]	; (8004608 <xTaskIncrementTick+0x16c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80045d0:	2301      	movs	r3, #1
 80045d2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80045d4:	697b      	ldr	r3, [r7, #20]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	200007d8 	.word	0x200007d8
 80045e4:	200007b4 	.word	0x200007b4
 80045e8:	20000768 	.word	0x20000768
 80045ec:	2000076c 	.word	0x2000076c
 80045f0:	200007c8 	.word	0x200007c8
 80045f4:	200007d0 	.word	0x200007d0
 80045f8:	200007b8 	.word	0x200007b8
 80045fc:	200006b4 	.word	0x200006b4
 8004600:	200006b0 	.word	0x200006b0
 8004604:	200007c0 	.word	0x200007c0
 8004608:	200007c4 	.word	0x200007c4

0800460c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004612:	4b32      	ldr	r3, [pc, #200]	; (80046dc <vTaskSwitchContext+0xd0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800461a:	4b31      	ldr	r3, [pc, #196]	; (80046e0 <vTaskSwitchContext+0xd4>)
 800461c:	2201      	movs	r2, #1
 800461e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004620:	e057      	b.n	80046d2 <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 8004622:	4b2f      	ldr	r3, [pc, #188]	; (80046e0 <vTaskSwitchContext+0xd4>)
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004628:	f7fb ffa9 	bl	800057e <getRunTimeCounterValue>
 800462c:	4602      	mov	r2, r0
 800462e:	4b2d      	ldr	r3, [pc, #180]	; (80046e4 <vTaskSwitchContext+0xd8>)
 8004630:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004632:	4b2c      	ldr	r3, [pc, #176]	; (80046e4 <vTaskSwitchContext+0xd8>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4b2c      	ldr	r3, [pc, #176]	; (80046e8 <vTaskSwitchContext+0xdc>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	d909      	bls.n	8004652 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800463e:	4b2b      	ldr	r3, [pc, #172]	; (80046ec <vTaskSwitchContext+0xe0>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004644:	4a27      	ldr	r2, [pc, #156]	; (80046e4 <vTaskSwitchContext+0xd8>)
 8004646:	6810      	ldr	r0, [r2, #0]
 8004648:	4a27      	ldr	r2, [pc, #156]	; (80046e8 <vTaskSwitchContext+0xdc>)
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	1a82      	subs	r2, r0, r2
 800464e:	440a      	add	r2, r1
 8004650:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8004652:	4b24      	ldr	r3, [pc, #144]	; (80046e4 <vTaskSwitchContext+0xd8>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a24      	ldr	r2, [pc, #144]	; (80046e8 <vTaskSwitchContext+0xdc>)
 8004658:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800465a:	4b25      	ldr	r3, [pc, #148]	; (80046f0 <vTaskSwitchContext+0xe4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	fab3 f383 	clz	r3, r3
 8004666:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004668:	7afb      	ldrb	r3, [r7, #11]
 800466a:	f1c3 031f 	rsb	r3, r3, #31
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	4920      	ldr	r1, [pc, #128]	; (80046f4 <vTaskSwitchContext+0xe8>)
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d109      	bne.n	8004698 <vTaskSwitchContext+0x8c>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	607b      	str	r3, [r7, #4]
 8004696:	e7fe      	b.n	8004696 <vTaskSwitchContext+0x8a>
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4a14      	ldr	r2, [pc, #80]	; (80046f4 <vTaskSwitchContext+0xe8>)
 80046a4:	4413      	add	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	605a      	str	r2, [r3, #4]
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	3308      	adds	r3, #8
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d104      	bne.n	80046c8 <vTaskSwitchContext+0xbc>
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	605a      	str	r2, [r3, #4]
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	4a07      	ldr	r2, [pc, #28]	; (80046ec <vTaskSwitchContext+0xe0>)
 80046d0:	6013      	str	r3, [r2, #0]
}
 80046d2:	bf00      	nop
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	200007d8 	.word	0x200007d8
 80046e0:	200007c4 	.word	0x200007c4
 80046e4:	200007e0 	.word	0x200007e0
 80046e8:	200007dc 	.word	0x200007dc
 80046ec:	200006b0 	.word	0x200006b0
 80046f0:	200007b8 	.word	0x200007b8
 80046f4:	200006b4 	.word	0x200006b4

080046f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d109      	bne.n	800471c <vTaskPlaceOnEventList+0x24>
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	e7fe      	b.n	800471a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800471c:	4b07      	ldr	r3, [pc, #28]	; (800473c <vTaskPlaceOnEventList+0x44>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3318      	adds	r3, #24
 8004722:	4619      	mov	r1, r3
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7fe feeb 	bl	8003500 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800472a:	2101      	movs	r1, #1
 800472c:	6838      	ldr	r0, [r7, #0]
 800472e:	f000 fb8b 	bl	8004e48 <prvAddCurrentTaskToDelayedList>
}
 8004732:	bf00      	nop
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	200006b0 	.word	0x200006b0

08004740 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <xTaskRemoveFromEventList+0x2a>
 8004756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	e7fe      	b.n	8004768 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	3318      	adds	r3, #24
 800476e:	4618      	mov	r0, r3
 8004770:	f7fe feff 	bl	8003572 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004774:	4b1d      	ldr	r3, [pc, #116]	; (80047ec <xTaskRemoveFromEventList+0xac>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d11c      	bne.n	80047b6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	3304      	adds	r3, #4
 8004780:	4618      	mov	r0, r3
 8004782:	f7fe fef6 	bl	8003572 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	2201      	movs	r2, #1
 800478c:	409a      	lsls	r2, r3
 800478e:	4b18      	ldr	r3, [pc, #96]	; (80047f0 <xTaskRemoveFromEventList+0xb0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4313      	orrs	r3, r2
 8004794:	4a16      	ldr	r2, [pc, #88]	; (80047f0 <xTaskRemoveFromEventList+0xb0>)
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479c:	4613      	mov	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4a13      	ldr	r2, [pc, #76]	; (80047f4 <xTaskRemoveFromEventList+0xb4>)
 80047a6:	441a      	add	r2, r3
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	3304      	adds	r3, #4
 80047ac:	4619      	mov	r1, r3
 80047ae:	4610      	mov	r0, r2
 80047b0:	f7fe fe82 	bl	80034b8 <vListInsertEnd>
 80047b4:	e005      	b.n	80047c2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	3318      	adds	r3, #24
 80047ba:	4619      	mov	r1, r3
 80047bc:	480e      	ldr	r0, [pc, #56]	; (80047f8 <xTaskRemoveFromEventList+0xb8>)
 80047be:	f7fe fe7b 	bl	80034b8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c6:	4b0d      	ldr	r3, [pc, #52]	; (80047fc <xTaskRemoveFromEventList+0xbc>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d905      	bls.n	80047dc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047d0:	2301      	movs	r3, #1
 80047d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047d4:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <xTaskRemoveFromEventList+0xc0>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	e001      	b.n	80047e0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80047e0:	697b      	ldr	r3, [r7, #20]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	200007d8 	.word	0x200007d8
 80047f0:	200007b8 	.word	0x200007b8
 80047f4:	200006b4 	.word	0x200006b4
 80047f8:	20000770 	.word	0x20000770
 80047fc:	200006b0 	.word	0x200006b0
 8004800:	200007c4 	.word	0x200007c4

08004804 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800480c:	4b06      	ldr	r3, [pc, #24]	; (8004828 <vTaskInternalSetTimeOutState+0x24>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004814:	4b05      	ldr	r3, [pc, #20]	; (800482c <vTaskInternalSetTimeOutState+0x28>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	605a      	str	r2, [r3, #4]
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	200007c8 	.word	0x200007c8
 800482c:	200007b4 	.word	0x200007b4

08004830 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d109      	bne.n	8004854 <xTaskCheckForTimeOut+0x24>
 8004840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	e7fe      	b.n	8004852 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d109      	bne.n	800486e <xTaskCheckForTimeOut+0x3e>
 800485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	e7fe      	b.n	800486c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800486e:	f000 fc75 	bl	800515c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004872:	4b1d      	ldr	r3, [pc, #116]	; (80048e8 <xTaskCheckForTimeOut+0xb8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488a:	d102      	bne.n	8004892 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800488c:	2300      	movs	r3, #0
 800488e:	61fb      	str	r3, [r7, #28]
 8004890:	e023      	b.n	80048da <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	4b15      	ldr	r3, [pc, #84]	; (80048ec <xTaskCheckForTimeOut+0xbc>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d007      	beq.n	80048ae <xTaskCheckForTimeOut+0x7e>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d302      	bcc.n	80048ae <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80048a8:	2301      	movs	r3, #1
 80048aa:	61fb      	str	r3, [r7, #28]
 80048ac:	e015      	b.n	80048da <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d20b      	bcs.n	80048d0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	1ad2      	subs	r2, r2, r3
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff ff9d 	bl	8004804 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048ca:	2300      	movs	r3, #0
 80048cc:	61fb      	str	r3, [r7, #28]
 80048ce:	e004      	b.n	80048da <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048d6:	2301      	movs	r3, #1
 80048d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048da:	f000 fc6d 	bl	80051b8 <vPortExitCritical>

	return xReturn;
 80048de:	69fb      	ldr	r3, [r7, #28]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3720      	adds	r7, #32
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	200007b4 	.word	0x200007b4
 80048ec:	200007c8 	.word	0x200007c8

080048f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048f4:	4b03      	ldr	r3, [pc, #12]	; (8004904 <vTaskMissedYield+0x14>)
 80048f6:	2201      	movs	r2, #1
 80048f8:	601a      	str	r2, [r3, #0]
}
 80048fa:	bf00      	nop
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	200007c4 	.word	0x200007c4

08004908 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004910:	f000 f852 	bl	80049b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004914:	4b06      	ldr	r3, [pc, #24]	; (8004930 <prvIdleTask+0x28>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d9f9      	bls.n	8004910 <prvIdleTask+0x8>
			{
				taskYIELD();
 800491c:	4b05      	ldr	r3, [pc, #20]	; (8004934 <prvIdleTask+0x2c>)
 800491e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800492c:	e7f0      	b.n	8004910 <prvIdleTask+0x8>
 800492e:	bf00      	nop
 8004930:	200006b4 	.word	0x200006b4
 8004934:	e000ed04 	.word	0xe000ed04

08004938 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800493e:	2300      	movs	r3, #0
 8004940:	607b      	str	r3, [r7, #4]
 8004942:	e00c      	b.n	800495e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	4613      	mov	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4a12      	ldr	r2, [pc, #72]	; (8004998 <prvInitialiseTaskLists+0x60>)
 8004950:	4413      	add	r3, r2
 8004952:	4618      	mov	r0, r3
 8004954:	f7fe fd83 	bl	800345e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3301      	adds	r3, #1
 800495c:	607b      	str	r3, [r7, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b06      	cmp	r3, #6
 8004962:	d9ef      	bls.n	8004944 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004964:	480d      	ldr	r0, [pc, #52]	; (800499c <prvInitialiseTaskLists+0x64>)
 8004966:	f7fe fd7a 	bl	800345e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800496a:	480d      	ldr	r0, [pc, #52]	; (80049a0 <prvInitialiseTaskLists+0x68>)
 800496c:	f7fe fd77 	bl	800345e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004970:	480c      	ldr	r0, [pc, #48]	; (80049a4 <prvInitialiseTaskLists+0x6c>)
 8004972:	f7fe fd74 	bl	800345e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004976:	480c      	ldr	r0, [pc, #48]	; (80049a8 <prvInitialiseTaskLists+0x70>)
 8004978:	f7fe fd71 	bl	800345e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800497c:	480b      	ldr	r0, [pc, #44]	; (80049ac <prvInitialiseTaskLists+0x74>)
 800497e:	f7fe fd6e 	bl	800345e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004982:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <prvInitialiseTaskLists+0x78>)
 8004984:	4a05      	ldr	r2, [pc, #20]	; (800499c <prvInitialiseTaskLists+0x64>)
 8004986:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004988:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <prvInitialiseTaskLists+0x7c>)
 800498a:	4a05      	ldr	r2, [pc, #20]	; (80049a0 <prvInitialiseTaskLists+0x68>)
 800498c:	601a      	str	r2, [r3, #0]
}
 800498e:	bf00      	nop
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	200006b4 	.word	0x200006b4
 800499c:	20000740 	.word	0x20000740
 80049a0:	20000754 	.word	0x20000754
 80049a4:	20000770 	.word	0x20000770
 80049a8:	20000784 	.word	0x20000784
 80049ac:	2000079c 	.word	0x2000079c
 80049b0:	20000768 	.word	0x20000768
 80049b4:	2000076c 	.word	0x2000076c

080049b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049be:	e019      	b.n	80049f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049c0:	f000 fbcc 	bl	800515c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049c4:	4b0f      	ldr	r3, [pc, #60]	; (8004a04 <prvCheckTasksWaitingTermination+0x4c>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3304      	adds	r3, #4
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7fe fdce 	bl	8003572 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049d6:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <prvCheckTasksWaitingTermination+0x50>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3b01      	subs	r3, #1
 80049dc:	4a0a      	ldr	r2, [pc, #40]	; (8004a08 <prvCheckTasksWaitingTermination+0x50>)
 80049de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049e0:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <prvCheckTasksWaitingTermination+0x54>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3b01      	subs	r3, #1
 80049e6:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <prvCheckTasksWaitingTermination+0x54>)
 80049e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049ea:	f000 fbe5 	bl	80051b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f80e 	bl	8004a10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049f4:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <prvCheckTasksWaitingTermination+0x54>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1e1      	bne.n	80049c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049fc:	bf00      	nop
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	20000784 	.word	0x20000784
 8004a08:	200007b0 	.word	0x200007b0
 8004a0c:	20000798 	.word	0x20000798

08004a10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d108      	bne.n	8004a34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fd36 	bl	8005498 <vPortFree>
				vPortFree( pxTCB );
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 fd33 	bl	8005498 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a32:	e017      	b.n	8004a64 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d103      	bne.n	8004a46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fd2a 	bl	8005498 <vPortFree>
	}
 8004a44:	e00e      	b.n	8004a64 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d009      	beq.n	8004a64 <prvDeleteTCB+0x54>
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	e7fe      	b.n	8004a62 <prvDeleteTCB+0x52>
	}
 8004a64:	bf00      	nop
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a72:	4b0c      	ldr	r3, [pc, #48]	; (8004aa4 <prvResetNextTaskUnblockTime+0x38>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d104      	bne.n	8004a86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a7c:	4b0a      	ldr	r3, [pc, #40]	; (8004aa8 <prvResetNextTaskUnblockTime+0x3c>)
 8004a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a84:	e008      	b.n	8004a98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a86:	4b07      	ldr	r3, [pc, #28]	; (8004aa4 <prvResetNextTaskUnblockTime+0x38>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	4a04      	ldr	r2, [pc, #16]	; (8004aa8 <prvResetNextTaskUnblockTime+0x3c>)
 8004a96:	6013      	str	r3, [r2, #0]
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	20000768 	.word	0x20000768
 8004aa8:	200007d0 	.word	0x200007d0

08004aac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ab2:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <xTaskGetSchedulerState+0x34>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d102      	bne.n	8004ac0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004aba:	2301      	movs	r3, #1
 8004abc:	607b      	str	r3, [r7, #4]
 8004abe:	e008      	b.n	8004ad2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ac0:	4b08      	ldr	r3, [pc, #32]	; (8004ae4 <xTaskGetSchedulerState+0x38>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d102      	bne.n	8004ace <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ac8:	2302      	movs	r3, #2
 8004aca:	607b      	str	r3, [r7, #4]
 8004acc:	e001      	b.n	8004ad2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ad2:	687b      	ldr	r3, [r7, #4]
	}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	200007bc 	.word	0x200007bc
 8004ae4:	200007d8 	.word	0x200007d8

08004ae8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004af4:	2300      	movs	r3, #0
 8004af6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d069      	beq.n	8004bd2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b02:	4b36      	ldr	r3, [pc, #216]	; (8004bdc <xTaskPriorityInherit+0xf4>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d259      	bcs.n	8004bc0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	db06      	blt.n	8004b22 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b14:	4b31      	ldr	r3, [pc, #196]	; (8004bdc <xTaskPriorityInherit+0xf4>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1a:	f1c3 0207 	rsb	r2, r3, #7
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	6959      	ldr	r1, [r3, #20]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4a2b      	ldr	r2, [pc, #172]	; (8004be0 <xTaskPriorityInherit+0xf8>)
 8004b34:	4413      	add	r3, r2
 8004b36:	4299      	cmp	r1, r3
 8004b38:	d13a      	bne.n	8004bb0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fe fd17 	bl	8003572 <uxListRemove>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d115      	bne.n	8004b76 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b4e:	4924      	ldr	r1, [pc, #144]	; (8004be0 <xTaskPriorityInherit+0xf8>)
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10a      	bne.n	8004b76 <xTaskPriorityInherit+0x8e>
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b64:	2201      	movs	r2, #1
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43da      	mvns	r2, r3
 8004b6c:	4b1d      	ldr	r3, [pc, #116]	; (8004be4 <xTaskPriorityInherit+0xfc>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4013      	ands	r3, r2
 8004b72:	4a1c      	ldr	r2, [pc, #112]	; (8004be4 <xTaskPriorityInherit+0xfc>)
 8004b74:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b76:	4b19      	ldr	r3, [pc, #100]	; (8004bdc <xTaskPriorityInherit+0xf4>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	2201      	movs	r2, #1
 8004b86:	409a      	lsls	r2, r3
 8004b88:	4b16      	ldr	r3, [pc, #88]	; (8004be4 <xTaskPriorityInherit+0xfc>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	4a15      	ldr	r2, [pc, #84]	; (8004be4 <xTaskPriorityInherit+0xfc>)
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b96:	4613      	mov	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4a10      	ldr	r2, [pc, #64]	; (8004be0 <xTaskPriorityInherit+0xf8>)
 8004ba0:	441a      	add	r2, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4610      	mov	r0, r2
 8004baa:	f7fe fc85 	bl	80034b8 <vListInsertEnd>
 8004bae:	e004      	b.n	8004bba <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004bb0:	4b0a      	ldr	r3, [pc, #40]	; (8004bdc <xTaskPriorityInherit+0xf4>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	e008      	b.n	8004bd2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bc4:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <xTaskPriorityInherit+0xf4>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d201      	bcs.n	8004bd2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
	}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	200006b0 	.word	0x200006b0
 8004be0:	200006b4 	.word	0x200006b4
 8004be4:	200007b8 	.word	0x200007b8

08004be8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d06c      	beq.n	8004cd8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004bfe:	4b39      	ldr	r3, [pc, #228]	; (8004ce4 <xTaskPriorityDisinherit+0xfc>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d009      	beq.n	8004c1c <xTaskPriorityDisinherit+0x34>
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	e7fe      	b.n	8004c1a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d109      	bne.n	8004c38 <xTaskPriorityDisinherit+0x50>
 8004c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	e7fe      	b.n	8004c36 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c3c:	1e5a      	subs	r2, r3, #1
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d044      	beq.n	8004cd8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d140      	bne.n	8004cd8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fe fc89 	bl	8003572 <uxListRemove>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d115      	bne.n	8004c92 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6a:	491f      	ldr	r1, [pc, #124]	; (8004ce8 <xTaskPriorityDisinherit+0x100>)
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10a      	bne.n	8004c92 <xTaskPriorityDisinherit+0xaa>
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	2201      	movs	r2, #1
 8004c82:	fa02 f303 	lsl.w	r3, r2, r3
 8004c86:	43da      	mvns	r2, r3
 8004c88:	4b18      	ldr	r3, [pc, #96]	; (8004cec <xTaskPriorityDisinherit+0x104>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	4a17      	ldr	r2, [pc, #92]	; (8004cec <xTaskPriorityDisinherit+0x104>)
 8004c90:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	f1c3 0207 	rsb	r2, r3, #7
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	2201      	movs	r2, #1
 8004cac:	409a      	lsls	r2, r3
 8004cae:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <xTaskPriorityDisinherit+0x104>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	4a0d      	ldr	r2, [pc, #52]	; (8004cec <xTaskPriorityDisinherit+0x104>)
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4a08      	ldr	r2, [pc, #32]	; (8004ce8 <xTaskPriorityDisinherit+0x100>)
 8004cc6:	441a      	add	r2, r3
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f7fe fbf2 	bl	80034b8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004cd8:	697b      	ldr	r3, [r7, #20]
	}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	200006b0 	.word	0x200006b0
 8004ce8:	200006b4 	.word	0x200006b4
 8004cec:	200007b8 	.word	0x200007b8

08004cf0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 8081 	beq.w	8004e0c <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d109      	bne.n	8004d26 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	e7fe      	b.n	8004d24 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d902      	bls.n	8004d36 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	61fb      	str	r3, [r7, #28]
 8004d34:	e002      	b.n	8004d3c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	69fa      	ldr	r2, [r7, #28]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d062      	beq.n	8004e0c <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d15d      	bne.n	8004e0c <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004d50:	4b30      	ldr	r3, [pc, #192]	; (8004e14 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d109      	bne.n	8004d6e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	60bb      	str	r3, [r7, #8]
 8004d6c:	e7fe      	b.n	8004d6c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d72:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	69fa      	ldr	r2, [r7, #28]
 8004d78:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	db04      	blt.n	8004d8c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	f1c3 0207 	rsb	r2, r3, #7
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	6959      	ldr	r1, [r3, #20]
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4613      	mov	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4a1f      	ldr	r2, [pc, #124]	; (8004e18 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004d9c:	4413      	add	r3, r2
 8004d9e:	4299      	cmp	r1, r3
 8004da0:	d134      	bne.n	8004e0c <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	3304      	adds	r3, #4
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fe fbe3 	bl	8003572 <uxListRemove>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d115      	bne.n	8004dde <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db6:	4918      	ldr	r1, [pc, #96]	; (8004e18 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004db8:	4613      	mov	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10a      	bne.n	8004dde <vTaskPriorityDisinheritAfterTimeout+0xee>
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dcc:	2201      	movs	r2, #1
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	43da      	mvns	r2, r3
 8004dd4:	4b11      	ldr	r3, [pc, #68]	; (8004e1c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	4a10      	ldr	r2, [pc, #64]	; (8004e1c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004ddc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	2201      	movs	r2, #1
 8004de4:	409a      	lsls	r2, r3
 8004de6:	4b0d      	ldr	r3, [pc, #52]	; (8004e1c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	4a0b      	ldr	r2, [pc, #44]	; (8004e1c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df4:	4613      	mov	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4a06      	ldr	r2, [pc, #24]	; (8004e18 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004dfe:	441a      	add	r2, r3
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	3304      	adds	r3, #4
 8004e04:	4619      	mov	r1, r3
 8004e06:	4610      	mov	r0, r2
 8004e08:	f7fe fb56 	bl	80034b8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e0c:	bf00      	nop
 8004e0e:	3720      	adds	r7, #32
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	200006b0 	.word	0x200006b0
 8004e18:	200006b4 	.word	0x200006b4
 8004e1c:	200007b8 	.word	0x200007b8

08004e20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004e24:	4b07      	ldr	r3, [pc, #28]	; (8004e44 <pvTaskIncrementMutexHeldCount+0x24>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d004      	beq.n	8004e36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004e2c:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <pvTaskIncrementMutexHeldCount+0x24>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e32:	3201      	adds	r2, #1
 8004e34:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004e36:	4b03      	ldr	r3, [pc, #12]	; (8004e44 <pvTaskIncrementMutexHeldCount+0x24>)
 8004e38:	681b      	ldr	r3, [r3, #0]
	}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	200006b0 	.word	0x200006b0

08004e48 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e52:	4b29      	ldr	r3, [pc, #164]	; (8004ef8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e58:	4b28      	ldr	r3, [pc, #160]	; (8004efc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fe fb87 	bl	8003572 <uxListRemove>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10b      	bne.n	8004e82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004e6a:	4b24      	ldr	r3, [pc, #144]	; (8004efc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e70:	2201      	movs	r2, #1
 8004e72:	fa02 f303 	lsl.w	r3, r2, r3
 8004e76:	43da      	mvns	r2, r3
 8004e78:	4b21      	ldr	r3, [pc, #132]	; (8004f00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	4a20      	ldr	r2, [pc, #128]	; (8004f00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e88:	d10a      	bne.n	8004ea0 <prvAddCurrentTaskToDelayedList+0x58>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d007      	beq.n	8004ea0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e90:	4b1a      	ldr	r3, [pc, #104]	; (8004efc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	3304      	adds	r3, #4
 8004e96:	4619      	mov	r1, r3
 8004e98:	481a      	ldr	r0, [pc, #104]	; (8004f04 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004e9a:	f7fe fb0d 	bl	80034b8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e9e:	e026      	b.n	8004eee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ea8:	4b14      	ldr	r3, [pc, #80]	; (8004efc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d209      	bcs.n	8004ecc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004eb8:	4b13      	ldr	r3, [pc, #76]	; (8004f08 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	4b0f      	ldr	r3, [pc, #60]	; (8004efc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	f7fe fb1b 	bl	8003500 <vListInsert>
}
 8004eca:	e010      	b.n	8004eee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ecc:	4b0f      	ldr	r3, [pc, #60]	; (8004f0c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4610      	mov	r0, r2
 8004eda:	f7fe fb11 	bl	8003500 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ede:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d202      	bcs.n	8004eee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ee8:	4a09      	ldr	r2, [pc, #36]	; (8004f10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	6013      	str	r3, [r2, #0]
}
 8004eee:	bf00      	nop
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	200007b4 	.word	0x200007b4
 8004efc:	200006b0 	.word	0x200006b0
 8004f00:	200007b8 	.word	0x200007b8
 8004f04:	2000079c 	.word	0x2000079c
 8004f08:	2000076c 	.word	0x2000076c
 8004f0c:	20000768 	.word	0x20000768
 8004f10:	200007d0 	.word	0x200007d0

08004f14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3b04      	subs	r3, #4
 8004f24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	3b04      	subs	r3, #4
 8004f32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f023 0201 	bic.w	r2, r3, #1
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3b04      	subs	r3, #4
 8004f42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f44:	4a0c      	ldr	r2, [pc, #48]	; (8004f78 <pxPortInitialiseStack+0x64>)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3b14      	subs	r3, #20
 8004f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	3b04      	subs	r3, #4
 8004f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f06f 0202 	mvn.w	r2, #2
 8004f62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	3b20      	subs	r3, #32
 8004f68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	08004f7d 	.word	0x08004f7d

08004f7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f82:	2300      	movs	r3, #0
 8004f84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f86:	4b11      	ldr	r3, [pc, #68]	; (8004fcc <prvTaskExitError+0x50>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8e:	d009      	beq.n	8004fa4 <prvTaskExitError+0x28>
 8004f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	60fb      	str	r3, [r7, #12]
 8004fa2:	e7fe      	b.n	8004fa2 <prvTaskExitError+0x26>
 8004fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fb6:	bf00      	nop
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0fc      	beq.n	8004fb8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fbe:	bf00      	nop
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	200001c4 	.word	0x200001c4

08004fd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fd0:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <pxCurrentTCBConst2>)
 8004fd2:	6819      	ldr	r1, [r3, #0]
 8004fd4:	6808      	ldr	r0, [r1, #0]
 8004fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fda:	f380 8809 	msr	PSP, r0
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f04f 0000 	mov.w	r0, #0
 8004fe6:	f380 8811 	msr	BASEPRI, r0
 8004fea:	4770      	bx	lr
 8004fec:	f3af 8000 	nop.w

08004ff0 <pxCurrentTCBConst2>:
 8004ff0:	200006b0 	.word	0x200006b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop

08004ff8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ff8:	4808      	ldr	r0, [pc, #32]	; (800501c <prvPortStartFirstTask+0x24>)
 8004ffa:	6800      	ldr	r0, [r0, #0]
 8004ffc:	6800      	ldr	r0, [r0, #0]
 8004ffe:	f380 8808 	msr	MSP, r0
 8005002:	f04f 0000 	mov.w	r0, #0
 8005006:	f380 8814 	msr	CONTROL, r0
 800500a:	b662      	cpsie	i
 800500c:	b661      	cpsie	f
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	df00      	svc	0
 8005018:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800501a:	bf00      	nop
 800501c:	e000ed08 	.word	0xe000ed08

08005020 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005026:	4b44      	ldr	r3, [pc, #272]	; (8005138 <xPortStartScheduler+0x118>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a44      	ldr	r2, [pc, #272]	; (800513c <xPortStartScheduler+0x11c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d109      	bne.n	8005044 <xPortStartScheduler+0x24>
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	e7fe      	b.n	8005042 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005044:	4b3c      	ldr	r3, [pc, #240]	; (8005138 <xPortStartScheduler+0x118>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a3d      	ldr	r2, [pc, #244]	; (8005140 <xPortStartScheduler+0x120>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d109      	bne.n	8005062 <xPortStartScheduler+0x42>
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	e7fe      	b.n	8005060 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005062:	4b38      	ldr	r3, [pc, #224]	; (8005144 <xPortStartScheduler+0x124>)
 8005064:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	b2db      	uxtb	r3, r3
 800506c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	22ff      	movs	r2, #255	; 0xff
 8005072:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	b2db      	uxtb	r3, r3
 800507a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800507c:	78fb      	ldrb	r3, [r7, #3]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005084:	b2da      	uxtb	r2, r3
 8005086:	4b30      	ldr	r3, [pc, #192]	; (8005148 <xPortStartScheduler+0x128>)
 8005088:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800508a:	4b30      	ldr	r3, [pc, #192]	; (800514c <xPortStartScheduler+0x12c>)
 800508c:	2207      	movs	r2, #7
 800508e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005090:	e009      	b.n	80050a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005092:	4b2e      	ldr	r3, [pc, #184]	; (800514c <xPortStartScheduler+0x12c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3b01      	subs	r3, #1
 8005098:	4a2c      	ldr	r2, [pc, #176]	; (800514c <xPortStartScheduler+0x12c>)
 800509a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800509c:	78fb      	ldrb	r3, [r7, #3]
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050a6:	78fb      	ldrb	r3, [r7, #3]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ae:	2b80      	cmp	r3, #128	; 0x80
 80050b0:	d0ef      	beq.n	8005092 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050b2:	4b26      	ldr	r3, [pc, #152]	; (800514c <xPortStartScheduler+0x12c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f1c3 0307 	rsb	r3, r3, #7
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d009      	beq.n	80050d2 <xPortStartScheduler+0xb2>
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	60bb      	str	r3, [r7, #8]
 80050d0:	e7fe      	b.n	80050d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050d2:	4b1e      	ldr	r3, [pc, #120]	; (800514c <xPortStartScheduler+0x12c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	021b      	lsls	r3, r3, #8
 80050d8:	4a1c      	ldr	r2, [pc, #112]	; (800514c <xPortStartScheduler+0x12c>)
 80050da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050dc:	4b1b      	ldr	r3, [pc, #108]	; (800514c <xPortStartScheduler+0x12c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050e4:	4a19      	ldr	r2, [pc, #100]	; (800514c <xPortStartScheduler+0x12c>)
 80050e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050f0:	4b17      	ldr	r3, [pc, #92]	; (8005150 <xPortStartScheduler+0x130>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a16      	ldr	r2, [pc, #88]	; (8005150 <xPortStartScheduler+0x130>)
 80050f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050fc:	4b14      	ldr	r3, [pc, #80]	; (8005150 <xPortStartScheduler+0x130>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a13      	ldr	r2, [pc, #76]	; (8005150 <xPortStartScheduler+0x130>)
 8005102:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005106:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005108:	f000 f8d6 	bl	80052b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800510c:	4b11      	ldr	r3, [pc, #68]	; (8005154 <xPortStartScheduler+0x134>)
 800510e:	2200      	movs	r2, #0
 8005110:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005112:	f000 f8f5 	bl	8005300 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005116:	4b10      	ldr	r3, [pc, #64]	; (8005158 <xPortStartScheduler+0x138>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a0f      	ldr	r2, [pc, #60]	; (8005158 <xPortStartScheduler+0x138>)
 800511c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005120:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005122:	f7ff ff69 	bl	8004ff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005126:	f7ff fa71 	bl	800460c <vTaskSwitchContext>
	prvTaskExitError();
 800512a:	f7ff ff27 	bl	8004f7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	e000ed00 	.word	0xe000ed00
 800513c:	410fc271 	.word	0x410fc271
 8005140:	410fc270 	.word	0x410fc270
 8005144:	e000e400 	.word	0xe000e400
 8005148:	200007e4 	.word	0x200007e4
 800514c:	200007e8 	.word	0x200007e8
 8005150:	e000ed20 	.word	0xe000ed20
 8005154:	200001c4 	.word	0x200001c4
 8005158:	e000ef34 	.word	0xe000ef34

0800515c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005174:	4b0e      	ldr	r3, [pc, #56]	; (80051b0 <vPortEnterCritical+0x54>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	3301      	adds	r3, #1
 800517a:	4a0d      	ldr	r2, [pc, #52]	; (80051b0 <vPortEnterCritical+0x54>)
 800517c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800517e:	4b0c      	ldr	r3, [pc, #48]	; (80051b0 <vPortEnterCritical+0x54>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d10e      	bne.n	80051a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005186:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <vPortEnterCritical+0x58>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	d009      	beq.n	80051a4 <vPortEnterCritical+0x48>
 8005190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	603b      	str	r3, [r7, #0]
 80051a2:	e7fe      	b.n	80051a2 <vPortEnterCritical+0x46>
	}
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	200001c4 	.word	0x200001c4
 80051b4:	e000ed04 	.word	0xe000ed04

080051b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051be:	4b11      	ldr	r3, [pc, #68]	; (8005204 <vPortExitCritical+0x4c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d109      	bne.n	80051da <vPortExitCritical+0x22>
 80051c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	607b      	str	r3, [r7, #4]
 80051d8:	e7fe      	b.n	80051d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80051da:	4b0a      	ldr	r3, [pc, #40]	; (8005204 <vPortExitCritical+0x4c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3b01      	subs	r3, #1
 80051e0:	4a08      	ldr	r2, [pc, #32]	; (8005204 <vPortExitCritical+0x4c>)
 80051e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051e4:	4b07      	ldr	r3, [pc, #28]	; (8005204 <vPortExitCritical+0x4c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d104      	bne.n	80051f6 <vPortExitCritical+0x3e>
 80051ec:	2300      	movs	r3, #0
 80051ee:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	200001c4 	.word	0x200001c4
	...

08005210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005210:	f3ef 8009 	mrs	r0, PSP
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	4b15      	ldr	r3, [pc, #84]	; (8005270 <pxCurrentTCBConst>)
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	f01e 0f10 	tst.w	lr, #16
 8005220:	bf08      	it	eq
 8005222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800522a:	6010      	str	r0, [r2, #0]
 800522c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005230:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005234:	f380 8811 	msr	BASEPRI, r0
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f7ff f9e4 	bl	800460c <vTaskSwitchContext>
 8005244:	f04f 0000 	mov.w	r0, #0
 8005248:	f380 8811 	msr	BASEPRI, r0
 800524c:	bc09      	pop	{r0, r3}
 800524e:	6819      	ldr	r1, [r3, #0]
 8005250:	6808      	ldr	r0, [r1, #0]
 8005252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005256:	f01e 0f10 	tst.w	lr, #16
 800525a:	bf08      	it	eq
 800525c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005260:	f380 8809 	msr	PSP, r0
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	f3af 8000 	nop.w

08005270 <pxCurrentTCBConst>:
 8005270:	200006b0 	.word	0x200006b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop

08005278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005290:	f7ff f904 	bl	800449c <xTaskIncrementTick>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800529a:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <SysTick_Handler+0x3c>)
 800529c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	2300      	movs	r3, #0
 80052a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80052ac:	bf00      	nop
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	e000ed04 	.word	0xe000ed04

080052b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052bc:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <vPortSetupTimerInterrupt+0x34>)
 80052be:	2200      	movs	r2, #0
 80052c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052c2:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <vPortSetupTimerInterrupt+0x38>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052c8:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <vPortSetupTimerInterrupt+0x3c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a0a      	ldr	r2, [pc, #40]	; (80052f8 <vPortSetupTimerInterrupt+0x40>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	099b      	lsrs	r3, r3, #6
 80052d4:	4a09      	ldr	r2, [pc, #36]	; (80052fc <vPortSetupTimerInterrupt+0x44>)
 80052d6:	3b01      	subs	r3, #1
 80052d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052da:	4b04      	ldr	r3, [pc, #16]	; (80052ec <vPortSetupTimerInterrupt+0x34>)
 80052dc:	2207      	movs	r2, #7
 80052de:	601a      	str	r2, [r3, #0]
}
 80052e0:	bf00      	nop
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	e000e010 	.word	0xe000e010
 80052f0:	e000e018 	.word	0xe000e018
 80052f4:	200001b8 	.word	0x200001b8
 80052f8:	10624dd3 	.word	0x10624dd3
 80052fc:	e000e014 	.word	0xe000e014

08005300 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005300:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005310 <vPortEnableVFP+0x10>
 8005304:	6801      	ldr	r1, [r0, #0]
 8005306:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800530a:	6001      	str	r1, [r0, #0]
 800530c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800530e:	bf00      	nop
 8005310:	e000ed88 	.word	0xe000ed88

08005314 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b08a      	sub	sp, #40	; 0x28
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800531c:	2300      	movs	r3, #0
 800531e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005320:	f7ff f812 	bl	8004348 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005324:	4b57      	ldr	r3, [pc, #348]	; (8005484 <pvPortMalloc+0x170>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800532c:	f000 f90c 	bl	8005548 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005330:	4b55      	ldr	r3, [pc, #340]	; (8005488 <pvPortMalloc+0x174>)
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4013      	ands	r3, r2
 8005338:	2b00      	cmp	r3, #0
 800533a:	f040 808c 	bne.w	8005456 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d01c      	beq.n	800537e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005344:	2208      	movs	r2, #8
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4413      	add	r3, r2
 800534a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	2b00      	cmp	r3, #0
 8005354:	d013      	beq.n	800537e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f023 0307 	bic.w	r3, r3, #7
 800535c:	3308      	adds	r3, #8
 800535e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	2b00      	cmp	r3, #0
 8005368:	d009      	beq.n	800537e <pvPortMalloc+0x6a>
	__asm volatile
 800536a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	e7fe      	b.n	800537c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d068      	beq.n	8005456 <pvPortMalloc+0x142>
 8005384:	4b41      	ldr	r3, [pc, #260]	; (800548c <pvPortMalloc+0x178>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	429a      	cmp	r2, r3
 800538c:	d863      	bhi.n	8005456 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800538e:	4b40      	ldr	r3, [pc, #256]	; (8005490 <pvPortMalloc+0x17c>)
 8005390:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005392:	4b3f      	ldr	r3, [pc, #252]	; (8005490 <pvPortMalloc+0x17c>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005398:	e004      	b.n	80053a4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d903      	bls.n	80053b6 <pvPortMalloc+0xa2>
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1f1      	bne.n	800539a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053b6:	4b33      	ldr	r3, [pc, #204]	; (8005484 <pvPortMalloc+0x170>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053bc:	429a      	cmp	r2, r3
 80053be:	d04a      	beq.n	8005456 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2208      	movs	r2, #8
 80053c6:	4413      	add	r3, r2
 80053c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	1ad2      	subs	r2, r2, r3
 80053da:	2308      	movs	r3, #8
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	429a      	cmp	r2, r3
 80053e0:	d91e      	bls.n	8005420 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4413      	add	r3, r2
 80053e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	f003 0307 	and.w	r3, r3, #7
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d009      	beq.n	8005408 <pvPortMalloc+0xf4>
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	613b      	str	r3, [r7, #16]
 8005406:	e7fe      	b.n	8005406 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	1ad2      	subs	r2, r2, r3
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800541a:	69b8      	ldr	r0, [r7, #24]
 800541c:	f000 f8f6 	bl	800560c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005420:	4b1a      	ldr	r3, [pc, #104]	; (800548c <pvPortMalloc+0x178>)
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	4a18      	ldr	r2, [pc, #96]	; (800548c <pvPortMalloc+0x178>)
 800542c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800542e:	4b17      	ldr	r3, [pc, #92]	; (800548c <pvPortMalloc+0x178>)
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4b18      	ldr	r3, [pc, #96]	; (8005494 <pvPortMalloc+0x180>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d203      	bcs.n	8005442 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800543a:	4b14      	ldr	r3, [pc, #80]	; (800548c <pvPortMalloc+0x178>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a15      	ldr	r2, [pc, #84]	; (8005494 <pvPortMalloc+0x180>)
 8005440:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	4b10      	ldr	r3, [pc, #64]	; (8005488 <pvPortMalloc+0x174>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	431a      	orrs	r2, r3
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005456:	f7fe ff85 	bl	8004364 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	2b00      	cmp	r3, #0
 8005462:	d009      	beq.n	8005478 <pvPortMalloc+0x164>
 8005464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	e7fe      	b.n	8005476 <pvPortMalloc+0x162>
	return pvReturn;
 8005478:	69fb      	ldr	r3, [r7, #28]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3728      	adds	r7, #40	; 0x28
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	200043f4 	.word	0x200043f4
 8005488:	20004400 	.word	0x20004400
 800548c:	200043f8 	.word	0x200043f8
 8005490:	200043ec 	.word	0x200043ec
 8005494:	200043fc 	.word	0x200043fc

08005498 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d046      	beq.n	8005538 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054aa:	2308      	movs	r3, #8
 80054ac:	425b      	negs	r3, r3
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	4413      	add	r3, r2
 80054b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	4b20      	ldr	r3, [pc, #128]	; (8005540 <vPortFree+0xa8>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4013      	ands	r3, r2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d109      	bne.n	80054da <vPortFree+0x42>
 80054c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	e7fe      	b.n	80054d8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d009      	beq.n	80054f6 <vPortFree+0x5e>
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	60bb      	str	r3, [r7, #8]
 80054f4:	e7fe      	b.n	80054f4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	4b11      	ldr	r3, [pc, #68]	; (8005540 <vPortFree+0xa8>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4013      	ands	r3, r2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d019      	beq.n	8005538 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d115      	bne.n	8005538 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <vPortFree+0xa8>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	43db      	mvns	r3, r3
 8005516:	401a      	ands	r2, r3
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800551c:	f7fe ff14 	bl	8004348 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	4b07      	ldr	r3, [pc, #28]	; (8005544 <vPortFree+0xac>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4413      	add	r3, r2
 800552a:	4a06      	ldr	r2, [pc, #24]	; (8005544 <vPortFree+0xac>)
 800552c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800552e:	6938      	ldr	r0, [r7, #16]
 8005530:	f000 f86c 	bl	800560c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005534:	f7fe ff16 	bl	8004364 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005538:	bf00      	nop
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	20004400 	.word	0x20004400
 8005544:	200043f8 	.word	0x200043f8

08005548 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800554e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005552:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005554:	4b27      	ldr	r3, [pc, #156]	; (80055f4 <prvHeapInit+0xac>)
 8005556:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00c      	beq.n	800557c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	3307      	adds	r3, #7
 8005566:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0307 	bic.w	r3, r3, #7
 800556e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	4a1f      	ldr	r2, [pc, #124]	; (80055f4 <prvHeapInit+0xac>)
 8005578:	4413      	add	r3, r2
 800557a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005580:	4a1d      	ldr	r2, [pc, #116]	; (80055f8 <prvHeapInit+0xb0>)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005586:	4b1c      	ldr	r3, [pc, #112]	; (80055f8 <prvHeapInit+0xb0>)
 8005588:	2200      	movs	r2, #0
 800558a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	4413      	add	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005594:	2208      	movs	r2, #8
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	1a9b      	subs	r3, r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0307 	bic.w	r3, r3, #7
 80055a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4a15      	ldr	r2, [pc, #84]	; (80055fc <prvHeapInit+0xb4>)
 80055a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055aa:	4b14      	ldr	r3, [pc, #80]	; (80055fc <prvHeapInit+0xb4>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2200      	movs	r2, #0
 80055b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055b2:	4b12      	ldr	r3, [pc, #72]	; (80055fc <prvHeapInit+0xb4>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2200      	movs	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	1ad2      	subs	r2, r2, r3
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055c8:	4b0c      	ldr	r3, [pc, #48]	; (80055fc <prvHeapInit+0xb4>)
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	4a0a      	ldr	r2, [pc, #40]	; (8005600 <prvHeapInit+0xb8>)
 80055d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	4a09      	ldr	r2, [pc, #36]	; (8005604 <prvHeapInit+0xbc>)
 80055de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055e0:	4b09      	ldr	r3, [pc, #36]	; (8005608 <prvHeapInit+0xc0>)
 80055e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80055e6:	601a      	str	r2, [r3, #0]
}
 80055e8:	bf00      	nop
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	200007ec 	.word	0x200007ec
 80055f8:	200043ec 	.word	0x200043ec
 80055fc:	200043f4 	.word	0x200043f4
 8005600:	200043fc 	.word	0x200043fc
 8005604:	200043f8 	.word	0x200043f8
 8005608:	20004400 	.word	0x20004400

0800560c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005614:	4b28      	ldr	r3, [pc, #160]	; (80056b8 <prvInsertBlockIntoFreeList+0xac>)
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	e002      	b.n	8005620 <prvInsertBlockIntoFreeList+0x14>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	429a      	cmp	r2, r3
 8005628:	d8f7      	bhi.n	800561a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	4413      	add	r3, r2
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	429a      	cmp	r2, r3
 800563a:	d108      	bne.n	800564e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	441a      	add	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	441a      	add	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d118      	bne.n	8005694 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	4b15      	ldr	r3, [pc, #84]	; (80056bc <prvInsertBlockIntoFreeList+0xb0>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	429a      	cmp	r2, r3
 800566c:	d00d      	beq.n	800568a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	441a      	add	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	e008      	b.n	800569c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800568a:	4b0c      	ldr	r3, [pc, #48]	; (80056bc <prvInsertBlockIntoFreeList+0xb0>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	e003      	b.n	800569c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d002      	beq.n	80056aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056aa:	bf00      	nop
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	200043ec 	.word	0x200043ec
 80056bc:	200043f4 	.word	0x200043f4

080056c0 <__errno>:
 80056c0:	4b01      	ldr	r3, [pc, #4]	; (80056c8 <__errno+0x8>)
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	200001c8 	.word	0x200001c8

080056cc <__libc_init_array>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	4e0d      	ldr	r6, [pc, #52]	; (8005704 <__libc_init_array+0x38>)
 80056d0:	4c0d      	ldr	r4, [pc, #52]	; (8005708 <__libc_init_array+0x3c>)
 80056d2:	1ba4      	subs	r4, r4, r6
 80056d4:	10a4      	asrs	r4, r4, #2
 80056d6:	2500      	movs	r5, #0
 80056d8:	42a5      	cmp	r5, r4
 80056da:	d109      	bne.n	80056f0 <__libc_init_array+0x24>
 80056dc:	4e0b      	ldr	r6, [pc, #44]	; (800570c <__libc_init_array+0x40>)
 80056de:	4c0c      	ldr	r4, [pc, #48]	; (8005710 <__libc_init_array+0x44>)
 80056e0:	f000 ff74 	bl	80065cc <_init>
 80056e4:	1ba4      	subs	r4, r4, r6
 80056e6:	10a4      	asrs	r4, r4, #2
 80056e8:	2500      	movs	r5, #0
 80056ea:	42a5      	cmp	r5, r4
 80056ec:	d105      	bne.n	80056fa <__libc_init_array+0x2e>
 80056ee:	bd70      	pop	{r4, r5, r6, pc}
 80056f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056f4:	4798      	blx	r3
 80056f6:	3501      	adds	r5, #1
 80056f8:	e7ee      	b.n	80056d8 <__libc_init_array+0xc>
 80056fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056fe:	4798      	blx	r3
 8005700:	3501      	adds	r5, #1
 8005702:	e7f2      	b.n	80056ea <__libc_init_array+0x1e>
 8005704:	08006720 	.word	0x08006720
 8005708:	08006720 	.word	0x08006720
 800570c:	08006720 	.word	0x08006720
 8005710:	08006724 	.word	0x08006724

08005714 <memcpy>:
 8005714:	b510      	push	{r4, lr}
 8005716:	1e43      	subs	r3, r0, #1
 8005718:	440a      	add	r2, r1
 800571a:	4291      	cmp	r1, r2
 800571c:	d100      	bne.n	8005720 <memcpy+0xc>
 800571e:	bd10      	pop	{r4, pc}
 8005720:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005724:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005728:	e7f7      	b.n	800571a <memcpy+0x6>

0800572a <memset>:
 800572a:	4402      	add	r2, r0
 800572c:	4603      	mov	r3, r0
 800572e:	4293      	cmp	r3, r2
 8005730:	d100      	bne.n	8005734 <memset+0xa>
 8005732:	4770      	bx	lr
 8005734:	f803 1b01 	strb.w	r1, [r3], #1
 8005738:	e7f9      	b.n	800572e <memset+0x4>
	...

0800573c <iprintf>:
 800573c:	b40f      	push	{r0, r1, r2, r3}
 800573e:	4b0a      	ldr	r3, [pc, #40]	; (8005768 <iprintf+0x2c>)
 8005740:	b513      	push	{r0, r1, r4, lr}
 8005742:	681c      	ldr	r4, [r3, #0]
 8005744:	b124      	cbz	r4, 8005750 <iprintf+0x14>
 8005746:	69a3      	ldr	r3, [r4, #24]
 8005748:	b913      	cbnz	r3, 8005750 <iprintf+0x14>
 800574a:	4620      	mov	r0, r4
 800574c:	f000 fa22 	bl	8005b94 <__sinit>
 8005750:	ab05      	add	r3, sp, #20
 8005752:	9a04      	ldr	r2, [sp, #16]
 8005754:	68a1      	ldr	r1, [r4, #8]
 8005756:	9301      	str	r3, [sp, #4]
 8005758:	4620      	mov	r0, r4
 800575a:	f000 fbdb 	bl	8005f14 <_vfiprintf_r>
 800575e:	b002      	add	sp, #8
 8005760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005764:	b004      	add	sp, #16
 8005766:	4770      	bx	lr
 8005768:	200001c8 	.word	0x200001c8

0800576c <_puts_r>:
 800576c:	b570      	push	{r4, r5, r6, lr}
 800576e:	460e      	mov	r6, r1
 8005770:	4605      	mov	r5, r0
 8005772:	b118      	cbz	r0, 800577c <_puts_r+0x10>
 8005774:	6983      	ldr	r3, [r0, #24]
 8005776:	b90b      	cbnz	r3, 800577c <_puts_r+0x10>
 8005778:	f000 fa0c 	bl	8005b94 <__sinit>
 800577c:	69ab      	ldr	r3, [r5, #24]
 800577e:	68ac      	ldr	r4, [r5, #8]
 8005780:	b913      	cbnz	r3, 8005788 <_puts_r+0x1c>
 8005782:	4628      	mov	r0, r5
 8005784:	f000 fa06 	bl	8005b94 <__sinit>
 8005788:	4b23      	ldr	r3, [pc, #140]	; (8005818 <_puts_r+0xac>)
 800578a:	429c      	cmp	r4, r3
 800578c:	d117      	bne.n	80057be <_puts_r+0x52>
 800578e:	686c      	ldr	r4, [r5, #4]
 8005790:	89a3      	ldrh	r3, [r4, #12]
 8005792:	071b      	lsls	r3, r3, #28
 8005794:	d51d      	bpl.n	80057d2 <_puts_r+0x66>
 8005796:	6923      	ldr	r3, [r4, #16]
 8005798:	b1db      	cbz	r3, 80057d2 <_puts_r+0x66>
 800579a:	3e01      	subs	r6, #1
 800579c:	68a3      	ldr	r3, [r4, #8]
 800579e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80057a2:	3b01      	subs	r3, #1
 80057a4:	60a3      	str	r3, [r4, #8]
 80057a6:	b9e9      	cbnz	r1, 80057e4 <_puts_r+0x78>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	da2e      	bge.n	800580a <_puts_r+0x9e>
 80057ac:	4622      	mov	r2, r4
 80057ae:	210a      	movs	r1, #10
 80057b0:	4628      	mov	r0, r5
 80057b2:	f000 f83f 	bl	8005834 <__swbuf_r>
 80057b6:	3001      	adds	r0, #1
 80057b8:	d011      	beq.n	80057de <_puts_r+0x72>
 80057ba:	200a      	movs	r0, #10
 80057bc:	e011      	b.n	80057e2 <_puts_r+0x76>
 80057be:	4b17      	ldr	r3, [pc, #92]	; (800581c <_puts_r+0xb0>)
 80057c0:	429c      	cmp	r4, r3
 80057c2:	d101      	bne.n	80057c8 <_puts_r+0x5c>
 80057c4:	68ac      	ldr	r4, [r5, #8]
 80057c6:	e7e3      	b.n	8005790 <_puts_r+0x24>
 80057c8:	4b15      	ldr	r3, [pc, #84]	; (8005820 <_puts_r+0xb4>)
 80057ca:	429c      	cmp	r4, r3
 80057cc:	bf08      	it	eq
 80057ce:	68ec      	ldreq	r4, [r5, #12]
 80057d0:	e7de      	b.n	8005790 <_puts_r+0x24>
 80057d2:	4621      	mov	r1, r4
 80057d4:	4628      	mov	r0, r5
 80057d6:	f000 f87f 	bl	80058d8 <__swsetup_r>
 80057da:	2800      	cmp	r0, #0
 80057dc:	d0dd      	beq.n	800579a <_puts_r+0x2e>
 80057de:	f04f 30ff 	mov.w	r0, #4294967295
 80057e2:	bd70      	pop	{r4, r5, r6, pc}
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	da04      	bge.n	80057f2 <_puts_r+0x86>
 80057e8:	69a2      	ldr	r2, [r4, #24]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	dc06      	bgt.n	80057fc <_puts_r+0x90>
 80057ee:	290a      	cmp	r1, #10
 80057f0:	d004      	beq.n	80057fc <_puts_r+0x90>
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	6022      	str	r2, [r4, #0]
 80057f8:	7019      	strb	r1, [r3, #0]
 80057fa:	e7cf      	b.n	800579c <_puts_r+0x30>
 80057fc:	4622      	mov	r2, r4
 80057fe:	4628      	mov	r0, r5
 8005800:	f000 f818 	bl	8005834 <__swbuf_r>
 8005804:	3001      	adds	r0, #1
 8005806:	d1c9      	bne.n	800579c <_puts_r+0x30>
 8005808:	e7e9      	b.n	80057de <_puts_r+0x72>
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	200a      	movs	r0, #10
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	6022      	str	r2, [r4, #0]
 8005812:	7018      	strb	r0, [r3, #0]
 8005814:	e7e5      	b.n	80057e2 <_puts_r+0x76>
 8005816:	bf00      	nop
 8005818:	080066a4 	.word	0x080066a4
 800581c:	080066c4 	.word	0x080066c4
 8005820:	08006684 	.word	0x08006684

08005824 <puts>:
 8005824:	4b02      	ldr	r3, [pc, #8]	; (8005830 <puts+0xc>)
 8005826:	4601      	mov	r1, r0
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	f7ff bf9f 	b.w	800576c <_puts_r>
 800582e:	bf00      	nop
 8005830:	200001c8 	.word	0x200001c8

08005834 <__swbuf_r>:
 8005834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005836:	460e      	mov	r6, r1
 8005838:	4614      	mov	r4, r2
 800583a:	4605      	mov	r5, r0
 800583c:	b118      	cbz	r0, 8005846 <__swbuf_r+0x12>
 800583e:	6983      	ldr	r3, [r0, #24]
 8005840:	b90b      	cbnz	r3, 8005846 <__swbuf_r+0x12>
 8005842:	f000 f9a7 	bl	8005b94 <__sinit>
 8005846:	4b21      	ldr	r3, [pc, #132]	; (80058cc <__swbuf_r+0x98>)
 8005848:	429c      	cmp	r4, r3
 800584a:	d12a      	bne.n	80058a2 <__swbuf_r+0x6e>
 800584c:	686c      	ldr	r4, [r5, #4]
 800584e:	69a3      	ldr	r3, [r4, #24]
 8005850:	60a3      	str	r3, [r4, #8]
 8005852:	89a3      	ldrh	r3, [r4, #12]
 8005854:	071a      	lsls	r2, r3, #28
 8005856:	d52e      	bpl.n	80058b6 <__swbuf_r+0x82>
 8005858:	6923      	ldr	r3, [r4, #16]
 800585a:	b363      	cbz	r3, 80058b6 <__swbuf_r+0x82>
 800585c:	6923      	ldr	r3, [r4, #16]
 800585e:	6820      	ldr	r0, [r4, #0]
 8005860:	1ac0      	subs	r0, r0, r3
 8005862:	6963      	ldr	r3, [r4, #20]
 8005864:	b2f6      	uxtb	r6, r6
 8005866:	4283      	cmp	r3, r0
 8005868:	4637      	mov	r7, r6
 800586a:	dc04      	bgt.n	8005876 <__swbuf_r+0x42>
 800586c:	4621      	mov	r1, r4
 800586e:	4628      	mov	r0, r5
 8005870:	f000 f926 	bl	8005ac0 <_fflush_r>
 8005874:	bb28      	cbnz	r0, 80058c2 <__swbuf_r+0x8e>
 8005876:	68a3      	ldr	r3, [r4, #8]
 8005878:	3b01      	subs	r3, #1
 800587a:	60a3      	str	r3, [r4, #8]
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	6022      	str	r2, [r4, #0]
 8005882:	701e      	strb	r6, [r3, #0]
 8005884:	6963      	ldr	r3, [r4, #20]
 8005886:	3001      	adds	r0, #1
 8005888:	4283      	cmp	r3, r0
 800588a:	d004      	beq.n	8005896 <__swbuf_r+0x62>
 800588c:	89a3      	ldrh	r3, [r4, #12]
 800588e:	07db      	lsls	r3, r3, #31
 8005890:	d519      	bpl.n	80058c6 <__swbuf_r+0x92>
 8005892:	2e0a      	cmp	r6, #10
 8005894:	d117      	bne.n	80058c6 <__swbuf_r+0x92>
 8005896:	4621      	mov	r1, r4
 8005898:	4628      	mov	r0, r5
 800589a:	f000 f911 	bl	8005ac0 <_fflush_r>
 800589e:	b190      	cbz	r0, 80058c6 <__swbuf_r+0x92>
 80058a0:	e00f      	b.n	80058c2 <__swbuf_r+0x8e>
 80058a2:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <__swbuf_r+0x9c>)
 80058a4:	429c      	cmp	r4, r3
 80058a6:	d101      	bne.n	80058ac <__swbuf_r+0x78>
 80058a8:	68ac      	ldr	r4, [r5, #8]
 80058aa:	e7d0      	b.n	800584e <__swbuf_r+0x1a>
 80058ac:	4b09      	ldr	r3, [pc, #36]	; (80058d4 <__swbuf_r+0xa0>)
 80058ae:	429c      	cmp	r4, r3
 80058b0:	bf08      	it	eq
 80058b2:	68ec      	ldreq	r4, [r5, #12]
 80058b4:	e7cb      	b.n	800584e <__swbuf_r+0x1a>
 80058b6:	4621      	mov	r1, r4
 80058b8:	4628      	mov	r0, r5
 80058ba:	f000 f80d 	bl	80058d8 <__swsetup_r>
 80058be:	2800      	cmp	r0, #0
 80058c0:	d0cc      	beq.n	800585c <__swbuf_r+0x28>
 80058c2:	f04f 37ff 	mov.w	r7, #4294967295
 80058c6:	4638      	mov	r0, r7
 80058c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058ca:	bf00      	nop
 80058cc:	080066a4 	.word	0x080066a4
 80058d0:	080066c4 	.word	0x080066c4
 80058d4:	08006684 	.word	0x08006684

080058d8 <__swsetup_r>:
 80058d8:	4b32      	ldr	r3, [pc, #200]	; (80059a4 <__swsetup_r+0xcc>)
 80058da:	b570      	push	{r4, r5, r6, lr}
 80058dc:	681d      	ldr	r5, [r3, #0]
 80058de:	4606      	mov	r6, r0
 80058e0:	460c      	mov	r4, r1
 80058e2:	b125      	cbz	r5, 80058ee <__swsetup_r+0x16>
 80058e4:	69ab      	ldr	r3, [r5, #24]
 80058e6:	b913      	cbnz	r3, 80058ee <__swsetup_r+0x16>
 80058e8:	4628      	mov	r0, r5
 80058ea:	f000 f953 	bl	8005b94 <__sinit>
 80058ee:	4b2e      	ldr	r3, [pc, #184]	; (80059a8 <__swsetup_r+0xd0>)
 80058f0:	429c      	cmp	r4, r3
 80058f2:	d10f      	bne.n	8005914 <__swsetup_r+0x3c>
 80058f4:	686c      	ldr	r4, [r5, #4]
 80058f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	0715      	lsls	r5, r2, #28
 80058fe:	d42c      	bmi.n	800595a <__swsetup_r+0x82>
 8005900:	06d0      	lsls	r0, r2, #27
 8005902:	d411      	bmi.n	8005928 <__swsetup_r+0x50>
 8005904:	2209      	movs	r2, #9
 8005906:	6032      	str	r2, [r6, #0]
 8005908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800590c:	81a3      	strh	r3, [r4, #12]
 800590e:	f04f 30ff 	mov.w	r0, #4294967295
 8005912:	e03e      	b.n	8005992 <__swsetup_r+0xba>
 8005914:	4b25      	ldr	r3, [pc, #148]	; (80059ac <__swsetup_r+0xd4>)
 8005916:	429c      	cmp	r4, r3
 8005918:	d101      	bne.n	800591e <__swsetup_r+0x46>
 800591a:	68ac      	ldr	r4, [r5, #8]
 800591c:	e7eb      	b.n	80058f6 <__swsetup_r+0x1e>
 800591e:	4b24      	ldr	r3, [pc, #144]	; (80059b0 <__swsetup_r+0xd8>)
 8005920:	429c      	cmp	r4, r3
 8005922:	bf08      	it	eq
 8005924:	68ec      	ldreq	r4, [r5, #12]
 8005926:	e7e6      	b.n	80058f6 <__swsetup_r+0x1e>
 8005928:	0751      	lsls	r1, r2, #29
 800592a:	d512      	bpl.n	8005952 <__swsetup_r+0x7a>
 800592c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800592e:	b141      	cbz	r1, 8005942 <__swsetup_r+0x6a>
 8005930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005934:	4299      	cmp	r1, r3
 8005936:	d002      	beq.n	800593e <__swsetup_r+0x66>
 8005938:	4630      	mov	r0, r6
 800593a:	f000 fa19 	bl	8005d70 <_free_r>
 800593e:	2300      	movs	r3, #0
 8005940:	6363      	str	r3, [r4, #52]	; 0x34
 8005942:	89a3      	ldrh	r3, [r4, #12]
 8005944:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005948:	81a3      	strh	r3, [r4, #12]
 800594a:	2300      	movs	r3, #0
 800594c:	6063      	str	r3, [r4, #4]
 800594e:	6923      	ldr	r3, [r4, #16]
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	89a3      	ldrh	r3, [r4, #12]
 8005954:	f043 0308 	orr.w	r3, r3, #8
 8005958:	81a3      	strh	r3, [r4, #12]
 800595a:	6923      	ldr	r3, [r4, #16]
 800595c:	b94b      	cbnz	r3, 8005972 <__swsetup_r+0x9a>
 800595e:	89a3      	ldrh	r3, [r4, #12]
 8005960:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005968:	d003      	beq.n	8005972 <__swsetup_r+0x9a>
 800596a:	4621      	mov	r1, r4
 800596c:	4630      	mov	r0, r6
 800596e:	f000 f9bf 	bl	8005cf0 <__smakebuf_r>
 8005972:	89a2      	ldrh	r2, [r4, #12]
 8005974:	f012 0301 	ands.w	r3, r2, #1
 8005978:	d00c      	beq.n	8005994 <__swsetup_r+0xbc>
 800597a:	2300      	movs	r3, #0
 800597c:	60a3      	str	r3, [r4, #8]
 800597e:	6963      	ldr	r3, [r4, #20]
 8005980:	425b      	negs	r3, r3
 8005982:	61a3      	str	r3, [r4, #24]
 8005984:	6923      	ldr	r3, [r4, #16]
 8005986:	b953      	cbnz	r3, 800599e <__swsetup_r+0xc6>
 8005988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800598c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005990:	d1ba      	bne.n	8005908 <__swsetup_r+0x30>
 8005992:	bd70      	pop	{r4, r5, r6, pc}
 8005994:	0792      	lsls	r2, r2, #30
 8005996:	bf58      	it	pl
 8005998:	6963      	ldrpl	r3, [r4, #20]
 800599a:	60a3      	str	r3, [r4, #8]
 800599c:	e7f2      	b.n	8005984 <__swsetup_r+0xac>
 800599e:	2000      	movs	r0, #0
 80059a0:	e7f7      	b.n	8005992 <__swsetup_r+0xba>
 80059a2:	bf00      	nop
 80059a4:	200001c8 	.word	0x200001c8
 80059a8:	080066a4 	.word	0x080066a4
 80059ac:	080066c4 	.word	0x080066c4
 80059b0:	08006684 	.word	0x08006684

080059b4 <__sflush_r>:
 80059b4:	898a      	ldrh	r2, [r1, #12]
 80059b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ba:	4605      	mov	r5, r0
 80059bc:	0710      	lsls	r0, r2, #28
 80059be:	460c      	mov	r4, r1
 80059c0:	d458      	bmi.n	8005a74 <__sflush_r+0xc0>
 80059c2:	684b      	ldr	r3, [r1, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	dc05      	bgt.n	80059d4 <__sflush_r+0x20>
 80059c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	dc02      	bgt.n	80059d4 <__sflush_r+0x20>
 80059ce:	2000      	movs	r0, #0
 80059d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059d6:	2e00      	cmp	r6, #0
 80059d8:	d0f9      	beq.n	80059ce <__sflush_r+0x1a>
 80059da:	2300      	movs	r3, #0
 80059dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80059e0:	682f      	ldr	r7, [r5, #0]
 80059e2:	6a21      	ldr	r1, [r4, #32]
 80059e4:	602b      	str	r3, [r5, #0]
 80059e6:	d032      	beq.n	8005a4e <__sflush_r+0x9a>
 80059e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80059ea:	89a3      	ldrh	r3, [r4, #12]
 80059ec:	075a      	lsls	r2, r3, #29
 80059ee:	d505      	bpl.n	80059fc <__sflush_r+0x48>
 80059f0:	6863      	ldr	r3, [r4, #4]
 80059f2:	1ac0      	subs	r0, r0, r3
 80059f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059f6:	b10b      	cbz	r3, 80059fc <__sflush_r+0x48>
 80059f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059fa:	1ac0      	subs	r0, r0, r3
 80059fc:	2300      	movs	r3, #0
 80059fe:	4602      	mov	r2, r0
 8005a00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a02:	6a21      	ldr	r1, [r4, #32]
 8005a04:	4628      	mov	r0, r5
 8005a06:	47b0      	blx	r6
 8005a08:	1c43      	adds	r3, r0, #1
 8005a0a:	89a3      	ldrh	r3, [r4, #12]
 8005a0c:	d106      	bne.n	8005a1c <__sflush_r+0x68>
 8005a0e:	6829      	ldr	r1, [r5, #0]
 8005a10:	291d      	cmp	r1, #29
 8005a12:	d848      	bhi.n	8005aa6 <__sflush_r+0xf2>
 8005a14:	4a29      	ldr	r2, [pc, #164]	; (8005abc <__sflush_r+0x108>)
 8005a16:	40ca      	lsrs	r2, r1
 8005a18:	07d6      	lsls	r6, r2, #31
 8005a1a:	d544      	bpl.n	8005aa6 <__sflush_r+0xf2>
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	6062      	str	r2, [r4, #4]
 8005a20:	04d9      	lsls	r1, r3, #19
 8005a22:	6922      	ldr	r2, [r4, #16]
 8005a24:	6022      	str	r2, [r4, #0]
 8005a26:	d504      	bpl.n	8005a32 <__sflush_r+0x7e>
 8005a28:	1c42      	adds	r2, r0, #1
 8005a2a:	d101      	bne.n	8005a30 <__sflush_r+0x7c>
 8005a2c:	682b      	ldr	r3, [r5, #0]
 8005a2e:	b903      	cbnz	r3, 8005a32 <__sflush_r+0x7e>
 8005a30:	6560      	str	r0, [r4, #84]	; 0x54
 8005a32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a34:	602f      	str	r7, [r5, #0]
 8005a36:	2900      	cmp	r1, #0
 8005a38:	d0c9      	beq.n	80059ce <__sflush_r+0x1a>
 8005a3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a3e:	4299      	cmp	r1, r3
 8005a40:	d002      	beq.n	8005a48 <__sflush_r+0x94>
 8005a42:	4628      	mov	r0, r5
 8005a44:	f000 f994 	bl	8005d70 <_free_r>
 8005a48:	2000      	movs	r0, #0
 8005a4a:	6360      	str	r0, [r4, #52]	; 0x34
 8005a4c:	e7c0      	b.n	80059d0 <__sflush_r+0x1c>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	4628      	mov	r0, r5
 8005a52:	47b0      	blx	r6
 8005a54:	1c41      	adds	r1, r0, #1
 8005a56:	d1c8      	bne.n	80059ea <__sflush_r+0x36>
 8005a58:	682b      	ldr	r3, [r5, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d0c5      	beq.n	80059ea <__sflush_r+0x36>
 8005a5e:	2b1d      	cmp	r3, #29
 8005a60:	d001      	beq.n	8005a66 <__sflush_r+0xb2>
 8005a62:	2b16      	cmp	r3, #22
 8005a64:	d101      	bne.n	8005a6a <__sflush_r+0xb6>
 8005a66:	602f      	str	r7, [r5, #0]
 8005a68:	e7b1      	b.n	80059ce <__sflush_r+0x1a>
 8005a6a:	89a3      	ldrh	r3, [r4, #12]
 8005a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a70:	81a3      	strh	r3, [r4, #12]
 8005a72:	e7ad      	b.n	80059d0 <__sflush_r+0x1c>
 8005a74:	690f      	ldr	r7, [r1, #16]
 8005a76:	2f00      	cmp	r7, #0
 8005a78:	d0a9      	beq.n	80059ce <__sflush_r+0x1a>
 8005a7a:	0793      	lsls	r3, r2, #30
 8005a7c:	680e      	ldr	r6, [r1, #0]
 8005a7e:	bf08      	it	eq
 8005a80:	694b      	ldreq	r3, [r1, #20]
 8005a82:	600f      	str	r7, [r1, #0]
 8005a84:	bf18      	it	ne
 8005a86:	2300      	movne	r3, #0
 8005a88:	eba6 0807 	sub.w	r8, r6, r7
 8005a8c:	608b      	str	r3, [r1, #8]
 8005a8e:	f1b8 0f00 	cmp.w	r8, #0
 8005a92:	dd9c      	ble.n	80059ce <__sflush_r+0x1a>
 8005a94:	4643      	mov	r3, r8
 8005a96:	463a      	mov	r2, r7
 8005a98:	6a21      	ldr	r1, [r4, #32]
 8005a9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	47b0      	blx	r6
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	dc06      	bgt.n	8005ab2 <__sflush_r+0xfe>
 8005aa4:	89a3      	ldrh	r3, [r4, #12]
 8005aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aaa:	81a3      	strh	r3, [r4, #12]
 8005aac:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab0:	e78e      	b.n	80059d0 <__sflush_r+0x1c>
 8005ab2:	4407      	add	r7, r0
 8005ab4:	eba8 0800 	sub.w	r8, r8, r0
 8005ab8:	e7e9      	b.n	8005a8e <__sflush_r+0xda>
 8005aba:	bf00      	nop
 8005abc:	20400001 	.word	0x20400001

08005ac0 <_fflush_r>:
 8005ac0:	b538      	push	{r3, r4, r5, lr}
 8005ac2:	690b      	ldr	r3, [r1, #16]
 8005ac4:	4605      	mov	r5, r0
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	b1db      	cbz	r3, 8005b02 <_fflush_r+0x42>
 8005aca:	b118      	cbz	r0, 8005ad4 <_fflush_r+0x14>
 8005acc:	6983      	ldr	r3, [r0, #24]
 8005ace:	b90b      	cbnz	r3, 8005ad4 <_fflush_r+0x14>
 8005ad0:	f000 f860 	bl	8005b94 <__sinit>
 8005ad4:	4b0c      	ldr	r3, [pc, #48]	; (8005b08 <_fflush_r+0x48>)
 8005ad6:	429c      	cmp	r4, r3
 8005ad8:	d109      	bne.n	8005aee <_fflush_r+0x2e>
 8005ada:	686c      	ldr	r4, [r5, #4]
 8005adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ae0:	b17b      	cbz	r3, 8005b02 <_fflush_r+0x42>
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005aea:	f7ff bf63 	b.w	80059b4 <__sflush_r>
 8005aee:	4b07      	ldr	r3, [pc, #28]	; (8005b0c <_fflush_r+0x4c>)
 8005af0:	429c      	cmp	r4, r3
 8005af2:	d101      	bne.n	8005af8 <_fflush_r+0x38>
 8005af4:	68ac      	ldr	r4, [r5, #8]
 8005af6:	e7f1      	b.n	8005adc <_fflush_r+0x1c>
 8005af8:	4b05      	ldr	r3, [pc, #20]	; (8005b10 <_fflush_r+0x50>)
 8005afa:	429c      	cmp	r4, r3
 8005afc:	bf08      	it	eq
 8005afe:	68ec      	ldreq	r4, [r5, #12]
 8005b00:	e7ec      	b.n	8005adc <_fflush_r+0x1c>
 8005b02:	2000      	movs	r0, #0
 8005b04:	bd38      	pop	{r3, r4, r5, pc}
 8005b06:	bf00      	nop
 8005b08:	080066a4 	.word	0x080066a4
 8005b0c:	080066c4 	.word	0x080066c4
 8005b10:	08006684 	.word	0x08006684

08005b14 <std>:
 8005b14:	2300      	movs	r3, #0
 8005b16:	b510      	push	{r4, lr}
 8005b18:	4604      	mov	r4, r0
 8005b1a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b1e:	6083      	str	r3, [r0, #8]
 8005b20:	8181      	strh	r1, [r0, #12]
 8005b22:	6643      	str	r3, [r0, #100]	; 0x64
 8005b24:	81c2      	strh	r2, [r0, #14]
 8005b26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b2a:	6183      	str	r3, [r0, #24]
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	2208      	movs	r2, #8
 8005b30:	305c      	adds	r0, #92	; 0x5c
 8005b32:	f7ff fdfa 	bl	800572a <memset>
 8005b36:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <std+0x38>)
 8005b38:	6263      	str	r3, [r4, #36]	; 0x24
 8005b3a:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <std+0x3c>)
 8005b3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b3e:	4b05      	ldr	r3, [pc, #20]	; (8005b54 <std+0x40>)
 8005b40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b42:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <std+0x44>)
 8005b44:	6224      	str	r4, [r4, #32]
 8005b46:	6323      	str	r3, [r4, #48]	; 0x30
 8005b48:	bd10      	pop	{r4, pc}
 8005b4a:	bf00      	nop
 8005b4c:	08006471 	.word	0x08006471
 8005b50:	08006493 	.word	0x08006493
 8005b54:	080064cb 	.word	0x080064cb
 8005b58:	080064ef 	.word	0x080064ef

08005b5c <_cleanup_r>:
 8005b5c:	4901      	ldr	r1, [pc, #4]	; (8005b64 <_cleanup_r+0x8>)
 8005b5e:	f000 b885 	b.w	8005c6c <_fwalk_reent>
 8005b62:	bf00      	nop
 8005b64:	08005ac1 	.word	0x08005ac1

08005b68 <__sfmoreglue>:
 8005b68:	b570      	push	{r4, r5, r6, lr}
 8005b6a:	1e4a      	subs	r2, r1, #1
 8005b6c:	2568      	movs	r5, #104	; 0x68
 8005b6e:	4355      	muls	r5, r2
 8005b70:	460e      	mov	r6, r1
 8005b72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b76:	f000 f949 	bl	8005e0c <_malloc_r>
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	b140      	cbz	r0, 8005b90 <__sfmoreglue+0x28>
 8005b7e:	2100      	movs	r1, #0
 8005b80:	e9c0 1600 	strd	r1, r6, [r0]
 8005b84:	300c      	adds	r0, #12
 8005b86:	60a0      	str	r0, [r4, #8]
 8005b88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b8c:	f7ff fdcd 	bl	800572a <memset>
 8005b90:	4620      	mov	r0, r4
 8005b92:	bd70      	pop	{r4, r5, r6, pc}

08005b94 <__sinit>:
 8005b94:	6983      	ldr	r3, [r0, #24]
 8005b96:	b510      	push	{r4, lr}
 8005b98:	4604      	mov	r4, r0
 8005b9a:	bb33      	cbnz	r3, 8005bea <__sinit+0x56>
 8005b9c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005ba0:	6503      	str	r3, [r0, #80]	; 0x50
 8005ba2:	4b12      	ldr	r3, [pc, #72]	; (8005bec <__sinit+0x58>)
 8005ba4:	4a12      	ldr	r2, [pc, #72]	; (8005bf0 <__sinit+0x5c>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6282      	str	r2, [r0, #40]	; 0x28
 8005baa:	4298      	cmp	r0, r3
 8005bac:	bf04      	itt	eq
 8005bae:	2301      	moveq	r3, #1
 8005bb0:	6183      	streq	r3, [r0, #24]
 8005bb2:	f000 f81f 	bl	8005bf4 <__sfp>
 8005bb6:	6060      	str	r0, [r4, #4]
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f000 f81b 	bl	8005bf4 <__sfp>
 8005bbe:	60a0      	str	r0, [r4, #8]
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f000 f817 	bl	8005bf4 <__sfp>
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	60e0      	str	r0, [r4, #12]
 8005bca:	2104      	movs	r1, #4
 8005bcc:	6860      	ldr	r0, [r4, #4]
 8005bce:	f7ff ffa1 	bl	8005b14 <std>
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	2109      	movs	r1, #9
 8005bd6:	68a0      	ldr	r0, [r4, #8]
 8005bd8:	f7ff ff9c 	bl	8005b14 <std>
 8005bdc:	2202      	movs	r2, #2
 8005bde:	2112      	movs	r1, #18
 8005be0:	68e0      	ldr	r0, [r4, #12]
 8005be2:	f7ff ff97 	bl	8005b14 <std>
 8005be6:	2301      	movs	r3, #1
 8005be8:	61a3      	str	r3, [r4, #24]
 8005bea:	bd10      	pop	{r4, pc}
 8005bec:	08006680 	.word	0x08006680
 8005bf0:	08005b5d 	.word	0x08005b5d

08005bf4 <__sfp>:
 8005bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf6:	4b1b      	ldr	r3, [pc, #108]	; (8005c64 <__sfp+0x70>)
 8005bf8:	681e      	ldr	r6, [r3, #0]
 8005bfa:	69b3      	ldr	r3, [r6, #24]
 8005bfc:	4607      	mov	r7, r0
 8005bfe:	b913      	cbnz	r3, 8005c06 <__sfp+0x12>
 8005c00:	4630      	mov	r0, r6
 8005c02:	f7ff ffc7 	bl	8005b94 <__sinit>
 8005c06:	3648      	adds	r6, #72	; 0x48
 8005c08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	d503      	bpl.n	8005c18 <__sfp+0x24>
 8005c10:	6833      	ldr	r3, [r6, #0]
 8005c12:	b133      	cbz	r3, 8005c22 <__sfp+0x2e>
 8005c14:	6836      	ldr	r6, [r6, #0]
 8005c16:	e7f7      	b.n	8005c08 <__sfp+0x14>
 8005c18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c1c:	b16d      	cbz	r5, 8005c3a <__sfp+0x46>
 8005c1e:	3468      	adds	r4, #104	; 0x68
 8005c20:	e7f4      	b.n	8005c0c <__sfp+0x18>
 8005c22:	2104      	movs	r1, #4
 8005c24:	4638      	mov	r0, r7
 8005c26:	f7ff ff9f 	bl	8005b68 <__sfmoreglue>
 8005c2a:	6030      	str	r0, [r6, #0]
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	d1f1      	bne.n	8005c14 <__sfp+0x20>
 8005c30:	230c      	movs	r3, #12
 8005c32:	603b      	str	r3, [r7, #0]
 8005c34:	4604      	mov	r4, r0
 8005c36:	4620      	mov	r0, r4
 8005c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c3a:	4b0b      	ldr	r3, [pc, #44]	; (8005c68 <__sfp+0x74>)
 8005c3c:	6665      	str	r5, [r4, #100]	; 0x64
 8005c3e:	e9c4 5500 	strd	r5, r5, [r4]
 8005c42:	60a5      	str	r5, [r4, #8]
 8005c44:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005c48:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005c4c:	2208      	movs	r2, #8
 8005c4e:	4629      	mov	r1, r5
 8005c50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c54:	f7ff fd69 	bl	800572a <memset>
 8005c58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c60:	e7e9      	b.n	8005c36 <__sfp+0x42>
 8005c62:	bf00      	nop
 8005c64:	08006680 	.word	0x08006680
 8005c68:	ffff0001 	.word	0xffff0001

08005c6c <_fwalk_reent>:
 8005c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c70:	4680      	mov	r8, r0
 8005c72:	4689      	mov	r9, r1
 8005c74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c78:	2600      	movs	r6, #0
 8005c7a:	b914      	cbnz	r4, 8005c82 <_fwalk_reent+0x16>
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c82:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005c86:	3f01      	subs	r7, #1
 8005c88:	d501      	bpl.n	8005c8e <_fwalk_reent+0x22>
 8005c8a:	6824      	ldr	r4, [r4, #0]
 8005c8c:	e7f5      	b.n	8005c7a <_fwalk_reent+0xe>
 8005c8e:	89ab      	ldrh	r3, [r5, #12]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d907      	bls.n	8005ca4 <_fwalk_reent+0x38>
 8005c94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	d003      	beq.n	8005ca4 <_fwalk_reent+0x38>
 8005c9c:	4629      	mov	r1, r5
 8005c9e:	4640      	mov	r0, r8
 8005ca0:	47c8      	blx	r9
 8005ca2:	4306      	orrs	r6, r0
 8005ca4:	3568      	adds	r5, #104	; 0x68
 8005ca6:	e7ee      	b.n	8005c86 <_fwalk_reent+0x1a>

08005ca8 <__swhatbuf_r>:
 8005ca8:	b570      	push	{r4, r5, r6, lr}
 8005caa:	460e      	mov	r6, r1
 8005cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb0:	2900      	cmp	r1, #0
 8005cb2:	b096      	sub	sp, #88	; 0x58
 8005cb4:	4614      	mov	r4, r2
 8005cb6:	461d      	mov	r5, r3
 8005cb8:	da07      	bge.n	8005cca <__swhatbuf_r+0x22>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	602b      	str	r3, [r5, #0]
 8005cbe:	89b3      	ldrh	r3, [r6, #12]
 8005cc0:	061a      	lsls	r2, r3, #24
 8005cc2:	d410      	bmi.n	8005ce6 <__swhatbuf_r+0x3e>
 8005cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cc8:	e00e      	b.n	8005ce8 <__swhatbuf_r+0x40>
 8005cca:	466a      	mov	r2, sp
 8005ccc:	f000 fc36 	bl	800653c <_fstat_r>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	dbf2      	blt.n	8005cba <__swhatbuf_r+0x12>
 8005cd4:	9a01      	ldr	r2, [sp, #4]
 8005cd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005cda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005cde:	425a      	negs	r2, r3
 8005ce0:	415a      	adcs	r2, r3
 8005ce2:	602a      	str	r2, [r5, #0]
 8005ce4:	e7ee      	b.n	8005cc4 <__swhatbuf_r+0x1c>
 8005ce6:	2340      	movs	r3, #64	; 0x40
 8005ce8:	2000      	movs	r0, #0
 8005cea:	6023      	str	r3, [r4, #0]
 8005cec:	b016      	add	sp, #88	; 0x58
 8005cee:	bd70      	pop	{r4, r5, r6, pc}

08005cf0 <__smakebuf_r>:
 8005cf0:	898b      	ldrh	r3, [r1, #12]
 8005cf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cf4:	079d      	lsls	r5, r3, #30
 8005cf6:	4606      	mov	r6, r0
 8005cf8:	460c      	mov	r4, r1
 8005cfa:	d507      	bpl.n	8005d0c <__smakebuf_r+0x1c>
 8005cfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	6123      	str	r3, [r4, #16]
 8005d04:	2301      	movs	r3, #1
 8005d06:	6163      	str	r3, [r4, #20]
 8005d08:	b002      	add	sp, #8
 8005d0a:	bd70      	pop	{r4, r5, r6, pc}
 8005d0c:	ab01      	add	r3, sp, #4
 8005d0e:	466a      	mov	r2, sp
 8005d10:	f7ff ffca 	bl	8005ca8 <__swhatbuf_r>
 8005d14:	9900      	ldr	r1, [sp, #0]
 8005d16:	4605      	mov	r5, r0
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f000 f877 	bl	8005e0c <_malloc_r>
 8005d1e:	b948      	cbnz	r0, 8005d34 <__smakebuf_r+0x44>
 8005d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d24:	059a      	lsls	r2, r3, #22
 8005d26:	d4ef      	bmi.n	8005d08 <__smakebuf_r+0x18>
 8005d28:	f023 0303 	bic.w	r3, r3, #3
 8005d2c:	f043 0302 	orr.w	r3, r3, #2
 8005d30:	81a3      	strh	r3, [r4, #12]
 8005d32:	e7e3      	b.n	8005cfc <__smakebuf_r+0xc>
 8005d34:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <__smakebuf_r+0x7c>)
 8005d36:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d38:	89a3      	ldrh	r3, [r4, #12]
 8005d3a:	6020      	str	r0, [r4, #0]
 8005d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d40:	81a3      	strh	r3, [r4, #12]
 8005d42:	9b00      	ldr	r3, [sp, #0]
 8005d44:	6163      	str	r3, [r4, #20]
 8005d46:	9b01      	ldr	r3, [sp, #4]
 8005d48:	6120      	str	r0, [r4, #16]
 8005d4a:	b15b      	cbz	r3, 8005d64 <__smakebuf_r+0x74>
 8005d4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d50:	4630      	mov	r0, r6
 8005d52:	f000 fc05 	bl	8006560 <_isatty_r>
 8005d56:	b128      	cbz	r0, 8005d64 <__smakebuf_r+0x74>
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	f023 0303 	bic.w	r3, r3, #3
 8005d5e:	f043 0301 	orr.w	r3, r3, #1
 8005d62:	81a3      	strh	r3, [r4, #12]
 8005d64:	89a3      	ldrh	r3, [r4, #12]
 8005d66:	431d      	orrs	r5, r3
 8005d68:	81a5      	strh	r5, [r4, #12]
 8005d6a:	e7cd      	b.n	8005d08 <__smakebuf_r+0x18>
 8005d6c:	08005b5d 	.word	0x08005b5d

08005d70 <_free_r>:
 8005d70:	b538      	push	{r3, r4, r5, lr}
 8005d72:	4605      	mov	r5, r0
 8005d74:	2900      	cmp	r1, #0
 8005d76:	d045      	beq.n	8005e04 <_free_r+0x94>
 8005d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d7c:	1f0c      	subs	r4, r1, #4
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	bfb8      	it	lt
 8005d82:	18e4      	addlt	r4, r4, r3
 8005d84:	f000 fc0e 	bl	80065a4 <__malloc_lock>
 8005d88:	4a1f      	ldr	r2, [pc, #124]	; (8005e08 <_free_r+0x98>)
 8005d8a:	6813      	ldr	r3, [r2, #0]
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	b933      	cbnz	r3, 8005d9e <_free_r+0x2e>
 8005d90:	6063      	str	r3, [r4, #4]
 8005d92:	6014      	str	r4, [r2, #0]
 8005d94:	4628      	mov	r0, r5
 8005d96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d9a:	f000 bc04 	b.w	80065a6 <__malloc_unlock>
 8005d9e:	42a3      	cmp	r3, r4
 8005da0:	d90c      	bls.n	8005dbc <_free_r+0x4c>
 8005da2:	6821      	ldr	r1, [r4, #0]
 8005da4:	1862      	adds	r2, r4, r1
 8005da6:	4293      	cmp	r3, r2
 8005da8:	bf04      	itt	eq
 8005daa:	681a      	ldreq	r2, [r3, #0]
 8005dac:	685b      	ldreq	r3, [r3, #4]
 8005dae:	6063      	str	r3, [r4, #4]
 8005db0:	bf04      	itt	eq
 8005db2:	1852      	addeq	r2, r2, r1
 8005db4:	6022      	streq	r2, [r4, #0]
 8005db6:	6004      	str	r4, [r0, #0]
 8005db8:	e7ec      	b.n	8005d94 <_free_r+0x24>
 8005dba:	4613      	mov	r3, r2
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	b10a      	cbz	r2, 8005dc4 <_free_r+0x54>
 8005dc0:	42a2      	cmp	r2, r4
 8005dc2:	d9fa      	bls.n	8005dba <_free_r+0x4a>
 8005dc4:	6819      	ldr	r1, [r3, #0]
 8005dc6:	1858      	adds	r0, r3, r1
 8005dc8:	42a0      	cmp	r0, r4
 8005dca:	d10b      	bne.n	8005de4 <_free_r+0x74>
 8005dcc:	6820      	ldr	r0, [r4, #0]
 8005dce:	4401      	add	r1, r0
 8005dd0:	1858      	adds	r0, r3, r1
 8005dd2:	4282      	cmp	r2, r0
 8005dd4:	6019      	str	r1, [r3, #0]
 8005dd6:	d1dd      	bne.n	8005d94 <_free_r+0x24>
 8005dd8:	6810      	ldr	r0, [r2, #0]
 8005dda:	6852      	ldr	r2, [r2, #4]
 8005ddc:	605a      	str	r2, [r3, #4]
 8005dde:	4401      	add	r1, r0
 8005de0:	6019      	str	r1, [r3, #0]
 8005de2:	e7d7      	b.n	8005d94 <_free_r+0x24>
 8005de4:	d902      	bls.n	8005dec <_free_r+0x7c>
 8005de6:	230c      	movs	r3, #12
 8005de8:	602b      	str	r3, [r5, #0]
 8005dea:	e7d3      	b.n	8005d94 <_free_r+0x24>
 8005dec:	6820      	ldr	r0, [r4, #0]
 8005dee:	1821      	adds	r1, r4, r0
 8005df0:	428a      	cmp	r2, r1
 8005df2:	bf04      	itt	eq
 8005df4:	6811      	ldreq	r1, [r2, #0]
 8005df6:	6852      	ldreq	r2, [r2, #4]
 8005df8:	6062      	str	r2, [r4, #4]
 8005dfa:	bf04      	itt	eq
 8005dfc:	1809      	addeq	r1, r1, r0
 8005dfe:	6021      	streq	r1, [r4, #0]
 8005e00:	605c      	str	r4, [r3, #4]
 8005e02:	e7c7      	b.n	8005d94 <_free_r+0x24>
 8005e04:	bd38      	pop	{r3, r4, r5, pc}
 8005e06:	bf00      	nop
 8005e08:	20004404 	.word	0x20004404

08005e0c <_malloc_r>:
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	1ccd      	adds	r5, r1, #3
 8005e10:	f025 0503 	bic.w	r5, r5, #3
 8005e14:	3508      	adds	r5, #8
 8005e16:	2d0c      	cmp	r5, #12
 8005e18:	bf38      	it	cc
 8005e1a:	250c      	movcc	r5, #12
 8005e1c:	2d00      	cmp	r5, #0
 8005e1e:	4606      	mov	r6, r0
 8005e20:	db01      	blt.n	8005e26 <_malloc_r+0x1a>
 8005e22:	42a9      	cmp	r1, r5
 8005e24:	d903      	bls.n	8005e2e <_malloc_r+0x22>
 8005e26:	230c      	movs	r3, #12
 8005e28:	6033      	str	r3, [r6, #0]
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	bd70      	pop	{r4, r5, r6, pc}
 8005e2e:	f000 fbb9 	bl	80065a4 <__malloc_lock>
 8005e32:	4a21      	ldr	r2, [pc, #132]	; (8005eb8 <_malloc_r+0xac>)
 8005e34:	6814      	ldr	r4, [r2, #0]
 8005e36:	4621      	mov	r1, r4
 8005e38:	b991      	cbnz	r1, 8005e60 <_malloc_r+0x54>
 8005e3a:	4c20      	ldr	r4, [pc, #128]	; (8005ebc <_malloc_r+0xb0>)
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	b91b      	cbnz	r3, 8005e48 <_malloc_r+0x3c>
 8005e40:	4630      	mov	r0, r6
 8005e42:	f000 fb05 	bl	8006450 <_sbrk_r>
 8005e46:	6020      	str	r0, [r4, #0]
 8005e48:	4629      	mov	r1, r5
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	f000 fb00 	bl	8006450 <_sbrk_r>
 8005e50:	1c43      	adds	r3, r0, #1
 8005e52:	d124      	bne.n	8005e9e <_malloc_r+0x92>
 8005e54:	230c      	movs	r3, #12
 8005e56:	6033      	str	r3, [r6, #0]
 8005e58:	4630      	mov	r0, r6
 8005e5a:	f000 fba4 	bl	80065a6 <__malloc_unlock>
 8005e5e:	e7e4      	b.n	8005e2a <_malloc_r+0x1e>
 8005e60:	680b      	ldr	r3, [r1, #0]
 8005e62:	1b5b      	subs	r3, r3, r5
 8005e64:	d418      	bmi.n	8005e98 <_malloc_r+0x8c>
 8005e66:	2b0b      	cmp	r3, #11
 8005e68:	d90f      	bls.n	8005e8a <_malloc_r+0x7e>
 8005e6a:	600b      	str	r3, [r1, #0]
 8005e6c:	50cd      	str	r5, [r1, r3]
 8005e6e:	18cc      	adds	r4, r1, r3
 8005e70:	4630      	mov	r0, r6
 8005e72:	f000 fb98 	bl	80065a6 <__malloc_unlock>
 8005e76:	f104 000b 	add.w	r0, r4, #11
 8005e7a:	1d23      	adds	r3, r4, #4
 8005e7c:	f020 0007 	bic.w	r0, r0, #7
 8005e80:	1ac3      	subs	r3, r0, r3
 8005e82:	d0d3      	beq.n	8005e2c <_malloc_r+0x20>
 8005e84:	425a      	negs	r2, r3
 8005e86:	50e2      	str	r2, [r4, r3]
 8005e88:	e7d0      	b.n	8005e2c <_malloc_r+0x20>
 8005e8a:	428c      	cmp	r4, r1
 8005e8c:	684b      	ldr	r3, [r1, #4]
 8005e8e:	bf16      	itet	ne
 8005e90:	6063      	strne	r3, [r4, #4]
 8005e92:	6013      	streq	r3, [r2, #0]
 8005e94:	460c      	movne	r4, r1
 8005e96:	e7eb      	b.n	8005e70 <_malloc_r+0x64>
 8005e98:	460c      	mov	r4, r1
 8005e9a:	6849      	ldr	r1, [r1, #4]
 8005e9c:	e7cc      	b.n	8005e38 <_malloc_r+0x2c>
 8005e9e:	1cc4      	adds	r4, r0, #3
 8005ea0:	f024 0403 	bic.w	r4, r4, #3
 8005ea4:	42a0      	cmp	r0, r4
 8005ea6:	d005      	beq.n	8005eb4 <_malloc_r+0xa8>
 8005ea8:	1a21      	subs	r1, r4, r0
 8005eaa:	4630      	mov	r0, r6
 8005eac:	f000 fad0 	bl	8006450 <_sbrk_r>
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	d0cf      	beq.n	8005e54 <_malloc_r+0x48>
 8005eb4:	6025      	str	r5, [r4, #0]
 8005eb6:	e7db      	b.n	8005e70 <_malloc_r+0x64>
 8005eb8:	20004404 	.word	0x20004404
 8005ebc:	20004408 	.word	0x20004408

08005ec0 <__sfputc_r>:
 8005ec0:	6893      	ldr	r3, [r2, #8]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	b410      	push	{r4}
 8005ec8:	6093      	str	r3, [r2, #8]
 8005eca:	da08      	bge.n	8005ede <__sfputc_r+0x1e>
 8005ecc:	6994      	ldr	r4, [r2, #24]
 8005ece:	42a3      	cmp	r3, r4
 8005ed0:	db01      	blt.n	8005ed6 <__sfputc_r+0x16>
 8005ed2:	290a      	cmp	r1, #10
 8005ed4:	d103      	bne.n	8005ede <__sfputc_r+0x1e>
 8005ed6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005eda:	f7ff bcab 	b.w	8005834 <__swbuf_r>
 8005ede:	6813      	ldr	r3, [r2, #0]
 8005ee0:	1c58      	adds	r0, r3, #1
 8005ee2:	6010      	str	r0, [r2, #0]
 8005ee4:	7019      	strb	r1, [r3, #0]
 8005ee6:	4608      	mov	r0, r1
 8005ee8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <__sfputs_r>:
 8005eee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ef0:	4606      	mov	r6, r0
 8005ef2:	460f      	mov	r7, r1
 8005ef4:	4614      	mov	r4, r2
 8005ef6:	18d5      	adds	r5, r2, r3
 8005ef8:	42ac      	cmp	r4, r5
 8005efa:	d101      	bne.n	8005f00 <__sfputs_r+0x12>
 8005efc:	2000      	movs	r0, #0
 8005efe:	e007      	b.n	8005f10 <__sfputs_r+0x22>
 8005f00:	463a      	mov	r2, r7
 8005f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f06:	4630      	mov	r0, r6
 8005f08:	f7ff ffda 	bl	8005ec0 <__sfputc_r>
 8005f0c:	1c43      	adds	r3, r0, #1
 8005f0e:	d1f3      	bne.n	8005ef8 <__sfputs_r+0xa>
 8005f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f14 <_vfiprintf_r>:
 8005f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f18:	460c      	mov	r4, r1
 8005f1a:	b09d      	sub	sp, #116	; 0x74
 8005f1c:	4617      	mov	r7, r2
 8005f1e:	461d      	mov	r5, r3
 8005f20:	4606      	mov	r6, r0
 8005f22:	b118      	cbz	r0, 8005f2c <_vfiprintf_r+0x18>
 8005f24:	6983      	ldr	r3, [r0, #24]
 8005f26:	b90b      	cbnz	r3, 8005f2c <_vfiprintf_r+0x18>
 8005f28:	f7ff fe34 	bl	8005b94 <__sinit>
 8005f2c:	4b7c      	ldr	r3, [pc, #496]	; (8006120 <_vfiprintf_r+0x20c>)
 8005f2e:	429c      	cmp	r4, r3
 8005f30:	d158      	bne.n	8005fe4 <_vfiprintf_r+0xd0>
 8005f32:	6874      	ldr	r4, [r6, #4]
 8005f34:	89a3      	ldrh	r3, [r4, #12]
 8005f36:	0718      	lsls	r0, r3, #28
 8005f38:	d55e      	bpl.n	8005ff8 <_vfiprintf_r+0xe4>
 8005f3a:	6923      	ldr	r3, [r4, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d05b      	beq.n	8005ff8 <_vfiprintf_r+0xe4>
 8005f40:	2300      	movs	r3, #0
 8005f42:	9309      	str	r3, [sp, #36]	; 0x24
 8005f44:	2320      	movs	r3, #32
 8005f46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f4a:	2330      	movs	r3, #48	; 0x30
 8005f4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f50:	9503      	str	r5, [sp, #12]
 8005f52:	f04f 0b01 	mov.w	fp, #1
 8005f56:	46b8      	mov	r8, r7
 8005f58:	4645      	mov	r5, r8
 8005f5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005f5e:	b10b      	cbz	r3, 8005f64 <_vfiprintf_r+0x50>
 8005f60:	2b25      	cmp	r3, #37	; 0x25
 8005f62:	d154      	bne.n	800600e <_vfiprintf_r+0xfa>
 8005f64:	ebb8 0a07 	subs.w	sl, r8, r7
 8005f68:	d00b      	beq.n	8005f82 <_vfiprintf_r+0x6e>
 8005f6a:	4653      	mov	r3, sl
 8005f6c:	463a      	mov	r2, r7
 8005f6e:	4621      	mov	r1, r4
 8005f70:	4630      	mov	r0, r6
 8005f72:	f7ff ffbc 	bl	8005eee <__sfputs_r>
 8005f76:	3001      	adds	r0, #1
 8005f78:	f000 80c2 	beq.w	8006100 <_vfiprintf_r+0x1ec>
 8005f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f7e:	4453      	add	r3, sl
 8005f80:	9309      	str	r3, [sp, #36]	; 0x24
 8005f82:	f898 3000 	ldrb.w	r3, [r8]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 80ba 	beq.w	8006100 <_vfiprintf_r+0x1ec>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f96:	9304      	str	r3, [sp, #16]
 8005f98:	9307      	str	r3, [sp, #28]
 8005f9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f9e:	931a      	str	r3, [sp, #104]	; 0x68
 8005fa0:	46a8      	mov	r8, r5
 8005fa2:	2205      	movs	r2, #5
 8005fa4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005fa8:	485e      	ldr	r0, [pc, #376]	; (8006124 <_vfiprintf_r+0x210>)
 8005faa:	f7fa f911 	bl	80001d0 <memchr>
 8005fae:	9b04      	ldr	r3, [sp, #16]
 8005fb0:	bb78      	cbnz	r0, 8006012 <_vfiprintf_r+0xfe>
 8005fb2:	06d9      	lsls	r1, r3, #27
 8005fb4:	bf44      	itt	mi
 8005fb6:	2220      	movmi	r2, #32
 8005fb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005fbc:	071a      	lsls	r2, r3, #28
 8005fbe:	bf44      	itt	mi
 8005fc0:	222b      	movmi	r2, #43	; 0x2b
 8005fc2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005fc6:	782a      	ldrb	r2, [r5, #0]
 8005fc8:	2a2a      	cmp	r2, #42	; 0x2a
 8005fca:	d02a      	beq.n	8006022 <_vfiprintf_r+0x10e>
 8005fcc:	9a07      	ldr	r2, [sp, #28]
 8005fce:	46a8      	mov	r8, r5
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	250a      	movs	r5, #10
 8005fd4:	4641      	mov	r1, r8
 8005fd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fda:	3b30      	subs	r3, #48	; 0x30
 8005fdc:	2b09      	cmp	r3, #9
 8005fde:	d969      	bls.n	80060b4 <_vfiprintf_r+0x1a0>
 8005fe0:	b360      	cbz	r0, 800603c <_vfiprintf_r+0x128>
 8005fe2:	e024      	b.n	800602e <_vfiprintf_r+0x11a>
 8005fe4:	4b50      	ldr	r3, [pc, #320]	; (8006128 <_vfiprintf_r+0x214>)
 8005fe6:	429c      	cmp	r4, r3
 8005fe8:	d101      	bne.n	8005fee <_vfiprintf_r+0xda>
 8005fea:	68b4      	ldr	r4, [r6, #8]
 8005fec:	e7a2      	b.n	8005f34 <_vfiprintf_r+0x20>
 8005fee:	4b4f      	ldr	r3, [pc, #316]	; (800612c <_vfiprintf_r+0x218>)
 8005ff0:	429c      	cmp	r4, r3
 8005ff2:	bf08      	it	eq
 8005ff4:	68f4      	ldreq	r4, [r6, #12]
 8005ff6:	e79d      	b.n	8005f34 <_vfiprintf_r+0x20>
 8005ff8:	4621      	mov	r1, r4
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	f7ff fc6c 	bl	80058d8 <__swsetup_r>
 8006000:	2800      	cmp	r0, #0
 8006002:	d09d      	beq.n	8005f40 <_vfiprintf_r+0x2c>
 8006004:	f04f 30ff 	mov.w	r0, #4294967295
 8006008:	b01d      	add	sp, #116	; 0x74
 800600a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600e:	46a8      	mov	r8, r5
 8006010:	e7a2      	b.n	8005f58 <_vfiprintf_r+0x44>
 8006012:	4a44      	ldr	r2, [pc, #272]	; (8006124 <_vfiprintf_r+0x210>)
 8006014:	1a80      	subs	r0, r0, r2
 8006016:	fa0b f000 	lsl.w	r0, fp, r0
 800601a:	4318      	orrs	r0, r3
 800601c:	9004      	str	r0, [sp, #16]
 800601e:	4645      	mov	r5, r8
 8006020:	e7be      	b.n	8005fa0 <_vfiprintf_r+0x8c>
 8006022:	9a03      	ldr	r2, [sp, #12]
 8006024:	1d11      	adds	r1, r2, #4
 8006026:	6812      	ldr	r2, [r2, #0]
 8006028:	9103      	str	r1, [sp, #12]
 800602a:	2a00      	cmp	r2, #0
 800602c:	db01      	blt.n	8006032 <_vfiprintf_r+0x11e>
 800602e:	9207      	str	r2, [sp, #28]
 8006030:	e004      	b.n	800603c <_vfiprintf_r+0x128>
 8006032:	4252      	negs	r2, r2
 8006034:	f043 0302 	orr.w	r3, r3, #2
 8006038:	9207      	str	r2, [sp, #28]
 800603a:	9304      	str	r3, [sp, #16]
 800603c:	f898 3000 	ldrb.w	r3, [r8]
 8006040:	2b2e      	cmp	r3, #46	; 0x2e
 8006042:	d10e      	bne.n	8006062 <_vfiprintf_r+0x14e>
 8006044:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006048:	2b2a      	cmp	r3, #42	; 0x2a
 800604a:	d138      	bne.n	80060be <_vfiprintf_r+0x1aa>
 800604c:	9b03      	ldr	r3, [sp, #12]
 800604e:	1d1a      	adds	r2, r3, #4
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	9203      	str	r2, [sp, #12]
 8006054:	2b00      	cmp	r3, #0
 8006056:	bfb8      	it	lt
 8006058:	f04f 33ff 	movlt.w	r3, #4294967295
 800605c:	f108 0802 	add.w	r8, r8, #2
 8006060:	9305      	str	r3, [sp, #20]
 8006062:	4d33      	ldr	r5, [pc, #204]	; (8006130 <_vfiprintf_r+0x21c>)
 8006064:	f898 1000 	ldrb.w	r1, [r8]
 8006068:	2203      	movs	r2, #3
 800606a:	4628      	mov	r0, r5
 800606c:	f7fa f8b0 	bl	80001d0 <memchr>
 8006070:	b140      	cbz	r0, 8006084 <_vfiprintf_r+0x170>
 8006072:	2340      	movs	r3, #64	; 0x40
 8006074:	1b40      	subs	r0, r0, r5
 8006076:	fa03 f000 	lsl.w	r0, r3, r0
 800607a:	9b04      	ldr	r3, [sp, #16]
 800607c:	4303      	orrs	r3, r0
 800607e:	f108 0801 	add.w	r8, r8, #1
 8006082:	9304      	str	r3, [sp, #16]
 8006084:	f898 1000 	ldrb.w	r1, [r8]
 8006088:	482a      	ldr	r0, [pc, #168]	; (8006134 <_vfiprintf_r+0x220>)
 800608a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800608e:	2206      	movs	r2, #6
 8006090:	f108 0701 	add.w	r7, r8, #1
 8006094:	f7fa f89c 	bl	80001d0 <memchr>
 8006098:	2800      	cmp	r0, #0
 800609a:	d037      	beq.n	800610c <_vfiprintf_r+0x1f8>
 800609c:	4b26      	ldr	r3, [pc, #152]	; (8006138 <_vfiprintf_r+0x224>)
 800609e:	bb1b      	cbnz	r3, 80060e8 <_vfiprintf_r+0x1d4>
 80060a0:	9b03      	ldr	r3, [sp, #12]
 80060a2:	3307      	adds	r3, #7
 80060a4:	f023 0307 	bic.w	r3, r3, #7
 80060a8:	3308      	adds	r3, #8
 80060aa:	9303      	str	r3, [sp, #12]
 80060ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ae:	444b      	add	r3, r9
 80060b0:	9309      	str	r3, [sp, #36]	; 0x24
 80060b2:	e750      	b.n	8005f56 <_vfiprintf_r+0x42>
 80060b4:	fb05 3202 	mla	r2, r5, r2, r3
 80060b8:	2001      	movs	r0, #1
 80060ba:	4688      	mov	r8, r1
 80060bc:	e78a      	b.n	8005fd4 <_vfiprintf_r+0xc0>
 80060be:	2300      	movs	r3, #0
 80060c0:	f108 0801 	add.w	r8, r8, #1
 80060c4:	9305      	str	r3, [sp, #20]
 80060c6:	4619      	mov	r1, r3
 80060c8:	250a      	movs	r5, #10
 80060ca:	4640      	mov	r0, r8
 80060cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060d0:	3a30      	subs	r2, #48	; 0x30
 80060d2:	2a09      	cmp	r2, #9
 80060d4:	d903      	bls.n	80060de <_vfiprintf_r+0x1ca>
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0c3      	beq.n	8006062 <_vfiprintf_r+0x14e>
 80060da:	9105      	str	r1, [sp, #20]
 80060dc:	e7c1      	b.n	8006062 <_vfiprintf_r+0x14e>
 80060de:	fb05 2101 	mla	r1, r5, r1, r2
 80060e2:	2301      	movs	r3, #1
 80060e4:	4680      	mov	r8, r0
 80060e6:	e7f0      	b.n	80060ca <_vfiprintf_r+0x1b6>
 80060e8:	ab03      	add	r3, sp, #12
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	4622      	mov	r2, r4
 80060ee:	4b13      	ldr	r3, [pc, #76]	; (800613c <_vfiprintf_r+0x228>)
 80060f0:	a904      	add	r1, sp, #16
 80060f2:	4630      	mov	r0, r6
 80060f4:	f3af 8000 	nop.w
 80060f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80060fc:	4681      	mov	r9, r0
 80060fe:	d1d5      	bne.n	80060ac <_vfiprintf_r+0x198>
 8006100:	89a3      	ldrh	r3, [r4, #12]
 8006102:	065b      	lsls	r3, r3, #25
 8006104:	f53f af7e 	bmi.w	8006004 <_vfiprintf_r+0xf0>
 8006108:	9809      	ldr	r0, [sp, #36]	; 0x24
 800610a:	e77d      	b.n	8006008 <_vfiprintf_r+0xf4>
 800610c:	ab03      	add	r3, sp, #12
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	4622      	mov	r2, r4
 8006112:	4b0a      	ldr	r3, [pc, #40]	; (800613c <_vfiprintf_r+0x228>)
 8006114:	a904      	add	r1, sp, #16
 8006116:	4630      	mov	r0, r6
 8006118:	f000 f888 	bl	800622c <_printf_i>
 800611c:	e7ec      	b.n	80060f8 <_vfiprintf_r+0x1e4>
 800611e:	bf00      	nop
 8006120:	080066a4 	.word	0x080066a4
 8006124:	080066e4 	.word	0x080066e4
 8006128:	080066c4 	.word	0x080066c4
 800612c:	08006684 	.word	0x08006684
 8006130:	080066ea 	.word	0x080066ea
 8006134:	080066ee 	.word	0x080066ee
 8006138:	00000000 	.word	0x00000000
 800613c:	08005eef 	.word	0x08005eef

08006140 <_printf_common>:
 8006140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006144:	4691      	mov	r9, r2
 8006146:	461f      	mov	r7, r3
 8006148:	688a      	ldr	r2, [r1, #8]
 800614a:	690b      	ldr	r3, [r1, #16]
 800614c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006150:	4293      	cmp	r3, r2
 8006152:	bfb8      	it	lt
 8006154:	4613      	movlt	r3, r2
 8006156:	f8c9 3000 	str.w	r3, [r9]
 800615a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800615e:	4606      	mov	r6, r0
 8006160:	460c      	mov	r4, r1
 8006162:	b112      	cbz	r2, 800616a <_printf_common+0x2a>
 8006164:	3301      	adds	r3, #1
 8006166:	f8c9 3000 	str.w	r3, [r9]
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	0699      	lsls	r1, r3, #26
 800616e:	bf42      	ittt	mi
 8006170:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006174:	3302      	addmi	r3, #2
 8006176:	f8c9 3000 	strmi.w	r3, [r9]
 800617a:	6825      	ldr	r5, [r4, #0]
 800617c:	f015 0506 	ands.w	r5, r5, #6
 8006180:	d107      	bne.n	8006192 <_printf_common+0x52>
 8006182:	f104 0a19 	add.w	sl, r4, #25
 8006186:	68e3      	ldr	r3, [r4, #12]
 8006188:	f8d9 2000 	ldr.w	r2, [r9]
 800618c:	1a9b      	subs	r3, r3, r2
 800618e:	42ab      	cmp	r3, r5
 8006190:	dc28      	bgt.n	80061e4 <_printf_common+0xa4>
 8006192:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006196:	6822      	ldr	r2, [r4, #0]
 8006198:	3300      	adds	r3, #0
 800619a:	bf18      	it	ne
 800619c:	2301      	movne	r3, #1
 800619e:	0692      	lsls	r2, r2, #26
 80061a0:	d42d      	bmi.n	80061fe <_printf_common+0xbe>
 80061a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061a6:	4639      	mov	r1, r7
 80061a8:	4630      	mov	r0, r6
 80061aa:	47c0      	blx	r8
 80061ac:	3001      	adds	r0, #1
 80061ae:	d020      	beq.n	80061f2 <_printf_common+0xb2>
 80061b0:	6823      	ldr	r3, [r4, #0]
 80061b2:	68e5      	ldr	r5, [r4, #12]
 80061b4:	f8d9 2000 	ldr.w	r2, [r9]
 80061b8:	f003 0306 	and.w	r3, r3, #6
 80061bc:	2b04      	cmp	r3, #4
 80061be:	bf08      	it	eq
 80061c0:	1aad      	subeq	r5, r5, r2
 80061c2:	68a3      	ldr	r3, [r4, #8]
 80061c4:	6922      	ldr	r2, [r4, #16]
 80061c6:	bf0c      	ite	eq
 80061c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061cc:	2500      	movne	r5, #0
 80061ce:	4293      	cmp	r3, r2
 80061d0:	bfc4      	itt	gt
 80061d2:	1a9b      	subgt	r3, r3, r2
 80061d4:	18ed      	addgt	r5, r5, r3
 80061d6:	f04f 0900 	mov.w	r9, #0
 80061da:	341a      	adds	r4, #26
 80061dc:	454d      	cmp	r5, r9
 80061de:	d11a      	bne.n	8006216 <_printf_common+0xd6>
 80061e0:	2000      	movs	r0, #0
 80061e2:	e008      	b.n	80061f6 <_printf_common+0xb6>
 80061e4:	2301      	movs	r3, #1
 80061e6:	4652      	mov	r2, sl
 80061e8:	4639      	mov	r1, r7
 80061ea:	4630      	mov	r0, r6
 80061ec:	47c0      	blx	r8
 80061ee:	3001      	adds	r0, #1
 80061f0:	d103      	bne.n	80061fa <_printf_common+0xba>
 80061f2:	f04f 30ff 	mov.w	r0, #4294967295
 80061f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061fa:	3501      	adds	r5, #1
 80061fc:	e7c3      	b.n	8006186 <_printf_common+0x46>
 80061fe:	18e1      	adds	r1, r4, r3
 8006200:	1c5a      	adds	r2, r3, #1
 8006202:	2030      	movs	r0, #48	; 0x30
 8006204:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006208:	4422      	add	r2, r4
 800620a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800620e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006212:	3302      	adds	r3, #2
 8006214:	e7c5      	b.n	80061a2 <_printf_common+0x62>
 8006216:	2301      	movs	r3, #1
 8006218:	4622      	mov	r2, r4
 800621a:	4639      	mov	r1, r7
 800621c:	4630      	mov	r0, r6
 800621e:	47c0      	blx	r8
 8006220:	3001      	adds	r0, #1
 8006222:	d0e6      	beq.n	80061f2 <_printf_common+0xb2>
 8006224:	f109 0901 	add.w	r9, r9, #1
 8006228:	e7d8      	b.n	80061dc <_printf_common+0x9c>
	...

0800622c <_printf_i>:
 800622c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006230:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006234:	460c      	mov	r4, r1
 8006236:	7e09      	ldrb	r1, [r1, #24]
 8006238:	b085      	sub	sp, #20
 800623a:	296e      	cmp	r1, #110	; 0x6e
 800623c:	4617      	mov	r7, r2
 800623e:	4606      	mov	r6, r0
 8006240:	4698      	mov	r8, r3
 8006242:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006244:	f000 80b3 	beq.w	80063ae <_printf_i+0x182>
 8006248:	d822      	bhi.n	8006290 <_printf_i+0x64>
 800624a:	2963      	cmp	r1, #99	; 0x63
 800624c:	d036      	beq.n	80062bc <_printf_i+0x90>
 800624e:	d80a      	bhi.n	8006266 <_printf_i+0x3a>
 8006250:	2900      	cmp	r1, #0
 8006252:	f000 80b9 	beq.w	80063c8 <_printf_i+0x19c>
 8006256:	2958      	cmp	r1, #88	; 0x58
 8006258:	f000 8083 	beq.w	8006362 <_printf_i+0x136>
 800625c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006260:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006264:	e032      	b.n	80062cc <_printf_i+0xa0>
 8006266:	2964      	cmp	r1, #100	; 0x64
 8006268:	d001      	beq.n	800626e <_printf_i+0x42>
 800626a:	2969      	cmp	r1, #105	; 0x69
 800626c:	d1f6      	bne.n	800625c <_printf_i+0x30>
 800626e:	6820      	ldr	r0, [r4, #0]
 8006270:	6813      	ldr	r3, [r2, #0]
 8006272:	0605      	lsls	r5, r0, #24
 8006274:	f103 0104 	add.w	r1, r3, #4
 8006278:	d52a      	bpl.n	80062d0 <_printf_i+0xa4>
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6011      	str	r1, [r2, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	da03      	bge.n	800628a <_printf_i+0x5e>
 8006282:	222d      	movs	r2, #45	; 0x2d
 8006284:	425b      	negs	r3, r3
 8006286:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800628a:	486f      	ldr	r0, [pc, #444]	; (8006448 <_printf_i+0x21c>)
 800628c:	220a      	movs	r2, #10
 800628e:	e039      	b.n	8006304 <_printf_i+0xd8>
 8006290:	2973      	cmp	r1, #115	; 0x73
 8006292:	f000 809d 	beq.w	80063d0 <_printf_i+0x1a4>
 8006296:	d808      	bhi.n	80062aa <_printf_i+0x7e>
 8006298:	296f      	cmp	r1, #111	; 0x6f
 800629a:	d020      	beq.n	80062de <_printf_i+0xb2>
 800629c:	2970      	cmp	r1, #112	; 0x70
 800629e:	d1dd      	bne.n	800625c <_printf_i+0x30>
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	f043 0320 	orr.w	r3, r3, #32
 80062a6:	6023      	str	r3, [r4, #0]
 80062a8:	e003      	b.n	80062b2 <_printf_i+0x86>
 80062aa:	2975      	cmp	r1, #117	; 0x75
 80062ac:	d017      	beq.n	80062de <_printf_i+0xb2>
 80062ae:	2978      	cmp	r1, #120	; 0x78
 80062b0:	d1d4      	bne.n	800625c <_printf_i+0x30>
 80062b2:	2378      	movs	r3, #120	; 0x78
 80062b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062b8:	4864      	ldr	r0, [pc, #400]	; (800644c <_printf_i+0x220>)
 80062ba:	e055      	b.n	8006368 <_printf_i+0x13c>
 80062bc:	6813      	ldr	r3, [r2, #0]
 80062be:	1d19      	adds	r1, r3, #4
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6011      	str	r1, [r2, #0]
 80062c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062cc:	2301      	movs	r3, #1
 80062ce:	e08c      	b.n	80063ea <_printf_i+0x1be>
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6011      	str	r1, [r2, #0]
 80062d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062d8:	bf18      	it	ne
 80062da:	b21b      	sxthne	r3, r3
 80062dc:	e7cf      	b.n	800627e <_printf_i+0x52>
 80062de:	6813      	ldr	r3, [r2, #0]
 80062e0:	6825      	ldr	r5, [r4, #0]
 80062e2:	1d18      	adds	r0, r3, #4
 80062e4:	6010      	str	r0, [r2, #0]
 80062e6:	0628      	lsls	r0, r5, #24
 80062e8:	d501      	bpl.n	80062ee <_printf_i+0xc2>
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	e002      	b.n	80062f4 <_printf_i+0xc8>
 80062ee:	0668      	lsls	r0, r5, #25
 80062f0:	d5fb      	bpl.n	80062ea <_printf_i+0xbe>
 80062f2:	881b      	ldrh	r3, [r3, #0]
 80062f4:	4854      	ldr	r0, [pc, #336]	; (8006448 <_printf_i+0x21c>)
 80062f6:	296f      	cmp	r1, #111	; 0x6f
 80062f8:	bf14      	ite	ne
 80062fa:	220a      	movne	r2, #10
 80062fc:	2208      	moveq	r2, #8
 80062fe:	2100      	movs	r1, #0
 8006300:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006304:	6865      	ldr	r5, [r4, #4]
 8006306:	60a5      	str	r5, [r4, #8]
 8006308:	2d00      	cmp	r5, #0
 800630a:	f2c0 8095 	blt.w	8006438 <_printf_i+0x20c>
 800630e:	6821      	ldr	r1, [r4, #0]
 8006310:	f021 0104 	bic.w	r1, r1, #4
 8006314:	6021      	str	r1, [r4, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d13d      	bne.n	8006396 <_printf_i+0x16a>
 800631a:	2d00      	cmp	r5, #0
 800631c:	f040 808e 	bne.w	800643c <_printf_i+0x210>
 8006320:	4665      	mov	r5, ip
 8006322:	2a08      	cmp	r2, #8
 8006324:	d10b      	bne.n	800633e <_printf_i+0x112>
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	07db      	lsls	r3, r3, #31
 800632a:	d508      	bpl.n	800633e <_printf_i+0x112>
 800632c:	6923      	ldr	r3, [r4, #16]
 800632e:	6862      	ldr	r2, [r4, #4]
 8006330:	429a      	cmp	r2, r3
 8006332:	bfde      	ittt	le
 8006334:	2330      	movle	r3, #48	; 0x30
 8006336:	f805 3c01 	strble.w	r3, [r5, #-1]
 800633a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800633e:	ebac 0305 	sub.w	r3, ip, r5
 8006342:	6123      	str	r3, [r4, #16]
 8006344:	f8cd 8000 	str.w	r8, [sp]
 8006348:	463b      	mov	r3, r7
 800634a:	aa03      	add	r2, sp, #12
 800634c:	4621      	mov	r1, r4
 800634e:	4630      	mov	r0, r6
 8006350:	f7ff fef6 	bl	8006140 <_printf_common>
 8006354:	3001      	adds	r0, #1
 8006356:	d14d      	bne.n	80063f4 <_printf_i+0x1c8>
 8006358:	f04f 30ff 	mov.w	r0, #4294967295
 800635c:	b005      	add	sp, #20
 800635e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006362:	4839      	ldr	r0, [pc, #228]	; (8006448 <_printf_i+0x21c>)
 8006364:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006368:	6813      	ldr	r3, [r2, #0]
 800636a:	6821      	ldr	r1, [r4, #0]
 800636c:	1d1d      	adds	r5, r3, #4
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6015      	str	r5, [r2, #0]
 8006372:	060a      	lsls	r2, r1, #24
 8006374:	d50b      	bpl.n	800638e <_printf_i+0x162>
 8006376:	07ca      	lsls	r2, r1, #31
 8006378:	bf44      	itt	mi
 800637a:	f041 0120 	orrmi.w	r1, r1, #32
 800637e:	6021      	strmi	r1, [r4, #0]
 8006380:	b91b      	cbnz	r3, 800638a <_printf_i+0x15e>
 8006382:	6822      	ldr	r2, [r4, #0]
 8006384:	f022 0220 	bic.w	r2, r2, #32
 8006388:	6022      	str	r2, [r4, #0]
 800638a:	2210      	movs	r2, #16
 800638c:	e7b7      	b.n	80062fe <_printf_i+0xd2>
 800638e:	064d      	lsls	r5, r1, #25
 8006390:	bf48      	it	mi
 8006392:	b29b      	uxthmi	r3, r3
 8006394:	e7ef      	b.n	8006376 <_printf_i+0x14a>
 8006396:	4665      	mov	r5, ip
 8006398:	fbb3 f1f2 	udiv	r1, r3, r2
 800639c:	fb02 3311 	mls	r3, r2, r1, r3
 80063a0:	5cc3      	ldrb	r3, [r0, r3]
 80063a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80063a6:	460b      	mov	r3, r1
 80063a8:	2900      	cmp	r1, #0
 80063aa:	d1f5      	bne.n	8006398 <_printf_i+0x16c>
 80063ac:	e7b9      	b.n	8006322 <_printf_i+0xf6>
 80063ae:	6813      	ldr	r3, [r2, #0]
 80063b0:	6825      	ldr	r5, [r4, #0]
 80063b2:	6961      	ldr	r1, [r4, #20]
 80063b4:	1d18      	adds	r0, r3, #4
 80063b6:	6010      	str	r0, [r2, #0]
 80063b8:	0628      	lsls	r0, r5, #24
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	d501      	bpl.n	80063c2 <_printf_i+0x196>
 80063be:	6019      	str	r1, [r3, #0]
 80063c0:	e002      	b.n	80063c8 <_printf_i+0x19c>
 80063c2:	066a      	lsls	r2, r5, #25
 80063c4:	d5fb      	bpl.n	80063be <_printf_i+0x192>
 80063c6:	8019      	strh	r1, [r3, #0]
 80063c8:	2300      	movs	r3, #0
 80063ca:	6123      	str	r3, [r4, #16]
 80063cc:	4665      	mov	r5, ip
 80063ce:	e7b9      	b.n	8006344 <_printf_i+0x118>
 80063d0:	6813      	ldr	r3, [r2, #0]
 80063d2:	1d19      	adds	r1, r3, #4
 80063d4:	6011      	str	r1, [r2, #0]
 80063d6:	681d      	ldr	r5, [r3, #0]
 80063d8:	6862      	ldr	r2, [r4, #4]
 80063da:	2100      	movs	r1, #0
 80063dc:	4628      	mov	r0, r5
 80063de:	f7f9 fef7 	bl	80001d0 <memchr>
 80063e2:	b108      	cbz	r0, 80063e8 <_printf_i+0x1bc>
 80063e4:	1b40      	subs	r0, r0, r5
 80063e6:	6060      	str	r0, [r4, #4]
 80063e8:	6863      	ldr	r3, [r4, #4]
 80063ea:	6123      	str	r3, [r4, #16]
 80063ec:	2300      	movs	r3, #0
 80063ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063f2:	e7a7      	b.n	8006344 <_printf_i+0x118>
 80063f4:	6923      	ldr	r3, [r4, #16]
 80063f6:	462a      	mov	r2, r5
 80063f8:	4639      	mov	r1, r7
 80063fa:	4630      	mov	r0, r6
 80063fc:	47c0      	blx	r8
 80063fe:	3001      	adds	r0, #1
 8006400:	d0aa      	beq.n	8006358 <_printf_i+0x12c>
 8006402:	6823      	ldr	r3, [r4, #0]
 8006404:	079b      	lsls	r3, r3, #30
 8006406:	d413      	bmi.n	8006430 <_printf_i+0x204>
 8006408:	68e0      	ldr	r0, [r4, #12]
 800640a:	9b03      	ldr	r3, [sp, #12]
 800640c:	4298      	cmp	r0, r3
 800640e:	bfb8      	it	lt
 8006410:	4618      	movlt	r0, r3
 8006412:	e7a3      	b.n	800635c <_printf_i+0x130>
 8006414:	2301      	movs	r3, #1
 8006416:	464a      	mov	r2, r9
 8006418:	4639      	mov	r1, r7
 800641a:	4630      	mov	r0, r6
 800641c:	47c0      	blx	r8
 800641e:	3001      	adds	r0, #1
 8006420:	d09a      	beq.n	8006358 <_printf_i+0x12c>
 8006422:	3501      	adds	r5, #1
 8006424:	68e3      	ldr	r3, [r4, #12]
 8006426:	9a03      	ldr	r2, [sp, #12]
 8006428:	1a9b      	subs	r3, r3, r2
 800642a:	42ab      	cmp	r3, r5
 800642c:	dcf2      	bgt.n	8006414 <_printf_i+0x1e8>
 800642e:	e7eb      	b.n	8006408 <_printf_i+0x1dc>
 8006430:	2500      	movs	r5, #0
 8006432:	f104 0919 	add.w	r9, r4, #25
 8006436:	e7f5      	b.n	8006424 <_printf_i+0x1f8>
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1ac      	bne.n	8006396 <_printf_i+0x16a>
 800643c:	7803      	ldrb	r3, [r0, #0]
 800643e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006442:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006446:	e76c      	b.n	8006322 <_printf_i+0xf6>
 8006448:	080066f5 	.word	0x080066f5
 800644c:	08006706 	.word	0x08006706

08006450 <_sbrk_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	4c06      	ldr	r4, [pc, #24]	; (800646c <_sbrk_r+0x1c>)
 8006454:	2300      	movs	r3, #0
 8006456:	4605      	mov	r5, r0
 8006458:	4608      	mov	r0, r1
 800645a:	6023      	str	r3, [r4, #0]
 800645c:	f7fa ff96 	bl	800138c <_sbrk>
 8006460:	1c43      	adds	r3, r0, #1
 8006462:	d102      	bne.n	800646a <_sbrk_r+0x1a>
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	b103      	cbz	r3, 800646a <_sbrk_r+0x1a>
 8006468:	602b      	str	r3, [r5, #0]
 800646a:	bd38      	pop	{r3, r4, r5, pc}
 800646c:	200044a8 	.word	0x200044a8

08006470 <__sread>:
 8006470:	b510      	push	{r4, lr}
 8006472:	460c      	mov	r4, r1
 8006474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006478:	f000 f896 	bl	80065a8 <_read_r>
 800647c:	2800      	cmp	r0, #0
 800647e:	bfab      	itete	ge
 8006480:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006482:	89a3      	ldrhlt	r3, [r4, #12]
 8006484:	181b      	addge	r3, r3, r0
 8006486:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800648a:	bfac      	ite	ge
 800648c:	6563      	strge	r3, [r4, #84]	; 0x54
 800648e:	81a3      	strhlt	r3, [r4, #12]
 8006490:	bd10      	pop	{r4, pc}

08006492 <__swrite>:
 8006492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006496:	461f      	mov	r7, r3
 8006498:	898b      	ldrh	r3, [r1, #12]
 800649a:	05db      	lsls	r3, r3, #23
 800649c:	4605      	mov	r5, r0
 800649e:	460c      	mov	r4, r1
 80064a0:	4616      	mov	r6, r2
 80064a2:	d505      	bpl.n	80064b0 <__swrite+0x1e>
 80064a4:	2302      	movs	r3, #2
 80064a6:	2200      	movs	r2, #0
 80064a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ac:	f000 f868 	bl	8006580 <_lseek_r>
 80064b0:	89a3      	ldrh	r3, [r4, #12]
 80064b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064ba:	81a3      	strh	r3, [r4, #12]
 80064bc:	4632      	mov	r2, r6
 80064be:	463b      	mov	r3, r7
 80064c0:	4628      	mov	r0, r5
 80064c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064c6:	f000 b817 	b.w	80064f8 <_write_r>

080064ca <__sseek>:
 80064ca:	b510      	push	{r4, lr}
 80064cc:	460c      	mov	r4, r1
 80064ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d2:	f000 f855 	bl	8006580 <_lseek_r>
 80064d6:	1c43      	adds	r3, r0, #1
 80064d8:	89a3      	ldrh	r3, [r4, #12]
 80064da:	bf15      	itete	ne
 80064dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80064de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064e6:	81a3      	strheq	r3, [r4, #12]
 80064e8:	bf18      	it	ne
 80064ea:	81a3      	strhne	r3, [r4, #12]
 80064ec:	bd10      	pop	{r4, pc}

080064ee <__sclose>:
 80064ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064f2:	f000 b813 	b.w	800651c <_close_r>
	...

080064f8 <_write_r>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	4c07      	ldr	r4, [pc, #28]	; (8006518 <_write_r+0x20>)
 80064fc:	4605      	mov	r5, r0
 80064fe:	4608      	mov	r0, r1
 8006500:	4611      	mov	r1, r2
 8006502:	2200      	movs	r2, #0
 8006504:	6022      	str	r2, [r4, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	f7fa feef 	bl	80012ea <_write>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	d102      	bne.n	8006516 <_write_r+0x1e>
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	b103      	cbz	r3, 8006516 <_write_r+0x1e>
 8006514:	602b      	str	r3, [r5, #0]
 8006516:	bd38      	pop	{r3, r4, r5, pc}
 8006518:	200044a8 	.word	0x200044a8

0800651c <_close_r>:
 800651c:	b538      	push	{r3, r4, r5, lr}
 800651e:	4c06      	ldr	r4, [pc, #24]	; (8006538 <_close_r+0x1c>)
 8006520:	2300      	movs	r3, #0
 8006522:	4605      	mov	r5, r0
 8006524:	4608      	mov	r0, r1
 8006526:	6023      	str	r3, [r4, #0]
 8006528:	f7fa fefb 	bl	8001322 <_close>
 800652c:	1c43      	adds	r3, r0, #1
 800652e:	d102      	bne.n	8006536 <_close_r+0x1a>
 8006530:	6823      	ldr	r3, [r4, #0]
 8006532:	b103      	cbz	r3, 8006536 <_close_r+0x1a>
 8006534:	602b      	str	r3, [r5, #0]
 8006536:	bd38      	pop	{r3, r4, r5, pc}
 8006538:	200044a8 	.word	0x200044a8

0800653c <_fstat_r>:
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	4c07      	ldr	r4, [pc, #28]	; (800655c <_fstat_r+0x20>)
 8006540:	2300      	movs	r3, #0
 8006542:	4605      	mov	r5, r0
 8006544:	4608      	mov	r0, r1
 8006546:	4611      	mov	r1, r2
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	f7fa fef6 	bl	800133a <_fstat>
 800654e:	1c43      	adds	r3, r0, #1
 8006550:	d102      	bne.n	8006558 <_fstat_r+0x1c>
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	b103      	cbz	r3, 8006558 <_fstat_r+0x1c>
 8006556:	602b      	str	r3, [r5, #0]
 8006558:	bd38      	pop	{r3, r4, r5, pc}
 800655a:	bf00      	nop
 800655c:	200044a8 	.word	0x200044a8

08006560 <_isatty_r>:
 8006560:	b538      	push	{r3, r4, r5, lr}
 8006562:	4c06      	ldr	r4, [pc, #24]	; (800657c <_isatty_r+0x1c>)
 8006564:	2300      	movs	r3, #0
 8006566:	4605      	mov	r5, r0
 8006568:	4608      	mov	r0, r1
 800656a:	6023      	str	r3, [r4, #0]
 800656c:	f7fa fef5 	bl	800135a <_isatty>
 8006570:	1c43      	adds	r3, r0, #1
 8006572:	d102      	bne.n	800657a <_isatty_r+0x1a>
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	b103      	cbz	r3, 800657a <_isatty_r+0x1a>
 8006578:	602b      	str	r3, [r5, #0]
 800657a:	bd38      	pop	{r3, r4, r5, pc}
 800657c:	200044a8 	.word	0x200044a8

08006580 <_lseek_r>:
 8006580:	b538      	push	{r3, r4, r5, lr}
 8006582:	4c07      	ldr	r4, [pc, #28]	; (80065a0 <_lseek_r+0x20>)
 8006584:	4605      	mov	r5, r0
 8006586:	4608      	mov	r0, r1
 8006588:	4611      	mov	r1, r2
 800658a:	2200      	movs	r2, #0
 800658c:	6022      	str	r2, [r4, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	f7fa feee 	bl	8001370 <_lseek>
 8006594:	1c43      	adds	r3, r0, #1
 8006596:	d102      	bne.n	800659e <_lseek_r+0x1e>
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	b103      	cbz	r3, 800659e <_lseek_r+0x1e>
 800659c:	602b      	str	r3, [r5, #0]
 800659e:	bd38      	pop	{r3, r4, r5, pc}
 80065a0:	200044a8 	.word	0x200044a8

080065a4 <__malloc_lock>:
 80065a4:	4770      	bx	lr

080065a6 <__malloc_unlock>:
 80065a6:	4770      	bx	lr

080065a8 <_read_r>:
 80065a8:	b538      	push	{r3, r4, r5, lr}
 80065aa:	4c07      	ldr	r4, [pc, #28]	; (80065c8 <_read_r+0x20>)
 80065ac:	4605      	mov	r5, r0
 80065ae:	4608      	mov	r0, r1
 80065b0:	4611      	mov	r1, r2
 80065b2:	2200      	movs	r2, #0
 80065b4:	6022      	str	r2, [r4, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	f7fa fe7a 	bl	80012b0 <_read>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d102      	bne.n	80065c6 <_read_r+0x1e>
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	b103      	cbz	r3, 80065c6 <_read_r+0x1e>
 80065c4:	602b      	str	r3, [r5, #0]
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	200044a8 	.word	0x200044a8

080065cc <_init>:
 80065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ce:	bf00      	nop
 80065d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d2:	bc08      	pop	{r3}
 80065d4:	469e      	mov	lr, r3
 80065d6:	4770      	bx	lr

080065d8 <_fini>:
 80065d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065da:	bf00      	nop
 80065dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065de:	bc08      	pop	{r3}
 80065e0:	469e      	mov	lr, r3
 80065e2:	4770      	bx	lr
