
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  0800d0f8  0800d0f8  0001d0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d778  0800d778  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d778  0800d778  0001d778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d780  0800d780  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d780  0800d780  0001d780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d784  0800d784  0001d784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800d788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048dc  20000094  0800d81c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004970  0800d81c  00024970  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029bc1  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000052b4  00000000  00000000  00049c85  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f78  00000000  00000000  0004ef40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d70  00000000  00000000  00050eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002824e  00000000  00000000  00052c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001dacf  00000000  00000000  0007ae76  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df19e  00000000  00000000  00098945  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00177ae3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008668  00000000  00000000  00177b60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d0e0 	.word	0x0800d0e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800d0e0 	.word	0x0800d0e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0

}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
return 0;
 80004f2:	2300      	movs	r3, #0
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
	...

08000500 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	4a07      	ldr	r2, [pc, #28]	; (800052c <vApplicationGetIdleTaskMemory+0x2c>)
 8000510:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	4a06      	ldr	r2, [pc, #24]	; (8000530 <vApplicationGetIdleTaskMemory+0x30>)
 8000516:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	200000b0 	.word	0x200000b0
 8000530:	20000110 	.word	0x20000110

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b092      	sub	sp, #72	; 0x48
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053a:	f001 fc5f 	bl	8001dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f85f 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000542:	f000 f99d 	bl	8000880 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000546:	f000 f8dd 	bl	8000704 <MX_I2C1_Init>
  MX_I2S3_Init();
 800054a:	f000 f909 	bl	8000760 <MX_I2S3_Init>
  MX_SPI1_Init();
 800054e:	f000 f937 	bl	80007c0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000552:	f000 f96b 	bl	800082c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  xMutex = xSemaphoreCreateMutex();
 8000556:	2001      	movs	r0, #1
 8000558:	f009 fea1 	bl	800a29e <xQueueCreateMutex>
 800055c:	4602      	mov	r2, r0
 800055e:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <main+0xac>)
 8000560:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  osSemaphoreDef(Sem);
 8000562:	2300      	movs	r3, #0
 8000564:	643b      	str	r3, [r7, #64]	; 0x40
 8000566:	2300      	movs	r3, #0
 8000568:	647b      	str	r3, [r7, #68]	; 0x44
  SemHandle = osSemaphoreCreate(osSemaphore(Sem), 1);
 800056a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800056e:	2101      	movs	r1, #1
 8000570:	4618      	mov	r0, r3
 8000572:	f009 fb2c 	bl	8009bce <osSemaphoreCreate>
 8000576:	4602      	mov	r2, r0
 8000578:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <main+0xb0>)
 800057a:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of USART_Queue */
  osMessageQDef(USART_Queue, 16, uint16_t);
 800057c:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <main+0xb4>)
 800057e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000582:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  USART_QueueHandle = osMessageCreate(osMessageQ(USART_Queue), NULL);
 8000588:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f009 fb86 	bl	8009ca0 <osMessageCreate>
 8000594:	4602      	mov	r2, r0
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <main+0xb8>)
 8000598:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  osMessageQDef(pushnumber, 1, uint16_t);
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <main+0xbc>)
 800059c:	f107 0420 	add.w	r4, r7, #32
 80005a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  pushNumber = osMessageCreate(osMessageQ(pushnumber), NULL);
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f009 fb77 	bl	8009ca0 <osMessageCreate>
 80005b2:	4602      	mov	r2, r0
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <main+0xc0>)
 80005b6:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1280);
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <main+0xc4>)
 80005ba:	1d3c      	adds	r4, r7, #4
 80005bc:	461d      	mov	r5, r3
 80005be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f009 fa91 	bl	8009af6 <osThreadCreate>
 80005d4:	4602      	mov	r2, r0
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <main+0xc8>)
 80005d8:	601a      	str	r2, [r3, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005da:	f009 fa75 	bl	8009ac8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005de:	e7fe      	b.n	80005de <main+0xaa>
 80005e0:	200040e8 	.word	0x200040e8
 80005e4:	200040fc 	.word	0x200040fc
 80005e8:	0800d0f8 	.word	0x0800d0f8
 80005ec:	200040f8 	.word	0x200040f8
 80005f0:	0800d108 	.word	0x0800d108
 80005f4:	200040ec 	.word	0x200040ec
 80005f8:	0800d124 	.word	0x0800d124
 80005fc:	20004078 	.word	0x20004078

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b098      	sub	sp, #96	; 0x60
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f00c fca3 	bl	800cf5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	4b31      	ldr	r3, [pc, #196]	; (80006fc <SystemClock_Config+0xfc>)
 8000638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063a:	4a30      	ldr	r2, [pc, #192]	; (80006fc <SystemClock_Config+0xfc>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	6413      	str	r3, [r2, #64]	; 0x40
 8000642:	4b2e      	ldr	r3, [pc, #184]	; (80006fc <SystemClock_Config+0xfc>)
 8000644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <SystemClock_Config+0x100>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a2a      	ldr	r2, [pc, #168]	; (8000700 <SystemClock_Config+0x100>)
 8000658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065c:	6013      	str	r3, [r2, #0]
 800065e:	4b28      	ldr	r3, [pc, #160]	; (8000700 <SystemClock_Config+0x100>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066a:	2301      	movs	r3, #1
 800066c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000672:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000678:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800067e:	2308      	movs	r3, #8
 8000680:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000682:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000686:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800068c:	2307      	movs	r3, #7
 800068e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000694:	4618      	mov	r0, r3
 8000696:	f004 f9e9 	bl	8004a6c <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006a0:	f001 f92d 	bl	80018fe <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	2105      	movs	r1, #5
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 fc42 	bl	8004f4c <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006ce:	f001 f916 	bl	80018fe <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006d2:	2301      	movs	r3, #1
 80006d4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80006d6:	23c0      	movs	r3, #192	; 0xc0
 80006d8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006da:	2302      	movs	r3, #2
 80006dc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	4618      	mov	r0, r3
 80006e4:	f004 fe56 	bl	8005394 <HAL_RCCEx_PeriphCLKConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80006ee:	f001 f906 	bl	80018fe <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3760      	adds	r7, #96	; 0x60
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_I2C1_Init+0x50>)
 800070a:	4a13      	ldr	r2, [pc, #76]	; (8000758 <MX_I2C1_Init+0x54>)
 800070c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_I2C1_Init+0x50>)
 8000710:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_I2C1_Init+0x58>)
 8000712:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_I2C1_Init+0x50>)
 8000722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000726:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <MX_I2C1_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_I2C1_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_I2C1_Init+0x50>)
 8000742:	f003 fbbb 	bl	8003ebc <HAL_I2C_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800074c:	f001 f8d7 	bl	80018fe <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2000408c 	.word	0x2000408c
 8000758:	40005400 	.word	0x40005400
 800075c:	000186a0 	.word	0x000186a0

08000760 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_I2S3_Init+0x54>)
 8000766:	4a14      	ldr	r2, [pc, #80]	; (80007b8 <MX_I2S3_Init+0x58>)
 8000768:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_I2S3_Init+0x54>)
 800076c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000770:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_I2S3_Init+0x54>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000778:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_I2S3_Init+0x54>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <MX_I2S3_Init+0x54>)
 8000780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000784:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_I2S3_Init+0x54>)
 8000788:	4a0c      	ldr	r2, [pc, #48]	; (80007bc <MX_I2S3_Init+0x5c>)
 800078a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_I2S3_Init+0x54>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_I2S3_Init+0x54>)
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_I2S3_Init+0x54>)
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_I2S3_Init+0x54>)
 80007a0:	f003 fcc4 	bl	800412c <HAL_I2S_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007aa:	f001 f8a8 	bl	80018fe <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20004234 	.word	0x20004234
 80007b8:	40003c00 	.word	0x40003c00
 80007bc:	00017700 	.word	0x00017700

080007c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_SPI1_Init+0x64>)
 80007c6:	4a18      	ldr	r2, [pc, #96]	; (8000828 <MX_SPI1_Init+0x68>)
 80007c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_SPI1_Init+0x64>)
 80007cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_SPI1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_SPI1_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_SPI1_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_SPI1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_SPI1_Init+0x64>)
 80007ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_SPI1_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <MX_SPI1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_SPI1_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <MX_SPI1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_SPI1_Init+0x64>)
 800080c:	220a      	movs	r2, #10
 800080e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <MX_SPI1_Init+0x64>)
 8000812:	f004 fefd 	bl	8005610 <HAL_SPI_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800081c:	f001 f86f 	bl	80018fe <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20004194 	.word	0x20004194
 8000828:	40013000 	.word	0x40013000

0800082c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <MX_USART2_UART_Init+0x50>)
 8000834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000864:	f005 f976 	bl	8005b54 <HAL_UART_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800086e:	f001 f846 	bl	80018fe <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200041f4 	.word	0x200041f4
 800087c:	40004400 	.word	0x40004400

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08c      	sub	sp, #48	; 0x30
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
 800089a:	4b75      	ldr	r3, [pc, #468]	; (8000a70 <MX_GPIO_Init+0x1f0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a74      	ldr	r2, [pc, #464]	; (8000a70 <MX_GPIO_Init+0x1f0>)
 80008a0:	f043 0310 	orr.w	r3, r3, #16
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b72      	ldr	r3, [pc, #456]	; (8000a70 <MX_GPIO_Init+0x1f0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0310 	and.w	r3, r3, #16
 80008ae:	61bb      	str	r3, [r7, #24]
 80008b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	4b6e      	ldr	r3, [pc, #440]	; (8000a70 <MX_GPIO_Init+0x1f0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a6d      	ldr	r2, [pc, #436]	; (8000a70 <MX_GPIO_Init+0x1f0>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b6b      	ldr	r3, [pc, #428]	; (8000a70 <MX_GPIO_Init+0x1f0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b67      	ldr	r3, [pc, #412]	; (8000a70 <MX_GPIO_Init+0x1f0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a66      	ldr	r2, [pc, #408]	; (8000a70 <MX_GPIO_Init+0x1f0>)
 80008d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b64      	ldr	r3, [pc, #400]	; (8000a70 <MX_GPIO_Init+0x1f0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b60      	ldr	r3, [pc, #384]	; (8000a70 <MX_GPIO_Init+0x1f0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a5f      	ldr	r2, [pc, #380]	; (8000a70 <MX_GPIO_Init+0x1f0>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b5d      	ldr	r3, [pc, #372]	; (8000a70 <MX_GPIO_Init+0x1f0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	4b59      	ldr	r3, [pc, #356]	; (8000a70 <MX_GPIO_Init+0x1f0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a58      	ldr	r2, [pc, #352]	; (8000a70 <MX_GPIO_Init+0x1f0>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b56      	ldr	r3, [pc, #344]	; (8000a70 <MX_GPIO_Init+0x1f0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b52      	ldr	r3, [pc, #328]	; (8000a70 <MX_GPIO_Init+0x1f0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a51      	ldr	r2, [pc, #324]	; (8000a70 <MX_GPIO_Init+0x1f0>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b4f      	ldr	r3, [pc, #316]	; (8000a70 <MX_GPIO_Init+0x1f0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2108      	movs	r1, #8
 8000942:	484c      	ldr	r0, [pc, #304]	; (8000a74 <MX_GPIO_Init+0x1f4>)
 8000944:	f001 fd8c 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2101      	movs	r1, #1
 800094c:	484a      	ldr	r0, [pc, #296]	; (8000a78 <MX_GPIO_Init+0x1f8>)
 800094e:	f001 fd87 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000952:	2200      	movs	r2, #0
 8000954:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000958:	4848      	ldr	r0, [pc, #288]	; (8000a7c <MX_GPIO_Init+0x1fc>)
 800095a:	f001 fd81 	bl	8002460 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800095e:	2308      	movs	r3, #8
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	483f      	ldr	r0, [pc, #252]	; (8000a74 <MX_GPIO_Init+0x1f4>)
 8000976:	f001 fbd9 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800097a:	2301      	movs	r3, #1
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4839      	ldr	r0, [pc, #228]	; (8000a78 <MX_GPIO_Init+0x1f8>)
 8000992:	f001 fbcb 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000996:	2308      	movs	r3, #8
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009a6:	2305      	movs	r3, #5
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4831      	ldr	r0, [pc, #196]	; (8000a78 <MX_GPIO_Init+0x1f8>)
 80009b2:	f001 fbbb 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009b6:	2301      	movs	r3, #1
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ba:	4b31      	ldr	r3, [pc, #196]	; (8000a80 <MX_GPIO_Init+0x200>)
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009be:	2302      	movs	r3, #2
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	482e      	ldr	r0, [pc, #184]	; (8000a84 <MX_GPIO_Init+0x204>)
 80009ca:	f001 fbaf 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009ce:	2304      	movs	r3, #4
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4829      	ldr	r0, [pc, #164]	; (8000a88 <MX_GPIO_Init+0x208>)
 80009e2:	f001 fba3 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009f8:	2305      	movs	r3, #5
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4821      	ldr	r0, [pc, #132]	; (8000a88 <MX_GPIO_Init+0x208>)
 8000a04:	f001 fb92 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a08:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a0c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4816      	ldr	r0, [pc, #88]	; (8000a7c <MX_GPIO_Init+0x1fc>)
 8000a22:	f001 fb83 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a26:	2320      	movs	r3, #32
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4810      	ldr	r0, [pc, #64]	; (8000a7c <MX_GPIO_Init+0x1fc>)
 8000a3a:	f001 fb77 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <MX_GPIO_Init+0x20c>)
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4808      	ldr	r0, [pc, #32]	; (8000a74 <MX_GPIO_Init+0x1f4>)
 8000a52:	f001 fb6b 	bl	800212c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2006      	movs	r0, #6
 8000a5c:	f001 fb0c 	bl	8002078 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a60:	2006      	movs	r0, #6
 8000a62:	f001 fb25 	bl	80020b0 <HAL_NVIC_EnableIRQ>

}
 8000a66:	bf00      	nop
 8000a68:	3730      	adds	r7, #48	; 0x30
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40020800 	.word	0x40020800
 8000a7c:	40020c00 	.word	0x40020c00
 8000a80:	10110000 	.word	0x10110000
 8000a84:	40020000 	.word	0x40020000
 8000a88:	40020400 	.word	0x40020400
 8000a8c:	10120000 	.word	0x10120000

08000a90 <Foam1>:

/* USER CODE BEGIN 4 */
void Foam1(void const * argument)
{
 8000a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a92:	b08b      	sub	sp, #44	; 0x2c
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 8000a98:	f009 f81d 	bl	8009ad6 <osKernelSysTick>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
		sprintf(str1, "Foam applied to the first car, it took 30 sec\r\n");
 8000aa0:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <Foam1+0xb8>)
 8000aa2:	4a2a      	ldr	r2, [pc, #168]	; (8000b4c <Foam1+0xbc>)
 8000aa4:	4614      	mov	r4, r2
 8000aa6:	469c      	mov	ip, r3
 8000aa8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000aac:	4665      	mov	r5, ip
 8000aae:	4626      	mov	r6, r4
 8000ab0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ab2:	6028      	str	r0, [r5, #0]
 8000ab4:	6069      	str	r1, [r5, #4]
 8000ab6:	60aa      	str	r2, [r5, #8]
 8000ab8:	60eb      	str	r3, [r5, #12]
 8000aba:	3410      	adds	r4, #16
 8000abc:	f10c 0c10 	add.w	ip, ip, #16
 8000ac0:	4574      	cmp	r4, lr
 8000ac2:	d1f3      	bne.n	8000aac <Foam1+0x1c>
		osDelayUntil(&tickcount, 30000);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	f247 5130 	movw	r1, #30000	; 0x7530
 8000acc:	4618      	mov	r0, r3
 8000ace:	f009 f9c5 	bl	8009e5c <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
	   // {
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000ad2:	2006      	movs	r0, #6
 8000ad4:	f001 fafa 	bl	80020cc <HAL_NVIC_DisableIRQ>
		xSemaphoreTake(xMutex, portMAX_DELAY);
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <Foam1+0xc0>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f009 fee9 	bl	800a8b8 <xQueueSemaphoreTake>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 8000ae6:	4818      	ldr	r0, [pc, #96]	; (8000b48 <Foam1+0xb8>)
 8000ae8:	f7ff fb72 	bl	80001d0 <strlen>
 8000aec:	4603      	mov	r3, r0
 8000aee:	b29c      	uxth	r4, r3
 8000af0:	4815      	ldr	r0, [pc, #84]	; (8000b48 <Foam1+0xb8>)
 8000af2:	f7ff fb6d 	bl	80001d0 <strlen>
 8000af6:	4603      	mov	r3, r0
 8000af8:	3301      	adds	r3, #1
 8000afa:	4622      	mov	r2, r4
 8000afc:	4912      	ldr	r1, [pc, #72]	; (8000b48 <Foam1+0xb8>)
 8000afe:	4815      	ldr	r0, [pc, #84]	; (8000b54 <Foam1+0xc4>)
 8000b00:	f005 f875 	bl	8005bee <HAL_UART_Transmit>
		xSemaphoreGive(xMutex);
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <Foam1+0xc0>)
 8000b06:	6818      	ldr	r0, [r3, #0]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	f009 fbdf 	bl	800a2d0 <xQueueGenericSend>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b12:	2006      	movs	r0, #6
 8000b14:	f001 facc 	bl	80020b0 <HAL_NVIC_EnableIRQ>
		//}
	   // osSemaphoreRelease(SemHandle);
		osThreadDef(brushes1, Brushes1, osPriorityNormal, 0, 128);
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <Foam1+0xc8>)
 8000b1a:	f107 0408 	add.w	r4, r7, #8
 8000b1e:	461d      	mov	r5, r3
 8000b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		Brushes1Handle = osThreadCreate(osThread(brushes1), NULL);
 8000b2c:	f107 0308 	add.w	r3, r7, #8
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f008 ffdf 	bl	8009af6 <osThreadCreate>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <Foam1+0xcc>)
 8000b3c:	601a      	str	r2, [r3, #0]
		osThreadTerminate(NULL);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f009 f825 	bl	8009b8e <osThreadTerminate>
	{
 8000b44:	e7ac      	b.n	8000aa0 <Foam1+0x10>
 8000b46:	bf00      	nop
 8000b48:	20004100 	.word	0x20004100
 8000b4c:	0800d140 	.word	0x0800d140
 8000b50:	200040e8 	.word	0x200040e8
 8000b54:	200041f4 	.word	0x200041f4
 8000b58:	0800d17c 	.word	0x0800d17c
 8000b5c:	20004080 	.word	0x20004080

08000b60 <Foam2>:
	}
}

void Foam2(void const * argument)
{
 8000b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b62:	b08b      	sub	sp, #44	; 0x2c
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 8000b68:	f008 ffb5 	bl	8009ad6 <osKernelSysTick>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
		sprintf(str1, "Foam applied to the second car, it took 30 sec\r\n");
 8000b70:	4b2b      	ldr	r3, [pc, #172]	; (8000c20 <Foam2+0xc0>)
 8000b72:	4a2c      	ldr	r2, [pc, #176]	; (8000c24 <Foam2+0xc4>)
 8000b74:	4614      	mov	r4, r2
 8000b76:	469c      	mov	ip, r3
 8000b78:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000b7c:	4665      	mov	r5, ip
 8000b7e:	4626      	mov	r6, r4
 8000b80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b82:	6028      	str	r0, [r5, #0]
 8000b84:	6069      	str	r1, [r5, #4]
 8000b86:	60aa      	str	r2, [r5, #8]
 8000b88:	60eb      	str	r3, [r5, #12]
 8000b8a:	3410      	adds	r4, #16
 8000b8c:	f10c 0c10 	add.w	ip, ip, #16
 8000b90:	4574      	cmp	r4, lr
 8000b92:	d1f3      	bne.n	8000b7c <Foam2+0x1c>
 8000b94:	4663      	mov	r3, ip
 8000b96:	4622      	mov	r2, r4
 8000b98:	7812      	ldrb	r2, [r2, #0]
 8000b9a:	701a      	strb	r2, [r3, #0]
		osDelayUntil(&tickcount, 30000);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba0:	f247 5130 	movw	r1, #30000	; 0x7530
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f009 f959 	bl	8009e5c <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
	   // {
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000baa:	2006      	movs	r0, #6
 8000bac:	f001 fa8e 	bl	80020cc <HAL_NVIC_DisableIRQ>
				xSemaphoreTake(xMutex, portMAX_DELAY);
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <Foam2+0xc8>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f009 fe7d 	bl	800a8b8 <xQueueSemaphoreTake>
				HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 8000bbe:	4818      	ldr	r0, [pc, #96]	; (8000c20 <Foam2+0xc0>)
 8000bc0:	f7ff fb06 	bl	80001d0 <strlen>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	b29c      	uxth	r4, r3
 8000bc8:	4815      	ldr	r0, [pc, #84]	; (8000c20 <Foam2+0xc0>)
 8000bca:	f7ff fb01 	bl	80001d0 <strlen>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	4622      	mov	r2, r4
 8000bd4:	4912      	ldr	r1, [pc, #72]	; (8000c20 <Foam2+0xc0>)
 8000bd6:	4815      	ldr	r0, [pc, #84]	; (8000c2c <Foam2+0xcc>)
 8000bd8:	f005 f809 	bl	8005bee <HAL_UART_Transmit>
				xSemaphoreGive(xMutex);
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <Foam2+0xc8>)
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	2300      	movs	r3, #0
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	f009 fb73 	bl	800a2d0 <xQueueGenericSend>
				HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bea:	2006      	movs	r0, #6
 8000bec:	f001 fa60 	bl	80020b0 <HAL_NVIC_EnableIRQ>
		//}
	   //osSemaphoreRelease(SemHandle);
		osThreadDef(brushes2, Brushes2, osPriorityNormal, 0, 128);
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <Foam2+0xd0>)
 8000bf2:	f107 0408 	add.w	r4, r7, #8
 8000bf6:	461d      	mov	r5, r3
 8000bf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		Brushes2Handle = osThreadCreate(osThread(brushes2), NULL);
 8000c04:	f107 0308 	add.w	r3, r7, #8
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f008 ff73 	bl	8009af6 <osThreadCreate>
 8000c10:	4602      	mov	r2, r0
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <Foam2+0xd4>)
 8000c14:	601a      	str	r2, [r3, #0]
		osThreadTerminate(NULL);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f008 ffb9 	bl	8009b8e <osThreadTerminate>
	{
 8000c1c:	e7a8      	b.n	8000b70 <Foam2+0x10>
 8000c1e:	bf00      	nop
 8000c20:	20004100 	.word	0x20004100
 8000c24:	0800d198 	.word	0x0800d198
 8000c28:	200040e8 	.word	0x200040e8
 8000c2c:	200041f4 	.word	0x200041f4
 8000c30:	0800d1d8 	.word	0x0800d1d8
 8000c34:	20004190 	.word	0x20004190

08000c38 <Foam3>:
	}
}

void Foam3(void const * argument)
{
 8000c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c3a:	b08b      	sub	sp, #44	; 0x2c
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 8000c40:	f008 ff49 	bl	8009ad6 <osKernelSysTick>
 8000c44:	4603      	mov	r3, r0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
		sprintf(str1, "Foam applied to the third car, it took 30 sec\r\n");
 8000c48:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <Foam3+0xb8>)
 8000c4a:	4a2a      	ldr	r2, [pc, #168]	; (8000cf4 <Foam3+0xbc>)
 8000c4c:	4614      	mov	r4, r2
 8000c4e:	469c      	mov	ip, r3
 8000c50:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000c54:	4665      	mov	r5, ip
 8000c56:	4626      	mov	r6, r4
 8000c58:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c5a:	6028      	str	r0, [r5, #0]
 8000c5c:	6069      	str	r1, [r5, #4]
 8000c5e:	60aa      	str	r2, [r5, #8]
 8000c60:	60eb      	str	r3, [r5, #12]
 8000c62:	3410      	adds	r4, #16
 8000c64:	f10c 0c10 	add.w	ip, ip, #16
 8000c68:	4574      	cmp	r4, lr
 8000c6a:	d1f3      	bne.n	8000c54 <Foam3+0x1c>
		osDelayUntil(&tickcount, 30000);
 8000c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c70:	f247 5130 	movw	r1, #30000	; 0x7530
 8000c74:	4618      	mov	r0, r3
 8000c76:	f009 f8f1 	bl	8009e5c <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
	   // {
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000c7a:	2006      	movs	r0, #6
 8000c7c:	f001 fa26 	bl	80020cc <HAL_NVIC_DisableIRQ>
				xSemaphoreTake(xMutex, portMAX_DELAY);
 8000c80:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <Foam3+0xc0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f009 fe15 	bl	800a8b8 <xQueueSemaphoreTake>
				HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 8000c8e:	4818      	ldr	r0, [pc, #96]	; (8000cf0 <Foam3+0xb8>)
 8000c90:	f7ff fa9e 	bl	80001d0 <strlen>
 8000c94:	4603      	mov	r3, r0
 8000c96:	b29c      	uxth	r4, r3
 8000c98:	4815      	ldr	r0, [pc, #84]	; (8000cf0 <Foam3+0xb8>)
 8000c9a:	f7ff fa99 	bl	80001d0 <strlen>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	4622      	mov	r2, r4
 8000ca4:	4912      	ldr	r1, [pc, #72]	; (8000cf0 <Foam3+0xb8>)
 8000ca6:	4815      	ldr	r0, [pc, #84]	; (8000cfc <Foam3+0xc4>)
 8000ca8:	f004 ffa1 	bl	8005bee <HAL_UART_Transmit>
				xSemaphoreGive(xMutex);
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <Foam3+0xc0>)
 8000cae:	6818      	ldr	r0, [r3, #0]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	f009 fb0b 	bl	800a2d0 <xQueueGenericSend>
				HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cba:	2006      	movs	r0, #6
 8000cbc:	f001 f9f8 	bl	80020b0 <HAL_NVIC_EnableIRQ>
		//}
	    //osSemaphoreRelease(SemHandle);
	    osThreadDef(brushes3, Brushes3, osPriorityNormal, 0, 128);
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <Foam3+0xc8>)
 8000cc2:	f107 0408 	add.w	r4, r7, #8
 8000cc6:	461d      	mov	r5, r3
 8000cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ccc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	    Brushes3Handle = osThreadCreate(osThread(brushes3), NULL);
 8000cd4:	f107 0308 	add.w	r3, r7, #8
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f008 ff0b 	bl	8009af6 <osThreadCreate>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <Foam3+0xcc>)
 8000ce4:	601a      	str	r2, [r3, #0]
	    osThreadTerminate(NULL);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f008 ff51 	bl	8009b8e <osThreadTerminate>
	{
 8000cec:	e7ac      	b.n	8000c48 <Foam3+0x10>
 8000cee:	bf00      	nop
 8000cf0:	20004100 	.word	0x20004100
 8000cf4:	0800d1f4 	.word	0x0800d1f4
 8000cf8:	200040e8 	.word	0x200040e8
 8000cfc:	200041f4 	.word	0x200041f4
 8000d00:	0800d230 	.word	0x0800d230
 8000d04:	20004180 	.word	0x20004180

08000d08 <Foam4>:
	}
}

void Foam4(void const * argument)
{
 8000d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d0a:	b08b      	sub	sp, #44	; 0x2c
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 8000d10:	f008 fee1 	bl	8009ad6 <osKernelSysTick>
 8000d14:	4603      	mov	r3, r0
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
		sprintf(str1, "Foam applied to the fourth car, it took 30 sec\r\n");
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <Foam4+0xc0>)
 8000d1a:	4a2c      	ldr	r2, [pc, #176]	; (8000dcc <Foam4+0xc4>)
 8000d1c:	4614      	mov	r4, r2
 8000d1e:	469c      	mov	ip, r3
 8000d20:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000d24:	4665      	mov	r5, ip
 8000d26:	4626      	mov	r6, r4
 8000d28:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d2a:	6028      	str	r0, [r5, #0]
 8000d2c:	6069      	str	r1, [r5, #4]
 8000d2e:	60aa      	str	r2, [r5, #8]
 8000d30:	60eb      	str	r3, [r5, #12]
 8000d32:	3410      	adds	r4, #16
 8000d34:	f10c 0c10 	add.w	ip, ip, #16
 8000d38:	4574      	cmp	r4, lr
 8000d3a:	d1f3      	bne.n	8000d24 <Foam4+0x1c>
 8000d3c:	4663      	mov	r3, ip
 8000d3e:	4622      	mov	r2, r4
 8000d40:	7812      	ldrb	r2, [r2, #0]
 8000d42:	701a      	strb	r2, [r3, #0]
		osDelayUntil(&tickcount, 30000);
 8000d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d48:	f247 5130 	movw	r1, #30000	; 0x7530
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f009 f885 	bl	8009e5c <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
	   // {
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000d52:	2006      	movs	r0, #6
 8000d54:	f001 f9ba 	bl	80020cc <HAL_NVIC_DisableIRQ>
				xSemaphoreTake(xMutex, portMAX_DELAY);
 8000d58:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <Foam4+0xc8>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d60:	4618      	mov	r0, r3
 8000d62:	f009 fda9 	bl	800a8b8 <xQueueSemaphoreTake>
				HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 8000d66:	4818      	ldr	r0, [pc, #96]	; (8000dc8 <Foam4+0xc0>)
 8000d68:	f7ff fa32 	bl	80001d0 <strlen>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	b29c      	uxth	r4, r3
 8000d70:	4815      	ldr	r0, [pc, #84]	; (8000dc8 <Foam4+0xc0>)
 8000d72:	f7ff fa2d 	bl	80001d0 <strlen>
 8000d76:	4603      	mov	r3, r0
 8000d78:	3301      	adds	r3, #1
 8000d7a:	4622      	mov	r2, r4
 8000d7c:	4912      	ldr	r1, [pc, #72]	; (8000dc8 <Foam4+0xc0>)
 8000d7e:	4815      	ldr	r0, [pc, #84]	; (8000dd4 <Foam4+0xcc>)
 8000d80:	f004 ff35 	bl	8005bee <HAL_UART_Transmit>
				xSemaphoreGive(xMutex);
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <Foam4+0xc8>)
 8000d86:	6818      	ldr	r0, [r3, #0]
 8000d88:	2300      	movs	r3, #0
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	f009 fa9f 	bl	800a2d0 <xQueueGenericSend>
				HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d92:	2006      	movs	r0, #6
 8000d94:	f001 f98c 	bl	80020b0 <HAL_NVIC_EnableIRQ>
		//}
		//osSemaphoreRelease(SemHandle);
	    osThreadDef(brushes4, Brushes4, osPriorityNormal, 0, 128);
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <Foam4+0xd0>)
 8000d9a:	f107 0408 	add.w	r4, r7, #8
 8000d9e:	461d      	mov	r5, r3
 8000da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000da8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	    Brushes4Handle = osThreadCreate(osThread(brushes4), NULL);
 8000dac:	f107 0308 	add.w	r3, r7, #8
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f008 fe9f 	bl	8009af6 <osThreadCreate>
 8000db8:	4602      	mov	r2, r0
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <Foam4+0xd4>)
 8000dbc:	601a      	str	r2, [r3, #0]
	    osThreadTerminate(NULL);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f008 fee5 	bl	8009b8e <osThreadTerminate>
	{
 8000dc4:	e7a8      	b.n	8000d18 <Foam4+0x10>
 8000dc6:	bf00      	nop
 8000dc8:	20004100 	.word	0x20004100
 8000dcc:	0800d24c 	.word	0x0800d24c
 8000dd0:	200040e8 	.word	0x200040e8
 8000dd4:	200041f4 	.word	0x200041f4
 8000dd8:	0800d28c 	.word	0x0800d28c
 8000ddc:	200041f0 	.word	0x200041f0

08000de0 <Brushes1>:
	}
}

void Brushes1(void const * argument)
{
 8000de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000de2:	b08b      	sub	sp, #44	; 0x2c
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 8000de8:	f008 fe75 	bl	8009ad6 <osKernelSysTick>
 8000dec:	4603      	mov	r3, r0
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
		sprintf(str1, "Brushing the first car is completed it took 30 sec\r\n");
 8000df0:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <Brushes1+0xc4>)
 8000df2:	4a2d      	ldr	r2, [pc, #180]	; (8000ea8 <Brushes1+0xc8>)
 8000df4:	4614      	mov	r4, r2
 8000df6:	469c      	mov	ip, r3
 8000df8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000dfc:	4665      	mov	r5, ip
 8000dfe:	4626      	mov	r6, r4
 8000e00:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e02:	6028      	str	r0, [r5, #0]
 8000e04:	6069      	str	r1, [r5, #4]
 8000e06:	60aa      	str	r2, [r5, #8]
 8000e08:	60eb      	str	r3, [r5, #12]
 8000e0a:	3410      	adds	r4, #16
 8000e0c:	f10c 0c10 	add.w	ip, ip, #16
 8000e10:	4574      	cmp	r4, lr
 8000e12:	d1f3      	bne.n	8000dfc <Brushes1+0x1c>
 8000e14:	4663      	mov	r3, ip
 8000e16:	4622      	mov	r2, r4
 8000e18:	6810      	ldr	r0, [r2, #0]
 8000e1a:	6018      	str	r0, [r3, #0]
 8000e1c:	7912      	ldrb	r2, [r2, #4]
 8000e1e:	711a      	strb	r2, [r3, #4]
		osDelayUntil(&tickcount, 30000);
 8000e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e24:	f247 5130 	movw	r1, #30000	; 0x7530
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f009 f817 	bl	8009e5c <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
		//{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000e2e:	2006      	movs	r0, #6
 8000e30:	f001 f94c 	bl	80020cc <HAL_NVIC_DisableIRQ>
				xSemaphoreTake(xMutex, portMAX_DELAY);
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <Brushes1+0xcc>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f009 fd3b 	bl	800a8b8 <xQueueSemaphoreTake>
				HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 8000e42:	4818      	ldr	r0, [pc, #96]	; (8000ea4 <Brushes1+0xc4>)
 8000e44:	f7ff f9c4 	bl	80001d0 <strlen>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	b29c      	uxth	r4, r3
 8000e4c:	4815      	ldr	r0, [pc, #84]	; (8000ea4 <Brushes1+0xc4>)
 8000e4e:	f7ff f9bf 	bl	80001d0 <strlen>
 8000e52:	4603      	mov	r3, r0
 8000e54:	3301      	adds	r3, #1
 8000e56:	4622      	mov	r2, r4
 8000e58:	4912      	ldr	r1, [pc, #72]	; (8000ea4 <Brushes1+0xc4>)
 8000e5a:	4815      	ldr	r0, [pc, #84]	; (8000eb0 <Brushes1+0xd0>)
 8000e5c:	f004 fec7 	bl	8005bee <HAL_UART_Transmit>
				xSemaphoreGive(xMutex);
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <Brushes1+0xcc>)
 8000e62:	6818      	ldr	r0, [r3, #0]
 8000e64:	2300      	movs	r3, #0
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	f009 fa31 	bl	800a2d0 <xQueueGenericSend>
				HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e6e:	2006      	movs	r0, #6
 8000e70:	f001 f91e 	bl	80020b0 <HAL_NVIC_EnableIRQ>
		//}
		//osSemaphoreRelease(SemHandle);
		osThreadDef(washing1, Washing1, osPriorityNormal, 0, 128);
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <Brushes1+0xd4>)
 8000e76:	f107 0408 	add.w	r4, r7, #8
 8000e7a:	461d      	mov	r5, r3
 8000e7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		Washing1Handle = osThreadCreate(osThread(washing1), NULL);
 8000e88:	f107 0308 	add.w	r3, r7, #8
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f008 fe31 	bl	8009af6 <osThreadCreate>
 8000e94:	4602      	mov	r2, r0
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <Brushes1+0xd8>)
 8000e98:	601a      	str	r2, [r3, #0]
		osThreadTerminate(NULL);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f008 fe77 	bl	8009b8e <osThreadTerminate>
	{
 8000ea0:	e7a6      	b.n	8000df0 <Brushes1+0x10>
 8000ea2:	bf00      	nop
 8000ea4:	20004100 	.word	0x20004100
 8000ea8:	0800d2a8 	.word	0x0800d2a8
 8000eac:	200040e8 	.word	0x200040e8
 8000eb0:	200041f4 	.word	0x200041f4
 8000eb4:	0800d2ec 	.word	0x0800d2ec
 8000eb8:	20004084 	.word	0x20004084

08000ebc <Brushes2>:
	}
}

void Brushes2(void const * argument)
{
 8000ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ebe:	b08b      	sub	sp, #44	; 0x2c
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 8000ec4:	f008 fe07 	bl	8009ad6 <osKernelSysTick>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
		sprintf(str1, "Brushing the second car is completed it took 30 sec\r\n");
 8000ecc:	4b2c      	ldr	r3, [pc, #176]	; (8000f80 <Brushes2+0xc4>)
 8000ece:	4a2d      	ldr	r2, [pc, #180]	; (8000f84 <Brushes2+0xc8>)
 8000ed0:	4614      	mov	r4, r2
 8000ed2:	469c      	mov	ip, r3
 8000ed4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000ed8:	4665      	mov	r5, ip
 8000eda:	4626      	mov	r6, r4
 8000edc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ede:	6028      	str	r0, [r5, #0]
 8000ee0:	6069      	str	r1, [r5, #4]
 8000ee2:	60aa      	str	r2, [r5, #8]
 8000ee4:	60eb      	str	r3, [r5, #12]
 8000ee6:	3410      	adds	r4, #16
 8000ee8:	f10c 0c10 	add.w	ip, ip, #16
 8000eec:	4574      	cmp	r4, lr
 8000eee:	d1f3      	bne.n	8000ed8 <Brushes2+0x1c>
 8000ef0:	4663      	mov	r3, ip
 8000ef2:	4622      	mov	r2, r4
 8000ef4:	6810      	ldr	r0, [r2, #0]
 8000ef6:	6018      	str	r0, [r3, #0]
 8000ef8:	8892      	ldrh	r2, [r2, #4]
 8000efa:	809a      	strh	r2, [r3, #4]
		osDelayUntil(&tickcount, 30000);
 8000efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f00:	f247 5130 	movw	r1, #30000	; 0x7530
 8000f04:	4618      	mov	r0, r3
 8000f06:	f008 ffa9 	bl	8009e5c <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
		//{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000f0a:	2006      	movs	r0, #6
 8000f0c:	f001 f8de 	bl	80020cc <HAL_NVIC_DisableIRQ>
				xSemaphoreTake(xMutex, portMAX_DELAY);
 8000f10:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <Brushes2+0xcc>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f009 fccd 	bl	800a8b8 <xQueueSemaphoreTake>
				HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 8000f1e:	4818      	ldr	r0, [pc, #96]	; (8000f80 <Brushes2+0xc4>)
 8000f20:	f7ff f956 	bl	80001d0 <strlen>
 8000f24:	4603      	mov	r3, r0
 8000f26:	b29c      	uxth	r4, r3
 8000f28:	4815      	ldr	r0, [pc, #84]	; (8000f80 <Brushes2+0xc4>)
 8000f2a:	f7ff f951 	bl	80001d0 <strlen>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	3301      	adds	r3, #1
 8000f32:	4622      	mov	r2, r4
 8000f34:	4912      	ldr	r1, [pc, #72]	; (8000f80 <Brushes2+0xc4>)
 8000f36:	4815      	ldr	r0, [pc, #84]	; (8000f8c <Brushes2+0xd0>)
 8000f38:	f004 fe59 	bl	8005bee <HAL_UART_Transmit>
				xSemaphoreGive(xMutex);
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <Brushes2+0xcc>)
 8000f3e:	6818      	ldr	r0, [r3, #0]
 8000f40:	2300      	movs	r3, #0
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	f009 f9c3 	bl	800a2d0 <xQueueGenericSend>
				HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f4a:	2006      	movs	r0, #6
 8000f4c:	f001 f8b0 	bl	80020b0 <HAL_NVIC_EnableIRQ>
		//}
		//osSemaphoreRelease(SemHandle);
		osThreadDef(washing2, Washing2, osPriorityNormal, 0, 128);
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <Brushes2+0xd4>)
 8000f52:	f107 0408 	add.w	r4, r7, #8
 8000f56:	461d      	mov	r5, r3
 8000f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		Washing2Handle = osThreadCreate(osThread(washing2), NULL);
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f008 fdc3 	bl	8009af6 <osThreadCreate>
 8000f70:	4602      	mov	r2, r0
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <Brushes2+0xd8>)
 8000f74:	601a      	str	r2, [r3, #0]
		osThreadTerminate(NULL);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f008 fe09 	bl	8009b8e <osThreadTerminate>
	{
 8000f7c:	e7a6      	b.n	8000ecc <Brushes2+0x10>
 8000f7e:	bf00      	nop
 8000f80:	20004100 	.word	0x20004100
 8000f84:	0800d308 	.word	0x0800d308
 8000f88:	200040e8 	.word	0x200040e8
 8000f8c:	200041f4 	.word	0x200041f4
 8000f90:	0800d34c 	.word	0x0800d34c
 8000f94:	2000407c 	.word	0x2000407c

08000f98 <Brushes3>:
	}
}


void Brushes3(void const * argument)
{
 8000f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f9a:	b08b      	sub	sp, #44	; 0x2c
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 8000fa0:	f008 fd99 	bl	8009ad6 <osKernelSysTick>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
		sprintf(str1, "Brushing the third car is completed it took 30 sec\r\n");
 8000fa8:	4b2c      	ldr	r3, [pc, #176]	; (800105c <Brushes3+0xc4>)
 8000faa:	4a2d      	ldr	r2, [pc, #180]	; (8001060 <Brushes3+0xc8>)
 8000fac:	4614      	mov	r4, r2
 8000fae:	469c      	mov	ip, r3
 8000fb0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000fb4:	4665      	mov	r5, ip
 8000fb6:	4626      	mov	r6, r4
 8000fb8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000fba:	6028      	str	r0, [r5, #0]
 8000fbc:	6069      	str	r1, [r5, #4]
 8000fbe:	60aa      	str	r2, [r5, #8]
 8000fc0:	60eb      	str	r3, [r5, #12]
 8000fc2:	3410      	adds	r4, #16
 8000fc4:	f10c 0c10 	add.w	ip, ip, #16
 8000fc8:	4574      	cmp	r4, lr
 8000fca:	d1f3      	bne.n	8000fb4 <Brushes3+0x1c>
 8000fcc:	4663      	mov	r3, ip
 8000fce:	4622      	mov	r2, r4
 8000fd0:	6810      	ldr	r0, [r2, #0]
 8000fd2:	6018      	str	r0, [r3, #0]
 8000fd4:	7912      	ldrb	r2, [r2, #4]
 8000fd6:	711a      	strb	r2, [r3, #4]
		osDelayUntil(&tickcount, 30000);
 8000fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fdc:	f247 5130 	movw	r1, #30000	; 0x7530
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f008 ff3b 	bl	8009e5c <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
		//{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000fe6:	2006      	movs	r0, #6
 8000fe8:	f001 f870 	bl	80020cc <HAL_NVIC_DisableIRQ>
				xSemaphoreTake(xMutex, portMAX_DELAY);
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <Brushes3+0xcc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f009 fc5f 	bl	800a8b8 <xQueueSemaphoreTake>
				HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 8000ffa:	4818      	ldr	r0, [pc, #96]	; (800105c <Brushes3+0xc4>)
 8000ffc:	f7ff f8e8 	bl	80001d0 <strlen>
 8001000:	4603      	mov	r3, r0
 8001002:	b29c      	uxth	r4, r3
 8001004:	4815      	ldr	r0, [pc, #84]	; (800105c <Brushes3+0xc4>)
 8001006:	f7ff f8e3 	bl	80001d0 <strlen>
 800100a:	4603      	mov	r3, r0
 800100c:	3301      	adds	r3, #1
 800100e:	4622      	mov	r2, r4
 8001010:	4912      	ldr	r1, [pc, #72]	; (800105c <Brushes3+0xc4>)
 8001012:	4815      	ldr	r0, [pc, #84]	; (8001068 <Brushes3+0xd0>)
 8001014:	f004 fdeb 	bl	8005bee <HAL_UART_Transmit>
				xSemaphoreGive(xMutex);
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <Brushes3+0xcc>)
 800101a:	6818      	ldr	r0, [r3, #0]
 800101c:	2300      	movs	r3, #0
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	f009 f955 	bl	800a2d0 <xQueueGenericSend>
				HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001026:	2006      	movs	r0, #6
 8001028:	f001 f842 	bl	80020b0 <HAL_NVIC_EnableIRQ>
		//}
		//osSemaphoreRelease(SemHandle);
		osThreadDef(washing3, Washing3, osPriorityNormal, 0, 128);
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <Brushes3+0xd4>)
 800102e:	f107 0408 	add.w	r4, r7, #8
 8001032:	461d      	mov	r5, r3
 8001034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001038:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800103c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		Washing3Handle = osThreadCreate(osThread(washing3), NULL);
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f008 fd55 	bl	8009af6 <osThreadCreate>
 800104c:	4602      	mov	r2, r0
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <Brushes3+0xd8>)
 8001050:	601a      	str	r2, [r3, #0]
		osThreadTerminate(NULL);
 8001052:	2000      	movs	r0, #0
 8001054:	f008 fd9b 	bl	8009b8e <osThreadTerminate>
	{
 8001058:	e7a6      	b.n	8000fa8 <Brushes3+0x10>
 800105a:	bf00      	nop
 800105c:	20004100 	.word	0x20004100
 8001060:	0800d368 	.word	0x0800d368
 8001064:	200040e8 	.word	0x200040e8
 8001068:	200041f4 	.word	0x200041f4
 800106c:	0800d3ac 	.word	0x0800d3ac
 8001070:	20004188 	.word	0x20004188

08001074 <Brushes4>:
	}
}


void Brushes4(void const * argument)
{
 8001074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001076:	b08b      	sub	sp, #44	; 0x2c
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 800107c:	f008 fd2b 	bl	8009ad6 <osKernelSysTick>
 8001080:	4603      	mov	r3, r0
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
		sprintf(str1, "Brushing the forth car is completed it took 30 sec\r\n");
 8001084:	4b2e      	ldr	r3, [pc, #184]	; (8001140 <Brushes4+0xcc>)
 8001086:	4a2f      	ldr	r2, [pc, #188]	; (8001144 <Brushes4+0xd0>)
 8001088:	4614      	mov	r4, r2
 800108a:	469c      	mov	ip, r3
 800108c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001090:	4665      	mov	r5, ip
 8001092:	4626      	mov	r6, r4
 8001094:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001096:	6028      	str	r0, [r5, #0]
 8001098:	6069      	str	r1, [r5, #4]
 800109a:	60aa      	str	r2, [r5, #8]
 800109c:	60eb      	str	r3, [r5, #12]
 800109e:	3410      	adds	r4, #16
 80010a0:	f10c 0c10 	add.w	ip, ip, #16
 80010a4:	4574      	cmp	r4, lr
 80010a6:	d1f3      	bne.n	8001090 <Brushes4+0x1c>
 80010a8:	4663      	mov	r3, ip
 80010aa:	4622      	mov	r2, r4
 80010ac:	6810      	ldr	r0, [r2, #0]
 80010ae:	6018      	str	r0, [r3, #0]
 80010b0:	7912      	ldrb	r2, [r2, #4]
 80010b2:	711a      	strb	r2, [r3, #4]
		osDelayUntil(&tickcount, 30000);
 80010b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b8:	f247 5130 	movw	r1, #30000	; 0x7530
 80010bc:	4618      	mov	r0, r3
 80010be:	f008 fecd 	bl	8009e5c <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
		//{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80010c2:	2006      	movs	r0, #6
 80010c4:	f001 f802 	bl	80020cc <HAL_NVIC_DisableIRQ>
				xSemaphoreTake(xMutex, portMAX_DELAY);
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <Brushes4+0xd4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295
 80010d0:	4618      	mov	r0, r3
 80010d2:	f009 fbf1 	bl	800a8b8 <xQueueSemaphoreTake>
				HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 80010d6:	481a      	ldr	r0, [pc, #104]	; (8001140 <Brushes4+0xcc>)
 80010d8:	f7ff f87a 	bl	80001d0 <strlen>
 80010dc:	4603      	mov	r3, r0
 80010de:	b29c      	uxth	r4, r3
 80010e0:	4817      	ldr	r0, [pc, #92]	; (8001140 <Brushes4+0xcc>)
 80010e2:	f7ff f875 	bl	80001d0 <strlen>
 80010e6:	4603      	mov	r3, r0
 80010e8:	3301      	adds	r3, #1
 80010ea:	4622      	mov	r2, r4
 80010ec:	4914      	ldr	r1, [pc, #80]	; (8001140 <Brushes4+0xcc>)
 80010ee:	4817      	ldr	r0, [pc, #92]	; (800114c <Brushes4+0xd8>)
 80010f0:	f004 fd7d 	bl	8005bee <HAL_UART_Transmit>
				xSemaphoreGive(xMutex);
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <Brushes4+0xd4>)
 80010f6:	6818      	ldr	r0, [r3, #0]
 80010f8:	2300      	movs	r3, #0
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	f009 f8e7 	bl	800a2d0 <xQueueGenericSend>
				HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001102:	2006      	movs	r0, #6
 8001104:	f000 ffd4 	bl	80020b0 <HAL_NVIC_EnableIRQ>
		//}
		osSemaphoreRelease(SemHandle);
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <Brushes4+0xdc>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f008 fd91 	bl	8009c34 <osSemaphoreRelease>
		osThreadDef(washing4, Washing4, osPriorityNormal, 0, 128);
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <Brushes4+0xe0>)
 8001114:	f107 0408 	add.w	r4, r7, #8
 8001118:	461d      	mov	r5, r3
 800111a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800111c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001122:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		Washing4Handle = osThreadCreate(osThread(washing4), NULL);
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f008 fce2 	bl	8009af6 <osThreadCreate>
 8001132:	4602      	mov	r2, r0
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <Brushes4+0xe4>)
 8001136:	601a      	str	r2, [r3, #0]
		osThreadTerminate(NULL);
 8001138:	2000      	movs	r0, #0
 800113a:	f008 fd28 	bl	8009b8e <osThreadTerminate>
	{
 800113e:	e7a1      	b.n	8001084 <Brushes4+0x10>
 8001140:	20004100 	.word	0x20004100
 8001144:	0800d3c8 	.word	0x0800d3c8
 8001148:	200040e8 	.word	0x200040e8
 800114c:	200041f4 	.word	0x200041f4
 8001150:	200040fc 	.word	0x200040fc
 8001154:	0800d40c 	.word	0x0800d40c
 8001158:	200040e4 	.word	0x200040e4

0800115c <Washing1>:
	}
}


void Washing1(void const * argument)
{
 800115c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800115e:	b08b      	sub	sp, #44	; 0x2c
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 8001164:	f008 fcb7 	bl	8009ad6 <osKernelSysTick>
 8001168:	4603      	mov	r3, r0
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
		sprintf(str1, "Washing the first car is completed it took 60 sec\r\n");
 800116c:	4b2b      	ldr	r3, [pc, #172]	; (800121c <Washing1+0xc0>)
 800116e:	4a2c      	ldr	r2, [pc, #176]	; (8001220 <Washing1+0xc4>)
 8001170:	4614      	mov	r4, r2
 8001172:	469c      	mov	ip, r3
 8001174:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001178:	4665      	mov	r5, ip
 800117a:	4626      	mov	r6, r4
 800117c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800117e:	6028      	str	r0, [r5, #0]
 8001180:	6069      	str	r1, [r5, #4]
 8001182:	60aa      	str	r2, [r5, #8]
 8001184:	60eb      	str	r3, [r5, #12]
 8001186:	3410      	adds	r4, #16
 8001188:	f10c 0c10 	add.w	ip, ip, #16
 800118c:	4574      	cmp	r4, lr
 800118e:	d1f3      	bne.n	8001178 <Washing1+0x1c>
 8001190:	4663      	mov	r3, ip
 8001192:	4622      	mov	r2, r4
 8001194:	6810      	ldr	r0, [r2, #0]
 8001196:	6018      	str	r0, [r3, #0]
		osDelayUntil(&tickcount, 60000);
 8001198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119c:	f64e 2160 	movw	r1, #60000	; 0xea60
 80011a0:	4618      	mov	r0, r3
 80011a2:	f008 fe5b 	bl	8009e5c <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
		//{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80011a6:	2006      	movs	r0, #6
 80011a8:	f000 ff90 	bl	80020cc <HAL_NVIC_DisableIRQ>
				xSemaphoreTake(xMutex, portMAX_DELAY);
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <Washing1+0xc8>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	4618      	mov	r0, r3
 80011b6:	f009 fb7f 	bl	800a8b8 <xQueueSemaphoreTake>
				HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 80011ba:	4818      	ldr	r0, [pc, #96]	; (800121c <Washing1+0xc0>)
 80011bc:	f7ff f808 	bl	80001d0 <strlen>
 80011c0:	4603      	mov	r3, r0
 80011c2:	b29c      	uxth	r4, r3
 80011c4:	4815      	ldr	r0, [pc, #84]	; (800121c <Washing1+0xc0>)
 80011c6:	f7ff f803 	bl	80001d0 <strlen>
 80011ca:	4603      	mov	r3, r0
 80011cc:	3301      	adds	r3, #1
 80011ce:	4622      	mov	r2, r4
 80011d0:	4912      	ldr	r1, [pc, #72]	; (800121c <Washing1+0xc0>)
 80011d2:	4815      	ldr	r0, [pc, #84]	; (8001228 <Washing1+0xcc>)
 80011d4:	f004 fd0b 	bl	8005bee <HAL_UART_Transmit>
				xSemaphoreGive(xMutex);
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <Washing1+0xc8>)
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	2300      	movs	r3, #0
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	f009 f875 	bl	800a2d0 <xQueueGenericSend>
				HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011e6:	2006      	movs	r0, #6
 80011e8:	f000 ff62 	bl	80020b0 <HAL_NVIC_EnableIRQ>
		//}
		//osSemaphoreRelease(SemHandle);
		osThreadDef(drying1, Drying1, osPriorityNormal, 0, 128);
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <Washing1+0xd0>)
 80011ee:	f107 0408 	add.w	r4, r7, #8
 80011f2:	461d      	mov	r5, r3
 80011f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		Drying1Handle = osThreadCreate(osThread(drying1), NULL);
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f008 fc75 	bl	8009af6 <osThreadCreate>
 800120c:	4602      	mov	r2, r0
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <Washing1+0xd4>)
 8001210:	601a      	str	r2, [r3, #0]
		osThreadTerminate(NULL);
 8001212:	2000      	movs	r0, #0
 8001214:	f008 fcbb 	bl	8009b8e <osThreadTerminate>
	{
 8001218:	e7a8      	b.n	800116c <Washing1+0x10>
 800121a:	bf00      	nop
 800121c:	20004100 	.word	0x20004100
 8001220:	0800d428 	.word	0x0800d428
 8001224:	200040e8 	.word	0x200040e8
 8001228:	200041f4 	.word	0x200041f4
 800122c:	0800d464 	.word	0x0800d464
 8001230:	200040e0 	.word	0x200040e0

08001234 <Washing2>:
	}
}

void Washing2(void const * argument)
{
 8001234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001236:	b08b      	sub	sp, #44	; 0x2c
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 800123c:	f008 fc4b 	bl	8009ad6 <osKernelSysTick>
 8001240:	4603      	mov	r3, r0
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
		sprintf(str1, "Washing the second car is completed it took 60 sec\r\n");
 8001244:	4b2c      	ldr	r3, [pc, #176]	; (80012f8 <Washing2+0xc4>)
 8001246:	4a2d      	ldr	r2, [pc, #180]	; (80012fc <Washing2+0xc8>)
 8001248:	4614      	mov	r4, r2
 800124a:	469c      	mov	ip, r3
 800124c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001250:	4665      	mov	r5, ip
 8001252:	4626      	mov	r6, r4
 8001254:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001256:	6028      	str	r0, [r5, #0]
 8001258:	6069      	str	r1, [r5, #4]
 800125a:	60aa      	str	r2, [r5, #8]
 800125c:	60eb      	str	r3, [r5, #12]
 800125e:	3410      	adds	r4, #16
 8001260:	f10c 0c10 	add.w	ip, ip, #16
 8001264:	4574      	cmp	r4, lr
 8001266:	d1f3      	bne.n	8001250 <Washing2+0x1c>
 8001268:	4663      	mov	r3, ip
 800126a:	4622      	mov	r2, r4
 800126c:	6810      	ldr	r0, [r2, #0]
 800126e:	6018      	str	r0, [r3, #0]
 8001270:	7912      	ldrb	r2, [r2, #4]
 8001272:	711a      	strb	r2, [r3, #4]
		osDelayUntil(&tickcount, 60000);
 8001274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001278:	f64e 2160 	movw	r1, #60000	; 0xea60
 800127c:	4618      	mov	r0, r3
 800127e:	f008 fded 	bl	8009e5c <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
		//{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001282:	2006      	movs	r0, #6
 8001284:	f000 ff22 	bl	80020cc <HAL_NVIC_DisableIRQ>
				xSemaphoreTake(xMutex, portMAX_DELAY);
 8001288:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <Washing2+0xcc>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f04f 31ff 	mov.w	r1, #4294967295
 8001290:	4618      	mov	r0, r3
 8001292:	f009 fb11 	bl	800a8b8 <xQueueSemaphoreTake>
				HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 8001296:	4818      	ldr	r0, [pc, #96]	; (80012f8 <Washing2+0xc4>)
 8001298:	f7fe ff9a 	bl	80001d0 <strlen>
 800129c:	4603      	mov	r3, r0
 800129e:	b29c      	uxth	r4, r3
 80012a0:	4815      	ldr	r0, [pc, #84]	; (80012f8 <Washing2+0xc4>)
 80012a2:	f7fe ff95 	bl	80001d0 <strlen>
 80012a6:	4603      	mov	r3, r0
 80012a8:	3301      	adds	r3, #1
 80012aa:	4622      	mov	r2, r4
 80012ac:	4912      	ldr	r1, [pc, #72]	; (80012f8 <Washing2+0xc4>)
 80012ae:	4815      	ldr	r0, [pc, #84]	; (8001304 <Washing2+0xd0>)
 80012b0:	f004 fc9d 	bl	8005bee <HAL_UART_Transmit>
				xSemaphoreGive(xMutex);
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <Washing2+0xcc>)
 80012b6:	6818      	ldr	r0, [r3, #0]
 80012b8:	2300      	movs	r3, #0
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	f009 f807 	bl	800a2d0 <xQueueGenericSend>
				HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80012c2:	2006      	movs	r0, #6
 80012c4:	f000 fef4 	bl	80020b0 <HAL_NVIC_EnableIRQ>
		//}
		//osSemaphoreRelease(SemHandle);
		osThreadDef(drying2, Drying2, osPriorityNormal, 0, 128);
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <Washing2+0xd4>)
 80012ca:	f107 0408 	add.w	r4, r7, #8
 80012ce:	461d      	mov	r5, r3
 80012d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		Drying2Handle = osThreadCreate(osThread(drying2), NULL);
 80012dc:	f107 0308 	add.w	r3, r7, #8
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f008 fc07 	bl	8009af6 <osThreadCreate>
 80012e8:	4602      	mov	r2, r0
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <Washing2+0xd8>)
 80012ec:	601a      	str	r2, [r3, #0]
		osThreadTerminate(NULL);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f008 fc4d 	bl	8009b8e <osThreadTerminate>
	{
 80012f4:	e7a6      	b.n	8001244 <Washing2+0x10>
 80012f6:	bf00      	nop
 80012f8:	20004100 	.word	0x20004100
 80012fc:	0800d480 	.word	0x0800d480
 8001300:	200040e8 	.word	0x200040e8
 8001304:	200041f4 	.word	0x200041f4
 8001308:	0800d4c0 	.word	0x0800d4c0
 800130c:	2000417c 	.word	0x2000417c

08001310 <Washing3>:
	}
}

void Washing3(void const * argument)
{
 8001310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001312:	b08b      	sub	sp, #44	; 0x2c
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 8001318:	f008 fbdd 	bl	8009ad6 <osKernelSysTick>
 800131c:	4603      	mov	r3, r0
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
		sprintf(str1, "Washing the third car is completed it took 60 sec\r\n");
 8001320:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <Washing3+0xc0>)
 8001322:	4a2c      	ldr	r2, [pc, #176]	; (80013d4 <Washing3+0xc4>)
 8001324:	4614      	mov	r4, r2
 8001326:	469c      	mov	ip, r3
 8001328:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800132c:	4665      	mov	r5, ip
 800132e:	4626      	mov	r6, r4
 8001330:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001332:	6028      	str	r0, [r5, #0]
 8001334:	6069      	str	r1, [r5, #4]
 8001336:	60aa      	str	r2, [r5, #8]
 8001338:	60eb      	str	r3, [r5, #12]
 800133a:	3410      	adds	r4, #16
 800133c:	f10c 0c10 	add.w	ip, ip, #16
 8001340:	4574      	cmp	r4, lr
 8001342:	d1f3      	bne.n	800132c <Washing3+0x1c>
 8001344:	4663      	mov	r3, ip
 8001346:	4622      	mov	r2, r4
 8001348:	6810      	ldr	r0, [r2, #0]
 800134a:	6018      	str	r0, [r3, #0]
		osDelayUntil(&tickcount, 60000);
 800134c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001350:	f64e 2160 	movw	r1, #60000	; 0xea60
 8001354:	4618      	mov	r0, r3
 8001356:	f008 fd81 	bl	8009e5c <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
		//{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800135a:	2006      	movs	r0, #6
 800135c:	f000 feb6 	bl	80020cc <HAL_NVIC_DisableIRQ>
				xSemaphoreTake(xMutex, portMAX_DELAY);
 8001360:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <Washing3+0xc8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f04f 31ff 	mov.w	r1, #4294967295
 8001368:	4618      	mov	r0, r3
 800136a:	f009 faa5 	bl	800a8b8 <xQueueSemaphoreTake>
				HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 800136e:	4818      	ldr	r0, [pc, #96]	; (80013d0 <Washing3+0xc0>)
 8001370:	f7fe ff2e 	bl	80001d0 <strlen>
 8001374:	4603      	mov	r3, r0
 8001376:	b29c      	uxth	r4, r3
 8001378:	4815      	ldr	r0, [pc, #84]	; (80013d0 <Washing3+0xc0>)
 800137a:	f7fe ff29 	bl	80001d0 <strlen>
 800137e:	4603      	mov	r3, r0
 8001380:	3301      	adds	r3, #1
 8001382:	4622      	mov	r2, r4
 8001384:	4912      	ldr	r1, [pc, #72]	; (80013d0 <Washing3+0xc0>)
 8001386:	4815      	ldr	r0, [pc, #84]	; (80013dc <Washing3+0xcc>)
 8001388:	f004 fc31 	bl	8005bee <HAL_UART_Transmit>
				xSemaphoreGive(xMutex);
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <Washing3+0xc8>)
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	2300      	movs	r3, #0
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	f008 ff9b 	bl	800a2d0 <xQueueGenericSend>
				HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800139a:	2006      	movs	r0, #6
 800139c:	f000 fe88 	bl	80020b0 <HAL_NVIC_EnableIRQ>
		//}
		//osSemaphoreRelease(SemHandle);
		osThreadDef(drying3, Drying3, osPriorityNormal, 0, 128);
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <Washing3+0xd0>)
 80013a2:	f107 0408 	add.w	r4, r7, #8
 80013a6:	461d      	mov	r5, r3
 80013a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		Drying3Handle = osThreadCreate(osThread(drying3), NULL);
 80013b4:	f107 0308 	add.w	r3, r7, #8
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f008 fb9b 	bl	8009af6 <osThreadCreate>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <Washing3+0xd4>)
 80013c4:	601a      	str	r2, [r3, #0]
		osThreadTerminate(NULL);
 80013c6:	2000      	movs	r0, #0
 80013c8:	f008 fbe1 	bl	8009b8e <osThreadTerminate>
	{
 80013cc:	e7a8      	b.n	8001320 <Washing3+0x10>
 80013ce:	bf00      	nop
 80013d0:	20004100 	.word	0x20004100
 80013d4:	0800d4dc 	.word	0x0800d4dc
 80013d8:	200040e8 	.word	0x200040e8
 80013dc:	200041f4 	.word	0x200041f4
 80013e0:	0800d518 	.word	0x0800d518
 80013e4:	200040f4 	.word	0x200040f4

080013e8 <Washing4>:
	}
}

void Washing4(void const * argument)
{
 80013e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ea:	b08b      	sub	sp, #44	; 0x2c
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 80013f0:	f008 fb71 	bl	8009ad6 <osKernelSysTick>
 80013f4:	4603      	mov	r3, r0
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
		sprintf(str1, "Washing the fourth car is completed it took 60 sec\r\n");
 80013f8:	4b2c      	ldr	r3, [pc, #176]	; (80014ac <Washing4+0xc4>)
 80013fa:	4a2d      	ldr	r2, [pc, #180]	; (80014b0 <Washing4+0xc8>)
 80013fc:	4614      	mov	r4, r2
 80013fe:	469c      	mov	ip, r3
 8001400:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001404:	4665      	mov	r5, ip
 8001406:	4626      	mov	r6, r4
 8001408:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800140a:	6028      	str	r0, [r5, #0]
 800140c:	6069      	str	r1, [r5, #4]
 800140e:	60aa      	str	r2, [r5, #8]
 8001410:	60eb      	str	r3, [r5, #12]
 8001412:	3410      	adds	r4, #16
 8001414:	f10c 0c10 	add.w	ip, ip, #16
 8001418:	4574      	cmp	r4, lr
 800141a:	d1f3      	bne.n	8001404 <Washing4+0x1c>
 800141c:	4663      	mov	r3, ip
 800141e:	4622      	mov	r2, r4
 8001420:	6810      	ldr	r0, [r2, #0]
 8001422:	6018      	str	r0, [r3, #0]
 8001424:	7912      	ldrb	r2, [r2, #4]
 8001426:	711a      	strb	r2, [r3, #4]
		osDelayUntil(&tickcount, 60000);
 8001428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142c:	f64e 2160 	movw	r1, #60000	; 0xea60
 8001430:	4618      	mov	r0, r3
 8001432:	f008 fd13 	bl	8009e5c <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
		//{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001436:	2006      	movs	r0, #6
 8001438:	f000 fe48 	bl	80020cc <HAL_NVIC_DisableIRQ>
				xSemaphoreTake(xMutex, portMAX_DELAY);
 800143c:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <Washing4+0xcc>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f04f 31ff 	mov.w	r1, #4294967295
 8001444:	4618      	mov	r0, r3
 8001446:	f009 fa37 	bl	800a8b8 <xQueueSemaphoreTake>
				HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 800144a:	4818      	ldr	r0, [pc, #96]	; (80014ac <Washing4+0xc4>)
 800144c:	f7fe fec0 	bl	80001d0 <strlen>
 8001450:	4603      	mov	r3, r0
 8001452:	b29c      	uxth	r4, r3
 8001454:	4815      	ldr	r0, [pc, #84]	; (80014ac <Washing4+0xc4>)
 8001456:	f7fe febb 	bl	80001d0 <strlen>
 800145a:	4603      	mov	r3, r0
 800145c:	3301      	adds	r3, #1
 800145e:	4622      	mov	r2, r4
 8001460:	4912      	ldr	r1, [pc, #72]	; (80014ac <Washing4+0xc4>)
 8001462:	4815      	ldr	r0, [pc, #84]	; (80014b8 <Washing4+0xd0>)
 8001464:	f004 fbc3 	bl	8005bee <HAL_UART_Transmit>
				xSemaphoreGive(xMutex);
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <Washing4+0xcc>)
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	2300      	movs	r3, #0
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	f008 ff2d 	bl	800a2d0 <xQueueGenericSend>
				HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001476:	2006      	movs	r0, #6
 8001478:	f000 fe1a 	bl	80020b0 <HAL_NVIC_EnableIRQ>
		//}
		//osSemaphoreRelease(SemHandle);
		osThreadDef(drying4, Drying4, osPriorityNormal, 0, 128);
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <Washing4+0xd4>)
 800147e:	f107 0408 	add.w	r4, r7, #8
 8001482:	461d      	mov	r5, r3
 8001484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001488:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800148c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		Drying4Handle = osThreadCreate(osThread(drying4), NULL);
 8001490:	f107 0308 	add.w	r3, r7, #8
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f008 fb2d 	bl	8009af6 <osThreadCreate>
 800149c:	4602      	mov	r2, r0
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <Washing4+0xd8>)
 80014a0:	601a      	str	r2, [r3, #0]
		osThreadTerminate(NULL);
 80014a2:	2000      	movs	r0, #0
 80014a4:	f008 fb73 	bl	8009b8e <osThreadTerminate>
	{
 80014a8:	e7a6      	b.n	80013f8 <Washing4+0x10>
 80014aa:	bf00      	nop
 80014ac:	20004100 	.word	0x20004100
 80014b0:	0800d534 	.word	0x0800d534
 80014b4:	200040e8 	.word	0x200040e8
 80014b8:	200041f4 	.word	0x200041f4
 80014bc:	0800d574 	.word	0x0800d574
 80014c0:	200040f0 	.word	0x200040f0

080014c4 <Drying1>:
	}
}

void Drying1(void const * argument)
{
 80014c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 80014cc:	f008 fb03 	bl	8009ad6 <osKernelSysTick>
 80014d0:	4603      	mov	r3, r0
 80014d2:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		sprintf(str1, "Drying the first car is completed it took 30 sec\r\n");
 80014d4:	4b22      	ldr	r3, [pc, #136]	; (8001560 <Drying1+0x9c>)
 80014d6:	4a23      	ldr	r2, [pc, #140]	; (8001564 <Drying1+0xa0>)
 80014d8:	4614      	mov	r4, r2
 80014da:	469c      	mov	ip, r3
 80014dc:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80014e0:	4665      	mov	r5, ip
 80014e2:	4626      	mov	r6, r4
 80014e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014e6:	6028      	str	r0, [r5, #0]
 80014e8:	6069      	str	r1, [r5, #4]
 80014ea:	60aa      	str	r2, [r5, #8]
 80014ec:	60eb      	str	r3, [r5, #12]
 80014ee:	3410      	adds	r4, #16
 80014f0:	f10c 0c10 	add.w	ip, ip, #16
 80014f4:	4574      	cmp	r4, lr
 80014f6:	d1f3      	bne.n	80014e0 <Drying1+0x1c>
 80014f8:	4663      	mov	r3, ip
 80014fa:	4622      	mov	r2, r4
 80014fc:	8811      	ldrh	r1, [r2, #0]
 80014fe:	7892      	ldrb	r2, [r2, #2]
 8001500:	8019      	strh	r1, [r3, #0]
 8001502:	709a      	strb	r2, [r3, #2]
		osDelayUntil(&tickcount, 30000);
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	f247 5130 	movw	r1, #30000	; 0x7530
 800150c:	4618      	mov	r0, r3
 800150e:	f008 fca5 	bl	8009e5c <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
		//{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001512:	2006      	movs	r0, #6
 8001514:	f000 fdda 	bl	80020cc <HAL_NVIC_DisableIRQ>
				xSemaphoreTake(xMutex, portMAX_DELAY);
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <Drying1+0xa4>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f04f 31ff 	mov.w	r1, #4294967295
 8001520:	4618      	mov	r0, r3
 8001522:	f009 f9c9 	bl	800a8b8 <xQueueSemaphoreTake>
				HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 8001526:	480e      	ldr	r0, [pc, #56]	; (8001560 <Drying1+0x9c>)
 8001528:	f7fe fe52 	bl	80001d0 <strlen>
 800152c:	4603      	mov	r3, r0
 800152e:	b29c      	uxth	r4, r3
 8001530:	480b      	ldr	r0, [pc, #44]	; (8001560 <Drying1+0x9c>)
 8001532:	f7fe fe4d 	bl	80001d0 <strlen>
 8001536:	4603      	mov	r3, r0
 8001538:	3301      	adds	r3, #1
 800153a:	4622      	mov	r2, r4
 800153c:	4908      	ldr	r1, [pc, #32]	; (8001560 <Drying1+0x9c>)
 800153e:	480b      	ldr	r0, [pc, #44]	; (800156c <Drying1+0xa8>)
 8001540:	f004 fb55 	bl	8005bee <HAL_UART_Transmit>
				xSemaphoreGive(xMutex);
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <Drying1+0xa4>)
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	2300      	movs	r3, #0
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	f008 febf 	bl	800a2d0 <xQueueGenericSend>
				HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001552:	2006      	movs	r0, #6
 8001554:	f000 fdac 	bl	80020b0 <HAL_NVIC_EnableIRQ>
		//}
		//osSemaphoreRelease(SemHandle);
		osThreadTerminate(NULL);
 8001558:	2000      	movs	r0, #0
 800155a:	f008 fb18 	bl	8009b8e <osThreadTerminate>
		sprintf(str1, "Drying the first car is completed it took 30 sec\r\n");
 800155e:	e7b9      	b.n	80014d4 <Drying1+0x10>
 8001560:	20004100 	.word	0x20004100
 8001564:	0800d590 	.word	0x0800d590
 8001568:	200040e8 	.word	0x200040e8
 800156c:	200041f4 	.word	0x200041f4

08001570 <Drying2>:
	}
}

void Drying2(void const * argument)
{
 8001570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 8001578:	f008 faad 	bl	8009ad6 <osKernelSysTick>
 800157c:	4603      	mov	r3, r0
 800157e:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		sprintf(str1, "Drying the second car is completed it took 30 sec\r\n");
 8001580:	4b21      	ldr	r3, [pc, #132]	; (8001608 <Drying2+0x98>)
 8001582:	4a22      	ldr	r2, [pc, #136]	; (800160c <Drying2+0x9c>)
 8001584:	4614      	mov	r4, r2
 8001586:	469c      	mov	ip, r3
 8001588:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800158c:	4665      	mov	r5, ip
 800158e:	4626      	mov	r6, r4
 8001590:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001592:	6028      	str	r0, [r5, #0]
 8001594:	6069      	str	r1, [r5, #4]
 8001596:	60aa      	str	r2, [r5, #8]
 8001598:	60eb      	str	r3, [r5, #12]
 800159a:	3410      	adds	r4, #16
 800159c:	f10c 0c10 	add.w	ip, ip, #16
 80015a0:	4574      	cmp	r4, lr
 80015a2:	d1f3      	bne.n	800158c <Drying2+0x1c>
 80015a4:	4663      	mov	r3, ip
 80015a6:	4622      	mov	r2, r4
 80015a8:	6810      	ldr	r0, [r2, #0]
 80015aa:	6018      	str	r0, [r3, #0]
		osDelayUntil(&tickcount, 30000);
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	f247 5130 	movw	r1, #30000	; 0x7530
 80015b4:	4618      	mov	r0, r3
 80015b6:	f008 fc51 	bl	8009e5c <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
		//{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80015ba:	2006      	movs	r0, #6
 80015bc:	f000 fd86 	bl	80020cc <HAL_NVIC_DisableIRQ>
				xSemaphoreTake(xMutex, portMAX_DELAY);
 80015c0:	4b13      	ldr	r3, [pc, #76]	; (8001610 <Drying2+0xa0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295
 80015c8:	4618      	mov	r0, r3
 80015ca:	f009 f975 	bl	800a8b8 <xQueueSemaphoreTake>
				HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 80015ce:	480e      	ldr	r0, [pc, #56]	; (8001608 <Drying2+0x98>)
 80015d0:	f7fe fdfe 	bl	80001d0 <strlen>
 80015d4:	4603      	mov	r3, r0
 80015d6:	b29c      	uxth	r4, r3
 80015d8:	480b      	ldr	r0, [pc, #44]	; (8001608 <Drying2+0x98>)
 80015da:	f7fe fdf9 	bl	80001d0 <strlen>
 80015de:	4603      	mov	r3, r0
 80015e0:	3301      	adds	r3, #1
 80015e2:	4622      	mov	r2, r4
 80015e4:	4908      	ldr	r1, [pc, #32]	; (8001608 <Drying2+0x98>)
 80015e6:	480b      	ldr	r0, [pc, #44]	; (8001614 <Drying2+0xa4>)
 80015e8:	f004 fb01 	bl	8005bee <HAL_UART_Transmit>
				xSemaphoreGive(xMutex);
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <Drying2+0xa0>)
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	2300      	movs	r3, #0
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	f008 fe6b 	bl	800a2d0 <xQueueGenericSend>
				HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015fa:	2006      	movs	r0, #6
 80015fc:	f000 fd58 	bl	80020b0 <HAL_NVIC_EnableIRQ>
		//}
		//osSemaphoreRelease(SemHandle);
		osThreadTerminate(NULL);
 8001600:	2000      	movs	r0, #0
 8001602:	f008 fac4 	bl	8009b8e <osThreadTerminate>
		sprintf(str1, "Drying the second car is completed it took 30 sec\r\n");
 8001606:	e7bb      	b.n	8001580 <Drying2+0x10>
 8001608:	20004100 	.word	0x20004100
 800160c:	0800d5c4 	.word	0x0800d5c4
 8001610:	200040e8 	.word	0x200040e8
 8001614:	200041f4 	.word	0x200041f4

08001618 <Drying3>:
	}
}

void Drying3(void const * argument)
{
 8001618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 8001620:	f008 fa59 	bl	8009ad6 <osKernelSysTick>
 8001624:	4603      	mov	r3, r0
 8001626:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		sprintf(str1, "Drying the third car is completed it took 30 sec\r\n");
 8001628:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <Drying3+0x9c>)
 800162a:	4a23      	ldr	r2, [pc, #140]	; (80016b8 <Drying3+0xa0>)
 800162c:	4614      	mov	r4, r2
 800162e:	469c      	mov	ip, r3
 8001630:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001634:	4665      	mov	r5, ip
 8001636:	4626      	mov	r6, r4
 8001638:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800163a:	6028      	str	r0, [r5, #0]
 800163c:	6069      	str	r1, [r5, #4]
 800163e:	60aa      	str	r2, [r5, #8]
 8001640:	60eb      	str	r3, [r5, #12]
 8001642:	3410      	adds	r4, #16
 8001644:	f10c 0c10 	add.w	ip, ip, #16
 8001648:	4574      	cmp	r4, lr
 800164a:	d1f3      	bne.n	8001634 <Drying3+0x1c>
 800164c:	4663      	mov	r3, ip
 800164e:	4622      	mov	r2, r4
 8001650:	8811      	ldrh	r1, [r2, #0]
 8001652:	7892      	ldrb	r2, [r2, #2]
 8001654:	8019      	strh	r1, [r3, #0]
 8001656:	709a      	strb	r2, [r3, #2]
		osDelayUntil(&tickcount, 30000);
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	f247 5130 	movw	r1, #30000	; 0x7530
 8001660:	4618      	mov	r0, r3
 8001662:	f008 fbfb 	bl	8009e5c <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
		//{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001666:	2006      	movs	r0, #6
 8001668:	f000 fd30 	bl	80020cc <HAL_NVIC_DisableIRQ>
				xSemaphoreTake(xMutex, portMAX_DELAY);
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <Drying3+0xa4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f04f 31ff 	mov.w	r1, #4294967295
 8001674:	4618      	mov	r0, r3
 8001676:	f009 f91f 	bl	800a8b8 <xQueueSemaphoreTake>
				HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 800167a:	480e      	ldr	r0, [pc, #56]	; (80016b4 <Drying3+0x9c>)
 800167c:	f7fe fda8 	bl	80001d0 <strlen>
 8001680:	4603      	mov	r3, r0
 8001682:	b29c      	uxth	r4, r3
 8001684:	480b      	ldr	r0, [pc, #44]	; (80016b4 <Drying3+0x9c>)
 8001686:	f7fe fda3 	bl	80001d0 <strlen>
 800168a:	4603      	mov	r3, r0
 800168c:	3301      	adds	r3, #1
 800168e:	4622      	mov	r2, r4
 8001690:	4908      	ldr	r1, [pc, #32]	; (80016b4 <Drying3+0x9c>)
 8001692:	480b      	ldr	r0, [pc, #44]	; (80016c0 <Drying3+0xa8>)
 8001694:	f004 faab 	bl	8005bee <HAL_UART_Transmit>
				xSemaphoreGive(xMutex);
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <Drying3+0xa4>)
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	2300      	movs	r3, #0
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	f008 fe15 	bl	800a2d0 <xQueueGenericSend>
				HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80016a6:	2006      	movs	r0, #6
 80016a8:	f000 fd02 	bl	80020b0 <HAL_NVIC_EnableIRQ>
		//}
		//osSemaphoreRelease(SemHandle);
		osThreadTerminate(NULL);
 80016ac:	2000      	movs	r0, #0
 80016ae:	f008 fa6e 	bl	8009b8e <osThreadTerminate>
		sprintf(str1, "Drying the third car is completed it took 30 sec\r\n");
 80016b2:	e7b9      	b.n	8001628 <Drying3+0x10>
 80016b4:	20004100 	.word	0x20004100
 80016b8:	0800d5f8 	.word	0x0800d5f8
 80016bc:	200040e8 	.word	0x200040e8
 80016c0:	200041f4 	.word	0x200041f4

080016c4 <Drying4>:
	}
}

void Drying4(void const * argument)
{
 80016c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	uint32_t tickcount = osKernelSysTick();
 80016cc:	f008 fa03 	bl	8009ad6 <osKernelSysTick>
 80016d0:	4603      	mov	r3, r0
 80016d2:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		sprintf(str1, "Drying the fouth car is completed it took 30 sec\r\n");
 80016d4:	4b22      	ldr	r3, [pc, #136]	; (8001760 <Drying4+0x9c>)
 80016d6:	4a23      	ldr	r2, [pc, #140]	; (8001764 <Drying4+0xa0>)
 80016d8:	4614      	mov	r4, r2
 80016da:	469c      	mov	ip, r3
 80016dc:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80016e0:	4665      	mov	r5, ip
 80016e2:	4626      	mov	r6, r4
 80016e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016e6:	6028      	str	r0, [r5, #0]
 80016e8:	6069      	str	r1, [r5, #4]
 80016ea:	60aa      	str	r2, [r5, #8]
 80016ec:	60eb      	str	r3, [r5, #12]
 80016ee:	3410      	adds	r4, #16
 80016f0:	f10c 0c10 	add.w	ip, ip, #16
 80016f4:	4574      	cmp	r4, lr
 80016f6:	d1f3      	bne.n	80016e0 <Drying4+0x1c>
 80016f8:	4663      	mov	r3, ip
 80016fa:	4622      	mov	r2, r4
 80016fc:	8811      	ldrh	r1, [r2, #0]
 80016fe:	7892      	ldrb	r2, [r2, #2]
 8001700:	8019      	strh	r1, [r3, #0]
 8001702:	709a      	strb	r2, [r3, #2]
		osDelayUntil(&tickcount, 30000);
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	f247 5130 	movw	r1, #30000	; 0x7530
 800170c:	4618      	mov	r0, r3
 800170e:	f008 fba5 	bl	8009e5c <osDelayUntil>
		//if(osSemaphoreWait(SemHandle , 10) == osOK)
		//{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001712:	2006      	movs	r0, #6
 8001714:	f000 fcda 	bl	80020cc <HAL_NVIC_DisableIRQ>
				xSemaphoreTake(xMutex, portMAX_DELAY);
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <Drying4+0xa4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	4618      	mov	r0, r3
 8001722:	f009 f8c9 	bl	800a8b8 <xQueueSemaphoreTake>
				HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),strlen(str1)+1);
 8001726:	480e      	ldr	r0, [pc, #56]	; (8001760 <Drying4+0x9c>)
 8001728:	f7fe fd52 	bl	80001d0 <strlen>
 800172c:	4603      	mov	r3, r0
 800172e:	b29c      	uxth	r4, r3
 8001730:	480b      	ldr	r0, [pc, #44]	; (8001760 <Drying4+0x9c>)
 8001732:	f7fe fd4d 	bl	80001d0 <strlen>
 8001736:	4603      	mov	r3, r0
 8001738:	3301      	adds	r3, #1
 800173a:	4622      	mov	r2, r4
 800173c:	4908      	ldr	r1, [pc, #32]	; (8001760 <Drying4+0x9c>)
 800173e:	480b      	ldr	r0, [pc, #44]	; (800176c <Drying4+0xa8>)
 8001740:	f004 fa55 	bl	8005bee <HAL_UART_Transmit>
				xSemaphoreGive(xMutex);
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <Drying4+0xa4>)
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	2300      	movs	r3, #0
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	f008 fdbf 	bl	800a2d0 <xQueueGenericSend>
				HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001752:	2006      	movs	r0, #6
 8001754:	f000 fcac 	bl	80020b0 <HAL_NVIC_EnableIRQ>
		//}
		//osSemaphoreRelease(SemHandle);
		osThreadTerminate(NULL);
 8001758:	2000      	movs	r0, #0
 800175a:	f008 fa18 	bl	8009b8e <osThreadTerminate>
		sprintf(str1, "Drying the fouth car is completed it took 30 sec\r\n");
 800175e:	e7b9      	b.n	80016d4 <Drying4+0x10>
 8001760:	20004100 	.word	0x20004100
 8001764:	0800d62c 	.word	0x0800d62c
 8001768:	200040e8 	.word	0x200040e8
 800176c:	200041f4 	.word	0x200041f4

08001770 <EXTI0_IRQHandler>:
	}
}

void EXTI0_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001774:	2006      	movs	r0, #6
 8001776:	f000 fca9 	bl	80020cc <HAL_NVIC_DisableIRQ>
	  HAL_UART_Transmit(&huart2,"p\r\n",3,5);
 800177a:	2305      	movs	r3, #5
 800177c:	2203      	movs	r2, #3
 800177e:	490d      	ldr	r1, [pc, #52]	; (80017b4 <EXTI0_IRQHandler+0x44>)
 8001780:	480d      	ldr	r0, [pc, #52]	; (80017b8 <EXTI0_IRQHandler+0x48>)
 8001782:	f004 fa34 	bl	8005bee <HAL_UART_Transmit>
	  if (buttonPush == 4) buttonPush = 0;
 8001786:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <EXTI0_IRQHandler+0x4c>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b04      	cmp	r3, #4
 800178e:	d102      	bne.n	8001796 <EXTI0_IRQHandler+0x26>
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <EXTI0_IRQHandler+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
	  buttonPush++;
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <EXTI0_IRQHandler+0x4c>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	3301      	adds	r3, #1
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <EXTI0_IRQHandler+0x4c>)
 80017a2:	701a      	strb	r2, [r3, #0]
	  status = 1;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <EXTI0_IRQHandler+0x50>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80017aa:	2001      	movs	r0, #1
 80017ac:	f000 fe72 	bl	8002494 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	0800d660 	.word	0x0800d660
 80017b8:	200041f4 	.word	0x200041f4
 80017bc:	200041ec 	.word	0x200041ec
 80017c0:	2000427c 	.word	0x2000427c

080017c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80017c4:	b5b0      	push	{r4, r5, r7, lr}
 80017c6:	b09e      	sub	sp, #120	; 0x78
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80017cc:	f00b f87e 	bl	800c8cc <MX_USB_HOST_Init>
	  /* Infinite loop */
  	 // osEvent event;
	  for(;;)
	  {
		 // event = osMessageGet(USART_QueueHandle, 100);
		  if (status)
 80017d0:	4b39      	ldr	r3, [pc, #228]	; (80018b8 <StartDefaultTask+0xf4>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d069      	beq.n	80018ae <StartDefaultTask+0xea>
		  {
			  status = 0;
 80017da:	4b37      	ldr	r3, [pc, #220]	; (80018b8 <StartDefaultTask+0xf4>)
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
			  osDelay(30);
 80017e0:	201e      	movs	r0, #30
 80017e2:	f008 f9e0 	bl	8009ba6 <osDelay>
			  switch(buttonPush)
 80017e6:	4b35      	ldr	r3, [pc, #212]	; (80018bc <StartDefaultTask+0xf8>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	3b01      	subs	r3, #1
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d85f      	bhi.n	80018b2 <StartDefaultTask+0xee>
 80017f2:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <StartDefaultTask+0x34>)
 80017f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f8:	08001809 	.word	0x08001809
 80017fc:	08001837 	.word	0x08001837
 8001800:	0800185f 	.word	0x0800185f
 8001804:	08001887 	.word	0x08001887
			  {
			  	  case 1: ;
			  	  	  osThreadDef(foam1, Foam1, osPriorityNormal, 0, 128);
 8001808:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <StartDefaultTask+0xfc>)
 800180a:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 800180e:	461d      	mov	r5, r3
 8001810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001814:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001818:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			  	  	  Foam1Handle = osThreadCreate(osThread(foam1), NULL);
 800181c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f008 f967 	bl	8009af6 <osThreadCreate>
 8001828:	4602      	mov	r2, r0
 800182a:	4b26      	ldr	r3, [pc, #152]	; (80018c4 <StartDefaultTask+0x100>)
 800182c:	601a      	str	r2, [r3, #0]
			  	  	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800182e:	2006      	movs	r0, #6
 8001830:	f000 fc3e 	bl	80020b0 <HAL_NVIC_EnableIRQ>
			  	  	  break;
 8001834:	e03e      	b.n	80018b4 <StartDefaultTask+0xf0>
			  	  case 2: ;
			  	  	  osThreadDef(foam2, Foam2, osPriorityNormal, 0, 128);
 8001836:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <StartDefaultTask+0x104>)
 8001838:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800183c:	461d      	mov	r5, r3
 800183e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001842:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001846:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			  	  	  Foam2Handle = osThreadCreate(osThread(foam2), NULL);
 800184a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f008 f950 	bl	8009af6 <osThreadCreate>
 8001856:	4602      	mov	r2, r0
 8001858:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <StartDefaultTask+0x108>)
 800185a:	601a      	str	r2, [r3, #0]
			  	  	  break;
 800185c:	e02a      	b.n	80018b4 <StartDefaultTask+0xf0>
			  	  case 3: ;
			  	  	  osThreadDef(foam3, Foam3, osPriorityNormal, 0, 128);
 800185e:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <StartDefaultTask+0x10c>)
 8001860:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001864:	461d      	mov	r5, r3
 8001866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800186a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800186e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			  	  	  Foam3Handle = osThreadCreate(osThread(foam3), NULL);
 8001872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f008 f93c 	bl	8009af6 <osThreadCreate>
 800187e:	4602      	mov	r2, r0
 8001880:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <StartDefaultTask+0x110>)
 8001882:	601a      	str	r2, [r3, #0]
			  	  	  break;
 8001884:	e016      	b.n	80018b4 <StartDefaultTask+0xf0>
			  	  case 4: ;
			  	  	  osThreadDef(foam4, Foam4, osPriorityNormal, 0, 128);
 8001886:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <StartDefaultTask+0x114>)
 8001888:	f107 0408 	add.w	r4, r7, #8
 800188c:	461d      	mov	r5, r3
 800188e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001890:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001892:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001896:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			  	  	  Foam4Handle = osThreadCreate(osThread(foam4), NULL);
 800189a:	f107 0308 	add.w	r3, r7, #8
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f008 f928 	bl	8009af6 <osThreadCreate>
 80018a6:	4602      	mov	r2, r0
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <StartDefaultTask+0x118>)
 80018aa:	601a      	str	r2, [r3, #0]
			  	  	  break;
 80018ac:	e002      	b.n	80018b4 <StartDefaultTask+0xf0>
			  	  default: ;
			  	  	  break;
			 	}
		  }
 80018ae:	bf00      	nop
 80018b0:	e78e      	b.n	80017d0 <StartDefaultTask+0xc>
			  	  	  break;
 80018b2:	bf00      	nop
		  if (status)
 80018b4:	e78c      	b.n	80017d0 <StartDefaultTask+0xc>
 80018b6:	bf00      	nop
 80018b8:	2000427c 	.word	0x2000427c
 80018bc:	200041ec 	.word	0x200041ec
 80018c0:	0800d66c 	.word	0x0800d66c
 80018c4:	20004088 	.word	0x20004088
 80018c8:	0800d690 	.word	0x0800d690
 80018cc:	2000418c 	.word	0x2000418c
 80018d0:	0800d6b4 	.word	0x0800d6b4
 80018d4:	20004184 	.word	0x20004184
 80018d8:	0800d6d8 	.word	0x0800d6d8
 80018dc:	20004178 	.word	0x20004178

080018e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f0:	d101      	bne.n	80018f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018f2:	f000 faa5 	bl	8001e40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <HAL_MspInit+0x4c>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	4a0f      	ldr	r2, [pc, #60]	; (8001958 <HAL_MspInit+0x4c>)
 800191c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001920:	6453      	str	r3, [r2, #68]	; 0x44
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <HAL_MspInit+0x4c>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	603b      	str	r3, [r7, #0]
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_MspInit+0x4c>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	4a08      	ldr	r2, [pc, #32]	; (8001958 <HAL_MspInit+0x4c>)
 8001938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193c:	6413      	str	r3, [r2, #64]	; 0x40
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_MspInit+0x4c>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800

0800195c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a19      	ldr	r2, [pc, #100]	; (80019e0 <HAL_I2C_MspInit+0x84>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d12c      	bne.n	80019d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <HAL_I2C_MspInit+0x88>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a17      	ldr	r2, [pc, #92]	; (80019e4 <HAL_I2C_MspInit+0x88>)
 8001988:	f043 0302 	orr.w	r3, r3, #2
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <HAL_I2C_MspInit+0x88>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800199a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800199e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a0:	2312      	movs	r3, #18
 80019a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019a4:	2301      	movs	r3, #1
 80019a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019ac:	2304      	movs	r3, #4
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	4619      	mov	r1, r3
 80019b6:	480c      	ldr	r0, [pc, #48]	; (80019e8 <HAL_I2C_MspInit+0x8c>)
 80019b8:	f000 fbb8 	bl	800212c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <HAL_I2C_MspInit+0x88>)
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	4a07      	ldr	r2, [pc, #28]	; (80019e4 <HAL_I2C_MspInit+0x88>)
 80019c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019ca:	6413      	str	r3, [r2, #64]	; 0x40
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_I2C_MspInit+0x88>)
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019d8:	bf00      	nop
 80019da:	3728      	adds	r7, #40	; 0x28
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40005400 	.word	0x40005400
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40020400 	.word	0x40020400

080019ec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a28      	ldr	r2, [pc, #160]	; (8001aac <HAL_I2S_MspInit+0xc0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d14a      	bne.n	8001aa4 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <HAL_I2S_MspInit+0xc4>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	4a26      	ldr	r2, [pc, #152]	; (8001ab0 <HAL_I2S_MspInit+0xc4>)
 8001a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1e:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <HAL_I2S_MspInit+0xc4>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <HAL_I2S_MspInit+0xc4>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a1f      	ldr	r2, [pc, #124]	; (8001ab0 <HAL_I2S_MspInit+0xc4>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <HAL_I2S_MspInit+0xc4>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_I2S_MspInit+0xc4>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a18      	ldr	r2, [pc, #96]	; (8001ab0 <HAL_I2S_MspInit+0xc4>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <HAL_I2S_MspInit+0xc4>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001a62:	2310      	movs	r3, #16
 8001a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	2302      	movs	r3, #2
 8001a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a72:	2306      	movs	r3, #6
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	480d      	ldr	r0, [pc, #52]	; (8001ab4 <HAL_I2S_MspInit+0xc8>)
 8001a7e:	f000 fb55 	bl	800212c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001a82:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a94:	2306      	movs	r3, #6
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <HAL_I2S_MspInit+0xcc>)
 8001aa0:	f000 fb44 	bl	800212c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001aa4:	bf00      	nop
 8001aa6:	3728      	adds	r7, #40	; 0x28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40003c00 	.word	0x40003c00
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	40020800 	.word	0x40020800

08001abc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	; 0x28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a19      	ldr	r2, [pc, #100]	; (8001b40 <HAL_SPI_MspInit+0x84>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d12b      	bne.n	8001b36 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <HAL_SPI_MspInit+0x88>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	4a17      	ldr	r2, [pc, #92]	; (8001b44 <HAL_SPI_MspInit+0x88>)
 8001ae8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aec:	6453      	str	r3, [r2, #68]	; 0x44
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_SPI_MspInit+0x88>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <HAL_SPI_MspInit+0x88>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a10      	ldr	r2, [pc, #64]	; (8001b44 <HAL_SPI_MspInit+0x88>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <HAL_SPI_MspInit+0x88>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001b16:	23e0      	movs	r3, #224	; 0xe0
 8001b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b26:	2305      	movs	r3, #5
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4805      	ldr	r0, [pc, #20]	; (8001b48 <HAL_SPI_MspInit+0x8c>)
 8001b32:	f000 fafb 	bl	800212c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	; 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40013000 	.word	0x40013000
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40020000 	.word	0x40020000

08001b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a1d      	ldr	r2, [pc, #116]	; (8001be0 <HAL_UART_MspInit+0x94>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d133      	bne.n	8001bd6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	4a1b      	ldr	r2, [pc, #108]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7e:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ba6:	230c      	movs	r3, #12
 8001ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4809      	ldr	r0, [pc, #36]	; (8001be8 <HAL_UART_MspInit+0x9c>)
 8001bc2:	f000 fab3 	bl	800212c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2100      	movs	r1, #0
 8001bca:	2026      	movs	r0, #38	; 0x26
 8001bcc:	f000 fa54 	bl	8002078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bd0:	2026      	movs	r0, #38	; 0x26
 8001bd2:	f000 fa6d 	bl	80020b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40004400 	.word	0x40004400
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020000 	.word	0x40020000

08001bec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08c      	sub	sp, #48	; 0x30
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	201c      	movs	r0, #28
 8001c02:	f000 fa39 	bl	8002078 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c06:	201c      	movs	r0, #28
 8001c08:	f000 fa52 	bl	80020b0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <HAL_InitTick+0xa8>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	4a1f      	ldr	r2, [pc, #124]	; (8001c94 <HAL_InitTick+0xa8>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <HAL_InitTick+0xa8>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c28:	f107 0210 	add.w	r2, r7, #16
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4611      	mov	r1, r2
 8001c32:	4618      	mov	r0, r3
 8001c34:	f003 fb7c 	bl	8005330 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001c38:	f003 fb52 	bl	80052e0 <HAL_RCC_GetPCLK1Freq>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c44:	4a14      	ldr	r2, [pc, #80]	; (8001c98 <HAL_InitTick+0xac>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	0c9b      	lsrs	r3, r3, #18
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_InitTick+0xb0>)
 8001c52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8001c58:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <HAL_InitTick+0xb0>)
 8001c5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c5e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001c60:	4a0e      	ldr	r2, [pc, #56]	; (8001c9c <HAL_InitTick+0xb0>)
 8001c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c64:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_InitTick+0xb0>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_InitTick+0xb0>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001c72:	480a      	ldr	r0, [pc, #40]	; (8001c9c <HAL_InitTick+0xb0>)
 8001c74:	f003 fd30 	bl	80056d8 <HAL_TIM_Base_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d104      	bne.n	8001c88 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001c7e:	4807      	ldr	r0, [pc, #28]	; (8001c9c <HAL_InitTick+0xb0>)
 8001c80:	f003 fd5f 	bl	8005742 <HAL_TIM_Base_Start_IT>
 8001c84:	4603      	mov	r3, r0
 8001c86:	e000      	b.n	8001c8a <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3730      	adds	r7, #48	; 0x30
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800
 8001c98:	431bde83 	.word	0x431bde83
 8001c9c:	20004280 	.word	0x20004280

08001ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb2:	e7fe      	b.n	8001cb2 <HardFault_Handler+0x4>

08001cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <MemManage_Handler+0x4>

08001cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <BusFault_Handler+0x4>

08001cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <UsageFault_Handler+0x4>

08001cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <TIM2_IRQHandler+0x10>)
 8001cda:	f003 fd56 	bl	800578a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20004280 	.word	0x20004280

08001ce8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <USART2_IRQHandler+0x10>)
 8001cee:	f004 f817 	bl	8005d20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200041f4 	.word	0x200041f4

08001cfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <OTG_FS_IRQHandler+0x10>)
 8001d02:	f000 fe79 	bl	80029f8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200046a8 	.word	0x200046a8

08001d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d18:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <_sbrk+0x5c>)
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <_sbrk+0x60>)
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <_sbrk+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <_sbrk+0x64>)
 8001d2e:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <_sbrk+0x68>)
 8001d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d207      	bcs.n	8001d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d40:	f00b f8c6 	bl	800ced0 <__errno>
 8001d44:	4602      	mov	r2, r0
 8001d46:	230c      	movs	r3, #12
 8001d48:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4e:	e009      	b.n	8001d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <_sbrk+0x64>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d56:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <_sbrk+0x64>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4a05      	ldr	r2, [pc, #20]	; (8001d74 <_sbrk+0x64>)
 8001d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d62:	68fb      	ldr	r3, [r7, #12]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20020000 	.word	0x20020000
 8001d70:	00000400 	.word	0x00000400
 8001d74:	20000310 	.word	0x20000310
 8001d78:	20004970 	.word	0x20004970

08001d7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <SystemInit+0x28>)
 8001d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d86:	4a07      	ldr	r2, [pc, #28]	; (8001da4 <SystemInit+0x28>)
 8001d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d90:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <SystemInit+0x28>)
 8001d92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d96:	609a      	str	r2, [r3, #8]
#endif
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001de0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001dac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001dae:	e003      	b.n	8001db8 <LoopCopyDataInit>

08001db0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001db2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001db4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001db6:	3104      	adds	r1, #4

08001db8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001db8:	480b      	ldr	r0, [pc, #44]	; (8001de8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001dba:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001dbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001dbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001dc0:	d3f6      	bcc.n	8001db0 <CopyDataInit>
  ldr  r2, =_sbss
 8001dc2:	4a0b      	ldr	r2, [pc, #44]	; (8001df0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001dc4:	e002      	b.n	8001dcc <LoopFillZerobss>

08001dc6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001dc6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001dc8:	f842 3b04 	str.w	r3, [r2], #4

08001dcc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001dcc:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001dce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001dd0:	d3f9      	bcc.n	8001dc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dd2:	f7ff ffd3 	bl	8001d7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dd6:	f00b f881 	bl	800cedc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dda:	f7fe fbab 	bl	8000534 <main>
  bx  lr    
 8001dde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001de0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001de4:	0800d788 	.word	0x0800d788
  ldr  r0, =_sdata
 8001de8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001dec:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8001df0:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8001df4:	20004970 	.word	0x20004970

08001df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001df8:	e7fe      	b.n	8001df8 <ADC_IRQHandler>
	...

08001dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e00:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <HAL_Init+0x40>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0d      	ldr	r2, [pc, #52]	; (8001e3c <HAL_Init+0x40>)
 8001e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <HAL_Init+0x40>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <HAL_Init+0x40>)
 8001e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <HAL_Init+0x40>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <HAL_Init+0x40>)
 8001e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e24:	2003      	movs	r0, #3
 8001e26:	f000 f91c 	bl	8002062 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f7ff fede 	bl	8001bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e30:	f7ff fd6c 	bl	800190c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023c00 	.word	0x40023c00

08001e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_IncTick+0x20>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_IncTick+0x24>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4413      	add	r3, r2
 8001e50:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <HAL_IncTick+0x24>)
 8001e52:	6013      	str	r3, [r2, #0]
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000008 	.word	0x20000008
 8001e64:	200042c0 	.word	0x200042c0

08001e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <HAL_GetTick+0x14>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	200042c0 	.word	0x200042c0

08001e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e88:	f7ff ffee 	bl	8001e68 <HAL_GetTick>
 8001e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e98:	d005      	beq.n	8001ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <HAL_Delay+0x40>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ea6:	bf00      	nop
 8001ea8:	f7ff ffde 	bl	8001e68 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d8f7      	bhi.n	8001ea8 <HAL_Delay+0x28>
  {
  }
}
 8001eb8:	bf00      	nop
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000008 	.word	0x20000008

08001ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef6:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	60d3      	str	r3, [r2, #12]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <__NVIC_GetPriorityGrouping+0x18>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	f003 0307 	and.w	r3, r3, #7
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	db0b      	blt.n	8001f52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	f003 021f 	and.w	r2, r3, #31
 8001f40:	4907      	ldr	r1, [pc, #28]	; (8001f60 <__NVIC_EnableIRQ+0x38>)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	2001      	movs	r0, #1
 8001f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000e100 	.word	0xe000e100

08001f64 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	db10      	blt.n	8001f98 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	f003 021f 	and.w	r2, r3, #31
 8001f7c:	4909      	ldr	r1, [pc, #36]	; (8001fa4 <__NVIC_DisableIRQ+0x40>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	2001      	movs	r0, #1
 8001f86:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8a:	3320      	adds	r3, #32
 8001f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f94:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000e100 	.word	0xe000e100

08001fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6039      	str	r1, [r7, #0]
 8001fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	db0a      	blt.n	8001fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	490c      	ldr	r1, [pc, #48]	; (8001ff4 <__NVIC_SetPriority+0x4c>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	0112      	lsls	r2, r2, #4
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd0:	e00a      	b.n	8001fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4908      	ldr	r1, [pc, #32]	; (8001ff8 <__NVIC_SetPriority+0x50>)
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	3b04      	subs	r3, #4
 8001fe0:	0112      	lsls	r2, r2, #4
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	761a      	strb	r2, [r3, #24]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000e100 	.word	0xe000e100
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	; 0x24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f1c3 0307 	rsb	r3, r3, #7
 8002016:	2b04      	cmp	r3, #4
 8002018:	bf28      	it	cs
 800201a:	2304      	movcs	r3, #4
 800201c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3304      	adds	r3, #4
 8002022:	2b06      	cmp	r3, #6
 8002024:	d902      	bls.n	800202c <NVIC_EncodePriority+0x30>
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3b03      	subs	r3, #3
 800202a:	e000      	b.n	800202e <NVIC_EncodePriority+0x32>
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	f04f 32ff 	mov.w	r2, #4294967295
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	401a      	ands	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002044:	f04f 31ff 	mov.w	r1, #4294967295
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	43d9      	mvns	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	4313      	orrs	r3, r2
         );
}
 8002056:	4618      	mov	r0, r3
 8002058:	3724      	adds	r7, #36	; 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ff2a 	bl	8001ec4 <__NVIC_SetPriorityGrouping>
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800208a:	f7ff ff3f 	bl	8001f0c <__NVIC_GetPriorityGrouping>
 800208e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	68b9      	ldr	r1, [r7, #8]
 8002094:	6978      	ldr	r0, [r7, #20]
 8002096:	f7ff ffb1 	bl	8001ffc <NVIC_EncodePriority>
 800209a:	4602      	mov	r2, r0
 800209c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a0:	4611      	mov	r1, r2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ff80 	bl	8001fa8 <__NVIC_SetPriority>
}
 80020a8:	bf00      	nop
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff ff32 	bl	8001f28 <__NVIC_EnableIRQ>
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff ff42 	bl	8001f64 <__NVIC_DisableIRQ>
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d004      	beq.n	8002106 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2280      	movs	r2, #128	; 0x80
 8002100:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e00c      	b.n	8002120 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2205      	movs	r2, #5
 800210a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0201 	bic.w	r2, r2, #1
 800211c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	; 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	e16b      	b.n	8002420 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002148:	2201      	movs	r2, #1
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	429a      	cmp	r2, r3
 8002162:	f040 815a 	bne.w	800241a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d00b      	beq.n	8002186 <HAL_GPIO_Init+0x5a>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d007      	beq.n	8002186 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800217a:	2b11      	cmp	r3, #17
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b12      	cmp	r3, #18
 8002184:	d130      	bne.n	80021e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	2203      	movs	r2, #3
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021bc:	2201      	movs	r2, #1
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 0201 	and.w	r2, r3, #1
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0xfc>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b12      	cmp	r3, #18
 8002226:	d123      	bne.n	8002270 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	08da      	lsrs	r2, r3, #3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3208      	adds	r2, #8
 8002230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	220f      	movs	r2, #15
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	08da      	lsrs	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3208      	adds	r2, #8
 800226a:	69b9      	ldr	r1, [r7, #24]
 800226c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	2203      	movs	r2, #3
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0203 	and.w	r2, r3, #3
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 80b4 	beq.w	800241a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	4b5f      	ldr	r3, [pc, #380]	; (8002434 <HAL_GPIO_Init+0x308>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	4a5e      	ldr	r2, [pc, #376]	; (8002434 <HAL_GPIO_Init+0x308>)
 80022bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c0:	6453      	str	r3, [r2, #68]	; 0x44
 80022c2:	4b5c      	ldr	r3, [pc, #368]	; (8002434 <HAL_GPIO_Init+0x308>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ce:	4a5a      	ldr	r2, [pc, #360]	; (8002438 <HAL_GPIO_Init+0x30c>)
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	089b      	lsrs	r3, r3, #2
 80022d4:	3302      	adds	r3, #2
 80022d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	220f      	movs	r2, #15
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a51      	ldr	r2, [pc, #324]	; (800243c <HAL_GPIO_Init+0x310>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d02b      	beq.n	8002352 <HAL_GPIO_Init+0x226>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a50      	ldr	r2, [pc, #320]	; (8002440 <HAL_GPIO_Init+0x314>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d025      	beq.n	800234e <HAL_GPIO_Init+0x222>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4f      	ldr	r2, [pc, #316]	; (8002444 <HAL_GPIO_Init+0x318>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d01f      	beq.n	800234a <HAL_GPIO_Init+0x21e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4e      	ldr	r2, [pc, #312]	; (8002448 <HAL_GPIO_Init+0x31c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d019      	beq.n	8002346 <HAL_GPIO_Init+0x21a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4d      	ldr	r2, [pc, #308]	; (800244c <HAL_GPIO_Init+0x320>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d013      	beq.n	8002342 <HAL_GPIO_Init+0x216>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4c      	ldr	r2, [pc, #304]	; (8002450 <HAL_GPIO_Init+0x324>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d00d      	beq.n	800233e <HAL_GPIO_Init+0x212>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a4b      	ldr	r2, [pc, #300]	; (8002454 <HAL_GPIO_Init+0x328>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d007      	beq.n	800233a <HAL_GPIO_Init+0x20e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4a      	ldr	r2, [pc, #296]	; (8002458 <HAL_GPIO_Init+0x32c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d101      	bne.n	8002336 <HAL_GPIO_Init+0x20a>
 8002332:	2307      	movs	r3, #7
 8002334:	e00e      	b.n	8002354 <HAL_GPIO_Init+0x228>
 8002336:	2308      	movs	r3, #8
 8002338:	e00c      	b.n	8002354 <HAL_GPIO_Init+0x228>
 800233a:	2306      	movs	r3, #6
 800233c:	e00a      	b.n	8002354 <HAL_GPIO_Init+0x228>
 800233e:	2305      	movs	r3, #5
 8002340:	e008      	b.n	8002354 <HAL_GPIO_Init+0x228>
 8002342:	2304      	movs	r3, #4
 8002344:	e006      	b.n	8002354 <HAL_GPIO_Init+0x228>
 8002346:	2303      	movs	r3, #3
 8002348:	e004      	b.n	8002354 <HAL_GPIO_Init+0x228>
 800234a:	2302      	movs	r3, #2
 800234c:	e002      	b.n	8002354 <HAL_GPIO_Init+0x228>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_GPIO_Init+0x228>
 8002352:	2300      	movs	r3, #0
 8002354:	69fa      	ldr	r2, [r7, #28]
 8002356:	f002 0203 	and.w	r2, r2, #3
 800235a:	0092      	lsls	r2, r2, #2
 800235c:	4093      	lsls	r3, r2
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002364:	4934      	ldr	r1, [pc, #208]	; (8002438 <HAL_GPIO_Init+0x30c>)
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	089b      	lsrs	r3, r3, #2
 800236a:	3302      	adds	r3, #2
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002372:	4b3a      	ldr	r3, [pc, #232]	; (800245c <HAL_GPIO_Init+0x330>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002396:	4a31      	ldr	r2, [pc, #196]	; (800245c <HAL_GPIO_Init+0x330>)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800239c:	4b2f      	ldr	r3, [pc, #188]	; (800245c <HAL_GPIO_Init+0x330>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023c0:	4a26      	ldr	r2, [pc, #152]	; (800245c <HAL_GPIO_Init+0x330>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023c6:	4b25      	ldr	r3, [pc, #148]	; (800245c <HAL_GPIO_Init+0x330>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ea:	4a1c      	ldr	r2, [pc, #112]	; (800245c <HAL_GPIO_Init+0x330>)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023f0:	4b1a      	ldr	r3, [pc, #104]	; (800245c <HAL_GPIO_Init+0x330>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002414:	4a11      	ldr	r2, [pc, #68]	; (800245c <HAL_GPIO_Init+0x330>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3301      	adds	r3, #1
 800241e:	61fb      	str	r3, [r7, #28]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	2b0f      	cmp	r3, #15
 8002424:	f67f ae90 	bls.w	8002148 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002428:	bf00      	nop
 800242a:	3724      	adds	r7, #36	; 0x24
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	40023800 	.word	0x40023800
 8002438:	40013800 	.word	0x40013800
 800243c:	40020000 	.word	0x40020000
 8002440:	40020400 	.word	0x40020400
 8002444:	40020800 	.word	0x40020800
 8002448:	40020c00 	.word	0x40020c00
 800244c:	40021000 	.word	0x40021000
 8002450:	40021400 	.word	0x40021400
 8002454:	40021800 	.word	0x40021800
 8002458:	40021c00 	.word	0x40021c00
 800245c:	40013c00 	.word	0x40013c00

08002460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	807b      	strh	r3, [r7, #2]
 800246c:	4613      	mov	r3, r2
 800246e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002470:	787b      	ldrb	r3, [r7, #1]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002476:	887a      	ldrh	r2, [r7, #2]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800247c:	e003      	b.n	8002486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800247e:	887b      	ldrh	r3, [r7, #2]
 8002480:	041a      	lsls	r2, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	619a      	str	r2, [r3, #24]
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024a0:	695a      	ldr	r2, [r3, #20]
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	4013      	ands	r3, r2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d006      	beq.n	80024b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024aa:	4a05      	ldr	r2, [pc, #20]	; (80024c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024ac:	88fb      	ldrh	r3, [r7, #6]
 80024ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f806 	bl	80024c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40013c00 	.word	0x40013c00

080024c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80024da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024dc:	b08f      	sub	sp, #60	; 0x3c
 80024de:	af0a      	add	r7, sp, #40	; 0x28
 80024e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e054      	b.n	8002596 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d106      	bne.n	800250c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f00a fa34 	bl	800c974 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2203      	movs	r2, #3
 8002510:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251c:	2b00      	cmp	r3, #0
 800251e:	d102      	bne.n	8002526 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f004 fa70 	bl	8006a10 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	687e      	ldr	r6, [r7, #4]
 8002538:	466d      	mov	r5, sp
 800253a:	f106 0410 	add.w	r4, r6, #16
 800253e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002546:	e894 0003 	ldmia.w	r4, {r0, r1}
 800254a:	e885 0003 	stmia.w	r5, {r0, r1}
 800254e:	1d33      	adds	r3, r6, #4
 8002550:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002552:	6838      	ldr	r0, [r7, #0]
 8002554:	f004 f9ea 	bl	800692c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2101      	movs	r1, #1
 800255e:	4618      	mov	r0, r3
 8002560:	f004 fa67 	bl	8006a32 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	603b      	str	r3, [r7, #0]
 800256a:	687e      	ldr	r6, [r7, #4]
 800256c:	466d      	mov	r5, sp
 800256e:	f106 0410 	add.w	r4, r6, #16
 8002572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002574:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002576:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002578:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800257a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800257e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002582:	1d33      	adds	r3, r6, #4
 8002584:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002586:	6838      	ldr	r0, [r7, #0]
 8002588:	f004 fb7a 	bl	8006c80 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800259e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800259e:	b590      	push	{r4, r7, lr}
 80025a0:	b089      	sub	sp, #36	; 0x24
 80025a2:	af04      	add	r7, sp, #16
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	4608      	mov	r0, r1
 80025a8:	4611      	mov	r1, r2
 80025aa:	461a      	mov	r2, r3
 80025ac:	4603      	mov	r3, r0
 80025ae:	70fb      	strb	r3, [r7, #3]
 80025b0:	460b      	mov	r3, r1
 80025b2:	70bb      	strb	r3, [r7, #2]
 80025b4:	4613      	mov	r3, r2
 80025b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_HCD_HC_Init+0x28>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e07f      	b.n	80026c6 <HAL_HCD_HC_Init+0x128>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	440b      	add	r3, r1
 80025dc:	333d      	adds	r3, #61	; 0x3d
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80025e2:	78fa      	ldrb	r2, [r7, #3]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	440b      	add	r3, r1
 80025f0:	3338      	adds	r3, #56	; 0x38
 80025f2:	787a      	ldrb	r2, [r7, #1]
 80025f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80025f6:	78fa      	ldrb	r2, [r7, #3]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	440b      	add	r3, r1
 8002604:	3340      	adds	r3, #64	; 0x40
 8002606:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002608:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800260a:	78fa      	ldrb	r2, [r7, #3]
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	440b      	add	r3, r1
 8002618:	3339      	adds	r3, #57	; 0x39
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800261e:	78fa      	ldrb	r2, [r7, #3]
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	440b      	add	r3, r1
 800262c:	333f      	adds	r3, #63	; 0x3f
 800262e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002632:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	78bb      	ldrb	r3, [r7, #2]
 8002638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800263c:	b2d8      	uxtb	r0, r3
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	440b      	add	r3, r1
 800264a:	333a      	adds	r3, #58	; 0x3a
 800264c:	4602      	mov	r2, r0
 800264e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002650:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002654:	2b00      	cmp	r3, #0
 8002656:	da0a      	bge.n	800266e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	440b      	add	r3, r1
 8002666:	333b      	adds	r3, #59	; 0x3b
 8002668:	2201      	movs	r2, #1
 800266a:	701a      	strb	r2, [r3, #0]
 800266c:	e009      	b.n	8002682 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800266e:	78fa      	ldrb	r2, [r7, #3]
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	440b      	add	r3, r1
 800267c:	333b      	adds	r3, #59	; 0x3b
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002682:	78fa      	ldrb	r2, [r7, #3]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	440b      	add	r3, r1
 8002690:	333c      	adds	r3, #60	; 0x3c
 8002692:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002696:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	787c      	ldrb	r4, [r7, #1]
 800269e:	78ba      	ldrb	r2, [r7, #2]
 80026a0:	78f9      	ldrb	r1, [r7, #3]
 80026a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80026a4:	9302      	str	r3, [sp, #8]
 80026a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026aa:	9301      	str	r3, [sp, #4]
 80026ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	4623      	mov	r3, r4
 80026b4:	f004 fc66 	bl	8006f84 <USB_HC_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd90      	pop	{r4, r7, pc}

080026ce <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b084      	sub	sp, #16
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	460b      	mov	r3, r1
 80026d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_HCD_HC_Halt+0x1e>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e00f      	b.n	800270c <HAL_HCD_HC_Halt+0x3e>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	78fa      	ldrb	r2, [r7, #3]
 80026fa:	4611      	mov	r1, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f004 fea2 	bl	8007446 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800270a:	7bfb      	ldrb	r3, [r7, #15]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	4608      	mov	r0, r1
 800271e:	4611      	mov	r1, r2
 8002720:	461a      	mov	r2, r3
 8002722:	4603      	mov	r3, r0
 8002724:	70fb      	strb	r3, [r7, #3]
 8002726:	460b      	mov	r3, r1
 8002728:	70bb      	strb	r3, [r7, #2]
 800272a:	4613      	mov	r3, r2
 800272c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	440b      	add	r3, r1
 800273c:	333b      	adds	r3, #59	; 0x3b
 800273e:	78ba      	ldrb	r2, [r7, #2]
 8002740:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	440b      	add	r3, r1
 8002750:	333f      	adds	r3, #63	; 0x3f
 8002752:	787a      	ldrb	r2, [r7, #1]
 8002754:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002756:	7c3b      	ldrb	r3, [r7, #16]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d114      	bne.n	8002786 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	440b      	add	r3, r1
 800276a:	3342      	adds	r3, #66	; 0x42
 800276c:	2203      	movs	r2, #3
 800276e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	440b      	add	r3, r1
 800277e:	333d      	adds	r3, #61	; 0x3d
 8002780:	7f3a      	ldrb	r2, [r7, #28]
 8002782:	701a      	strb	r2, [r3, #0]
 8002784:	e009      	b.n	800279a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002786:	78fa      	ldrb	r2, [r7, #3]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	440b      	add	r3, r1
 8002794:	3342      	adds	r3, #66	; 0x42
 8002796:	2202      	movs	r2, #2
 8002798:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800279a:	787b      	ldrb	r3, [r7, #1]
 800279c:	2b03      	cmp	r3, #3
 800279e:	f200 80d6 	bhi.w	800294e <HAL_HCD_HC_SubmitRequest+0x23a>
 80027a2:	a201      	add	r2, pc, #4	; (adr r2, 80027a8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80027a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a8:	080027b9 	.word	0x080027b9
 80027ac:	08002939 	.word	0x08002939
 80027b0:	08002825 	.word	0x08002825
 80027b4:	080028af 	.word	0x080028af
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80027b8:	7c3b      	ldrb	r3, [r7, #16]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	f040 80c9 	bne.w	8002952 <HAL_HCD_HC_SubmitRequest+0x23e>
 80027c0:	78bb      	ldrb	r3, [r7, #2]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f040 80c5 	bne.w	8002952 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80027c8:	8b3b      	ldrh	r3, [r7, #24]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80027ce:	78fa      	ldrb	r2, [r7, #3]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	440b      	add	r3, r1
 80027dc:	3351      	adds	r3, #81	; 0x51
 80027de:	2201      	movs	r2, #1
 80027e0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80027e2:	78fa      	ldrb	r2, [r7, #3]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	440b      	add	r3, r1
 80027f0:	3351      	adds	r3, #81	; 0x51
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10a      	bne.n	800280e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027f8:	78fa      	ldrb	r2, [r7, #3]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	3342      	adds	r3, #66	; 0x42
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800280c:	e0a1      	b.n	8002952 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800280e:	78fa      	ldrb	r2, [r7, #3]
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	440b      	add	r3, r1
 800281c:	3342      	adds	r3, #66	; 0x42
 800281e:	2202      	movs	r2, #2
 8002820:	701a      	strb	r2, [r3, #0]
      break;
 8002822:	e096      	b.n	8002952 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002824:	78bb      	ldrb	r3, [r7, #2]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d120      	bne.n	800286c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800282a:	78fa      	ldrb	r2, [r7, #3]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	440b      	add	r3, r1
 8002838:	3351      	adds	r3, #81	; 0x51
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10a      	bne.n	8002856 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	440b      	add	r3, r1
 800284e:	3342      	adds	r3, #66	; 0x42
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002854:	e07e      	b.n	8002954 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002856:	78fa      	ldrb	r2, [r7, #3]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	440b      	add	r3, r1
 8002864:	3342      	adds	r3, #66	; 0x42
 8002866:	2202      	movs	r2, #2
 8002868:	701a      	strb	r2, [r3, #0]
      break;
 800286a:	e073      	b.n	8002954 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800286c:	78fa      	ldrb	r2, [r7, #3]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	440b      	add	r3, r1
 800287a:	3350      	adds	r3, #80	; 0x50
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10a      	bne.n	8002898 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002882:	78fa      	ldrb	r2, [r7, #3]
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	440b      	add	r3, r1
 8002890:	3342      	adds	r3, #66	; 0x42
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]
      break;
 8002896:	e05d      	b.n	8002954 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002898:	78fa      	ldrb	r2, [r7, #3]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	440b      	add	r3, r1
 80028a6:	3342      	adds	r3, #66	; 0x42
 80028a8:	2202      	movs	r2, #2
 80028aa:	701a      	strb	r2, [r3, #0]
      break;
 80028ac:	e052      	b.n	8002954 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80028ae:	78bb      	ldrb	r3, [r7, #2]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d120      	bne.n	80028f6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	440b      	add	r3, r1
 80028c2:	3351      	adds	r3, #81	; 0x51
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10a      	bne.n	80028e0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	440b      	add	r3, r1
 80028d8:	3342      	adds	r3, #66	; 0x42
 80028da:	2200      	movs	r2, #0
 80028dc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80028de:	e039      	b.n	8002954 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028e0:	78fa      	ldrb	r2, [r7, #3]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	440b      	add	r3, r1
 80028ee:	3342      	adds	r3, #66	; 0x42
 80028f0:	2202      	movs	r2, #2
 80028f2:	701a      	strb	r2, [r3, #0]
      break;
 80028f4:	e02e      	b.n	8002954 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80028f6:	78fa      	ldrb	r2, [r7, #3]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	440b      	add	r3, r1
 8002904:	3350      	adds	r3, #80	; 0x50
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10a      	bne.n	8002922 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800290c:	78fa      	ldrb	r2, [r7, #3]
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	440b      	add	r3, r1
 800291a:	3342      	adds	r3, #66	; 0x42
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
      break;
 8002920:	e018      	b.n	8002954 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002922:	78fa      	ldrb	r2, [r7, #3]
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	440b      	add	r3, r1
 8002930:	3342      	adds	r3, #66	; 0x42
 8002932:	2202      	movs	r2, #2
 8002934:	701a      	strb	r2, [r3, #0]
      break;
 8002936:	e00d      	b.n	8002954 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002938:	78fa      	ldrb	r2, [r7, #3]
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	440b      	add	r3, r1
 8002946:	3342      	adds	r3, #66	; 0x42
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
      break;
 800294c:	e002      	b.n	8002954 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800294e:	bf00      	nop
 8002950:	e000      	b.n	8002954 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002952:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002954:	78fa      	ldrb	r2, [r7, #3]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	440b      	add	r3, r1
 8002962:	3344      	adds	r3, #68	; 0x44
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002968:	78fa      	ldrb	r2, [r7, #3]
 800296a:	8b39      	ldrh	r1, [r7, #24]
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4403      	add	r3, r0
 8002978:	3348      	adds	r3, #72	; 0x48
 800297a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800297c:	78fa      	ldrb	r2, [r7, #3]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	335c      	adds	r3, #92	; 0x5c
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002990:	78fa      	ldrb	r2, [r7, #3]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	440b      	add	r3, r1
 800299e:	334c      	adds	r3, #76	; 0x4c
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80029a4:	78fa      	ldrb	r2, [r7, #3]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	440b      	add	r3, r1
 80029b2:	3339      	adds	r3, #57	; 0x39
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	440b      	add	r3, r1
 80029c6:	335d      	adds	r3, #93	; 0x5d
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	78fa      	ldrb	r2, [r7, #3]
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	3338      	adds	r3, #56	; 0x38
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	18d1      	adds	r1, r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	f004 fbd6 	bl	8007198 <USB_HC_StartXfer>
 80029ec:	4603      	mov	r3, r0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop

080029f8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f004 f8f3 	bl	8006bfa <USB_GetMode>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	f040 80ef 	bne.w	8002bfa <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f004 f8d7 	bl	8006bd4 <USB_ReadInterrupts>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 80e5 	beq.w	8002bf8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f004 f8ce 	bl	8006bd4 <USB_ReadInterrupts>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a42:	d104      	bne.n	8002a4e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f004 f8be 	bl	8006bd4 <USB_ReadInterrupts>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a62:	d104      	bne.n	8002a6e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f004 f8ae 	bl	8006bd4 <USB_ReadInterrupts>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a82:	d104      	bne.n	8002a8e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f004 f89e 	bl	8006bd4 <USB_ReadInterrupts>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d103      	bne.n	8002aaa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f004 f890 	bl	8006bd4 <USB_ReadInterrupts>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002abe:	d115      	bne.n	8002aec <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002ac8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d108      	bne.n	8002aec <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f009 ffc8 	bl	800ca70 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f004 f986 	bl	8006df8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f004 f86f 	bl	8006bd4 <USB_ReadInterrupts>
 8002af6:	4603      	mov	r3, r0
 8002af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b00:	d102      	bne.n	8002b08 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f001 f966 	bl	8003dd4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f004 f861 	bl	8006bd4 <USB_ReadInterrupts>
 8002b12:	4603      	mov	r3, r0
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d106      	bne.n	8002b2a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f009 ff8b 	bl	800ca38 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2208      	movs	r2, #8
 8002b28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f004 f850 	bl	8006bd4 <USB_ReadInterrupts>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b3e:	d138      	bne.n	8002bb2 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f004 fc6d 	bl	8007424 <USB_HC_ReadInterrupt>
 8002b4a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	e025      	b.n	8002b9e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d018      	beq.n	8002b98 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b7c:	d106      	bne.n	8002b8c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	4619      	mov	r1, r3
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f8cf 	bl	8002d28 <HCD_HC_IN_IRQHandler>
 8002b8a:	e005      	b.n	8002b98 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	4619      	mov	r1, r3
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fcfd 	bl	8003592 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d3d4      	bcc.n	8002b52 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f004 f80c 	bl	8006bd4 <USB_ReadInterrupts>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	2b10      	cmp	r3, #16
 8002bc4:	d101      	bne.n	8002bca <HAL_HCD_IRQHandler+0x1d2>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <HAL_HCD_IRQHandler+0x1d4>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d014      	beq.n	8002bfa <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0210 	bic.w	r2, r2, #16
 8002bde:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f001 f84b 	bl	8003c7c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699a      	ldr	r2, [r3, #24]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0210 	orr.w	r2, r2, #16
 8002bf4:	619a      	str	r2, [r3, #24]
 8002bf6:	e000      	b.n	8002bfa <HAL_HCD_IRQHandler+0x202>
      return;
 8002bf8:	bf00      	nop
    }
  }
}
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_HCD_Start+0x16>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e013      	b.n	8002c3e <HAL_HCD_Start+0x3e>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f003 fee3 	bl	80069ee <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f004 f946 	bl	8006ec0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_HCD_Stop+0x16>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e00d      	b.n	8002c78 <HAL_HCD_Stop+0x32>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f004 fd27 	bl	80076bc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f004 f8ed 	bl	8006e6c <USB_ResetPort>
 8002c92:	4603      	mov	r3, r0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	440b      	add	r3, r1
 8002cb6:	335c      	adds	r3, #92	; 0x5c
 8002cb8:	781b      	ldrb	r3, [r3, #0]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	440b      	add	r3, r1
 8002ce0:	334c      	adds	r3, #76	; 0x4c
 8002ce2:	681b      	ldr	r3, [r3, #0]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f004 f92f 	bl	8006f60 <USB_GetCurrentFrame>
 8002d02:	4603      	mov	r3, r0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f004 f90a 	bl	8006f32 <USB_GetHostSpeed>
 8002d1e:	4603      	mov	r3, r0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d119      	bne.n	8002d8c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d64:	461a      	mov	r2, r3
 8002d66:	2304      	movs	r3, #4
 8002d68:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	0151      	lsls	r1, r2, #5
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	440a      	add	r2, r1
 8002d80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d84:	f043 0302 	orr.w	r3, r3, #2
 8002d88:	60d3      	str	r3, [r2, #12]
 8002d8a:	e0ce      	b.n	8002f2a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da2:	d12c      	bne.n	8002dfe <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	015a      	lsls	r2, r3, #5
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db0:	461a      	mov	r2, r3
 8002db2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002db6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	440b      	add	r3, r1
 8002dc6:	335d      	adds	r3, #93	; 0x5d
 8002dc8:	2207      	movs	r2, #7
 8002dca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	0151      	lsls	r1, r2, #5
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	440a      	add	r2, r1
 8002de2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002de6:	f043 0302 	orr.w	r3, r3, #2
 8002dea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	4611      	mov	r1, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f004 fb25 	bl	8007446 <USB_HC_Halt>
 8002dfc:	e095      	b.n	8002f2a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	015a      	lsls	r2, r3, #5
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	2b20      	cmp	r3, #32
 8002e12:	d109      	bne.n	8002e28 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e20:	461a      	mov	r2, r3
 8002e22:	2320      	movs	r3, #32
 8002e24:	6093      	str	r3, [r2, #8]
 8002e26:	e080      	b.n	8002f2a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d134      	bne.n	8002ea8 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	0151      	lsls	r1, r2, #5
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	440a      	add	r2, r1
 8002e54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e58:	f043 0302 	orr.w	r3, r3, #2
 8002e5c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	440b      	add	r3, r1
 8002e6c:	335d      	adds	r3, #93	; 0x5d
 8002e6e:	2205      	movs	r2, #5
 8002e70:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7e:	461a      	mov	r2, r3
 8002e80:	2310      	movs	r3, #16
 8002e82:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e90:	461a      	mov	r2, r3
 8002e92:	2308      	movs	r3, #8
 8002e94:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f004 fad0 	bl	8007446 <USB_HC_Halt>
 8002ea6:	e040      	b.n	8002f2a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ebe:	d134      	bne.n	8002f2a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	0151      	lsls	r1, r2, #5
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	440a      	add	r2, r1
 8002ed6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002eda:	f043 0302 	orr.w	r3, r3, #2
 8002ede:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f004 faab 	bl	8007446 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efc:	461a      	mov	r2, r3
 8002efe:	2310      	movs	r3, #16
 8002f00:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	440b      	add	r3, r1
 8002f10:	335d      	adds	r3, #93	; 0x5d
 8002f12:	2208      	movs	r2, #8
 8002f14:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f22:	461a      	mov	r2, r3
 8002f24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f28:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f40:	d122      	bne.n	8002f88 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	015a      	lsls	r2, r3, #5
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	0151      	lsls	r1, r2, #5
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	440a      	add	r2, r1
 8002f58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f5c:	f043 0302 	orr.w	r3, r3, #2
 8002f60:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f004 fa6a 	bl	8007446 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f84:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002f86:	e300      	b.n	800358a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	f040 80fd 	bne.w	800319a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d01b      	beq.n	8002fe0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	440b      	add	r3, r1
 8002fb6:	3348      	adds	r3, #72	; 0x48
 8002fb8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	0159      	lsls	r1, r3, #5
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	440b      	add	r3, r1
 8002fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002fcc:	1ad1      	subs	r1, r2, r3
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	4403      	add	r3, r0
 8002fdc:	334c      	adds	r3, #76	; 0x4c
 8002fde:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	440b      	add	r3, r1
 8002fee:	335d      	adds	r3, #93	; 0x5d
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	440b      	add	r3, r1
 8003002:	3358      	adds	r3, #88	; 0x58
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	015a      	lsls	r2, r3, #5
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4413      	add	r3, r2
 8003010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003014:	461a      	mov	r2, r3
 8003016:	2301      	movs	r3, #1
 8003018:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	440b      	add	r3, r1
 8003028:	333f      	adds	r3, #63	; 0x3f
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	440b      	add	r3, r1
 800303e:	333f      	adds	r3, #63	; 0x3f
 8003040:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003042:	2b02      	cmp	r3, #2
 8003044:	d121      	bne.n	800308a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4413      	add	r3, r2
 800304e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	0151      	lsls	r1, r2, #5
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	440a      	add	r2, r1
 800305c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003060:	f043 0302 	orr.w	r3, r3, #2
 8003064:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	4611      	mov	r1, r2
 8003070:	4618      	mov	r0, r3
 8003072:	f004 f9e8 	bl	8007446 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4413      	add	r3, r2
 800307e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003082:	461a      	mov	r2, r3
 8003084:	2310      	movs	r3, #16
 8003086:	6093      	str	r3, [r2, #8]
 8003088:	e070      	b.n	800316c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	440b      	add	r3, r1
 8003098:	333f      	adds	r3, #63	; 0x3f
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b03      	cmp	r3, #3
 800309e:	d12a      	bne.n	80030f6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	0151      	lsls	r1, r2, #5
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	440a      	add	r2, r1
 80030b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80030be:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	440b      	add	r3, r1
 80030ce:	335c      	adds	r3, #92	; 0x5c
 80030d0:	2201      	movs	r2, #1
 80030d2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	b2d8      	uxtb	r0, r3
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	440b      	add	r3, r1
 80030e6:	335c      	adds	r3, #92	; 0x5c
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	4601      	mov	r1, r0
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f009 fccc 	bl	800ca8c <HAL_HCD_HC_NotifyURBChange_Callback>
 80030f4:	e03a      	b.n	800316c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	440b      	add	r3, r1
 8003104:	333f      	adds	r3, #63	; 0x3f
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d12f      	bne.n	800316c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	440b      	add	r3, r1
 800311a:	335c      	adds	r3, #92	; 0x5c
 800311c:	2201      	movs	r2, #1
 800311e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	440b      	add	r3, r1
 800312e:	3350      	adds	r3, #80	; 0x50
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	f083 0301 	eor.w	r3, r3, #1
 8003136:	b2d8      	uxtb	r0, r3
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	440b      	add	r3, r1
 8003146:	3350      	adds	r3, #80	; 0x50
 8003148:	4602      	mov	r2, r0
 800314a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	b2d8      	uxtb	r0, r3
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	440b      	add	r3, r1
 800315e:	335c      	adds	r3, #92	; 0x5c
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	4601      	mov	r1, r0
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f009 fc90 	bl	800ca8c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	440b      	add	r3, r1
 800317a:	3350      	adds	r3, #80	; 0x50
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	f083 0301 	eor.w	r3, r3, #1
 8003182:	b2d8      	uxtb	r0, r3
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	440b      	add	r3, r1
 8003192:	3350      	adds	r3, #80	; 0x50
 8003194:	4602      	mov	r2, r0
 8003196:	701a      	strb	r2, [r3, #0]
}
 8003198:	e1f7      	b.n	800358a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	f040 811a 	bne.w	80033e6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	0151      	lsls	r1, r2, #5
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	440a      	add	r2, r1
 80031c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031cc:	f023 0302 	bic.w	r3, r3, #2
 80031d0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	440b      	add	r3, r1
 80031e0:	335d      	adds	r3, #93	; 0x5d
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d10a      	bne.n	80031fe <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	440b      	add	r3, r1
 80031f6:	335c      	adds	r3, #92	; 0x5c
 80031f8:	2201      	movs	r2, #1
 80031fa:	701a      	strb	r2, [r3, #0]
 80031fc:	e0d9      	b.n	80033b2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	440b      	add	r3, r1
 800320c:	335d      	adds	r3, #93	; 0x5d
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b05      	cmp	r3, #5
 8003212:	d10a      	bne.n	800322a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	440b      	add	r3, r1
 8003222:	335c      	adds	r3, #92	; 0x5c
 8003224:	2205      	movs	r2, #5
 8003226:	701a      	strb	r2, [r3, #0]
 8003228:	e0c3      	b.n	80033b2 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	440b      	add	r3, r1
 8003238:	335d      	adds	r3, #93	; 0x5d
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b06      	cmp	r3, #6
 800323e:	d00a      	beq.n	8003256 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	440b      	add	r3, r1
 800324e:	335d      	adds	r3, #93	; 0x5d
 8003250:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003252:	2b08      	cmp	r3, #8
 8003254:	d156      	bne.n	8003304 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	440b      	add	r3, r1
 8003264:	3358      	adds	r3, #88	; 0x58
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	1c59      	adds	r1, r3, #1
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4403      	add	r3, r0
 8003278:	3358      	adds	r3, #88	; 0x58
 800327a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	440b      	add	r3, r1
 800328a:	3358      	adds	r3, #88	; 0x58
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b03      	cmp	r3, #3
 8003290:	d914      	bls.n	80032bc <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	440b      	add	r3, r1
 80032a0:	3358      	adds	r3, #88	; 0x58
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	440b      	add	r3, r1
 80032b4:	335c      	adds	r3, #92	; 0x5c
 80032b6:	2204      	movs	r2, #4
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	e009      	b.n	80032d0 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	440b      	add	r3, r1
 80032ca:	335c      	adds	r3, #92	; 0x5c
 80032cc:	2202      	movs	r2, #2
 80032ce:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032e6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032ee:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fc:	461a      	mov	r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	e056      	b.n	80033b2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	440b      	add	r3, r1
 8003312:	335d      	adds	r3, #93	; 0x5d
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b03      	cmp	r3, #3
 8003318:	d123      	bne.n	8003362 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	440b      	add	r3, r1
 8003328:	335c      	adds	r3, #92	; 0x5c
 800332a:	2202      	movs	r2, #2
 800332c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4413      	add	r3, r2
 8003336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003344:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800334c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4413      	add	r3, r2
 8003356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335a:	461a      	mov	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	e027      	b.n	80033b2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	440b      	add	r3, r1
 8003370:	335d      	adds	r3, #93	; 0x5d
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b07      	cmp	r3, #7
 8003376:	d11c      	bne.n	80033b2 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	440b      	add	r3, r1
 8003386:	3358      	adds	r3, #88	; 0x58
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	1c59      	adds	r1, r3, #1
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4403      	add	r3, r0
 800339a:	3358      	adds	r3, #88	; 0x58
 800339c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	440b      	add	r3, r1
 80033ac:	335c      	adds	r3, #92	; 0x5c
 80033ae:	2204      	movs	r2, #4
 80033b0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033be:	461a      	mov	r2, r3
 80033c0:	2302      	movs	r3, #2
 80033c2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	b2d8      	uxtb	r0, r3
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	440b      	add	r3, r1
 80033d6:	335c      	adds	r3, #92	; 0x5c
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	4601      	mov	r1, r0
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f009 fb54 	bl	800ca8c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80033e4:	e0d1      	b.n	800358a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f8:	2b80      	cmp	r3, #128	; 0x80
 80033fa:	d13e      	bne.n	800347a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	4413      	add	r3, r2
 8003404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	0151      	lsls	r1, r2, #5
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	440a      	add	r2, r1
 8003412:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003416:	f043 0302 	orr.w	r3, r3, #2
 800341a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	440b      	add	r3, r1
 800342a:	3358      	adds	r3, #88	; 0x58
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	1c59      	adds	r1, r3, #1
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	4403      	add	r3, r0
 800343e:	3358      	adds	r3, #88	; 0x58
 8003440:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	440b      	add	r3, r1
 8003450:	335d      	adds	r3, #93	; 0x5d
 8003452:	2206      	movs	r2, #6
 8003454:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	4611      	mov	r1, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f003 fff0 	bl	8007446 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4413      	add	r3, r2
 800346e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003472:	461a      	mov	r2, r3
 8003474:	2380      	movs	r3, #128	; 0x80
 8003476:	6093      	str	r3, [r2, #8]
}
 8003478:	e087      	b.n	800358a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4413      	add	r3, r2
 8003482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	2b10      	cmp	r3, #16
 800348e:	d17c      	bne.n	800358a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	440b      	add	r3, r1
 800349e:	333f      	adds	r3, #63	; 0x3f
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	d122      	bne.n	80034ec <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	440b      	add	r3, r1
 80034b4:	3358      	adds	r3, #88	; 0x58
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	0151      	lsls	r1, r2, #5
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	440a      	add	r2, r1
 80034d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034d4:	f043 0302 	orr.w	r3, r3, #2
 80034d8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	4611      	mov	r1, r2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f003 ffae 	bl	8007446 <USB_HC_Halt>
 80034ea:	e045      	b.n	8003578 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	440b      	add	r3, r1
 80034fa:	333f      	adds	r3, #63	; 0x3f
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	440b      	add	r3, r1
 8003510:	333f      	adds	r3, #63	; 0x3f
 8003512:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003514:	2b02      	cmp	r3, #2
 8003516:	d12f      	bne.n	8003578 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	440b      	add	r3, r1
 8003526:	3358      	adds	r3, #88	; 0x58
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d121      	bne.n	8003578 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	440b      	add	r3, r1
 8003542:	335d      	adds	r3, #93	; 0x5d
 8003544:	2203      	movs	r2, #3
 8003546:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4413      	add	r3, r2
 8003550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	0151      	lsls	r1, r2, #5
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	440a      	add	r2, r1
 800355e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003562:	f043 0302 	orr.w	r3, r3, #2
 8003566:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	4611      	mov	r1, r2
 8003572:	4618      	mov	r0, r3
 8003574:	f003 ff67 	bl	8007446 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4413      	add	r3, r2
 8003580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003584:	461a      	mov	r2, r3
 8003586:	2310      	movs	r3, #16
 8003588:	6093      	str	r3, [r2, #8]
}
 800358a:	bf00      	nop
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b086      	sub	sp, #24
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	460b      	mov	r3, r1
 800359c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80035a8:	78fb      	ldrb	r3, [r7, #3]
 80035aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d119      	bne.n	80035f6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ce:	461a      	mov	r2, r3
 80035d0:	2304      	movs	r3, #4
 80035d2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	0151      	lsls	r1, r2, #5
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	440a      	add	r2, r1
 80035ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035ee:	f043 0302 	orr.w	r3, r3, #2
 80035f2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80035f4:	e33e      	b.n	8003c74 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	2b20      	cmp	r3, #32
 800360a:	d141      	bne.n	8003690 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4413      	add	r3, r2
 8003614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003618:	461a      	mov	r2, r3
 800361a:	2320      	movs	r3, #32
 800361c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	440b      	add	r3, r1
 800362c:	333d      	adds	r3, #61	; 0x3d
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b01      	cmp	r3, #1
 8003632:	f040 831f 	bne.w	8003c74 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	440b      	add	r3, r1
 8003644:	333d      	adds	r3, #61	; 0x3d
 8003646:	2200      	movs	r2, #0
 8003648:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	440b      	add	r3, r1
 8003658:	335c      	adds	r3, #92	; 0x5c
 800365a:	2202      	movs	r2, #2
 800365c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4413      	add	r3, r2
 8003666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	0151      	lsls	r1, r2, #5
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	440a      	add	r2, r1
 8003674:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003678:	f043 0302 	orr.w	r3, r3, #2
 800367c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	4611      	mov	r1, r2
 8003688:	4618      	mov	r0, r3
 800368a:	f003 fedc 	bl	8007446 <USB_HC_Halt>
}
 800368e:	e2f1      	b.n	8003c74 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	015a      	lsls	r2, r3, #5
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	4413      	add	r3, r2
 8003698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a2:	2b40      	cmp	r3, #64	; 0x40
 80036a4:	d13f      	bne.n	8003726 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	440b      	add	r3, r1
 80036b4:	335d      	adds	r3, #93	; 0x5d
 80036b6:	2204      	movs	r2, #4
 80036b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	440b      	add	r3, r1
 80036c8:	333d      	adds	r3, #61	; 0x3d
 80036ca:	2201      	movs	r2, #1
 80036cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	440b      	add	r3, r1
 80036dc:	3358      	adds	r3, #88	; 0x58
 80036de:	2200      	movs	r2, #0
 80036e0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	015a      	lsls	r2, r3, #5
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	0151      	lsls	r1, r2, #5
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	440a      	add	r2, r1
 80036f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036fc:	f043 0302 	orr.w	r3, r3, #2
 8003700:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	4611      	mov	r1, r2
 800370c:	4618      	mov	r0, r3
 800370e:	f003 fe9a 	bl	8007446 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	4413      	add	r3, r2
 800371a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371e:	461a      	mov	r2, r3
 8003720:	2340      	movs	r3, #64	; 0x40
 8003722:	6093      	str	r3, [r2, #8]
}
 8003724:	e2a6      	b.n	8003c74 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	015a      	lsls	r2, r3, #5
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	4413      	add	r3, r2
 800372e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800373c:	d122      	bne.n	8003784 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4413      	add	r3, r2
 8003746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	0151      	lsls	r1, r2, #5
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	440a      	add	r2, r1
 8003754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003758:	f043 0302 	orr.w	r3, r3, #2
 800375c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	4611      	mov	r1, r2
 8003768:	4618      	mov	r0, r3
 800376a:	f003 fe6c 	bl	8007446 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4413      	add	r3, r2
 8003776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377a:	461a      	mov	r2, r3
 800377c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003780:	6093      	str	r3, [r2, #8]
}
 8003782:	e277      	b.n	8003c74 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4413      	add	r3, r2
 800378c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b01      	cmp	r3, #1
 8003798:	d135      	bne.n	8003806 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	440b      	add	r3, r1
 80037a8:	3358      	adds	r3, #88	; 0x58
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	0151      	lsls	r1, r2, #5
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	440a      	add	r2, r1
 80037c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037c8:	f043 0302 	orr.w	r3, r3, #2
 80037cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f003 fe34 	bl	8007446 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ea:	461a      	mov	r2, r3
 80037ec:	2301      	movs	r3, #1
 80037ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	440b      	add	r3, r1
 80037fe:	335d      	adds	r3, #93	; 0x5d
 8003800:	2201      	movs	r2, #1
 8003802:	701a      	strb	r2, [r3, #0]
}
 8003804:	e236      	b.n	8003c74 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4413      	add	r3, r2
 800380e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b08      	cmp	r3, #8
 800381a:	d12b      	bne.n	8003874 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4413      	add	r3, r2
 8003824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003828:	461a      	mov	r2, r3
 800382a:	2308      	movs	r3, #8
 800382c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4413      	add	r3, r2
 8003836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	0151      	lsls	r1, r2, #5
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	440a      	add	r2, r1
 8003844:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003848:	f043 0302 	orr.w	r3, r3, #2
 800384c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	4611      	mov	r1, r2
 8003858:	4618      	mov	r0, r3
 800385a:	f003 fdf4 	bl	8007446 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	440b      	add	r3, r1
 800386c:	335d      	adds	r3, #93	; 0x5d
 800386e:	2205      	movs	r2, #5
 8003870:	701a      	strb	r2, [r3, #0]
}
 8003872:	e1ff      	b.n	8003c74 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	4413      	add	r3, r2
 800387c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 0310 	and.w	r3, r3, #16
 8003886:	2b10      	cmp	r3, #16
 8003888:	d155      	bne.n	8003936 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	440b      	add	r3, r1
 8003898:	3358      	adds	r3, #88	; 0x58
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	440b      	add	r3, r1
 80038ac:	335d      	adds	r3, #93	; 0x5d
 80038ae:	2203      	movs	r2, #3
 80038b0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	440b      	add	r3, r1
 80038c0:	333d      	adds	r3, #61	; 0x3d
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d114      	bne.n	80038f2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	440b      	add	r3, r1
 80038d6:	333c      	adds	r3, #60	; 0x3c
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	440b      	add	r3, r1
 80038ec:	333d      	adds	r3, #61	; 0x3d
 80038ee:	2201      	movs	r2, #1
 80038f0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	0151      	lsls	r1, r2, #5
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	440a      	add	r2, r1
 8003908:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800390c:	f043 0302 	orr.w	r3, r3, #2
 8003910:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	4611      	mov	r1, r2
 800391c:	4618      	mov	r0, r3
 800391e:	f003 fd92 	bl	8007446 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4413      	add	r3, r2
 800392a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800392e:	461a      	mov	r2, r3
 8003930:	2310      	movs	r3, #16
 8003932:	6093      	str	r3, [r2, #8]
}
 8003934:	e19e      	b.n	8003c74 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4413      	add	r3, r2
 800393e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003948:	2b80      	cmp	r3, #128	; 0x80
 800394a:	d12b      	bne.n	80039a4 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4413      	add	r3, r2
 8003954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	0151      	lsls	r1, r2, #5
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	440a      	add	r2, r1
 8003962:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003966:	f043 0302 	orr.w	r3, r3, #2
 800396a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	4611      	mov	r1, r2
 8003976:	4618      	mov	r0, r3
 8003978:	f003 fd65 	bl	8007446 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	440b      	add	r3, r1
 800398a:	335d      	adds	r3, #93	; 0x5d
 800398c:	2206      	movs	r2, #6
 800398e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	4413      	add	r3, r2
 8003998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399c:	461a      	mov	r2, r3
 800399e:	2380      	movs	r3, #128	; 0x80
 80039a0:	6093      	str	r3, [r2, #8]
}
 80039a2:	e167      	b.n	8003c74 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ba:	d135      	bne.n	8003a28 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	0151      	lsls	r1, r2, #5
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	440a      	add	r2, r1
 80039d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039d6:	f043 0302 	orr.w	r3, r3, #2
 80039da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	4611      	mov	r1, r2
 80039e6:	4618      	mov	r0, r3
 80039e8:	f003 fd2d 	bl	8007446 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f8:	461a      	mov	r2, r3
 80039fa:	2310      	movs	r3, #16
 80039fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a10:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	440b      	add	r3, r1
 8003a20:	335d      	adds	r3, #93	; 0x5d
 8003a22:	2208      	movs	r2, #8
 8003a24:	701a      	strb	r2, [r3, #0]
}
 8003a26:	e125      	b.n	8003c74 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	f040 811a 	bne.w	8003c74 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	0151      	lsls	r1, r2, #5
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	440a      	add	r2, r1
 8003a56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a5a:	f023 0302 	bic.w	r3, r3, #2
 8003a5e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	440b      	add	r3, r1
 8003a6e:	335d      	adds	r3, #93	; 0x5d
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d137      	bne.n	8003ae6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	440b      	add	r3, r1
 8003a84:	335c      	adds	r3, #92	; 0x5c
 8003a86:	2201      	movs	r2, #1
 8003a88:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	440b      	add	r3, r1
 8003a98:	333f      	adds	r3, #63	; 0x3f
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d00b      	beq.n	8003ab8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	440b      	add	r3, r1
 8003aae:	333f      	adds	r3, #63	; 0x3f
 8003ab0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	f040 80c5 	bne.w	8003c42 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	440b      	add	r3, r1
 8003ac6:	3351      	adds	r3, #81	; 0x51
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	f083 0301 	eor.w	r3, r3, #1
 8003ace:	b2d8      	uxtb	r0, r3
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	440b      	add	r3, r1
 8003ade:	3351      	adds	r3, #81	; 0x51
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	701a      	strb	r2, [r3, #0]
 8003ae4:	e0ad      	b.n	8003c42 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	440b      	add	r3, r1
 8003af4:	335d      	adds	r3, #93	; 0x5d
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d10a      	bne.n	8003b12 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	4613      	mov	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	440b      	add	r3, r1
 8003b0a:	335c      	adds	r3, #92	; 0x5c
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	701a      	strb	r2, [r3, #0]
 8003b10:	e097      	b.n	8003c42 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4613      	mov	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	440b      	add	r3, r1
 8003b20:	335d      	adds	r3, #93	; 0x5d
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d10a      	bne.n	8003b3e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	440b      	add	r3, r1
 8003b36:	335c      	adds	r3, #92	; 0x5c
 8003b38:	2202      	movs	r2, #2
 8003b3a:	701a      	strb	r2, [r3, #0]
 8003b3c:	e081      	b.n	8003c42 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4613      	mov	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	440b      	add	r3, r1
 8003b4c:	335d      	adds	r3, #93	; 0x5d
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b05      	cmp	r3, #5
 8003b52:	d10a      	bne.n	8003b6a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	440b      	add	r3, r1
 8003b62:	335c      	adds	r3, #92	; 0x5c
 8003b64:	2205      	movs	r2, #5
 8003b66:	701a      	strb	r2, [r3, #0]
 8003b68:	e06b      	b.n	8003c42 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	440b      	add	r3, r1
 8003b78:	335d      	adds	r3, #93	; 0x5d
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b06      	cmp	r3, #6
 8003b7e:	d00a      	beq.n	8003b96 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4613      	mov	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	440b      	add	r3, r1
 8003b8e:	335d      	adds	r3, #93	; 0x5d
 8003b90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d155      	bne.n	8003c42 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	440b      	add	r3, r1
 8003ba4:	3358      	adds	r3, #88	; 0x58
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	1c59      	adds	r1, r3, #1
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	4403      	add	r3, r0
 8003bb8:	3358      	adds	r3, #88	; 0x58
 8003bba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	440b      	add	r3, r1
 8003bca:	3358      	adds	r3, #88	; 0x58
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d914      	bls.n	8003bfc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	440b      	add	r3, r1
 8003be0:	3358      	adds	r3, #88	; 0x58
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	440b      	add	r3, r1
 8003bf4:	335c      	adds	r3, #92	; 0x5c
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	701a      	strb	r2, [r3, #0]
 8003bfa:	e009      	b.n	8003c10 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	440b      	add	r3, r1
 8003c0a:	335c      	adds	r3, #92	; 0x5c
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c26:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c2e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c4e:	461a      	mov	r2, r3
 8003c50:	2302      	movs	r3, #2
 8003c52:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	b2d8      	uxtb	r0, r3
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	440b      	add	r3, r1
 8003c66:	335c      	adds	r3, #92	; 0x5c
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	4601      	mov	r1, r0
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f008 ff0c 	bl	800ca8c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003c74:	bf00      	nop
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08a      	sub	sp, #40	; 0x28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f003 030f 	and.w	r3, r3, #15
 8003c9c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	0c5b      	lsrs	r3, r3, #17
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	091b      	lsrs	r3, r3, #4
 8003cac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cb0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d003      	beq.n	8003cc0 <HCD_RXQLVL_IRQHandler+0x44>
 8003cb8:	2b05      	cmp	r3, #5
 8003cba:	f000 8082 	beq.w	8003dc2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003cbe:	e083      	b.n	8003dc8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d07f      	beq.n	8003dc6 <HCD_RXQLVL_IRQHandler+0x14a>
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	440b      	add	r3, r1
 8003cd4:	3344      	adds	r3, #68	; 0x44
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d074      	beq.n	8003dc6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6818      	ldr	r0, [r3, #0]
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	440b      	add	r3, r1
 8003cee:	3344      	adds	r3, #68	; 0x44
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	b292      	uxth	r2, r2
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	f002 ff43 	bl	8006b82 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	440b      	add	r3, r1
 8003d0a:	3344      	adds	r3, #68	; 0x44
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	18d1      	adds	r1, r2, r3
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4613      	mov	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4403      	add	r3, r0
 8003d20:	3344      	adds	r3, #68	; 0x44
 8003d22:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	440b      	add	r3, r1
 8003d32:	334c      	adds	r3, #76	; 0x4c
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	18d1      	adds	r1, r2, r3
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4403      	add	r3, r0
 8003d48:	334c      	adds	r3, #76	; 0x4c
 8003d4a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d58:	691a      	ldr	r2, [r3, #16]
 8003d5a:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <HCD_RXQLVL_IRQHandler+0x154>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d031      	beq.n	8003dc6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d78:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d80:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	440b      	add	r3, r1
 8003da2:	3350      	adds	r3, #80	; 0x50
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	f083 0301 	eor.w	r3, r3, #1
 8003daa:	b2d8      	uxtb	r0, r3
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	4613      	mov	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	440b      	add	r3, r1
 8003dba:	3350      	adds	r3, #80	; 0x50
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	701a      	strb	r2, [r3, #0]
      break;
 8003dc0:	e001      	b.n	8003dc6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003dc2:	bf00      	nop
 8003dc4:	e000      	b.n	8003dc8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003dc6:	bf00      	nop
  }
}
 8003dc8:	bf00      	nop
 8003dca:	3728      	adds	r7, #40	; 0x28
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	1ff80000 	.word	0x1ff80000

08003dd4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003e00:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d10b      	bne.n	8003e24 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d102      	bne.n	8003e1c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f008 fe1c 	bl	800ca54 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f043 0302 	orr.w	r3, r3, #2
 8003e22:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d132      	bne.n	8003e94 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f043 0308 	orr.w	r3, r3, #8
 8003e34:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d126      	bne.n	8003e8e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d113      	bne.n	8003e70 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003e4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e52:	d106      	bne.n	8003e62 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2102      	movs	r1, #2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f002 ffcc 	bl	8006df8 <USB_InitFSLSPClkSel>
 8003e60:	e011      	b.n	8003e86 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2101      	movs	r1, #1
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f002 ffc5 	bl	8006df8 <USB_InitFSLSPClkSel>
 8003e6e:	e00a      	b.n	8003e86 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d106      	bne.n	8003e86 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e7e:	461a      	mov	r2, r3
 8003e80:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003e84:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f008 fe12 	bl	800cab0 <HAL_HCD_PortEnabled_Callback>
 8003e8c:	e002      	b.n	8003e94 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f008 fe1c 	bl	800cacc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f003 0320 	and.w	r3, r3, #32
 8003e9a:	2b20      	cmp	r3, #32
 8003e9c:	d103      	bne.n	8003ea6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f043 0320 	orr.w	r3, r3, #32
 8003ea4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003eac:	461a      	mov	r2, r3
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	6013      	str	r3, [r2, #0]
}
 8003eb2:	bf00      	nop
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e11f      	b.n	800410e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d106      	bne.n	8003ee8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7fd fd3a 	bl	800195c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2224      	movs	r2, #36	; 0x24
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0201 	bic.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f20:	f001 f9de 	bl	80052e0 <HAL_RCC_GetPCLK1Freq>
 8003f24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	4a7b      	ldr	r2, [pc, #492]	; (8004118 <HAL_I2C_Init+0x25c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d807      	bhi.n	8003f40 <HAL_I2C_Init+0x84>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4a7a      	ldr	r2, [pc, #488]	; (800411c <HAL_I2C_Init+0x260>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	bf94      	ite	ls
 8003f38:	2301      	movls	r3, #1
 8003f3a:	2300      	movhi	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	e006      	b.n	8003f4e <HAL_I2C_Init+0x92>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4a77      	ldr	r2, [pc, #476]	; (8004120 <HAL_I2C_Init+0x264>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	bf94      	ite	ls
 8003f48:	2301      	movls	r3, #1
 8003f4a:	2300      	movhi	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e0db      	b.n	800410e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4a72      	ldr	r2, [pc, #456]	; (8004124 <HAL_I2C_Init+0x268>)
 8003f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5e:	0c9b      	lsrs	r3, r3, #18
 8003f60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	4a64      	ldr	r2, [pc, #400]	; (8004118 <HAL_I2C_Init+0x25c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d802      	bhi.n	8003f90 <HAL_I2C_Init+0xd4>
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	e009      	b.n	8003fa4 <HAL_I2C_Init+0xe8>
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f96:	fb02 f303 	mul.w	r3, r2, r3
 8003f9a:	4a63      	ldr	r2, [pc, #396]	; (8004128 <HAL_I2C_Init+0x26c>)
 8003f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa0:	099b      	lsrs	r3, r3, #6
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4956      	ldr	r1, [pc, #344]	; (8004118 <HAL_I2C_Init+0x25c>)
 8003fc0:	428b      	cmp	r3, r1
 8003fc2:	d80d      	bhi.n	8003fe0 <HAL_I2C_Init+0x124>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	1e59      	subs	r1, r3, #1
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	bf38      	it	cc
 8003fdc:	2304      	movcc	r3, #4
 8003fde:	e04f      	b.n	8004080 <HAL_I2C_Init+0x1c4>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d111      	bne.n	800400c <HAL_I2C_Init+0x150>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	1e58      	subs	r0, r3, #1
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6859      	ldr	r1, [r3, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	440b      	add	r3, r1
 8003ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004000:	2b00      	cmp	r3, #0
 8004002:	bf0c      	ite	eq
 8004004:	2301      	moveq	r3, #1
 8004006:	2300      	movne	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	e012      	b.n	8004032 <HAL_I2C_Init+0x176>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	1e58      	subs	r0, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6859      	ldr	r1, [r3, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	0099      	lsls	r1, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004022:	3301      	adds	r3, #1
 8004024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004028:	2b00      	cmp	r3, #0
 800402a:	bf0c      	ite	eq
 800402c:	2301      	moveq	r3, #1
 800402e:	2300      	movne	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <HAL_I2C_Init+0x17e>
 8004036:	2301      	movs	r3, #1
 8004038:	e022      	b.n	8004080 <HAL_I2C_Init+0x1c4>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10e      	bne.n	8004060 <HAL_I2C_Init+0x1a4>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1e58      	subs	r0, r3, #1
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6859      	ldr	r1, [r3, #4]
 800404a:	460b      	mov	r3, r1
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	440b      	add	r3, r1
 8004050:	fbb0 f3f3 	udiv	r3, r0, r3
 8004054:	3301      	adds	r3, #1
 8004056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800405a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800405e:	e00f      	b.n	8004080 <HAL_I2C_Init+0x1c4>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	1e58      	subs	r0, r3, #1
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6859      	ldr	r1, [r3, #4]
 8004068:	460b      	mov	r3, r1
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	440b      	add	r3, r1
 800406e:	0099      	lsls	r1, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	fbb0 f3f3 	udiv	r3, r0, r3
 8004076:	3301      	adds	r3, #1
 8004078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800407c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	6809      	ldr	r1, [r1, #0]
 8004084:	4313      	orrs	r3, r2
 8004086:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69da      	ldr	r2, [r3, #28]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6911      	ldr	r1, [r2, #16]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	68d2      	ldr	r2, [r2, #12]
 80040ba:	4311      	orrs	r1, r2
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	430b      	orrs	r3, r1
 80040c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	000186a0 	.word	0x000186a0
 800411c:	001e847f 	.word	0x001e847f
 8004120:	003d08ff 	.word	0x003d08ff
 8004124:	431bde83 	.word	0x431bde83
 8004128:	10624dd3 	.word	0x10624dd3

0800412c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e128      	b.n	8004390 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a90      	ldr	r2, [pc, #576]	; (8004398 <HAL_I2S_Init+0x26c>)
 8004156:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7fd fc47 	bl	80019ec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2202      	movs	r2, #2
 8004162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6812      	ldr	r2, [r2, #0]
 8004170:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004174:	f023 030f 	bic.w	r3, r3, #15
 8004178:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2202      	movs	r2, #2
 8004180:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	2b02      	cmp	r3, #2
 8004188:	d060      	beq.n	800424c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d102      	bne.n	8004198 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004192:	2310      	movs	r3, #16
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	e001      	b.n	800419c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004198:	2320      	movs	r3, #32
 800419a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2b20      	cmp	r3, #32
 80041a2:	d802      	bhi.n	80041aa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80041aa:	2001      	movs	r0, #1
 80041ac:	f001 f9d4 	bl	8005558 <HAL_RCCEx_GetPeriphCLKFreq>
 80041b0:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ba:	d125      	bne.n	8004208 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d010      	beq.n	80041e6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80041ce:	4613      	mov	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	461a      	mov	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e0:	3305      	adds	r3, #5
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	e01f      	b.n	8004226 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80041f0:	4613      	mov	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	461a      	mov	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004202:	3305      	adds	r3, #5
 8004204:	613b      	str	r3, [r7, #16]
 8004206:	e00e      	b.n	8004226 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	461a      	mov	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004222:	3305      	adds	r3, #5
 8004224:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	4a5c      	ldr	r2, [pc, #368]	; (800439c <HAL_I2S_Init+0x270>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	08db      	lsrs	r3, r3, #3
 8004230:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	085b      	lsrs	r3, r3, #1
 8004242:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	61bb      	str	r3, [r7, #24]
 800424a:	e003      	b.n	8004254 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800424c:	2302      	movs	r3, #2
 800424e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d902      	bls.n	8004260 <HAL_I2S_Init+0x134>
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	2bff      	cmp	r3, #255	; 0xff
 800425e:	d907      	bls.n	8004270 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004264:	f043 0210 	orr.w	r2, r3, #16
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e08f      	b.n	8004390 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	ea42 0103 	orr.w	r1, r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	430a      	orrs	r2, r1
 8004282:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800428e:	f023 030f 	bic.w	r3, r3, #15
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6851      	ldr	r1, [r2, #4]
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6892      	ldr	r2, [r2, #8]
 800429a:	4311      	orrs	r1, r2
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	68d2      	ldr	r2, [r2, #12]
 80042a0:	4311      	orrs	r1, r2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6992      	ldr	r2, [r2, #24]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042b2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d161      	bne.n	8004380 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a38      	ldr	r2, [pc, #224]	; (80043a0 <HAL_I2S_Init+0x274>)
 80042c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a37      	ldr	r2, [pc, #220]	; (80043a4 <HAL_I2S_Init+0x278>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d101      	bne.n	80042d0 <HAL_I2S_Init+0x1a4>
 80042cc:	4b36      	ldr	r3, [pc, #216]	; (80043a8 <HAL_I2S_Init+0x27c>)
 80042ce:	e001      	b.n	80042d4 <HAL_I2S_Init+0x1a8>
 80042d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6812      	ldr	r2, [r2, #0]
 80042da:	4932      	ldr	r1, [pc, #200]	; (80043a4 <HAL_I2S_Init+0x278>)
 80042dc:	428a      	cmp	r2, r1
 80042de:	d101      	bne.n	80042e4 <HAL_I2S_Init+0x1b8>
 80042e0:	4a31      	ldr	r2, [pc, #196]	; (80043a8 <HAL_I2S_Init+0x27c>)
 80042e2:	e001      	b.n	80042e8 <HAL_I2S_Init+0x1bc>
 80042e4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80042e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80042ec:	f023 030f 	bic.w	r3, r3, #15
 80042f0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a2b      	ldr	r2, [pc, #172]	; (80043a4 <HAL_I2S_Init+0x278>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d101      	bne.n	8004300 <HAL_I2S_Init+0x1d4>
 80042fc:	4b2a      	ldr	r3, [pc, #168]	; (80043a8 <HAL_I2S_Init+0x27c>)
 80042fe:	e001      	b.n	8004304 <HAL_I2S_Init+0x1d8>
 8004300:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004304:	2202      	movs	r2, #2
 8004306:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a25      	ldr	r2, [pc, #148]	; (80043a4 <HAL_I2S_Init+0x278>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d101      	bne.n	8004316 <HAL_I2S_Init+0x1ea>
 8004312:	4b25      	ldr	r3, [pc, #148]	; (80043a8 <HAL_I2S_Init+0x27c>)
 8004314:	e001      	b.n	800431a <HAL_I2S_Init+0x1ee>
 8004316:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004326:	d003      	beq.n	8004330 <HAL_I2S_Init+0x204>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d103      	bne.n	8004338 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	e001      	b.n	800433c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004338:	2300      	movs	r3, #0
 800433a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	b299      	uxth	r1, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004352:	4303      	orrs	r3, r0
 8004354:	b29b      	uxth	r3, r3
 8004356:	430b      	orrs	r3, r1
 8004358:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800435a:	4313      	orrs	r3, r2
 800435c:	b29a      	uxth	r2, r3
 800435e:	897b      	ldrh	r3, [r7, #10]
 8004360:	4313      	orrs	r3, r2
 8004362:	b29b      	uxth	r3, r3
 8004364:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004368:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a0d      	ldr	r2, [pc, #52]	; (80043a4 <HAL_I2S_Init+0x278>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d101      	bne.n	8004378 <HAL_I2S_Init+0x24c>
 8004374:	4b0c      	ldr	r3, [pc, #48]	; (80043a8 <HAL_I2S_Init+0x27c>)
 8004376:	e001      	b.n	800437c <HAL_I2S_Init+0x250>
 8004378:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800437c:	897a      	ldrh	r2, [r7, #10]
 800437e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3720      	adds	r7, #32
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	080044a3 	.word	0x080044a3
 800439c:	cccccccd 	.word	0xcccccccd
 80043a0:	080045b9 	.word	0x080045b9
 80043a4:	40003800 	.word	0x40003800
 80043a8:	40003400 	.word	0x40003400

080043ac <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	881a      	ldrh	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	1c9a      	adds	r2, r3, #2
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440a:	b29b      	uxth	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10e      	bne.n	800443c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800442c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff ffb8 	bl	80043ac <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800443c:	bf00      	nop
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	b292      	uxth	r2, r2
 8004458:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445e:	1c9a      	adds	r2, r3, #2
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004468:	b29b      	uxth	r3, r3
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004476:	b29b      	uxth	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10e      	bne.n	800449a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800448a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff ff93 	bl	80043c0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800449a:	bf00      	nop
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b086      	sub	sp, #24
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d13a      	bne.n	8004534 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d109      	bne.n	80044dc <I2S_IRQHandler+0x3a>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d2:	2b40      	cmp	r3, #64	; 0x40
 80044d4:	d102      	bne.n	80044dc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7ff ffb4 	bl	8004444 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e2:	2b40      	cmp	r3, #64	; 0x40
 80044e4:	d126      	bne.n	8004534 <I2S_IRQHandler+0x92>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	d11f      	bne.n	8004534 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004502:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004504:	2300      	movs	r3, #0
 8004506:	613b      	str	r3, [r7, #16]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	613b      	str	r3, [r7, #16]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004526:	f043 0202 	orr.w	r2, r3, #2
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7ff ff50 	bl	80043d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b03      	cmp	r3, #3
 800453e:	d136      	bne.n	80045ae <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b02      	cmp	r3, #2
 8004548:	d109      	bne.n	800455e <I2S_IRQHandler+0xbc>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004554:	2b80      	cmp	r3, #128	; 0x80
 8004556:	d102      	bne.n	800455e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7ff ff45 	bl	80043e8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b08      	cmp	r3, #8
 8004566:	d122      	bne.n	80045ae <I2S_IRQHandler+0x10c>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b20      	cmp	r3, #32
 8004574:	d11b      	bne.n	80045ae <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004584:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a0:	f043 0204 	orr.w	r2, r3, #4
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7ff ff13 	bl	80043d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045ae:	bf00      	nop
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4aa2      	ldr	r2, [pc, #648]	; (8004858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d101      	bne.n	80045d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80045d2:	4ba2      	ldr	r3, [pc, #648]	; (800485c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045d4:	e001      	b.n	80045da <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80045d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a9b      	ldr	r2, [pc, #620]	; (8004858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d101      	bne.n	80045f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80045f0:	4b9a      	ldr	r3, [pc, #616]	; (800485c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045f2:	e001      	b.n	80045f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80045f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004604:	d004      	beq.n	8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	f040 8099 	bne.w	8004742 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b02      	cmp	r3, #2
 8004618:	d107      	bne.n	800462a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f925 	bl	8004874 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b01      	cmp	r3, #1
 8004632:	d107      	bne.n	8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f9c8 	bl	80049d4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464a:	2b40      	cmp	r3, #64	; 0x40
 800464c:	d13a      	bne.n	80046c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f003 0320 	and.w	r3, r3, #32
 8004654:	2b00      	cmp	r3, #0
 8004656:	d035      	beq.n	80046c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a7e      	ldr	r2, [pc, #504]	; (8004858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d101      	bne.n	8004666 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004662:	4b7e      	ldr	r3, [pc, #504]	; (800485c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004664:	e001      	b.n	800466a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004666:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4979      	ldr	r1, [pc, #484]	; (8004858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004672:	428b      	cmp	r3, r1
 8004674:	d101      	bne.n	800467a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004676:	4b79      	ldr	r3, [pc, #484]	; (800485c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004678:	e001      	b.n	800467e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800467a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800467e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004682:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004692:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004694:	2300      	movs	r3, #0
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b6:	f043 0202 	orr.w	r2, r3, #2
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7ff fe88 	bl	80043d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	f040 80be 	bne.w	800484c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f003 0320 	and.w	r3, r3, #32
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 80b8 	beq.w	800484c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046ea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a59      	ldr	r2, [pc, #356]	; (8004858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d101      	bne.n	80046fa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80046f6:	4b59      	ldr	r3, [pc, #356]	; (800485c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80046f8:	e001      	b.n	80046fe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80046fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4954      	ldr	r1, [pc, #336]	; (8004858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004706:	428b      	cmp	r3, r1
 8004708:	d101      	bne.n	800470e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800470a:	4b54      	ldr	r3, [pc, #336]	; (800485c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800470c:	e001      	b.n	8004712 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800470e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004712:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004716:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004718:	2300      	movs	r3, #0
 800471a:	60bb      	str	r3, [r7, #8]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	60bb      	str	r3, [r7, #8]
 8004724:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	f043 0204 	orr.w	r2, r3, #4
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff fe4a 	bl	80043d4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004740:	e084      	b.n	800484c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b02      	cmp	r3, #2
 800474a:	d107      	bne.n	800475c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f8be 	bl	80048d8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b01      	cmp	r3, #1
 8004764:	d107      	bne.n	8004776 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f8fd 	bl	8004970 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477c:	2b40      	cmp	r3, #64	; 0x40
 800477e:	d12f      	bne.n	80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f003 0320 	and.w	r3, r3, #32
 8004786:	2b00      	cmp	r3, #0
 8004788:	d02a      	beq.n	80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004798:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a2e      	ldr	r2, [pc, #184]	; (8004858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d101      	bne.n	80047a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80047a4:	4b2d      	ldr	r3, [pc, #180]	; (800485c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80047a6:	e001      	b.n	80047ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80047a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4929      	ldr	r1, [pc, #164]	; (8004858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80047b4:	428b      	cmp	r3, r1
 80047b6:	d101      	bne.n	80047bc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80047b8:	4b28      	ldr	r3, [pc, #160]	; (800485c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80047ba:	e001      	b.n	80047c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80047bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047c4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d2:	f043 0202 	orr.w	r2, r3, #2
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff fdfa 	bl	80043d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b08      	cmp	r3, #8
 80047e8:	d131      	bne.n	800484e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d02c      	beq.n	800484e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a17      	ldr	r2, [pc, #92]	; (8004858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d101      	bne.n	8004802 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80047fe:	4b17      	ldr	r3, [pc, #92]	; (800485c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004800:	e001      	b.n	8004806 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004802:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4912      	ldr	r1, [pc, #72]	; (8004858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800480e:	428b      	cmp	r3, r1
 8004810:	d101      	bne.n	8004816 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004812:	4b12      	ldr	r3, [pc, #72]	; (800485c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004814:	e001      	b.n	800481a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004816:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800481a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800481e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800482e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483c:	f043 0204 	orr.w	r2, r3, #4
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff fdc5 	bl	80043d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800484a:	e000      	b.n	800484e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800484c:	bf00      	nop
}
 800484e:	bf00      	nop
 8004850:	3720      	adds	r7, #32
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	40003800 	.word	0x40003800
 800485c:	40003400 	.word	0x40003400

08004860 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	1c99      	adds	r1, r3, #2
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6251      	str	r1, [r2, #36]	; 0x24
 8004886:	881a      	ldrh	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004892:	b29b      	uxth	r3, r3
 8004894:	3b01      	subs	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d113      	bne.n	80048ce <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d106      	bne.n	80048ce <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff ffc9 	bl	8004860 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	1c99      	adds	r1, r3, #2
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6251      	str	r1, [r2, #36]	; 0x24
 80048ea:	8819      	ldrh	r1, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a1d      	ldr	r2, [pc, #116]	; (8004968 <I2SEx_TxISR_I2SExt+0x90>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d101      	bne.n	80048fa <I2SEx_TxISR_I2SExt+0x22>
 80048f6:	4b1d      	ldr	r3, [pc, #116]	; (800496c <I2SEx_TxISR_I2SExt+0x94>)
 80048f8:	e001      	b.n	80048fe <I2SEx_TxISR_I2SExt+0x26>
 80048fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048fe:	460a      	mov	r2, r1
 8004900:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004906:	b29b      	uxth	r3, r3
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d121      	bne.n	800495e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a12      	ldr	r2, [pc, #72]	; (8004968 <I2SEx_TxISR_I2SExt+0x90>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d101      	bne.n	8004928 <I2SEx_TxISR_I2SExt+0x50>
 8004924:	4b11      	ldr	r3, [pc, #68]	; (800496c <I2SEx_TxISR_I2SExt+0x94>)
 8004926:	e001      	b.n	800492c <I2SEx_TxISR_I2SExt+0x54>
 8004928:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	490d      	ldr	r1, [pc, #52]	; (8004968 <I2SEx_TxISR_I2SExt+0x90>)
 8004934:	428b      	cmp	r3, r1
 8004936:	d101      	bne.n	800493c <I2SEx_TxISR_I2SExt+0x64>
 8004938:	4b0c      	ldr	r3, [pc, #48]	; (800496c <I2SEx_TxISR_I2SExt+0x94>)
 800493a:	e001      	b.n	8004940 <I2SEx_TxISR_I2SExt+0x68>
 800493c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004940:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004944:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800494a:	b29b      	uxth	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d106      	bne.n	800495e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff ff81 	bl	8004860 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800495e:	bf00      	nop
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	40003800 	.word	0x40003800
 800496c:	40003400 	.word	0x40003400

08004970 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68d8      	ldr	r0, [r3, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004982:	1c99      	adds	r1, r3, #2
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004988:	b282      	uxth	r2, r0
 800498a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004990:	b29b      	uxth	r3, r3
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800499e:	b29b      	uxth	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d113      	bne.n	80049cc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049b2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7ff ff4a 	bl	8004860 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049cc:	bf00      	nop
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a20      	ldr	r2, [pc, #128]	; (8004a64 <I2SEx_RxISR_I2SExt+0x90>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d101      	bne.n	80049ea <I2SEx_RxISR_I2SExt+0x16>
 80049e6:	4b20      	ldr	r3, [pc, #128]	; (8004a68 <I2SEx_RxISR_I2SExt+0x94>)
 80049e8:	e001      	b.n	80049ee <I2SEx_RxISR_I2SExt+0x1a>
 80049ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049ee:	68d8      	ldr	r0, [r3, #12]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	1c99      	adds	r1, r3, #2
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80049fa:	b282      	uxth	r2, r0
 80049fc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d121      	bne.n	8004a5a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a12      	ldr	r2, [pc, #72]	; (8004a64 <I2SEx_RxISR_I2SExt+0x90>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d101      	bne.n	8004a24 <I2SEx_RxISR_I2SExt+0x50>
 8004a20:	4b11      	ldr	r3, [pc, #68]	; (8004a68 <I2SEx_RxISR_I2SExt+0x94>)
 8004a22:	e001      	b.n	8004a28 <I2SEx_RxISR_I2SExt+0x54>
 8004a24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	490d      	ldr	r1, [pc, #52]	; (8004a64 <I2SEx_RxISR_I2SExt+0x90>)
 8004a30:	428b      	cmp	r3, r1
 8004a32:	d101      	bne.n	8004a38 <I2SEx_RxISR_I2SExt+0x64>
 8004a34:	4b0c      	ldr	r3, [pc, #48]	; (8004a68 <I2SEx_RxISR_I2SExt+0x94>)
 8004a36:	e001      	b.n	8004a3c <I2SEx_RxISR_I2SExt+0x68>
 8004a38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a40:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d106      	bne.n	8004a5a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f7ff ff03 	bl	8004860 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a5a:	bf00      	nop
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	40003800 	.word	0x40003800
 8004a68:	40003400 	.word	0x40003400

08004a6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e25b      	b.n	8004f36 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d075      	beq.n	8004b76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a8a:	4ba3      	ldr	r3, [pc, #652]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d00c      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a96:	4ba0      	ldr	r3, [pc, #640]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d112      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aa2:	4b9d      	ldr	r3, [pc, #628]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aae:	d10b      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab0:	4b99      	ldr	r3, [pc, #612]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d05b      	beq.n	8004b74 <HAL_RCC_OscConfig+0x108>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d157      	bne.n	8004b74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e236      	b.n	8004f36 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad0:	d106      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x74>
 8004ad2:	4b91      	ldr	r3, [pc, #580]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a90      	ldr	r2, [pc, #576]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	e01d      	b.n	8004b1c <HAL_RCC_OscConfig+0xb0>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ae8:	d10c      	bne.n	8004b04 <HAL_RCC_OscConfig+0x98>
 8004aea:	4b8b      	ldr	r3, [pc, #556]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a8a      	ldr	r2, [pc, #552]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004af0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	4b88      	ldr	r3, [pc, #544]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a87      	ldr	r2, [pc, #540]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	e00b      	b.n	8004b1c <HAL_RCC_OscConfig+0xb0>
 8004b04:	4b84      	ldr	r3, [pc, #528]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a83      	ldr	r2, [pc, #524]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	4b81      	ldr	r3, [pc, #516]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a80      	ldr	r2, [pc, #512]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d013      	beq.n	8004b4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b24:	f7fd f9a0 	bl	8001e68 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b2c:	f7fd f99c 	bl	8001e68 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b64      	cmp	r3, #100	; 0x64
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e1fb      	b.n	8004f36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3e:	4b76      	ldr	r3, [pc, #472]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0f0      	beq.n	8004b2c <HAL_RCC_OscConfig+0xc0>
 8004b4a:	e014      	b.n	8004b76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4c:	f7fd f98c 	bl	8001e68 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b54:	f7fd f988 	bl	8001e68 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b64      	cmp	r3, #100	; 0x64
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e1e7      	b.n	8004f36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b66:	4b6c      	ldr	r3, [pc, #432]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1f0      	bne.n	8004b54 <HAL_RCC_OscConfig+0xe8>
 8004b72:	e000      	b.n	8004b76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d063      	beq.n	8004c4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b82:	4b65      	ldr	r3, [pc, #404]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 030c 	and.w	r3, r3, #12
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00b      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b8e:	4b62      	ldr	r3, [pc, #392]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b96:	2b08      	cmp	r3, #8
 8004b98:	d11c      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b9a:	4b5f      	ldr	r3, [pc, #380]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d116      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ba6:	4b5c      	ldr	r3, [pc, #368]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d005      	beq.n	8004bbe <HAL_RCC_OscConfig+0x152>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d001      	beq.n	8004bbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e1bb      	b.n	8004f36 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bbe:	4b56      	ldr	r3, [pc, #344]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	4952      	ldr	r1, [pc, #328]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bd2:	e03a      	b.n	8004c4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d020      	beq.n	8004c1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bdc:	4b4f      	ldr	r3, [pc, #316]	; (8004d1c <HAL_RCC_OscConfig+0x2b0>)
 8004bde:	2201      	movs	r2, #1
 8004be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be2:	f7fd f941 	bl	8001e68 <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bea:	f7fd f93d 	bl	8001e68 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e19c      	b.n	8004f36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bfc:	4b46      	ldr	r3, [pc, #280]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0f0      	beq.n	8004bea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c08:	4b43      	ldr	r3, [pc, #268]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	00db      	lsls	r3, r3, #3
 8004c16:	4940      	ldr	r1, [pc, #256]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	600b      	str	r3, [r1, #0]
 8004c1c:	e015      	b.n	8004c4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c1e:	4b3f      	ldr	r3, [pc, #252]	; (8004d1c <HAL_RCC_OscConfig+0x2b0>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c24:	f7fd f920 	bl	8001e68 <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c2c:	f7fd f91c 	bl	8001e68 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e17b      	b.n	8004f36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c3e:	4b36      	ldr	r3, [pc, #216]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1f0      	bne.n	8004c2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d030      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d016      	beq.n	8004c8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c5e:	4b30      	ldr	r3, [pc, #192]	; (8004d20 <HAL_RCC_OscConfig+0x2b4>)
 8004c60:	2201      	movs	r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c64:	f7fd f900 	bl	8001e68 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c6c:	f7fd f8fc 	bl	8001e68 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e15b      	b.n	8004f36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c7e:	4b26      	ldr	r3, [pc, #152]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0f0      	beq.n	8004c6c <HAL_RCC_OscConfig+0x200>
 8004c8a:	e015      	b.n	8004cb8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c8c:	4b24      	ldr	r3, [pc, #144]	; (8004d20 <HAL_RCC_OscConfig+0x2b4>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c92:	f7fd f8e9 	bl	8001e68 <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c98:	e008      	b.n	8004cac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c9a:	f7fd f8e5 	bl	8001e68 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e144      	b.n	8004f36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cac:	4b1a      	ldr	r3, [pc, #104]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1f0      	bne.n	8004c9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 80a0 	beq.w	8004e06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cca:	4b13      	ldr	r3, [pc, #76]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10f      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60bb      	str	r3, [r7, #8]
 8004cda:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	4a0e      	ldr	r2, [pc, #56]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ce6:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <HAL_RCC_OscConfig+0x2ac>)
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cee:	60bb      	str	r3, [r7, #8]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <HAL_RCC_OscConfig+0x2b8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d121      	bne.n	8004d46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d02:	4b08      	ldr	r3, [pc, #32]	; (8004d24 <HAL_RCC_OscConfig+0x2b8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a07      	ldr	r2, [pc, #28]	; (8004d24 <HAL_RCC_OscConfig+0x2b8>)
 8004d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d0e:	f7fd f8ab 	bl	8001e68 <HAL_GetTick>
 8004d12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d14:	e011      	b.n	8004d3a <HAL_RCC_OscConfig+0x2ce>
 8004d16:	bf00      	nop
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	42470000 	.word	0x42470000
 8004d20:	42470e80 	.word	0x42470e80
 8004d24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d28:	f7fd f89e 	bl	8001e68 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e0fd      	b.n	8004f36 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d3a:	4b81      	ldr	r3, [pc, #516]	; (8004f40 <HAL_RCC_OscConfig+0x4d4>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d106      	bne.n	8004d5c <HAL_RCC_OscConfig+0x2f0>
 8004d4e:	4b7d      	ldr	r3, [pc, #500]	; (8004f44 <HAL_RCC_OscConfig+0x4d8>)
 8004d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d52:	4a7c      	ldr	r2, [pc, #496]	; (8004f44 <HAL_RCC_OscConfig+0x4d8>)
 8004d54:	f043 0301 	orr.w	r3, r3, #1
 8004d58:	6713      	str	r3, [r2, #112]	; 0x70
 8004d5a:	e01c      	b.n	8004d96 <HAL_RCC_OscConfig+0x32a>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	2b05      	cmp	r3, #5
 8004d62:	d10c      	bne.n	8004d7e <HAL_RCC_OscConfig+0x312>
 8004d64:	4b77      	ldr	r3, [pc, #476]	; (8004f44 <HAL_RCC_OscConfig+0x4d8>)
 8004d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d68:	4a76      	ldr	r2, [pc, #472]	; (8004f44 <HAL_RCC_OscConfig+0x4d8>)
 8004d6a:	f043 0304 	orr.w	r3, r3, #4
 8004d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d70:	4b74      	ldr	r3, [pc, #464]	; (8004f44 <HAL_RCC_OscConfig+0x4d8>)
 8004d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d74:	4a73      	ldr	r2, [pc, #460]	; (8004f44 <HAL_RCC_OscConfig+0x4d8>)
 8004d76:	f043 0301 	orr.w	r3, r3, #1
 8004d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d7c:	e00b      	b.n	8004d96 <HAL_RCC_OscConfig+0x32a>
 8004d7e:	4b71      	ldr	r3, [pc, #452]	; (8004f44 <HAL_RCC_OscConfig+0x4d8>)
 8004d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d82:	4a70      	ldr	r2, [pc, #448]	; (8004f44 <HAL_RCC_OscConfig+0x4d8>)
 8004d84:	f023 0301 	bic.w	r3, r3, #1
 8004d88:	6713      	str	r3, [r2, #112]	; 0x70
 8004d8a:	4b6e      	ldr	r3, [pc, #440]	; (8004f44 <HAL_RCC_OscConfig+0x4d8>)
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8e:	4a6d      	ldr	r2, [pc, #436]	; (8004f44 <HAL_RCC_OscConfig+0x4d8>)
 8004d90:	f023 0304 	bic.w	r3, r3, #4
 8004d94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d015      	beq.n	8004dca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9e:	f7fd f863 	bl	8001e68 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da4:	e00a      	b.n	8004dbc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004da6:	f7fd f85f 	bl	8001e68 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e0bc      	b.n	8004f36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dbc:	4b61      	ldr	r3, [pc, #388]	; (8004f44 <HAL_RCC_OscConfig+0x4d8>)
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0ee      	beq.n	8004da6 <HAL_RCC_OscConfig+0x33a>
 8004dc8:	e014      	b.n	8004df4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dca:	f7fd f84d 	bl	8001e68 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dd0:	e00a      	b.n	8004de8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dd2:	f7fd f849 	bl	8001e68 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e0a6      	b.n	8004f36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004de8:	4b56      	ldr	r3, [pc, #344]	; (8004f44 <HAL_RCC_OscConfig+0x4d8>)
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1ee      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004df4:	7dfb      	ldrb	r3, [r7, #23]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d105      	bne.n	8004e06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dfa:	4b52      	ldr	r3, [pc, #328]	; (8004f44 <HAL_RCC_OscConfig+0x4d8>)
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	4a51      	ldr	r2, [pc, #324]	; (8004f44 <HAL_RCC_OscConfig+0x4d8>)
 8004e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 8092 	beq.w	8004f34 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e10:	4b4c      	ldr	r3, [pc, #304]	; (8004f44 <HAL_RCC_OscConfig+0x4d8>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 030c 	and.w	r3, r3, #12
 8004e18:	2b08      	cmp	r3, #8
 8004e1a:	d05c      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d141      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e24:	4b48      	ldr	r3, [pc, #288]	; (8004f48 <HAL_RCC_OscConfig+0x4dc>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2a:	f7fd f81d 	bl	8001e68 <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e32:	f7fd f819 	bl	8001e68 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e078      	b.n	8004f36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e44:	4b3f      	ldr	r3, [pc, #252]	; (8004f44 <HAL_RCC_OscConfig+0x4d8>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1f0      	bne.n	8004e32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	69da      	ldr	r2, [r3, #28]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	019b      	lsls	r3, r3, #6
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e66:	085b      	lsrs	r3, r3, #1
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	041b      	lsls	r3, r3, #16
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e72:	061b      	lsls	r3, r3, #24
 8004e74:	4933      	ldr	r1, [pc, #204]	; (8004f44 <HAL_RCC_OscConfig+0x4d8>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e7a:	4b33      	ldr	r3, [pc, #204]	; (8004f48 <HAL_RCC_OscConfig+0x4dc>)
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e80:	f7fc fff2 	bl	8001e68 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e88:	f7fc ffee 	bl	8001e68 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e04d      	b.n	8004f36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e9a:	4b2a      	ldr	r3, [pc, #168]	; (8004f44 <HAL_RCC_OscConfig+0x4d8>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCC_OscConfig+0x41c>
 8004ea6:	e045      	b.n	8004f34 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea8:	4b27      	ldr	r3, [pc, #156]	; (8004f48 <HAL_RCC_OscConfig+0x4dc>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eae:	f7fc ffdb 	bl	8001e68 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eb6:	f7fc ffd7 	bl	8001e68 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e036      	b.n	8004f36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ec8:	4b1e      	ldr	r3, [pc, #120]	; (8004f44 <HAL_RCC_OscConfig+0x4d8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1f0      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x44a>
 8004ed4:	e02e      	b.n	8004f34 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d101      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e029      	b.n	8004f36 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ee2:	4b18      	ldr	r3, [pc, #96]	; (8004f44 <HAL_RCC_OscConfig+0x4d8>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d11c      	bne.n	8004f30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d115      	bne.n	8004f30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d10d      	bne.n	8004f30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d106      	bne.n	8004f30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d001      	beq.n	8004f34 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e000      	b.n	8004f36 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	40007000 	.word	0x40007000
 8004f44:	40023800 	.word	0x40023800
 8004f48:	42470060 	.word	0x42470060

08004f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e0cc      	b.n	80050fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f60:	4b68      	ldr	r3, [pc, #416]	; (8005104 <HAL_RCC_ClockConfig+0x1b8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 030f 	and.w	r3, r3, #15
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d90c      	bls.n	8004f88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f6e:	4b65      	ldr	r3, [pc, #404]	; (8005104 <HAL_RCC_ClockConfig+0x1b8>)
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	b2d2      	uxtb	r2, r2
 8004f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f76:	4b63      	ldr	r3, [pc, #396]	; (8005104 <HAL_RCC_ClockConfig+0x1b8>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d001      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e0b8      	b.n	80050fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d020      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fa0:	4b59      	ldr	r3, [pc, #356]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	4a58      	ldr	r2, [pc, #352]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004faa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d005      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fb8:	4b53      	ldr	r3, [pc, #332]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	4a52      	ldr	r2, [pc, #328]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 8004fbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fc4:	4b50      	ldr	r3, [pc, #320]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	494d      	ldr	r1, [pc, #308]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d044      	beq.n	800506c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d107      	bne.n	8004ffa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fea:	4b47      	ldr	r3, [pc, #284]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d119      	bne.n	800502a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e07f      	b.n	80050fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d003      	beq.n	800500a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005006:	2b03      	cmp	r3, #3
 8005008:	d107      	bne.n	800501a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800500a:	4b3f      	ldr	r3, [pc, #252]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d109      	bne.n	800502a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e06f      	b.n	80050fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800501a:	4b3b      	ldr	r3, [pc, #236]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e067      	b.n	80050fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800502a:	4b37      	ldr	r3, [pc, #220]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f023 0203 	bic.w	r2, r3, #3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	4934      	ldr	r1, [pc, #208]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 8005038:	4313      	orrs	r3, r2
 800503a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800503c:	f7fc ff14 	bl	8001e68 <HAL_GetTick>
 8005040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005042:	e00a      	b.n	800505a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005044:	f7fc ff10 	bl	8001e68 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005052:	4293      	cmp	r3, r2
 8005054:	d901      	bls.n	800505a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e04f      	b.n	80050fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800505a:	4b2b      	ldr	r3, [pc, #172]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 020c 	and.w	r2, r3, #12
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	429a      	cmp	r2, r3
 800506a:	d1eb      	bne.n	8005044 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800506c:	4b25      	ldr	r3, [pc, #148]	; (8005104 <HAL_RCC_ClockConfig+0x1b8>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 030f 	and.w	r3, r3, #15
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d20c      	bcs.n	8005094 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800507a:	4b22      	ldr	r3, [pc, #136]	; (8005104 <HAL_RCC_ClockConfig+0x1b8>)
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005082:	4b20      	ldr	r3, [pc, #128]	; (8005104 <HAL_RCC_ClockConfig+0x1b8>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	429a      	cmp	r2, r3
 800508e:	d001      	beq.n	8005094 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e032      	b.n	80050fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b00      	cmp	r3, #0
 800509e:	d008      	beq.n	80050b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050a0:	4b19      	ldr	r3, [pc, #100]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	4916      	ldr	r1, [pc, #88]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d009      	beq.n	80050d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050be:	4b12      	ldr	r3, [pc, #72]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	490e      	ldr	r1, [pc, #56]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050d2:	f000 f821 	bl	8005118 <HAL_RCC_GetSysClockFreq>
 80050d6:	4601      	mov	r1, r0
 80050d8:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	091b      	lsrs	r3, r3, #4
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	4a0a      	ldr	r2, [pc, #40]	; (800510c <HAL_RCC_ClockConfig+0x1c0>)
 80050e4:	5cd3      	ldrb	r3, [r2, r3]
 80050e6:	fa21 f303 	lsr.w	r3, r1, r3
 80050ea:	4a09      	ldr	r2, [pc, #36]	; (8005110 <HAL_RCC_ClockConfig+0x1c4>)
 80050ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050ee:	4b09      	ldr	r3, [pc, #36]	; (8005114 <HAL_RCC_ClockConfig+0x1c8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fc fd7a 	bl	8001bec <HAL_InitTick>

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	40023c00 	.word	0x40023c00
 8005108:	40023800 	.word	0x40023800
 800510c:	0800d760 	.word	0x0800d760
 8005110:	20000000 	.word	0x20000000
 8005114:	20000004 	.word	0x20000004

08005118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800511e:	2300      	movs	r3, #0
 8005120:	607b      	str	r3, [r7, #4]
 8005122:	2300      	movs	r3, #0
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	2300      	movs	r3, #0
 8005128:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800512e:	4b63      	ldr	r3, [pc, #396]	; (80052bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 030c 	and.w	r3, r3, #12
 8005136:	2b04      	cmp	r3, #4
 8005138:	d007      	beq.n	800514a <HAL_RCC_GetSysClockFreq+0x32>
 800513a:	2b08      	cmp	r3, #8
 800513c:	d008      	beq.n	8005150 <HAL_RCC_GetSysClockFreq+0x38>
 800513e:	2b00      	cmp	r3, #0
 8005140:	f040 80b4 	bne.w	80052ac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005144:	4b5e      	ldr	r3, [pc, #376]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005146:	60bb      	str	r3, [r7, #8]
       break;
 8005148:	e0b3      	b.n	80052b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800514a:	4b5e      	ldr	r3, [pc, #376]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800514c:	60bb      	str	r3, [r7, #8]
      break;
 800514e:	e0b0      	b.n	80052b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005150:	4b5a      	ldr	r3, [pc, #360]	; (80052bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005158:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800515a:	4b58      	ldr	r3, [pc, #352]	; (80052bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d04a      	beq.n	80051fc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005166:	4b55      	ldr	r3, [pc, #340]	; (80052bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	099b      	lsrs	r3, r3, #6
 800516c:	f04f 0400 	mov.w	r4, #0
 8005170:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	ea03 0501 	and.w	r5, r3, r1
 800517c:	ea04 0602 	and.w	r6, r4, r2
 8005180:	4629      	mov	r1, r5
 8005182:	4632      	mov	r2, r6
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	f04f 0400 	mov.w	r4, #0
 800518c:	0154      	lsls	r4, r2, #5
 800518e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005192:	014b      	lsls	r3, r1, #5
 8005194:	4619      	mov	r1, r3
 8005196:	4622      	mov	r2, r4
 8005198:	1b49      	subs	r1, r1, r5
 800519a:	eb62 0206 	sbc.w	r2, r2, r6
 800519e:	f04f 0300 	mov.w	r3, #0
 80051a2:	f04f 0400 	mov.w	r4, #0
 80051a6:	0194      	lsls	r4, r2, #6
 80051a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80051ac:	018b      	lsls	r3, r1, #6
 80051ae:	1a5b      	subs	r3, r3, r1
 80051b0:	eb64 0402 	sbc.w	r4, r4, r2
 80051b4:	f04f 0100 	mov.w	r1, #0
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	00e2      	lsls	r2, r4, #3
 80051be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80051c2:	00d9      	lsls	r1, r3, #3
 80051c4:	460b      	mov	r3, r1
 80051c6:	4614      	mov	r4, r2
 80051c8:	195b      	adds	r3, r3, r5
 80051ca:	eb44 0406 	adc.w	r4, r4, r6
 80051ce:	f04f 0100 	mov.w	r1, #0
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	0262      	lsls	r2, r4, #9
 80051d8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80051dc:	0259      	lsls	r1, r3, #9
 80051de:	460b      	mov	r3, r1
 80051e0:	4614      	mov	r4, r2
 80051e2:	4618      	mov	r0, r3
 80051e4:	4621      	mov	r1, r4
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f04f 0400 	mov.w	r4, #0
 80051ec:	461a      	mov	r2, r3
 80051ee:	4623      	mov	r3, r4
 80051f0:	f7fa fff6 	bl	80001e0 <__aeabi_uldivmod>
 80051f4:	4603      	mov	r3, r0
 80051f6:	460c      	mov	r4, r1
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	e049      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051fc:	4b2f      	ldr	r3, [pc, #188]	; (80052bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	099b      	lsrs	r3, r3, #6
 8005202:	f04f 0400 	mov.w	r4, #0
 8005206:	f240 11ff 	movw	r1, #511	; 0x1ff
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	ea03 0501 	and.w	r5, r3, r1
 8005212:	ea04 0602 	and.w	r6, r4, r2
 8005216:	4629      	mov	r1, r5
 8005218:	4632      	mov	r2, r6
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	f04f 0400 	mov.w	r4, #0
 8005222:	0154      	lsls	r4, r2, #5
 8005224:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005228:	014b      	lsls	r3, r1, #5
 800522a:	4619      	mov	r1, r3
 800522c:	4622      	mov	r2, r4
 800522e:	1b49      	subs	r1, r1, r5
 8005230:	eb62 0206 	sbc.w	r2, r2, r6
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	f04f 0400 	mov.w	r4, #0
 800523c:	0194      	lsls	r4, r2, #6
 800523e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005242:	018b      	lsls	r3, r1, #6
 8005244:	1a5b      	subs	r3, r3, r1
 8005246:	eb64 0402 	sbc.w	r4, r4, r2
 800524a:	f04f 0100 	mov.w	r1, #0
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	00e2      	lsls	r2, r4, #3
 8005254:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005258:	00d9      	lsls	r1, r3, #3
 800525a:	460b      	mov	r3, r1
 800525c:	4614      	mov	r4, r2
 800525e:	195b      	adds	r3, r3, r5
 8005260:	eb44 0406 	adc.w	r4, r4, r6
 8005264:	f04f 0100 	mov.w	r1, #0
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	02a2      	lsls	r2, r4, #10
 800526e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005272:	0299      	lsls	r1, r3, #10
 8005274:	460b      	mov	r3, r1
 8005276:	4614      	mov	r4, r2
 8005278:	4618      	mov	r0, r3
 800527a:	4621      	mov	r1, r4
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f04f 0400 	mov.w	r4, #0
 8005282:	461a      	mov	r2, r3
 8005284:	4623      	mov	r3, r4
 8005286:	f7fa ffab 	bl	80001e0 <__aeabi_uldivmod>
 800528a:	4603      	mov	r3, r0
 800528c:	460c      	mov	r4, r1
 800528e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005290:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	0c1b      	lsrs	r3, r3, #16
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	3301      	adds	r3, #1
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a8:	60bb      	str	r3, [r7, #8]
      break;
 80052aa:	e002      	b.n	80052b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052ac:	4b04      	ldr	r3, [pc, #16]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80052ae:	60bb      	str	r3, [r7, #8]
      break;
 80052b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052b2:	68bb      	ldr	r3, [r7, #8]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052bc:	40023800 	.word	0x40023800
 80052c0:	00f42400 	.word	0x00f42400
 80052c4:	007a1200 	.word	0x007a1200

080052c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052cc:	4b03      	ldr	r3, [pc, #12]	; (80052dc <HAL_RCC_GetHCLKFreq+0x14>)
 80052ce:	681b      	ldr	r3, [r3, #0]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	20000000 	.word	0x20000000

080052e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052e4:	f7ff fff0 	bl	80052c8 <HAL_RCC_GetHCLKFreq>
 80052e8:	4601      	mov	r1, r0
 80052ea:	4b05      	ldr	r3, [pc, #20]	; (8005300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	0a9b      	lsrs	r3, r3, #10
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	4a03      	ldr	r2, [pc, #12]	; (8005304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052f6:	5cd3      	ldrb	r3, [r2, r3]
 80052f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40023800 	.word	0x40023800
 8005304:	0800d770 	.word	0x0800d770

08005308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800530c:	f7ff ffdc 	bl	80052c8 <HAL_RCC_GetHCLKFreq>
 8005310:	4601      	mov	r1, r0
 8005312:	4b05      	ldr	r3, [pc, #20]	; (8005328 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	0b5b      	lsrs	r3, r3, #13
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	4a03      	ldr	r2, [pc, #12]	; (800532c <HAL_RCC_GetPCLK2Freq+0x24>)
 800531e:	5cd3      	ldrb	r3, [r2, r3]
 8005320:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005324:	4618      	mov	r0, r3
 8005326:	bd80      	pop	{r7, pc}
 8005328:	40023800 	.word	0x40023800
 800532c:	0800d770 	.word	0x0800d770

08005330 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	220f      	movs	r2, #15
 800533e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005340:	4b12      	ldr	r3, [pc, #72]	; (800538c <HAL_RCC_GetClockConfig+0x5c>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f003 0203 	and.w	r2, r3, #3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800534c:	4b0f      	ldr	r3, [pc, #60]	; (800538c <HAL_RCC_GetClockConfig+0x5c>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005358:	4b0c      	ldr	r3, [pc, #48]	; (800538c <HAL_RCC_GetClockConfig+0x5c>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005364:	4b09      	ldr	r3, [pc, #36]	; (800538c <HAL_RCC_GetClockConfig+0x5c>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	08db      	lsrs	r3, r3, #3
 800536a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005372:	4b07      	ldr	r3, [pc, #28]	; (8005390 <HAL_RCC_GetClockConfig+0x60>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 020f 	and.w	r2, r3, #15
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	601a      	str	r2, [r3, #0]
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40023800 	.word	0x40023800
 8005390:	40023c00 	.word	0x40023c00

08005394 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d105      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d035      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80053bc:	4b62      	ldr	r3, [pc, #392]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053c2:	f7fc fd51 	bl	8001e68 <HAL_GetTick>
 80053c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053c8:	e008      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80053ca:	f7fc fd4d 	bl	8001e68 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d901      	bls.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e0b0      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053dc:	4b5b      	ldr	r3, [pc, #364]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1f0      	bne.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	019a      	lsls	r2, r3, #6
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	071b      	lsls	r3, r3, #28
 80053f4:	4955      	ldr	r1, [pc, #340]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053fc:	4b52      	ldr	r3, [pc, #328]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80053fe:	2201      	movs	r2, #1
 8005400:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005402:	f7fc fd31 	bl	8001e68 <HAL_GetTick>
 8005406:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005408:	e008      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800540a:	f7fc fd2d 	bl	8001e68 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e090      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800541c:	4b4b      	ldr	r3, [pc, #300]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0f0      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 8083 	beq.w	800553c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005436:	2300      	movs	r3, #0
 8005438:	60fb      	str	r3, [r7, #12]
 800543a:	4b44      	ldr	r3, [pc, #272]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	4a43      	ldr	r2, [pc, #268]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005444:	6413      	str	r3, [r2, #64]	; 0x40
 8005446:	4b41      	ldr	r3, [pc, #260]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005452:	4b3f      	ldr	r3, [pc, #252]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a3e      	ldr	r2, [pc, #248]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800545c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800545e:	f7fc fd03 	bl	8001e68 <HAL_GetTick>
 8005462:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005464:	e008      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005466:	f7fc fcff 	bl	8001e68 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d901      	bls.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e062      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005478:	4b35      	ldr	r3, [pc, #212]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0f0      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005484:	4b31      	ldr	r3, [pc, #196]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800548c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d02f      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d028      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054a2:	4b2a      	ldr	r3, [pc, #168]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054ac:	4b29      	ldr	r3, [pc, #164]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80054ae:	2201      	movs	r2, #1
 80054b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054b2:	4b28      	ldr	r3, [pc, #160]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80054b8:	4a24      	ldr	r2, [pc, #144]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80054be:	4b23      	ldr	r3, [pc, #140]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d114      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80054ca:	f7fc fccd 	bl	8001e68 <HAL_GetTick>
 80054ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054d0:	e00a      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054d2:	f7fc fcc9 	bl	8001e68 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d901      	bls.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e02a      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054e8:	4b18      	ldr	r3, [pc, #96]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0ee      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005500:	d10d      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005502:	4b12      	ldr	r3, [pc, #72]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005516:	490d      	ldr	r1, [pc, #52]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005518:	4313      	orrs	r3, r2
 800551a:	608b      	str	r3, [r1, #8]
 800551c:	e005      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800551e:	4b0b      	ldr	r3, [pc, #44]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	4a0a      	ldr	r2, [pc, #40]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005524:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005528:	6093      	str	r3, [r2, #8]
 800552a:	4b08      	ldr	r3, [pc, #32]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800552c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005536:	4905      	ldr	r1, [pc, #20]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005538:	4313      	orrs	r3, r2
 800553a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	42470068 	.word	0x42470068
 800554c:	40023800 	.word	0x40023800
 8005550:	40007000 	.word	0x40007000
 8005554:	42470e40 	.word	0x42470e40

08005558 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005558:	b480      	push	{r7}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d13d      	bne.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005576:	4b22      	ldr	r3, [pc, #136]	; (8005600 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800557e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d004      	beq.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005586:	2b01      	cmp	r3, #1
 8005588:	d12f      	bne.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800558a:	4b1e      	ldr	r3, [pc, #120]	; (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800558c:	617b      	str	r3, [r7, #20]
          break;
 800558e:	e02f      	b.n	80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005590:	4b1b      	ldr	r3, [pc, #108]	; (8005600 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005598:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800559c:	d108      	bne.n	80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800559e:	4b18      	ldr	r3, [pc, #96]	; (8005600 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055a6:	4a18      	ldr	r2, [pc, #96]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80055a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ac:	613b      	str	r3, [r7, #16]
 80055ae:	e007      	b.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80055b0:	4b13      	ldr	r3, [pc, #76]	; (8005600 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055b8:	4a14      	ldr	r2, [pc, #80]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80055ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80055be:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80055c0:	4b0f      	ldr	r3, [pc, #60]	; (8005600 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80055c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055c6:	099b      	lsrs	r3, r3, #6
 80055c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	fb02 f303 	mul.w	r3, r2, r3
 80055d2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80055d4:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80055d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055da:	0f1b      	lsrs	r3, r3, #28
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e6:	617b      	str	r3, [r7, #20]
          break;
 80055e8:	e002      	b.n	80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80055ea:	2300      	movs	r3, #0
 80055ec:	617b      	str	r3, [r7, #20]
          break;
 80055ee:	bf00      	nop
        }
      }
      break;
 80055f0:	bf00      	nop
    }
  }
  return frequency;
 80055f2:	697b      	ldr	r3, [r7, #20]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	371c      	adds	r7, #28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	40023800 	.word	0x40023800
 8005604:	00bb8000 	.word	0x00bb8000
 8005608:	007a1200 	.word	0x007a1200
 800560c:	00f42400 	.word	0x00f42400

08005610 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e056      	b.n	80056d0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b00      	cmp	r3, #0
 8005632:	d106      	bne.n	8005642 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7fc fa3d 	bl	8001abc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2202      	movs	r2, #2
 8005646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005658:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	431a      	orrs	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	431a      	orrs	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	ea42 0103 	orr.w	r1, r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	0c1b      	lsrs	r3, r3, #16
 80056a0:	f003 0104 	and.w	r1, r3, #4
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	69da      	ldr	r2, [r3, #28]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e01d      	b.n	8005726 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d106      	bne.n	8005704 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f815 	bl	800572e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3304      	adds	r3, #4
 8005714:	4619      	mov	r1, r3
 8005716:	4610      	mov	r0, r2
 8005718:	f000 f968 	bl	80059ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005742:	b480      	push	{r7}
 8005744:	b085      	sub	sp, #20
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f042 0201 	orr.w	r2, r2, #1
 8005758:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b06      	cmp	r3, #6
 800576a:	d007      	beq.n	800577c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0201 	orr.w	r2, r2, #1
 800577a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b082      	sub	sp, #8
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b02      	cmp	r3, #2
 800579e:	d122      	bne.n	80057e6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d11b      	bne.n	80057e6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f06f 0202 	mvn.w	r2, #2
 80057b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	f003 0303 	and.w	r3, r3, #3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f8ee 	bl	80059ae <HAL_TIM_IC_CaptureCallback>
 80057d2:	e005      	b.n	80057e0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f8e0 	bl	800599a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f8f1 	bl	80059c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	f003 0304 	and.w	r3, r3, #4
 80057f0:	2b04      	cmp	r3, #4
 80057f2:	d122      	bne.n	800583a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d11b      	bne.n	800583a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f06f 0204 	mvn.w	r2, #4
 800580a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800581c:	2b00      	cmp	r3, #0
 800581e:	d003      	beq.n	8005828 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f8c4 	bl	80059ae <HAL_TIM_IC_CaptureCallback>
 8005826:	e005      	b.n	8005834 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f8b6 	bl	800599a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f8c7 	bl	80059c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	2b08      	cmp	r3, #8
 8005846:	d122      	bne.n	800588e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	2b08      	cmp	r3, #8
 8005854:	d11b      	bne.n	800588e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f06f 0208 	mvn.w	r2, #8
 800585e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2204      	movs	r2, #4
 8005864:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69db      	ldr	r3, [r3, #28]
 800586c:	f003 0303 	and.w	r3, r3, #3
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f89a 	bl	80059ae <HAL_TIM_IC_CaptureCallback>
 800587a:	e005      	b.n	8005888 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f88c 	bl	800599a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f89d 	bl	80059c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	f003 0310 	and.w	r3, r3, #16
 8005898:	2b10      	cmp	r3, #16
 800589a:	d122      	bne.n	80058e2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f003 0310 	and.w	r3, r3, #16
 80058a6:	2b10      	cmp	r3, #16
 80058a8:	d11b      	bne.n	80058e2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f06f 0210 	mvn.w	r2, #16
 80058b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2208      	movs	r2, #8
 80058b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69db      	ldr	r3, [r3, #28]
 80058c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f870 	bl	80059ae <HAL_TIM_IC_CaptureCallback>
 80058ce:	e005      	b.n	80058dc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f862 	bl	800599a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f873 	bl	80059c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d10e      	bne.n	800590e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d107      	bne.n	800590e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f06f 0201 	mvn.w	r2, #1
 8005906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7fb ffe9 	bl	80018e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005918:	2b80      	cmp	r3, #128	; 0x80
 800591a:	d10e      	bne.n	800593a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005926:	2b80      	cmp	r3, #128	; 0x80
 8005928:	d107      	bne.n	800593a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f903 	bl	8005b40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005944:	2b40      	cmp	r3, #64	; 0x40
 8005946:	d10e      	bne.n	8005966 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005952:	2b40      	cmp	r3, #64	; 0x40
 8005954:	d107      	bne.n	8005966 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800595e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f838 	bl	80059d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	f003 0320 	and.w	r3, r3, #32
 8005970:	2b20      	cmp	r3, #32
 8005972:	d10e      	bne.n	8005992 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f003 0320 	and.w	r3, r3, #32
 800597e:	2b20      	cmp	r3, #32
 8005980:	d107      	bne.n	8005992 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f06f 0220 	mvn.w	r2, #32
 800598a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f8cd 	bl	8005b2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005992:	bf00      	nop
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
	...

080059ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a40      	ldr	r2, [pc, #256]	; (8005b00 <TIM_Base_SetConfig+0x114>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d013      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0a:	d00f      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a3d      	ldr	r2, [pc, #244]	; (8005b04 <TIM_Base_SetConfig+0x118>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d00b      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a3c      	ldr	r2, [pc, #240]	; (8005b08 <TIM_Base_SetConfig+0x11c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d007      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a3b      	ldr	r2, [pc, #236]	; (8005b0c <TIM_Base_SetConfig+0x120>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d003      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a3a      	ldr	r2, [pc, #232]	; (8005b10 <TIM_Base_SetConfig+0x124>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d108      	bne.n	8005a3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a2f      	ldr	r2, [pc, #188]	; (8005b00 <TIM_Base_SetConfig+0x114>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d02b      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4c:	d027      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a2c      	ldr	r2, [pc, #176]	; (8005b04 <TIM_Base_SetConfig+0x118>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d023      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a2b      	ldr	r2, [pc, #172]	; (8005b08 <TIM_Base_SetConfig+0x11c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d01f      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a2a      	ldr	r2, [pc, #168]	; (8005b0c <TIM_Base_SetConfig+0x120>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d01b      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a29      	ldr	r2, [pc, #164]	; (8005b10 <TIM_Base_SetConfig+0x124>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d017      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a28      	ldr	r2, [pc, #160]	; (8005b14 <TIM_Base_SetConfig+0x128>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d013      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a27      	ldr	r2, [pc, #156]	; (8005b18 <TIM_Base_SetConfig+0x12c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d00f      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a26      	ldr	r2, [pc, #152]	; (8005b1c <TIM_Base_SetConfig+0x130>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00b      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a25      	ldr	r2, [pc, #148]	; (8005b20 <TIM_Base_SetConfig+0x134>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d007      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a24      	ldr	r2, [pc, #144]	; (8005b24 <TIM_Base_SetConfig+0x138>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d003      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a23      	ldr	r2, [pc, #140]	; (8005b28 <TIM_Base_SetConfig+0x13c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d108      	bne.n	8005ab0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a0a      	ldr	r2, [pc, #40]	; (8005b00 <TIM_Base_SetConfig+0x114>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d003      	beq.n	8005ae4 <TIM_Base_SetConfig+0xf8>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a0c      	ldr	r2, [pc, #48]	; (8005b10 <TIM_Base_SetConfig+0x124>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d103      	bne.n	8005aec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	615a      	str	r2, [r3, #20]
}
 8005af2:	bf00      	nop
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40010000 	.word	0x40010000
 8005b04:	40000400 	.word	0x40000400
 8005b08:	40000800 	.word	0x40000800
 8005b0c:	40000c00 	.word	0x40000c00
 8005b10:	40010400 	.word	0x40010400
 8005b14:	40014000 	.word	0x40014000
 8005b18:	40014400 	.word	0x40014400
 8005b1c:	40014800 	.word	0x40014800
 8005b20:	40001800 	.word	0x40001800
 8005b24:	40001c00 	.word	0x40001c00
 8005b28:	40002000 	.word	0x40002000

08005b2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e03f      	b.n	8005be6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d106      	bne.n	8005b80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7fb ffe6 	bl	8001b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2224      	movs	r2, #36	; 0x24
 8005b84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 fb4b 	bl	8006234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	691a      	ldr	r2, [r3, #16]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	695a      	ldr	r2, [r3, #20]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b088      	sub	sp, #32
 8005bf2:	af02      	add	r7, sp, #8
 8005bf4:	60f8      	str	r0, [r7, #12]
 8005bf6:	60b9      	str	r1, [r7, #8]
 8005bf8:	603b      	str	r3, [r7, #0]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b20      	cmp	r3, #32
 8005c0c:	f040 8083 	bne.w	8005d16 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <HAL_UART_Transmit+0x2e>
 8005c16:	88fb      	ldrh	r3, [r7, #6]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e07b      	b.n	8005d18 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d101      	bne.n	8005c2e <HAL_UART_Transmit+0x40>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	e074      	b.n	8005d18 <HAL_UART_Transmit+0x12a>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2221      	movs	r2, #33	; 0x21
 8005c40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005c44:	f7fc f910 	bl	8001e68 <HAL_GetTick>
 8005c48:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	88fa      	ldrh	r2, [r7, #6]
 8005c4e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	88fa      	ldrh	r2, [r7, #6]
 8005c54:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005c5e:	e042      	b.n	8005ce6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c76:	d122      	bne.n	8005cbe <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	2180      	movs	r1, #128	; 0x80
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 f96a 	bl	8005f5c <UART_WaitOnFlagUntilTimeout>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e042      	b.n	8005d18 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ca4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d103      	bne.n	8005cb6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	3302      	adds	r3, #2
 8005cb2:	60bb      	str	r3, [r7, #8]
 8005cb4:	e017      	b.n	8005ce6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	60bb      	str	r3, [r7, #8]
 8005cbc:	e013      	b.n	8005ce6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	2180      	movs	r1, #128	; 0x80
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 f947 	bl	8005f5c <UART_WaitOnFlagUntilTimeout>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e01f      	b.n	8005d18 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	60ba      	str	r2, [r7, #8]
 8005cde:	781a      	ldrb	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1b7      	bne.n	8005c60 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	2140      	movs	r1, #64	; 0x40
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 f92e 	bl	8005f5c <UART_WaitOnFlagUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e006      	b.n	8005d18 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	e000      	b.n	8005d18 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005d16:	2302      	movs	r3, #2
  }
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3718      	adds	r7, #24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	f003 030f 	and.w	r3, r3, #15
 8005d4e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10d      	bne.n	8005d72 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	f003 0320 	and.w	r3, r3, #32
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d008      	beq.n	8005d72 <HAL_UART_IRQHandler+0x52>
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	f003 0320 	and.w	r3, r3, #32
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f9e0 	bl	8006130 <UART_Receive_IT>
      return;
 8005d70:	e0d1      	b.n	8005f16 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f000 80b0 	beq.w	8005eda <HAL_UART_IRQHandler+0x1ba>
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d105      	bne.n	8005d90 <HAL_UART_IRQHandler+0x70>
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 80a5 	beq.w	8005eda <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <HAL_UART_IRQHandler+0x90>
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d005      	beq.n	8005db0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da8:	f043 0201 	orr.w	r2, r3, #1
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	f003 0304 	and.w	r3, r3, #4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <HAL_UART_IRQHandler+0xb0>
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d005      	beq.n	8005dd0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc8:	f043 0202 	orr.w	r2, r3, #2
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <HAL_UART_IRQHandler+0xd0>
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d005      	beq.n	8005df0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de8:	f043 0204 	orr.w	r2, r3, #4
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	f003 0308 	and.w	r3, r3, #8
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00f      	beq.n	8005e1a <HAL_UART_IRQHandler+0xfa>
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	f003 0320 	and.w	r3, r3, #32
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d104      	bne.n	8005e0e <HAL_UART_IRQHandler+0xee>
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d005      	beq.n	8005e1a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e12:	f043 0208 	orr.w	r2, r3, #8
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d078      	beq.n	8005f14 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	f003 0320 	and.w	r3, r3, #32
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d007      	beq.n	8005e3c <HAL_UART_IRQHandler+0x11c>
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f97a 	bl	8006130 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e46:	2b40      	cmp	r3, #64	; 0x40
 8005e48:	bf0c      	ite	eq
 8005e4a:	2301      	moveq	r3, #1
 8005e4c:	2300      	movne	r3, #0
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e56:	f003 0308 	and.w	r3, r3, #8
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d102      	bne.n	8005e64 <HAL_UART_IRQHandler+0x144>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d031      	beq.n	8005ec8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f8c3 	bl	8005ff0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e74:	2b40      	cmp	r3, #64	; 0x40
 8005e76:	d123      	bne.n	8005ec0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695a      	ldr	r2, [r3, #20]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e86:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d013      	beq.n	8005eb8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e94:	4a21      	ldr	r2, [pc, #132]	; (8005f1c <HAL_UART_IRQHandler+0x1fc>)
 8005e96:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fc f923 	bl	80020e8 <HAL_DMA_Abort_IT>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d016      	beq.n	8005ed6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb6:	e00e      	b.n	8005ed6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f845 	bl	8005f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ebe:	e00a      	b.n	8005ed6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f841 	bl	8005f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec6:	e006      	b.n	8005ed6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f83d 	bl	8005f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005ed4:	e01e      	b.n	8005f14 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed6:	bf00      	nop
    return;
 8005ed8:	e01c      	b.n	8005f14 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d008      	beq.n	8005ef6 <HAL_UART_IRQHandler+0x1d6>
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f8b0 	bl	8006054 <UART_Transmit_IT>
    return;
 8005ef4:	e00f      	b.n	8005f16 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00a      	beq.n	8005f16 <HAL_UART_IRQHandler+0x1f6>
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d005      	beq.n	8005f16 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f8f8 	bl	8006100 <UART_EndTransmit_IT>
    return;
 8005f10:	bf00      	nop
 8005f12:	e000      	b.n	8005f16 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005f14:	bf00      	nop
  }
}
 8005f16:	3720      	adds	r7, #32
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	0800602d 	.word	0x0800602d

08005f20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	603b      	str	r3, [r7, #0]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f6c:	e02c      	b.n	8005fc8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f74:	d028      	beq.n	8005fc8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d007      	beq.n	8005f8c <UART_WaitOnFlagUntilTimeout+0x30>
 8005f7c:	f7fb ff74 	bl	8001e68 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d21d      	bcs.n	8005fc8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f9a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	695a      	ldr	r2, [r3, #20]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0201 	bic.w	r2, r2, #1
 8005faa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e00f      	b.n	8005fe8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	bf0c      	ite	eq
 8005fd8:	2301      	moveq	r3, #1
 8005fda:	2300      	movne	r3, #0
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	461a      	mov	r2, r3
 8005fe0:	79fb      	ldrb	r3, [r7, #7]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d0c3      	beq.n	8005f6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006006:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695a      	ldr	r2, [r3, #20]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 0201 	bic.w	r2, r2, #1
 8006016:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2220      	movs	r2, #32
 800601c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006038:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f7ff ff7e 	bl	8005f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800604c:	bf00      	nop
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b21      	cmp	r3, #33	; 0x21
 8006066:	d144      	bne.n	80060f2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006070:	d11a      	bne.n	80060a8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	461a      	mov	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006086:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d105      	bne.n	800609c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	1c9a      	adds	r2, r3, #2
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	621a      	str	r2, [r3, #32]
 800609a:	e00e      	b.n	80060ba <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	621a      	str	r2, [r3, #32]
 80060a6:	e008      	b.n	80060ba <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	1c59      	adds	r1, r3, #1
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	6211      	str	r1, [r2, #32]
 80060b2:	781a      	ldrb	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060be:	b29b      	uxth	r3, r3
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	4619      	mov	r1, r3
 80060c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10f      	bne.n	80060ee <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68da      	ldr	r2, [r3, #12]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060ee:	2300      	movs	r3, #0
 80060f0:	e000      	b.n	80060f4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80060f2:	2302      	movs	r3, #2
  }
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006116:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2220      	movs	r2, #32
 800611c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f7ff fefd 	bl	8005f20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b22      	cmp	r3, #34	; 0x22
 8006142:	d171      	bne.n	8006228 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800614c:	d123      	bne.n	8006196 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006152:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10e      	bne.n	800617a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	b29b      	uxth	r3, r3
 8006164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006168:	b29a      	uxth	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006172:	1c9a      	adds	r2, r3, #2
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	629a      	str	r2, [r3, #40]	; 0x28
 8006178:	e029      	b.n	80061ce <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	b29b      	uxth	r3, r3
 8006182:	b2db      	uxtb	r3, r3
 8006184:	b29a      	uxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	629a      	str	r2, [r3, #40]	; 0x28
 8006194:	e01b      	b.n	80061ce <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10a      	bne.n	80061b4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6858      	ldr	r0, [r3, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a8:	1c59      	adds	r1, r3, #1
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6291      	str	r1, [r2, #40]	; 0x28
 80061ae:	b2c2      	uxtb	r2, r0
 80061b0:	701a      	strb	r2, [r3, #0]
 80061b2:	e00c      	b.n	80061ce <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c0:	1c58      	adds	r0, r3, #1
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	6288      	str	r0, [r1, #40]	; 0x28
 80061c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061ca:	b2d2      	uxtb	r2, r2
 80061cc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	4619      	mov	r1, r3
 80061dc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d120      	bne.n	8006224 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 0220 	bic.w	r2, r2, #32
 80061f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68da      	ldr	r2, [r3, #12]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006200:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	695a      	ldr	r2, [r3, #20]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0201 	bic.w	r2, r2, #1
 8006210:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2220      	movs	r2, #32
 8006216:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7ff fe8a 	bl	8005f34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	e002      	b.n	800622a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006224:	2300      	movs	r3, #0
 8006226:	e000      	b.n	800622a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006228:	2302      	movs	r3, #2
  }
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
	...

08006234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006238:	b085      	sub	sp, #20
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68da      	ldr	r2, [r3, #12]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689a      	ldr	r2, [r3, #8]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	431a      	orrs	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	431a      	orrs	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	69db      	ldr	r3, [r3, #28]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006276:	f023 030c 	bic.w	r3, r3, #12
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	6812      	ldr	r2, [r2, #0]
 800627e:	68f9      	ldr	r1, [r7, #12]
 8006280:	430b      	orrs	r3, r1
 8006282:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699a      	ldr	r2, [r3, #24]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062a2:	f040 818b 	bne.w	80065bc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4ac1      	ldr	r2, [pc, #772]	; (80065b0 <UART_SetConfig+0x37c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d005      	beq.n	80062bc <UART_SetConfig+0x88>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4abf      	ldr	r2, [pc, #764]	; (80065b4 <UART_SetConfig+0x380>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	f040 80bd 	bne.w	8006436 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062bc:	f7ff f824 	bl	8005308 <HAL_RCC_GetPCLK2Freq>
 80062c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	461d      	mov	r5, r3
 80062c6:	f04f 0600 	mov.w	r6, #0
 80062ca:	46a8      	mov	r8, r5
 80062cc:	46b1      	mov	r9, r6
 80062ce:	eb18 0308 	adds.w	r3, r8, r8
 80062d2:	eb49 0409 	adc.w	r4, r9, r9
 80062d6:	4698      	mov	r8, r3
 80062d8:	46a1      	mov	r9, r4
 80062da:	eb18 0805 	adds.w	r8, r8, r5
 80062de:	eb49 0906 	adc.w	r9, r9, r6
 80062e2:	f04f 0100 	mov.w	r1, #0
 80062e6:	f04f 0200 	mov.w	r2, #0
 80062ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80062ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80062f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80062f6:	4688      	mov	r8, r1
 80062f8:	4691      	mov	r9, r2
 80062fa:	eb18 0005 	adds.w	r0, r8, r5
 80062fe:	eb49 0106 	adc.w	r1, r9, r6
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	461d      	mov	r5, r3
 8006308:	f04f 0600 	mov.w	r6, #0
 800630c:	196b      	adds	r3, r5, r5
 800630e:	eb46 0406 	adc.w	r4, r6, r6
 8006312:	461a      	mov	r2, r3
 8006314:	4623      	mov	r3, r4
 8006316:	f7f9 ff63 	bl	80001e0 <__aeabi_uldivmod>
 800631a:	4603      	mov	r3, r0
 800631c:	460c      	mov	r4, r1
 800631e:	461a      	mov	r2, r3
 8006320:	4ba5      	ldr	r3, [pc, #660]	; (80065b8 <UART_SetConfig+0x384>)
 8006322:	fba3 2302 	umull	r2, r3, r3, r2
 8006326:	095b      	lsrs	r3, r3, #5
 8006328:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	461d      	mov	r5, r3
 8006330:	f04f 0600 	mov.w	r6, #0
 8006334:	46a9      	mov	r9, r5
 8006336:	46b2      	mov	sl, r6
 8006338:	eb19 0309 	adds.w	r3, r9, r9
 800633c:	eb4a 040a 	adc.w	r4, sl, sl
 8006340:	4699      	mov	r9, r3
 8006342:	46a2      	mov	sl, r4
 8006344:	eb19 0905 	adds.w	r9, r9, r5
 8006348:	eb4a 0a06 	adc.w	sl, sl, r6
 800634c:	f04f 0100 	mov.w	r1, #0
 8006350:	f04f 0200 	mov.w	r2, #0
 8006354:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006358:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800635c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006360:	4689      	mov	r9, r1
 8006362:	4692      	mov	sl, r2
 8006364:	eb19 0005 	adds.w	r0, r9, r5
 8006368:	eb4a 0106 	adc.w	r1, sl, r6
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	461d      	mov	r5, r3
 8006372:	f04f 0600 	mov.w	r6, #0
 8006376:	196b      	adds	r3, r5, r5
 8006378:	eb46 0406 	adc.w	r4, r6, r6
 800637c:	461a      	mov	r2, r3
 800637e:	4623      	mov	r3, r4
 8006380:	f7f9 ff2e 	bl	80001e0 <__aeabi_uldivmod>
 8006384:	4603      	mov	r3, r0
 8006386:	460c      	mov	r4, r1
 8006388:	461a      	mov	r2, r3
 800638a:	4b8b      	ldr	r3, [pc, #556]	; (80065b8 <UART_SetConfig+0x384>)
 800638c:	fba3 1302 	umull	r1, r3, r3, r2
 8006390:	095b      	lsrs	r3, r3, #5
 8006392:	2164      	movs	r1, #100	; 0x64
 8006394:	fb01 f303 	mul.w	r3, r1, r3
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	3332      	adds	r3, #50	; 0x32
 800639e:	4a86      	ldr	r2, [pc, #536]	; (80065b8 <UART_SetConfig+0x384>)
 80063a0:	fba2 2303 	umull	r2, r3, r2, r3
 80063a4:	095b      	lsrs	r3, r3, #5
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063ac:	4498      	add	r8, r3
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	461d      	mov	r5, r3
 80063b2:	f04f 0600 	mov.w	r6, #0
 80063b6:	46a9      	mov	r9, r5
 80063b8:	46b2      	mov	sl, r6
 80063ba:	eb19 0309 	adds.w	r3, r9, r9
 80063be:	eb4a 040a 	adc.w	r4, sl, sl
 80063c2:	4699      	mov	r9, r3
 80063c4:	46a2      	mov	sl, r4
 80063c6:	eb19 0905 	adds.w	r9, r9, r5
 80063ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80063ce:	f04f 0100 	mov.w	r1, #0
 80063d2:	f04f 0200 	mov.w	r2, #0
 80063d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063e2:	4689      	mov	r9, r1
 80063e4:	4692      	mov	sl, r2
 80063e6:	eb19 0005 	adds.w	r0, r9, r5
 80063ea:	eb4a 0106 	adc.w	r1, sl, r6
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	461d      	mov	r5, r3
 80063f4:	f04f 0600 	mov.w	r6, #0
 80063f8:	196b      	adds	r3, r5, r5
 80063fa:	eb46 0406 	adc.w	r4, r6, r6
 80063fe:	461a      	mov	r2, r3
 8006400:	4623      	mov	r3, r4
 8006402:	f7f9 feed 	bl	80001e0 <__aeabi_uldivmod>
 8006406:	4603      	mov	r3, r0
 8006408:	460c      	mov	r4, r1
 800640a:	461a      	mov	r2, r3
 800640c:	4b6a      	ldr	r3, [pc, #424]	; (80065b8 <UART_SetConfig+0x384>)
 800640e:	fba3 1302 	umull	r1, r3, r3, r2
 8006412:	095b      	lsrs	r3, r3, #5
 8006414:	2164      	movs	r1, #100	; 0x64
 8006416:	fb01 f303 	mul.w	r3, r1, r3
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	00db      	lsls	r3, r3, #3
 800641e:	3332      	adds	r3, #50	; 0x32
 8006420:	4a65      	ldr	r2, [pc, #404]	; (80065b8 <UART_SetConfig+0x384>)
 8006422:	fba2 2303 	umull	r2, r3, r2, r3
 8006426:	095b      	lsrs	r3, r3, #5
 8006428:	f003 0207 	and.w	r2, r3, #7
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4442      	add	r2, r8
 8006432:	609a      	str	r2, [r3, #8]
 8006434:	e26f      	b.n	8006916 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006436:	f7fe ff53 	bl	80052e0 <HAL_RCC_GetPCLK1Freq>
 800643a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	461d      	mov	r5, r3
 8006440:	f04f 0600 	mov.w	r6, #0
 8006444:	46a8      	mov	r8, r5
 8006446:	46b1      	mov	r9, r6
 8006448:	eb18 0308 	adds.w	r3, r8, r8
 800644c:	eb49 0409 	adc.w	r4, r9, r9
 8006450:	4698      	mov	r8, r3
 8006452:	46a1      	mov	r9, r4
 8006454:	eb18 0805 	adds.w	r8, r8, r5
 8006458:	eb49 0906 	adc.w	r9, r9, r6
 800645c:	f04f 0100 	mov.w	r1, #0
 8006460:	f04f 0200 	mov.w	r2, #0
 8006464:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006468:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800646c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006470:	4688      	mov	r8, r1
 8006472:	4691      	mov	r9, r2
 8006474:	eb18 0005 	adds.w	r0, r8, r5
 8006478:	eb49 0106 	adc.w	r1, r9, r6
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	461d      	mov	r5, r3
 8006482:	f04f 0600 	mov.w	r6, #0
 8006486:	196b      	adds	r3, r5, r5
 8006488:	eb46 0406 	adc.w	r4, r6, r6
 800648c:	461a      	mov	r2, r3
 800648e:	4623      	mov	r3, r4
 8006490:	f7f9 fea6 	bl	80001e0 <__aeabi_uldivmod>
 8006494:	4603      	mov	r3, r0
 8006496:	460c      	mov	r4, r1
 8006498:	461a      	mov	r2, r3
 800649a:	4b47      	ldr	r3, [pc, #284]	; (80065b8 <UART_SetConfig+0x384>)
 800649c:	fba3 2302 	umull	r2, r3, r3, r2
 80064a0:	095b      	lsrs	r3, r3, #5
 80064a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	461d      	mov	r5, r3
 80064aa:	f04f 0600 	mov.w	r6, #0
 80064ae:	46a9      	mov	r9, r5
 80064b0:	46b2      	mov	sl, r6
 80064b2:	eb19 0309 	adds.w	r3, r9, r9
 80064b6:	eb4a 040a 	adc.w	r4, sl, sl
 80064ba:	4699      	mov	r9, r3
 80064bc:	46a2      	mov	sl, r4
 80064be:	eb19 0905 	adds.w	r9, r9, r5
 80064c2:	eb4a 0a06 	adc.w	sl, sl, r6
 80064c6:	f04f 0100 	mov.w	r1, #0
 80064ca:	f04f 0200 	mov.w	r2, #0
 80064ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064da:	4689      	mov	r9, r1
 80064dc:	4692      	mov	sl, r2
 80064de:	eb19 0005 	adds.w	r0, r9, r5
 80064e2:	eb4a 0106 	adc.w	r1, sl, r6
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	461d      	mov	r5, r3
 80064ec:	f04f 0600 	mov.w	r6, #0
 80064f0:	196b      	adds	r3, r5, r5
 80064f2:	eb46 0406 	adc.w	r4, r6, r6
 80064f6:	461a      	mov	r2, r3
 80064f8:	4623      	mov	r3, r4
 80064fa:	f7f9 fe71 	bl	80001e0 <__aeabi_uldivmod>
 80064fe:	4603      	mov	r3, r0
 8006500:	460c      	mov	r4, r1
 8006502:	461a      	mov	r2, r3
 8006504:	4b2c      	ldr	r3, [pc, #176]	; (80065b8 <UART_SetConfig+0x384>)
 8006506:	fba3 1302 	umull	r1, r3, r3, r2
 800650a:	095b      	lsrs	r3, r3, #5
 800650c:	2164      	movs	r1, #100	; 0x64
 800650e:	fb01 f303 	mul.w	r3, r1, r3
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	3332      	adds	r3, #50	; 0x32
 8006518:	4a27      	ldr	r2, [pc, #156]	; (80065b8 <UART_SetConfig+0x384>)
 800651a:	fba2 2303 	umull	r2, r3, r2, r3
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006526:	4498      	add	r8, r3
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	461d      	mov	r5, r3
 800652c:	f04f 0600 	mov.w	r6, #0
 8006530:	46a9      	mov	r9, r5
 8006532:	46b2      	mov	sl, r6
 8006534:	eb19 0309 	adds.w	r3, r9, r9
 8006538:	eb4a 040a 	adc.w	r4, sl, sl
 800653c:	4699      	mov	r9, r3
 800653e:	46a2      	mov	sl, r4
 8006540:	eb19 0905 	adds.w	r9, r9, r5
 8006544:	eb4a 0a06 	adc.w	sl, sl, r6
 8006548:	f04f 0100 	mov.w	r1, #0
 800654c:	f04f 0200 	mov.w	r2, #0
 8006550:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006554:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006558:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800655c:	4689      	mov	r9, r1
 800655e:	4692      	mov	sl, r2
 8006560:	eb19 0005 	adds.w	r0, r9, r5
 8006564:	eb4a 0106 	adc.w	r1, sl, r6
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	461d      	mov	r5, r3
 800656e:	f04f 0600 	mov.w	r6, #0
 8006572:	196b      	adds	r3, r5, r5
 8006574:	eb46 0406 	adc.w	r4, r6, r6
 8006578:	461a      	mov	r2, r3
 800657a:	4623      	mov	r3, r4
 800657c:	f7f9 fe30 	bl	80001e0 <__aeabi_uldivmod>
 8006580:	4603      	mov	r3, r0
 8006582:	460c      	mov	r4, r1
 8006584:	461a      	mov	r2, r3
 8006586:	4b0c      	ldr	r3, [pc, #48]	; (80065b8 <UART_SetConfig+0x384>)
 8006588:	fba3 1302 	umull	r1, r3, r3, r2
 800658c:	095b      	lsrs	r3, r3, #5
 800658e:	2164      	movs	r1, #100	; 0x64
 8006590:	fb01 f303 	mul.w	r3, r1, r3
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	3332      	adds	r3, #50	; 0x32
 800659a:	4a07      	ldr	r2, [pc, #28]	; (80065b8 <UART_SetConfig+0x384>)
 800659c:	fba2 2303 	umull	r2, r3, r2, r3
 80065a0:	095b      	lsrs	r3, r3, #5
 80065a2:	f003 0207 	and.w	r2, r3, #7
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4442      	add	r2, r8
 80065ac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80065ae:	e1b2      	b.n	8006916 <UART_SetConfig+0x6e2>
 80065b0:	40011000 	.word	0x40011000
 80065b4:	40011400 	.word	0x40011400
 80065b8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4ad7      	ldr	r2, [pc, #860]	; (8006920 <UART_SetConfig+0x6ec>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d005      	beq.n	80065d2 <UART_SetConfig+0x39e>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4ad6      	ldr	r2, [pc, #856]	; (8006924 <UART_SetConfig+0x6f0>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	f040 80d1 	bne.w	8006774 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80065d2:	f7fe fe99 	bl	8005308 <HAL_RCC_GetPCLK2Freq>
 80065d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	469a      	mov	sl, r3
 80065dc:	f04f 0b00 	mov.w	fp, #0
 80065e0:	46d0      	mov	r8, sl
 80065e2:	46d9      	mov	r9, fp
 80065e4:	eb18 0308 	adds.w	r3, r8, r8
 80065e8:	eb49 0409 	adc.w	r4, r9, r9
 80065ec:	4698      	mov	r8, r3
 80065ee:	46a1      	mov	r9, r4
 80065f0:	eb18 080a 	adds.w	r8, r8, sl
 80065f4:	eb49 090b 	adc.w	r9, r9, fp
 80065f8:	f04f 0100 	mov.w	r1, #0
 80065fc:	f04f 0200 	mov.w	r2, #0
 8006600:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006604:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006608:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800660c:	4688      	mov	r8, r1
 800660e:	4691      	mov	r9, r2
 8006610:	eb1a 0508 	adds.w	r5, sl, r8
 8006614:	eb4b 0609 	adc.w	r6, fp, r9
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	4619      	mov	r1, r3
 800661e:	f04f 0200 	mov.w	r2, #0
 8006622:	f04f 0300 	mov.w	r3, #0
 8006626:	f04f 0400 	mov.w	r4, #0
 800662a:	0094      	lsls	r4, r2, #2
 800662c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006630:	008b      	lsls	r3, r1, #2
 8006632:	461a      	mov	r2, r3
 8006634:	4623      	mov	r3, r4
 8006636:	4628      	mov	r0, r5
 8006638:	4631      	mov	r1, r6
 800663a:	f7f9 fdd1 	bl	80001e0 <__aeabi_uldivmod>
 800663e:	4603      	mov	r3, r0
 8006640:	460c      	mov	r4, r1
 8006642:	461a      	mov	r2, r3
 8006644:	4bb8      	ldr	r3, [pc, #736]	; (8006928 <UART_SetConfig+0x6f4>)
 8006646:	fba3 2302 	umull	r2, r3, r3, r2
 800664a:	095b      	lsrs	r3, r3, #5
 800664c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	469b      	mov	fp, r3
 8006654:	f04f 0c00 	mov.w	ip, #0
 8006658:	46d9      	mov	r9, fp
 800665a:	46e2      	mov	sl, ip
 800665c:	eb19 0309 	adds.w	r3, r9, r9
 8006660:	eb4a 040a 	adc.w	r4, sl, sl
 8006664:	4699      	mov	r9, r3
 8006666:	46a2      	mov	sl, r4
 8006668:	eb19 090b 	adds.w	r9, r9, fp
 800666c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006670:	f04f 0100 	mov.w	r1, #0
 8006674:	f04f 0200 	mov.w	r2, #0
 8006678:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800667c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006680:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006684:	4689      	mov	r9, r1
 8006686:	4692      	mov	sl, r2
 8006688:	eb1b 0509 	adds.w	r5, fp, r9
 800668c:	eb4c 060a 	adc.w	r6, ip, sl
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	4619      	mov	r1, r3
 8006696:	f04f 0200 	mov.w	r2, #0
 800669a:	f04f 0300 	mov.w	r3, #0
 800669e:	f04f 0400 	mov.w	r4, #0
 80066a2:	0094      	lsls	r4, r2, #2
 80066a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066a8:	008b      	lsls	r3, r1, #2
 80066aa:	461a      	mov	r2, r3
 80066ac:	4623      	mov	r3, r4
 80066ae:	4628      	mov	r0, r5
 80066b0:	4631      	mov	r1, r6
 80066b2:	f7f9 fd95 	bl	80001e0 <__aeabi_uldivmod>
 80066b6:	4603      	mov	r3, r0
 80066b8:	460c      	mov	r4, r1
 80066ba:	461a      	mov	r2, r3
 80066bc:	4b9a      	ldr	r3, [pc, #616]	; (8006928 <UART_SetConfig+0x6f4>)
 80066be:	fba3 1302 	umull	r1, r3, r3, r2
 80066c2:	095b      	lsrs	r3, r3, #5
 80066c4:	2164      	movs	r1, #100	; 0x64
 80066c6:	fb01 f303 	mul.w	r3, r1, r3
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	011b      	lsls	r3, r3, #4
 80066ce:	3332      	adds	r3, #50	; 0x32
 80066d0:	4a95      	ldr	r2, [pc, #596]	; (8006928 <UART_SetConfig+0x6f4>)
 80066d2:	fba2 2303 	umull	r2, r3, r2, r3
 80066d6:	095b      	lsrs	r3, r3, #5
 80066d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066dc:	4498      	add	r8, r3
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	469b      	mov	fp, r3
 80066e2:	f04f 0c00 	mov.w	ip, #0
 80066e6:	46d9      	mov	r9, fp
 80066e8:	46e2      	mov	sl, ip
 80066ea:	eb19 0309 	adds.w	r3, r9, r9
 80066ee:	eb4a 040a 	adc.w	r4, sl, sl
 80066f2:	4699      	mov	r9, r3
 80066f4:	46a2      	mov	sl, r4
 80066f6:	eb19 090b 	adds.w	r9, r9, fp
 80066fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80066fe:	f04f 0100 	mov.w	r1, #0
 8006702:	f04f 0200 	mov.w	r2, #0
 8006706:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800670a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800670e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006712:	4689      	mov	r9, r1
 8006714:	4692      	mov	sl, r2
 8006716:	eb1b 0509 	adds.w	r5, fp, r9
 800671a:	eb4c 060a 	adc.w	r6, ip, sl
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	4619      	mov	r1, r3
 8006724:	f04f 0200 	mov.w	r2, #0
 8006728:	f04f 0300 	mov.w	r3, #0
 800672c:	f04f 0400 	mov.w	r4, #0
 8006730:	0094      	lsls	r4, r2, #2
 8006732:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006736:	008b      	lsls	r3, r1, #2
 8006738:	461a      	mov	r2, r3
 800673a:	4623      	mov	r3, r4
 800673c:	4628      	mov	r0, r5
 800673e:	4631      	mov	r1, r6
 8006740:	f7f9 fd4e 	bl	80001e0 <__aeabi_uldivmod>
 8006744:	4603      	mov	r3, r0
 8006746:	460c      	mov	r4, r1
 8006748:	461a      	mov	r2, r3
 800674a:	4b77      	ldr	r3, [pc, #476]	; (8006928 <UART_SetConfig+0x6f4>)
 800674c:	fba3 1302 	umull	r1, r3, r3, r2
 8006750:	095b      	lsrs	r3, r3, #5
 8006752:	2164      	movs	r1, #100	; 0x64
 8006754:	fb01 f303 	mul.w	r3, r1, r3
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	011b      	lsls	r3, r3, #4
 800675c:	3332      	adds	r3, #50	; 0x32
 800675e:	4a72      	ldr	r2, [pc, #456]	; (8006928 <UART_SetConfig+0x6f4>)
 8006760:	fba2 2303 	umull	r2, r3, r2, r3
 8006764:	095b      	lsrs	r3, r3, #5
 8006766:	f003 020f 	and.w	r2, r3, #15
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4442      	add	r2, r8
 8006770:	609a      	str	r2, [r3, #8]
 8006772:	e0d0      	b.n	8006916 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006774:	f7fe fdb4 	bl	80052e0 <HAL_RCC_GetPCLK1Freq>
 8006778:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	469a      	mov	sl, r3
 800677e:	f04f 0b00 	mov.w	fp, #0
 8006782:	46d0      	mov	r8, sl
 8006784:	46d9      	mov	r9, fp
 8006786:	eb18 0308 	adds.w	r3, r8, r8
 800678a:	eb49 0409 	adc.w	r4, r9, r9
 800678e:	4698      	mov	r8, r3
 8006790:	46a1      	mov	r9, r4
 8006792:	eb18 080a 	adds.w	r8, r8, sl
 8006796:	eb49 090b 	adc.w	r9, r9, fp
 800679a:	f04f 0100 	mov.w	r1, #0
 800679e:	f04f 0200 	mov.w	r2, #0
 80067a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80067a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80067aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80067ae:	4688      	mov	r8, r1
 80067b0:	4691      	mov	r9, r2
 80067b2:	eb1a 0508 	adds.w	r5, sl, r8
 80067b6:	eb4b 0609 	adc.w	r6, fp, r9
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	4619      	mov	r1, r3
 80067c0:	f04f 0200 	mov.w	r2, #0
 80067c4:	f04f 0300 	mov.w	r3, #0
 80067c8:	f04f 0400 	mov.w	r4, #0
 80067cc:	0094      	lsls	r4, r2, #2
 80067ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067d2:	008b      	lsls	r3, r1, #2
 80067d4:	461a      	mov	r2, r3
 80067d6:	4623      	mov	r3, r4
 80067d8:	4628      	mov	r0, r5
 80067da:	4631      	mov	r1, r6
 80067dc:	f7f9 fd00 	bl	80001e0 <__aeabi_uldivmod>
 80067e0:	4603      	mov	r3, r0
 80067e2:	460c      	mov	r4, r1
 80067e4:	461a      	mov	r2, r3
 80067e6:	4b50      	ldr	r3, [pc, #320]	; (8006928 <UART_SetConfig+0x6f4>)
 80067e8:	fba3 2302 	umull	r2, r3, r3, r2
 80067ec:	095b      	lsrs	r3, r3, #5
 80067ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	469b      	mov	fp, r3
 80067f6:	f04f 0c00 	mov.w	ip, #0
 80067fa:	46d9      	mov	r9, fp
 80067fc:	46e2      	mov	sl, ip
 80067fe:	eb19 0309 	adds.w	r3, r9, r9
 8006802:	eb4a 040a 	adc.w	r4, sl, sl
 8006806:	4699      	mov	r9, r3
 8006808:	46a2      	mov	sl, r4
 800680a:	eb19 090b 	adds.w	r9, r9, fp
 800680e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006812:	f04f 0100 	mov.w	r1, #0
 8006816:	f04f 0200 	mov.w	r2, #0
 800681a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800681e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006822:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006826:	4689      	mov	r9, r1
 8006828:	4692      	mov	sl, r2
 800682a:	eb1b 0509 	adds.w	r5, fp, r9
 800682e:	eb4c 060a 	adc.w	r6, ip, sl
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	4619      	mov	r1, r3
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	f04f 0300 	mov.w	r3, #0
 8006840:	f04f 0400 	mov.w	r4, #0
 8006844:	0094      	lsls	r4, r2, #2
 8006846:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800684a:	008b      	lsls	r3, r1, #2
 800684c:	461a      	mov	r2, r3
 800684e:	4623      	mov	r3, r4
 8006850:	4628      	mov	r0, r5
 8006852:	4631      	mov	r1, r6
 8006854:	f7f9 fcc4 	bl	80001e0 <__aeabi_uldivmod>
 8006858:	4603      	mov	r3, r0
 800685a:	460c      	mov	r4, r1
 800685c:	461a      	mov	r2, r3
 800685e:	4b32      	ldr	r3, [pc, #200]	; (8006928 <UART_SetConfig+0x6f4>)
 8006860:	fba3 1302 	umull	r1, r3, r3, r2
 8006864:	095b      	lsrs	r3, r3, #5
 8006866:	2164      	movs	r1, #100	; 0x64
 8006868:	fb01 f303 	mul.w	r3, r1, r3
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	011b      	lsls	r3, r3, #4
 8006870:	3332      	adds	r3, #50	; 0x32
 8006872:	4a2d      	ldr	r2, [pc, #180]	; (8006928 <UART_SetConfig+0x6f4>)
 8006874:	fba2 2303 	umull	r2, r3, r2, r3
 8006878:	095b      	lsrs	r3, r3, #5
 800687a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800687e:	4498      	add	r8, r3
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	469b      	mov	fp, r3
 8006884:	f04f 0c00 	mov.w	ip, #0
 8006888:	46d9      	mov	r9, fp
 800688a:	46e2      	mov	sl, ip
 800688c:	eb19 0309 	adds.w	r3, r9, r9
 8006890:	eb4a 040a 	adc.w	r4, sl, sl
 8006894:	4699      	mov	r9, r3
 8006896:	46a2      	mov	sl, r4
 8006898:	eb19 090b 	adds.w	r9, r9, fp
 800689c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80068a0:	f04f 0100 	mov.w	r1, #0
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068b4:	4689      	mov	r9, r1
 80068b6:	4692      	mov	sl, r2
 80068b8:	eb1b 0509 	adds.w	r5, fp, r9
 80068bc:	eb4c 060a 	adc.w	r6, ip, sl
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	4619      	mov	r1, r3
 80068c6:	f04f 0200 	mov.w	r2, #0
 80068ca:	f04f 0300 	mov.w	r3, #0
 80068ce:	f04f 0400 	mov.w	r4, #0
 80068d2:	0094      	lsls	r4, r2, #2
 80068d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068d8:	008b      	lsls	r3, r1, #2
 80068da:	461a      	mov	r2, r3
 80068dc:	4623      	mov	r3, r4
 80068de:	4628      	mov	r0, r5
 80068e0:	4631      	mov	r1, r6
 80068e2:	f7f9 fc7d 	bl	80001e0 <__aeabi_uldivmod>
 80068e6:	4603      	mov	r3, r0
 80068e8:	460c      	mov	r4, r1
 80068ea:	461a      	mov	r2, r3
 80068ec:	4b0e      	ldr	r3, [pc, #56]	; (8006928 <UART_SetConfig+0x6f4>)
 80068ee:	fba3 1302 	umull	r1, r3, r3, r2
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	2164      	movs	r1, #100	; 0x64
 80068f6:	fb01 f303 	mul.w	r3, r1, r3
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	011b      	lsls	r3, r3, #4
 80068fe:	3332      	adds	r3, #50	; 0x32
 8006900:	4a09      	ldr	r2, [pc, #36]	; (8006928 <UART_SetConfig+0x6f4>)
 8006902:	fba2 2303 	umull	r2, r3, r2, r3
 8006906:	095b      	lsrs	r3, r3, #5
 8006908:	f003 020f 	and.w	r2, r3, #15
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4442      	add	r2, r8
 8006912:	609a      	str	r2, [r3, #8]
}
 8006914:	e7ff      	b.n	8006916 <UART_SetConfig+0x6e2>
 8006916:	bf00      	nop
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006920:	40011000 	.word	0x40011000
 8006924:	40011400 	.word	0x40011400
 8006928:	51eb851f 	.word	0x51eb851f

0800692c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800692c:	b084      	sub	sp, #16
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	f107 001c 	add.w	r0, r7, #28
 800693a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006940:	2b01      	cmp	r3, #1
 8006942:	d122      	bne.n	800698a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006948:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800696c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800696e:	2b01      	cmp	r3, #1
 8006970:	d105      	bne.n	800697e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f94a 	bl	8006c18 <USB_CoreReset>
 8006984:	4603      	mov	r3, r0
 8006986:	73fb      	strb	r3, [r7, #15]
 8006988:	e01a      	b.n	80069c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f93e 	bl	8006c18 <USB_CoreReset>
 800699c:	4603      	mov	r3, r0
 800699e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80069a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d106      	bne.n	80069b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	639a      	str	r2, [r3, #56]	; 0x38
 80069b2:	e005      	b.n	80069c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80069c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d10b      	bne.n	80069de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f043 0206 	orr.w	r2, r3, #6
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f043 0220 	orr.w	r2, r3, #32
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80069de:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069ea:	b004      	add	sp, #16
 80069ec:	4770      	bx	lr

080069ee <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f043 0201 	orr.w	r2, r3, #1
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f023 0201 	bic.w	r2, r3, #1
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b082      	sub	sp, #8
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a4a:	78fb      	ldrb	r3, [r7, #3]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d106      	bne.n	8006a5e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	60da      	str	r2, [r3, #12]
 8006a5c:	e00b      	b.n	8006a76 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a5e:	78fb      	ldrb	r3, [r7, #3]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d106      	bne.n	8006a72 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	60da      	str	r2, [r3, #12]
 8006a70:	e001      	b.n	8006a76 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e003      	b.n	8006a7e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006a76:	2032      	movs	r0, #50	; 0x32
 8006a78:	f7fb fa02 	bl	8001e80 <HAL_Delay>

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
	...

08006a88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006a92:	2300      	movs	r3, #0
 8006a94:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	019b      	lsls	r3, r3, #6
 8006a9a:	f043 0220 	orr.w	r2, r3, #32
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4a09      	ldr	r2, [pc, #36]	; (8006ad0 <USB_FlushTxFifo+0x48>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d901      	bls.n	8006ab4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e006      	b.n	8006ac2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	f003 0320 	and.w	r3, r3, #32
 8006abc:	2b20      	cmp	r3, #32
 8006abe:	d0f0      	beq.n	8006aa2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	00030d40 	.word	0x00030d40

08006ad4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006adc:	2300      	movs	r3, #0
 8006ade:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2210      	movs	r2, #16
 8006ae4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	4a09      	ldr	r2, [pc, #36]	; (8006b14 <USB_FlushRxFifo+0x40>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d901      	bls.n	8006af8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e006      	b.n	8006b06 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	f003 0310 	and.w	r3, r3, #16
 8006b00:	2b10      	cmp	r3, #16
 8006b02:	d0f0      	beq.n	8006ae6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	00030d40 	.word	0x00030d40

08006b18 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b089      	sub	sp, #36	; 0x24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	4611      	mov	r1, r2
 8006b24:	461a      	mov	r2, r3
 8006b26:	460b      	mov	r3, r1
 8006b28:	71fb      	strb	r3, [r7, #7]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006b36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d11a      	bne.n	8006b74 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006b3e:	88bb      	ldrh	r3, [r7, #4]
 8006b40:	3303      	adds	r3, #3
 8006b42:	089b      	lsrs	r3, r3, #2
 8006b44:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006b46:	2300      	movs	r3, #0
 8006b48:	61bb      	str	r3, [r7, #24]
 8006b4a:	e00f      	b.n	8006b6c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006b4c:	79fb      	ldrb	r3, [r7, #7]
 8006b4e:	031a      	lsls	r2, r3, #12
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b58:	461a      	mov	r2, r3
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	3304      	adds	r3, #4
 8006b64:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	61bb      	str	r3, [r7, #24]
 8006b6c:	69ba      	ldr	r2, [r7, #24]
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d3eb      	bcc.n	8006b4c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3724      	adds	r7, #36	; 0x24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b089      	sub	sp, #36	; 0x24
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	60f8      	str	r0, [r7, #12]
 8006b8a:	60b9      	str	r1, [r7, #8]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006b98:	88fb      	ldrh	r3, [r7, #6]
 8006b9a:	3303      	adds	r3, #3
 8006b9c:	089b      	lsrs	r3, r3, #2
 8006b9e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	61bb      	str	r3, [r7, #24]
 8006ba4:	e00b      	b.n	8006bbe <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	601a      	str	r2, [r3, #0]
    pDest++;
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	61bb      	str	r3, [r7, #24]
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d3ef      	bcc.n	8006ba6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006bc6:	69fb      	ldr	r3, [r7, #28]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3724      	adds	r7, #36	; 0x24
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	4013      	ands	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006bec:	68fb      	ldr	r3, [r7, #12]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b083      	sub	sp, #12
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	f003 0301 	and.w	r3, r3, #1
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
	...

08006c18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3301      	adds	r3, #1
 8006c28:	60fb      	str	r3, [r7, #12]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	4a13      	ldr	r2, [pc, #76]	; (8006c7c <USB_CoreReset+0x64>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d901      	bls.n	8006c36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e01b      	b.n	8006c6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	daf2      	bge.n	8006c24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	f043 0201 	orr.w	r2, r3, #1
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3301      	adds	r3, #1
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4a09      	ldr	r2, [pc, #36]	; (8006c7c <USB_CoreReset+0x64>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d901      	bls.n	8006c60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e006      	b.n	8006c6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	f003 0301 	and.w	r3, r3, #1
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d0f0      	beq.n	8006c4e <USB_CoreReset+0x36>

  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	00030d40 	.word	0x00030d40

08006c80 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c80:	b084      	sub	sp, #16
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b084      	sub	sp, #16
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	f107 001c 	add.w	r0, r7, #28
 8006c8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cbe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d018      	beq.n	8006d04 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d10a      	bne.n	8006cee <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ce6:	f043 0304 	orr.w	r3, r3, #4
 8006cea:	6013      	str	r3, [r2, #0]
 8006cec:	e014      	b.n	8006d18 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cfc:	f023 0304 	bic.w	r3, r3, #4
 8006d00:	6013      	str	r3, [r2, #0]
 8006d02:	e009      	b.n	8006d18 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d12:	f023 0304 	bic.w	r3, r3, #4
 8006d16:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006d18:	2110      	movs	r1, #16
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7ff feb4 	bl	8006a88 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7ff fed7 	bl	8006ad4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006d26:	2300      	movs	r3, #0
 8006d28:	60fb      	str	r3, [r7, #12]
 8006d2a:	e015      	b.n	8006d58 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d38:	461a      	mov	r2, r3
 8006d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d3e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	3301      	adds	r3, #1
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d3e5      	bcc.n	8006d2c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006d60:	2101      	movs	r1, #1
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f8ac 	bl	8006ec0 <USB_DriveVbus>

  HAL_Delay(200U);
 8006d68:	20c8      	movs	r0, #200	; 0xc8
 8006d6a:	f7fb f889 	bl	8001e80 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00b      	beq.n	8006da0 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d8e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a14      	ldr	r2, [pc, #80]	; (8006de4 <USB_HostInit+0x164>)
 8006d94:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a13      	ldr	r2, [pc, #76]	; (8006de8 <USB_HostInit+0x168>)
 8006d9a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006d9e:	e009      	b.n	8006db4 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2280      	movs	r2, #128	; 0x80
 8006da4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a10      	ldr	r2, [pc, #64]	; (8006dec <USB_HostInit+0x16c>)
 8006daa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a10      	ldr	r2, [pc, #64]	; (8006df0 <USB_HostInit+0x170>)
 8006db0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d105      	bne.n	8006dc6 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	f043 0210 	orr.w	r2, r3, #16
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	699a      	ldr	r2, [r3, #24]
 8006dca:	4b0a      	ldr	r3, [pc, #40]	; (8006df4 <USB_HostInit+0x174>)
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006dde:	b004      	add	sp, #16
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	01000200 	.word	0x01000200
 8006de8:	00e00300 	.word	0x00e00300
 8006dec:	00600080 	.word	0x00600080
 8006df0:	004000e0 	.word	0x004000e0
 8006df4:	a3200008 	.word	0xa3200008

08006df8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	460b      	mov	r3, r1
 8006e02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e16:	f023 0303 	bic.w	r3, r3, #3
 8006e1a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	78fb      	ldrb	r3, [r7, #3]
 8006e26:	f003 0303 	and.w	r3, r3, #3
 8006e2a:	68f9      	ldr	r1, [r7, #12]
 8006e2c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006e30:	4313      	orrs	r3, r2
 8006e32:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006e34:	78fb      	ldrb	r3, [r7, #3]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d107      	bne.n	8006e4a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e40:	461a      	mov	r2, r3
 8006e42:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006e46:	6053      	str	r3, [r2, #4]
 8006e48:	e009      	b.n	8006e5e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006e4a:	78fb      	ldrb	r3, [r7, #3]
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d106      	bne.n	8006e5e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e56:	461a      	mov	r2, r3
 8006e58:	f241 7370 	movw	r3, #6000	; 0x1770
 8006e5c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006e8c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e9a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006e9c:	2064      	movs	r0, #100	; 0x64
 8006e9e:	f7fa ffef 	bl	8001e80 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006eaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eae:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006eb0:	200a      	movs	r0, #10
 8006eb2:	f7fa ffe5 	bl	8001e80 <HAL_Delay>

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006ee4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d109      	bne.n	8006f04 <USB_DriveVbus+0x44>
 8006ef0:	78fb      	ldrb	r3, [r7, #3]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d106      	bne.n	8006f04 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006efe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f02:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f0e:	d109      	bne.n	8006f24 <USB_DriveVbus+0x64>
 8006f10:	78fb      	ldrb	r3, [r7, #3]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d106      	bne.n	8006f24 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006f1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f22:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b085      	sub	sp, #20
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	0c5b      	lsrs	r3, r3, #17
 8006f50:	f003 0303 	and.w	r3, r3, #3
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3714      	adds	r7, #20
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	b29b      	uxth	r3, r3
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
	...

08006f84 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	4608      	mov	r0, r1
 8006f8e:	4611      	mov	r1, r2
 8006f90:	461a      	mov	r2, r3
 8006f92:	4603      	mov	r3, r0
 8006f94:	70fb      	strb	r3, [r7, #3]
 8006f96:	460b      	mov	r3, r1
 8006f98:	70bb      	strb	r3, [r7, #2]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006fa6:	78fb      	ldrb	r3, [r7, #3]
 8006fa8:	015a      	lsls	r2, r3, #5
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8006fb8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006fba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d87e      	bhi.n	80070c0 <USB_HC_Init+0x13c>
 8006fc2:	a201      	add	r2, pc, #4	; (adr r2, 8006fc8 <USB_HC_Init+0x44>)
 8006fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc8:	08006fd9 	.word	0x08006fd9
 8006fcc:	08007083 	.word	0x08007083
 8006fd0:	08006fd9 	.word	0x08006fd9
 8006fd4:	08007045 	.word	0x08007045
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006fd8:	78fb      	ldrb	r3, [r7, #3]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	f240 439d 	movw	r3, #1181	; 0x49d
 8006fea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006fec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	da10      	bge.n	8007016 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006ff4:	78fb      	ldrb	r3, [r7, #3]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	78fa      	ldrb	r2, [r7, #3]
 8007004:	0151      	lsls	r1, r2, #5
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	440a      	add	r2, r1
 800700a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800700e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007012:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8007014:	e057      	b.n	80070c6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800701e:	2b00      	cmp	r3, #0
 8007020:	d051      	beq.n	80070c6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007022:	78fb      	ldrb	r3, [r7, #3]
 8007024:	015a      	lsls	r2, r3, #5
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	4413      	add	r3, r2
 800702a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	78fa      	ldrb	r2, [r7, #3]
 8007032:	0151      	lsls	r1, r2, #5
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	440a      	add	r2, r1
 8007038:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800703c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007040:	60d3      	str	r3, [r2, #12]
      break;
 8007042:	e040      	b.n	80070c6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007044:	78fb      	ldrb	r3, [r7, #3]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	4413      	add	r3, r2
 800704c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007050:	461a      	mov	r2, r3
 8007052:	f240 639d 	movw	r3, #1693	; 0x69d
 8007056:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007058:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800705c:	2b00      	cmp	r3, #0
 800705e:	da34      	bge.n	80070ca <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	4413      	add	r3, r2
 8007068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	78fa      	ldrb	r2, [r7, #3]
 8007070:	0151      	lsls	r1, r2, #5
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	440a      	add	r2, r1
 8007076:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800707a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800707e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007080:	e023      	b.n	80070ca <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007082:	78fb      	ldrb	r3, [r7, #3]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	4413      	add	r3, r2
 800708a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800708e:	461a      	mov	r2, r3
 8007090:	f240 2325 	movw	r3, #549	; 0x225
 8007094:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007096:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800709a:	2b00      	cmp	r3, #0
 800709c:	da17      	bge.n	80070ce <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800709e:	78fb      	ldrb	r3, [r7, #3]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	78fa      	ldrb	r2, [r7, #3]
 80070ae:	0151      	lsls	r1, r2, #5
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	440a      	add	r2, r1
 80070b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070b8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80070bc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80070be:	e006      	b.n	80070ce <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	75fb      	strb	r3, [r7, #23]
      break;
 80070c4:	e004      	b.n	80070d0 <USB_HC_Init+0x14c>
      break;
 80070c6:	bf00      	nop
 80070c8:	e002      	b.n	80070d0 <USB_HC_Init+0x14c>
      break;
 80070ca:	bf00      	nop
 80070cc:	e000      	b.n	80070d0 <USB_HC_Init+0x14c>
      break;
 80070ce:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070d6:	699a      	ldr	r2, [r3, #24]
 80070d8:	78fb      	ldrb	r3, [r7, #3]
 80070da:	f003 030f 	and.w	r3, r3, #15
 80070de:	2101      	movs	r1, #1
 80070e0:	fa01 f303 	lsl.w	r3, r1, r3
 80070e4:	68b9      	ldr	r1, [r7, #8]
 80070e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80070ea:	4313      	orrs	r3, r2
 80070ec:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80070fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	da03      	bge.n	800710a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007106:	613b      	str	r3, [r7, #16]
 8007108:	e001      	b.n	800710e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800710e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007112:	2b02      	cmp	r3, #2
 8007114:	d103      	bne.n	800711e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007116:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800711a:	60fb      	str	r3, [r7, #12]
 800711c:	e001      	b.n	8007122 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007122:	787b      	ldrb	r3, [r7, #1]
 8007124:	059b      	lsls	r3, r3, #22
 8007126:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800712a:	78bb      	ldrb	r3, [r7, #2]
 800712c:	02db      	lsls	r3, r3, #11
 800712e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007132:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007134:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007138:	049b      	lsls	r3, r3, #18
 800713a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800713e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007140:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007142:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007146:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800714c:	78fb      	ldrb	r3, [r7, #3]
 800714e:	0159      	lsls	r1, r3, #5
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	440b      	add	r3, r1
 8007154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007158:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800715e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007160:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007164:	2b03      	cmp	r3, #3
 8007166:	d10f      	bne.n	8007188 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007168:	78fb      	ldrb	r3, [r7, #3]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	4413      	add	r3, r2
 8007170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	78fa      	ldrb	r2, [r7, #3]
 8007178:	0151      	lsls	r1, r2, #5
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	440a      	add	r2, r1
 800717e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007182:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007186:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007188:	7dfb      	ldrb	r3, [r7, #23]
}
 800718a:	4618      	mov	r0, r3
 800718c:	371c      	adds	r7, #28
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop

08007198 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b08c      	sub	sp, #48	; 0x30
 800719c:	af02      	add	r7, sp, #8
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	4613      	mov	r3, r2
 80071a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	785b      	ldrb	r3, [r3, #1]
 80071ae:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80071b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071b4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d028      	beq.n	8007214 <USB_HC_StartXfer+0x7c>
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	791b      	ldrb	r3, [r3, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d124      	bne.n	8007214 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80071ca:	79fb      	ldrb	r3, [r7, #7]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10b      	bne.n	80071e8 <USB_HC_StartXfer+0x50>
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	795b      	ldrb	r3, [r3, #5]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d107      	bne.n	80071e8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	785b      	ldrb	r3, [r3, #1]
 80071dc:	4619      	mov	r1, r3
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f000 fa30 	bl	8007644 <USB_DoPing>
      return HAL_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	e114      	b.n	8007412 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 80071e8:	79fb      	ldrb	r3, [r7, #7]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d112      	bne.n	8007214 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	69fa      	ldr	r2, [r7, #28]
 80071fe:	0151      	lsls	r1, r2, #5
 8007200:	6a3a      	ldr	r2, [r7, #32]
 8007202:	440a      	add	r2, r1
 8007204:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007208:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800720c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2200      	movs	r2, #0
 8007212:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d018      	beq.n	800724e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	8912      	ldrh	r2, [r2, #8]
 8007224:	4413      	add	r3, r2
 8007226:	3b01      	subs	r3, #1
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	8912      	ldrh	r2, [r2, #8]
 800722c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007230:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007232:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007234:	8b7b      	ldrh	r3, [r7, #26]
 8007236:	429a      	cmp	r2, r3
 8007238:	d90b      	bls.n	8007252 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800723a:	8b7b      	ldrh	r3, [r7, #26]
 800723c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800723e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	8912      	ldrh	r2, [r2, #8]
 8007244:	fb02 f203 	mul.w	r2, r2, r3
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	611a      	str	r2, [r3, #16]
 800724c:	e001      	b.n	8007252 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800724e:	2301      	movs	r3, #1
 8007250:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	78db      	ldrb	r3, [r3, #3]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d006      	beq.n	8007268 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800725a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	8912      	ldrh	r2, [r2, #8]
 8007260:	fb02 f203 	mul.w	r2, r2, r3
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007270:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007272:	04d9      	lsls	r1, r3, #19
 8007274:	4b69      	ldr	r3, [pc, #420]	; (800741c <USB_HC_StartXfer+0x284>)
 8007276:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007278:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	7a9b      	ldrb	r3, [r3, #10]
 800727e:	075b      	lsls	r3, r3, #29
 8007280:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007284:	69f9      	ldr	r1, [r7, #28]
 8007286:	0148      	lsls	r0, r1, #5
 8007288:	6a39      	ldr	r1, [r7, #32]
 800728a:	4401      	add	r1, r0
 800728c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007290:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007292:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007294:	79fb      	ldrb	r3, [r7, #7]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d009      	beq.n	80072ae <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	68d9      	ldr	r1, [r3, #12]
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	6a3b      	ldr	r3, [r7, #32]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072aa:	460a      	mov	r2, r1
 80072ac:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	bf0c      	ite	eq
 80072be:	2301      	moveq	r3, #1
 80072c0:	2300      	movne	r3, #0
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	69fa      	ldr	r2, [r7, #28]
 80072d6:	0151      	lsls	r1, r2, #5
 80072d8:	6a3a      	ldr	r2, [r7, #32]
 80072da:	440a      	add	r2, r1
 80072dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80072e4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	7e7b      	ldrb	r3, [r7, #25]
 80072f6:	075b      	lsls	r3, r3, #29
 80072f8:	69f9      	ldr	r1, [r7, #28]
 80072fa:	0148      	lsls	r0, r1, #5
 80072fc:	6a39      	ldr	r1, [r7, #32]
 80072fe:	4401      	add	r1, r0
 8007300:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007304:	4313      	orrs	r3, r2
 8007306:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	6a3b      	ldr	r3, [r7, #32]
 800730e:	4413      	add	r3, r2
 8007310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a42      	ldr	r2, [pc, #264]	; (8007420 <USB_HC_StartXfer+0x288>)
 8007318:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800731a:	4b41      	ldr	r3, [pc, #260]	; (8007420 <USB_HC_StartXfer+0x288>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007322:	4a3f      	ldr	r2, [pc, #252]	; (8007420 <USB_HC_StartXfer+0x288>)
 8007324:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	78db      	ldrb	r3, [r3, #3]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d006      	beq.n	800733c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800732e:	4b3c      	ldr	r3, [pc, #240]	; (8007420 <USB_HC_StartXfer+0x288>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007336:	4a3a      	ldr	r2, [pc, #232]	; (8007420 <USB_HC_StartXfer+0x288>)
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	e005      	b.n	8007348 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800733c:	4b38      	ldr	r3, [pc, #224]	; (8007420 <USB_HC_StartXfer+0x288>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007344:	4a36      	ldr	r2, [pc, #216]	; (8007420 <USB_HC_StartXfer+0x288>)
 8007346:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007348:	4b35      	ldr	r3, [pc, #212]	; (8007420 <USB_HC_StartXfer+0x288>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007350:	4a33      	ldr	r2, [pc, #204]	; (8007420 <USB_HC_StartXfer+0x288>)
 8007352:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	4413      	add	r3, r2
 800735c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007360:	461a      	mov	r2, r3
 8007362:	4b2f      	ldr	r3, [pc, #188]	; (8007420 <USB_HC_StartXfer+0x288>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007368:	79fb      	ldrb	r3, [r7, #7]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	e04f      	b.n	8007412 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	78db      	ldrb	r3, [r3, #3]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d14a      	bne.n	8007410 <USB_HC_StartXfer+0x278>
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d046      	beq.n	8007410 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	79db      	ldrb	r3, [r3, #7]
 8007386:	2b03      	cmp	r3, #3
 8007388:	d830      	bhi.n	80073ec <USB_HC_StartXfer+0x254>
 800738a:	a201      	add	r2, pc, #4	; (adr r2, 8007390 <USB_HC_StartXfer+0x1f8>)
 800738c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007390:	080073a1 	.word	0x080073a1
 8007394:	080073c5 	.word	0x080073c5
 8007398:	080073a1 	.word	0x080073a1
 800739c:	080073c5 	.word	0x080073c5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	3303      	adds	r3, #3
 80073a6:	089b      	lsrs	r3, r3, #2
 80073a8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80073aa:	8afa      	ldrh	r2, [r7, #22]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d91c      	bls.n	80073f0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	f043 0220 	orr.w	r2, r3, #32
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	619a      	str	r2, [r3, #24]
        }
        break;
 80073c2:	e015      	b.n	80073f0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	3303      	adds	r3, #3
 80073ca:	089b      	lsrs	r3, r3, #2
 80073cc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80073ce:	8afa      	ldrh	r2, [r7, #22]
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	b29b      	uxth	r3, r3
 80073da:	429a      	cmp	r2, r3
 80073dc:	d90a      	bls.n	80073f4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	619a      	str	r2, [r3, #24]
        }
        break;
 80073ea:	e003      	b.n	80073f4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80073ec:	bf00      	nop
 80073ee:	e002      	b.n	80073f6 <USB_HC_StartXfer+0x25e>
        break;
 80073f0:	bf00      	nop
 80073f2:	e000      	b.n	80073f6 <USB_HC_StartXfer+0x25e>
        break;
 80073f4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	68d9      	ldr	r1, [r3, #12]
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	785a      	ldrb	r2, [r3, #1]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	b298      	uxth	r0, r3
 8007404:	2300      	movs	r3, #0
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	4603      	mov	r3, r0
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f7ff fb84 	bl	8006b18 <USB_WritePacket>
  }

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3728      	adds	r7, #40	; 0x28
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	1ff80000 	.word	0x1ff80000
 8007420:	20000314 	.word	0x20000314

08007424 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	b29b      	uxth	r3, r3
}
 800743a:	4618      	mov	r0, r3
 800743c:	3714      	adds	r7, #20
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007446:	b480      	push	{r7}
 8007448:	b087      	sub	sp, #28
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	460b      	mov	r3, r1
 8007450:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8007456:	78fb      	ldrb	r3, [r7, #3]
 8007458:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800745a:	2300      	movs	r3, #0
 800745c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	4413      	add	r3, r2
 8007466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	0c9b      	lsrs	r3, r3, #18
 800746e:	f003 0303 	and.w	r3, r3, #3
 8007472:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d002      	beq.n	8007480 <USB_HC_Halt+0x3a>
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	2b02      	cmp	r3, #2
 800747e:	d16c      	bne.n	800755a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	4413      	add	r3, r2
 8007488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	0151      	lsls	r1, r2, #5
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	440a      	add	r2, r1
 8007496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800749a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800749e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d143      	bne.n	8007534 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	0151      	lsls	r1, r2, #5
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	440a      	add	r2, r1
 80074c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	0151      	lsls	r1, r2, #5
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	440a      	add	r2, r1
 80074e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074ea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	0151      	lsls	r1, r2, #5
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	440a      	add	r2, r1
 8007502:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007506:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800750a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	3301      	adds	r3, #1
 8007510:	617b      	str	r3, [r7, #20]
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007518:	d81d      	bhi.n	8007556 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	4413      	add	r3, r2
 8007522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800752c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007530:	d0ec      	beq.n	800750c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007532:	e080      	b.n	8007636 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	4413      	add	r3, r2
 800753c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	0151      	lsls	r1, r2, #5
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	440a      	add	r2, r1
 800754a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800754e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007552:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007554:	e06f      	b.n	8007636 <USB_HC_Halt+0x1f0>
          break;
 8007556:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007558:	e06d      	b.n	8007636 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	015a      	lsls	r2, r3, #5
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	4413      	add	r3, r2
 8007562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	0151      	lsls	r1, r2, #5
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	440a      	add	r2, r1
 8007570:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007574:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007578:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d143      	bne.n	8007612 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	4413      	add	r3, r2
 8007592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	0151      	lsls	r1, r2, #5
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	440a      	add	r2, r1
 80075a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075a8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	015a      	lsls	r2, r3, #5
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	0151      	lsls	r1, r2, #5
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	440a      	add	r2, r1
 80075c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075c8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	015a      	lsls	r2, r3, #5
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	4413      	add	r3, r2
 80075d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	0151      	lsls	r1, r2, #5
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	440a      	add	r2, r1
 80075e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075e8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	3301      	adds	r3, #1
 80075ee:	617b      	str	r3, [r7, #20]
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075f6:	d81d      	bhi.n	8007634 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	015a      	lsls	r2, r3, #5
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	4413      	add	r3, r2
 8007600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800760a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800760e:	d0ec      	beq.n	80075ea <USB_HC_Halt+0x1a4>
 8007610:	e011      	b.n	8007636 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	4413      	add	r3, r2
 800761a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	0151      	lsls	r1, r2, #5
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	440a      	add	r2, r1
 8007628:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800762c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007630:	6013      	str	r3, [r2, #0]
 8007632:	e000      	b.n	8007636 <USB_HC_Halt+0x1f0>
          break;
 8007634:	bf00      	nop
    }
  }

  return HAL_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	371c      	adds	r7, #28
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007644:	b480      	push	{r7}
 8007646:	b087      	sub	sp, #28
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	460b      	mov	r3, r1
 800764e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007654:	78fb      	ldrb	r3, [r7, #3]
 8007656:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007658:	2301      	movs	r3, #1
 800765a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	04da      	lsls	r2, r3, #19
 8007660:	4b15      	ldr	r3, [pc, #84]	; (80076b8 <USB_DoPing+0x74>)
 8007662:	4013      	ands	r3, r2
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	0151      	lsls	r1, r2, #5
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	440a      	add	r2, r1
 800766c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007670:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007674:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	4413      	add	r3, r2
 800767e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800768c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007694:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	015a      	lsls	r2, r3, #5
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	4413      	add	r3, r2
 800769e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076a2:	461a      	mov	r2, r3
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	371c      	adds	r7, #28
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	1ff80000 	.word	0x1ff80000

080076bc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7ff f99f 	bl	8006a10 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80076d2:	2110      	movs	r1, #16
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7ff f9d7 	bl	8006a88 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7ff f9fa 	bl	8006ad4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80076e0:	2300      	movs	r3, #0
 80076e2:	613b      	str	r3, [r7, #16]
 80076e4:	e01f      	b.n	8007726 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	015a      	lsls	r2, r3, #5
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076fc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007704:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800770c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	015a      	lsls	r2, r3, #5
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	4413      	add	r3, r2
 8007716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800771a:	461a      	mov	r2, r3
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	3301      	adds	r3, #1
 8007724:	613b      	str	r3, [r7, #16]
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	2b0f      	cmp	r3, #15
 800772a:	d9dc      	bls.n	80076e6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800772c:	2300      	movs	r3, #0
 800772e:	613b      	str	r3, [r7, #16]
 8007730:	e034      	b.n	800779c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4413      	add	r3, r2
 800773a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007748:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007750:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007758:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	015a      	lsls	r2, r3, #5
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	4413      	add	r3, r2
 8007762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007766:	461a      	mov	r2, r3
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	3301      	adds	r3, #1
 8007770:	617b      	str	r3, [r7, #20]
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007778:	d80c      	bhi.n	8007794 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	4413      	add	r3, r2
 8007782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800778c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007790:	d0ec      	beq.n	800776c <USB_StopHost+0xb0>
 8007792:	e000      	b.n	8007796 <USB_StopHost+0xda>
        break;
 8007794:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	3301      	adds	r3, #1
 800779a:	613b      	str	r3, [r7, #16]
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	2b0f      	cmp	r3, #15
 80077a0:	d9c7      	bls.n	8007732 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077a8:	461a      	mov	r2, r3
 80077aa:	f04f 33ff 	mov.w	r3, #4294967295
 80077ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f04f 32ff 	mov.w	r2, #4294967295
 80077b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7ff f918 	bl	80069ee <USB_EnableGlobalInt>

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80077c8:	b590      	push	{r4, r7, lr}
 80077ca:	b089      	sub	sp, #36	; 0x24
 80077cc:	af04      	add	r7, sp, #16
 80077ce:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80077d0:	2301      	movs	r3, #1
 80077d2:	2202      	movs	r2, #2
 80077d4:	2102      	movs	r1, #2
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fcba 	bl	8008150 <USBH_FindInterface>
 80077dc:	4603      	mov	r3, r0
 80077de:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
 80077e2:	2bff      	cmp	r3, #255	; 0xff
 80077e4:	d002      	beq.n	80077ec <USBH_CDC_InterfaceInit+0x24>
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d901      	bls.n	80077f0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80077ec:	2302      	movs	r3, #2
 80077ee:	e13d      	b.n	8007a6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fc8f 	bl	8008118 <USBH_SelectInterface>
 80077fa:	4603      	mov	r3, r0
 80077fc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80077fe:	7bbb      	ldrb	r3, [r7, #14]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007804:	2302      	movs	r3, #2
 8007806:	e131      	b.n	8007a6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800780e:	2050      	movs	r0, #80	; 0x50
 8007810:	f005 fb88 	bl	800cf24 <malloc>
 8007814:	4603      	mov	r3, r0
 8007816:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d101      	bne.n	800782c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007828:	2302      	movs	r3, #2
 800782a:	e11f      	b.n	8007a6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800782c:	2250      	movs	r2, #80	; 0x50
 800782e:	2100      	movs	r1, #0
 8007830:	68b8      	ldr	r0, [r7, #8]
 8007832:	f005 fb92 	bl	800cf5a <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	211a      	movs	r1, #26
 800783c:	fb01 f303 	mul.w	r3, r1, r3
 8007840:	4413      	add	r3, r2
 8007842:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	b25b      	sxtb	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	da15      	bge.n	800787a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800784e:	7bfb      	ldrb	r3, [r7, #15]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	211a      	movs	r1, #26
 8007854:	fb01 f303 	mul.w	r3, r1, r3
 8007858:	4413      	add	r3, r2
 800785a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800785e:	781a      	ldrb	r2, [r3, #0]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007864:	7bfb      	ldrb	r3, [r7, #15]
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	211a      	movs	r1, #26
 800786a:	fb01 f303 	mul.w	r3, r1, r3
 800786e:	4413      	add	r3, r2
 8007870:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007874:	881a      	ldrh	r2, [r3, #0]
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	785b      	ldrb	r3, [r3, #1]
 800787e:	4619      	mov	r1, r3
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f002 f894 	bl	80099ae <USBH_AllocPipe>
 8007886:	4603      	mov	r3, r0
 8007888:	461a      	mov	r2, r3
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	7819      	ldrb	r1, [r3, #0]
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	7858      	ldrb	r0, [r3, #1]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	8952      	ldrh	r2, [r2, #10]
 80078a6:	9202      	str	r2, [sp, #8]
 80078a8:	2203      	movs	r2, #3
 80078aa:	9201      	str	r2, [sp, #4]
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	4623      	mov	r3, r4
 80078b0:	4602      	mov	r2, r0
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f002 f84c 	bl	8009950 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	2200      	movs	r2, #0
 80078be:	4619      	mov	r1, r3
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f005 fa7f 	bl	800cdc4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80078c6:	2300      	movs	r3, #0
 80078c8:	2200      	movs	r2, #0
 80078ca:	210a      	movs	r1, #10
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fc3f 	bl	8008150 <USBH_FindInterface>
 80078d2:	4603      	mov	r3, r0
 80078d4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
 80078d8:	2bff      	cmp	r3, #255	; 0xff
 80078da:	d002      	beq.n	80078e2 <USBH_CDC_InterfaceInit+0x11a>
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d901      	bls.n	80078e6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80078e2:	2302      	movs	r3, #2
 80078e4:	e0c2      	b.n	8007a6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	211a      	movs	r1, #26
 80078ec:	fb01 f303 	mul.w	r3, r1, r3
 80078f0:	4413      	add	r3, r2
 80078f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	b25b      	sxtb	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	da16      	bge.n	800792c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80078fe:	7bfb      	ldrb	r3, [r7, #15]
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	211a      	movs	r1, #26
 8007904:	fb01 f303 	mul.w	r3, r1, r3
 8007908:	4413      	add	r3, r2
 800790a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800790e:	781a      	ldrb	r2, [r3, #0]
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007914:	7bfb      	ldrb	r3, [r7, #15]
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	211a      	movs	r1, #26
 800791a:	fb01 f303 	mul.w	r3, r1, r3
 800791e:	4413      	add	r3, r2
 8007920:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007924:	881a      	ldrh	r2, [r3, #0]
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	835a      	strh	r2, [r3, #26]
 800792a:	e015      	b.n	8007958 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800792c:	7bfb      	ldrb	r3, [r7, #15]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	211a      	movs	r1, #26
 8007932:	fb01 f303 	mul.w	r3, r1, r3
 8007936:	4413      	add	r3, r2
 8007938:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800793c:	781a      	ldrb	r2, [r3, #0]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007942:	7bfb      	ldrb	r3, [r7, #15]
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	211a      	movs	r1, #26
 8007948:	fb01 f303 	mul.w	r3, r1, r3
 800794c:	4413      	add	r3, r2
 800794e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007952:	881a      	ldrh	r2, [r3, #0]
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007958:	7bfb      	ldrb	r3, [r7, #15]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	211a      	movs	r1, #26
 800795e:	fb01 f303 	mul.w	r3, r1, r3
 8007962:	4413      	add	r3, r2
 8007964:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	b25b      	sxtb	r3, r3
 800796c:	2b00      	cmp	r3, #0
 800796e:	da16      	bge.n	800799e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	211a      	movs	r1, #26
 8007976:	fb01 f303 	mul.w	r3, r1, r3
 800797a:	4413      	add	r3, r2
 800797c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007980:	781a      	ldrb	r2, [r3, #0]
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007986:	7bfb      	ldrb	r3, [r7, #15]
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	211a      	movs	r1, #26
 800798c:	fb01 f303 	mul.w	r3, r1, r3
 8007990:	4413      	add	r3, r2
 8007992:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007996:	881a      	ldrh	r2, [r3, #0]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	835a      	strh	r2, [r3, #26]
 800799c:	e015      	b.n	80079ca <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800799e:	7bfb      	ldrb	r3, [r7, #15]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	211a      	movs	r1, #26
 80079a4:	fb01 f303 	mul.w	r3, r1, r3
 80079a8:	4413      	add	r3, r2
 80079aa:	f203 3356 	addw	r3, r3, #854	; 0x356
 80079ae:	781a      	ldrb	r2, [r3, #0]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	211a      	movs	r1, #26
 80079ba:	fb01 f303 	mul.w	r3, r1, r3
 80079be:	4413      	add	r3, r2
 80079c0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80079c4:	881a      	ldrh	r2, [r3, #0]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	7b9b      	ldrb	r3, [r3, #14]
 80079ce:	4619      	mov	r1, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f001 ffec 	bl	80099ae <USBH_AllocPipe>
 80079d6:	4603      	mov	r3, r0
 80079d8:	461a      	mov	r2, r3
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	7bdb      	ldrb	r3, [r3, #15]
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 ffe2 	bl	80099ae <USBH_AllocPipe>
 80079ea:	4603      	mov	r3, r0
 80079ec:	461a      	mov	r2, r3
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	7b59      	ldrb	r1, [r3, #13]
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	7b98      	ldrb	r0, [r3, #14]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a06:	68ba      	ldr	r2, [r7, #8]
 8007a08:	8b12      	ldrh	r2, [r2, #24]
 8007a0a:	9202      	str	r2, [sp, #8]
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	9201      	str	r2, [sp, #4]
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	4623      	mov	r3, r4
 8007a14:	4602      	mov	r2, r0
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f001 ff9a 	bl	8009950 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	7b19      	ldrb	r1, [r3, #12]
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	7bd8      	ldrb	r0, [r3, #15]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	8b52      	ldrh	r2, [r2, #26]
 8007a34:	9202      	str	r2, [sp, #8]
 8007a36:	2202      	movs	r2, #2
 8007a38:	9201      	str	r2, [sp, #4]
 8007a3a:	9300      	str	r3, [sp, #0]
 8007a3c:	4623      	mov	r3, r4
 8007a3e:	4602      	mov	r2, r0
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 ff85 	bl	8009950 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	7b5b      	ldrb	r3, [r3, #13]
 8007a52:	2200      	movs	r2, #0
 8007a54:	4619      	mov	r1, r3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f005 f9b4 	bl	800cdc4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	7b1b      	ldrb	r3, [r3, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f005 f9ad 	bl	800cdc4 <USBH_LL_SetToggle>

  return USBH_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd90      	pop	{r4, r7, pc}

08007a74 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a82:	69db      	ldr	r3, [r3, #28]
 8007a84:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00e      	beq.n	8007aac <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	4619      	mov	r1, r3
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f001 ff7a 	bl	800998e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f001 ffa5 	bl	80099f0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	7b1b      	ldrb	r3, [r3, #12]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00e      	beq.n	8007ad2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	7b1b      	ldrb	r3, [r3, #12]
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f001 ff67 	bl	800998e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	7b1b      	ldrb	r3, [r3, #12]
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f001 ff92 	bl	80099f0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	7b5b      	ldrb	r3, [r3, #13]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00e      	beq.n	8007af8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	7b5b      	ldrb	r3, [r3, #13]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f001 ff54 	bl	800998e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	7b5b      	ldrb	r3, [r3, #13]
 8007aea:	4619      	mov	r1, r3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f001 ff7f 	bl	80099f0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007afe:	69db      	ldr	r3, [r3, #28]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00b      	beq.n	8007b1c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f005 fa11 	bl	800cf34 <free>
    phost->pActiveClass->pData = 0U;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b18:	2200      	movs	r2, #0
 8007b1a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b084      	sub	sp, #16
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b34:	69db      	ldr	r3, [r3, #28]
 8007b36:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	3340      	adds	r3, #64	; 0x40
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f8b1 	bl	8007ca6 <GetLineCoding>
 8007b44:	4603      	mov	r3, r0
 8007b46:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007b48:	7afb      	ldrb	r3, [r7, #11]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d105      	bne.n	8007b5a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b54:	2102      	movs	r1, #2
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007b5a:	7afb      	ldrb	r3, [r7, #11]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007b70:	2300      	movs	r3, #0
 8007b72:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b7a:	69db      	ldr	r3, [r3, #28]
 8007b7c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007b84:	2b04      	cmp	r3, #4
 8007b86:	d877      	bhi.n	8007c78 <USBH_CDC_Process+0x114>
 8007b88:	a201      	add	r2, pc, #4	; (adr r2, 8007b90 <USBH_CDC_Process+0x2c>)
 8007b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8e:	bf00      	nop
 8007b90:	08007ba5 	.word	0x08007ba5
 8007b94:	08007bab 	.word	0x08007bab
 8007b98:	08007bdb 	.word	0x08007bdb
 8007b9c:	08007c4f 	.word	0x08007c4f
 8007ba0:	08007c5d 	.word	0x08007c5d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ba8:	e06d      	b.n	8007c86 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f897 	bl	8007ce4 <SetLineCoding>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007bba:	7bbb      	ldrb	r3, [r7, #14]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d104      	bne.n	8007bca <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	2202      	movs	r2, #2
 8007bc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007bc8:	e058      	b.n	8007c7c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007bca:	7bbb      	ldrb	r3, [r7, #14]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d055      	beq.n	8007c7c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2204      	movs	r2, #4
 8007bd4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007bd8:	e050      	b.n	8007c7c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	3340      	adds	r3, #64	; 0x40
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f860 	bl	8007ca6 <GetLineCoding>
 8007be6:	4603      	mov	r3, r0
 8007be8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007bea:	7bbb      	ldrb	r3, [r7, #14]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d126      	bne.n	8007c3e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c02:	791b      	ldrb	r3, [r3, #4]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d13b      	bne.n	8007c80 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c12:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d133      	bne.n	8007c80 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c22:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d12b      	bne.n	8007c80 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c30:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d124      	bne.n	8007c80 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f984 	bl	8007f44 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007c3c:	e020      	b.n	8007c80 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007c3e:	7bbb      	ldrb	r3, [r7, #14]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d01d      	beq.n	8007c80 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	2204      	movs	r2, #4
 8007c48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007c4c:	e018      	b.n	8007c80 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f867 	bl	8007d22 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f8f8 	bl	8007e4a <CDC_ProcessReception>
      break;
 8007c5a:	e014      	b.n	8007c86 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f001 f953 	bl	8008f0a <USBH_ClrFeature>
 8007c64:	4603      	mov	r3, r0
 8007c66:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007c68:	7bbb      	ldrb	r3, [r7, #14]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10a      	bne.n	8007c84 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007c76:	e005      	b.n	8007c84 <USBH_CDC_Process+0x120>

    default:
      break;
 8007c78:	bf00      	nop
 8007c7a:	e004      	b.n	8007c86 <USBH_CDC_Process+0x122>
      break;
 8007c7c:	bf00      	nop
 8007c7e:	e002      	b.n	8007c86 <USBH_CDC_Process+0x122>
      break;
 8007c80:	bf00      	nop
 8007c82:	e000      	b.n	8007c86 <USBH_CDC_Process+0x122>
      break;
 8007c84:	bf00      	nop

  }

  return status;
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b082      	sub	sp, #8
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	22a1      	movs	r2, #161	; 0xa1
 8007cb4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2221      	movs	r2, #33	; 0x21
 8007cba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2207      	movs	r2, #7
 8007ccc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2207      	movs	r2, #7
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f001 faf8 	bl	80092ca <USBH_CtlReq>
 8007cda:	4603      	mov	r3, r0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2221      	movs	r2, #33	; 0x21
 8007cf2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2220      	movs	r2, #32
 8007cf8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2207      	movs	r2, #7
 8007d0a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	2207      	movs	r2, #7
 8007d10:	4619      	mov	r1, r3
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f001 fad9 	bl	80092ca <USBH_CtlReq>
 8007d18:	4603      	mov	r3, r0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b086      	sub	sp, #24
 8007d26:	af02      	add	r7, sp, #8
 8007d28:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d34:	2300      	movs	r3, #0
 8007d36:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d002      	beq.n	8007d48 <CDC_ProcessTransmission+0x26>
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d025      	beq.n	8007d92 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8007d46:	e07c      	b.n	8007e42 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	8b12      	ldrh	r2, [r2, #24]
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d90c      	bls.n	8007d6e <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	69d9      	ldr	r1, [r3, #28]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	8b1a      	ldrh	r2, [r3, #24]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	7b58      	ldrb	r0, [r3, #13]
 8007d60:	2301      	movs	r3, #1
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	4603      	mov	r3, r0
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f001 fdaf 	bl	80098ca <USBH_BulkSendData>
 8007d6c:	e00c      	b.n	8007d88 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	7b58      	ldrb	r0, [r3, #13]
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	4603      	mov	r3, r0
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f001 fda1 	bl	80098ca <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007d90:	e057      	b.n	8007e42 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	7b5b      	ldrb	r3, [r3, #13]
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f004 ffe9 	bl	800cd70 <USBH_LL_GetURBState>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007da2:	7afb      	ldrb	r3, [r7, #11]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d136      	bne.n	8007e16 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	8b12      	ldrh	r2, [r2, #24]
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d90e      	bls.n	8007dd2 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	8b12      	ldrh	r2, [r2, #24]
 8007dbc:	1a9a      	subs	r2, r3, r2
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	8b12      	ldrh	r2, [r2, #24]
 8007dca:	441a      	add	r2, r3
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	61da      	str	r2, [r3, #28]
 8007dd0:	e002      	b.n	8007dd8 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d004      	beq.n	8007dea <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8007de8:	e006      	b.n	8007df8 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f892 	bl	8007f1c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2204      	movs	r2, #4
 8007dfc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	4619      	mov	r1, r3
 8007e10:	f001 ff70 	bl	8009cf4 <osMessagePut>
      break;
 8007e14:	e014      	b.n	8007e40 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 8007e16:	7afb      	ldrb	r3, [r7, #11]
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d111      	bne.n	8007e40 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2204      	movs	r2, #4
 8007e28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007e38:	2200      	movs	r2, #0
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	f001 ff5a 	bl	8009cf4 <osMessagePut>
      break;
 8007e40:	bf00      	nop
  }
}
 8007e42:	bf00      	nop
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b086      	sub	sp, #24
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d002      	beq.n	8007e70 <CDC_ProcessReception+0x26>
 8007e6a:	2b04      	cmp	r3, #4
 8007e6c:	d00e      	beq.n	8007e8c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007e6e:	e051      	b.n	8007f14 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	6a19      	ldr	r1, [r3, #32]
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	8b5a      	ldrh	r2, [r3, #26]
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	7b1b      	ldrb	r3, [r3, #12]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f001 fd49 	bl	8009914 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	2204      	movs	r2, #4
 8007e86:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007e8a:	e043      	b.n	8007f14 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	7b1b      	ldrb	r3, [r3, #12]
 8007e90:	4619      	mov	r1, r3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f004 ff6c 	bl	800cd70 <USBH_LL_GetURBState>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007e9c:	7cfb      	ldrb	r3, [r7, #19]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d137      	bne.n	8007f12 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	7b1b      	ldrb	r3, [r3, #12]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f004 fecf 	bl	800cc4c <USBH_LL_GetLastXferSize>
 8007eae:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d016      	beq.n	8007ee8 <CDC_ProcessReception+0x9e>
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	8b5b      	ldrh	r3, [r3, #26]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d910      	bls.n	8007ee8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	1ad2      	subs	r2, r2, r3
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	6a1a      	ldr	r2, [r3, #32]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	441a      	add	r2, r3
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2203      	movs	r2, #3
 8007ee2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8007ee6:	e006      	b.n	8007ef6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f81d 	bl	8007f30 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2204      	movs	r2, #4
 8007efa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	f001 fef1 	bl	8009cf4 <osMessagePut>
      break;
 8007f12:	bf00      	nop
  }
}
 8007f14:	bf00      	nop
 8007f16:	3718      	adds	r7, #24
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007f58:	b5b0      	push	{r4, r5, r7, lr}
 8007f5a:	b090      	sub	sp, #64	; 0x40
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	4613      	mov	r3, r2
 8007f64:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d101      	bne.n	8007f70 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	e04d      	b.n	800800c <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	79fa      	ldrb	r2, [r7, #7]
 8007f74:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f000 f847 	bl	800801c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8007fbc:	4b15      	ldr	r3, [pc, #84]	; (8008014 <USBH_Init+0xbc>)
 8007fbe:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8007fc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007fc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8007fc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007fcc:	2100      	movs	r1, #0
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f001 fe66 	bl	8009ca0 <osMessageCreate>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8007fdc:	4b0e      	ldr	r3, [pc, #56]	; (8008018 <USBH_Init+0xc0>)
 8007fde:	f107 0414 	add.w	r4, r7, #20
 8007fe2:	461d      	mov	r5, r3
 8007fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fe8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007fec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8007ff0:	f107 0314 	add.w	r3, r7, #20
 8007ff4:	68f9      	ldr	r1, [r7, #12]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f001 fd7d 	bl	8009af6 <osThreadCreate>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f004 fd6f 	bl	800cae8 <USBH_LL_Init>

  return USBH_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3740      	adds	r7, #64	; 0x40
 8008010:	46bd      	mov	sp, r7
 8008012:	bdb0      	pop	{r4, r5, r7, pc}
 8008014:	0800d6f8 	.word	0x0800d6f8
 8008018:	0800d714 	.word	0x0800d714

0800801c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008024:	2300      	movs	r3, #0
 8008026:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008028:	2300      	movs	r3, #0
 800802a:	60fb      	str	r3, [r7, #12]
 800802c:	e009      	b.n	8008042 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	33e0      	adds	r3, #224	; 0xe0
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	2200      	movs	r2, #0
 800803a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	3301      	adds	r3, #1
 8008040:	60fb      	str	r3, [r7, #12]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2b0e      	cmp	r3, #14
 8008046:	d9f2      	bls.n	800802e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008048:	2300      	movs	r3, #0
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	e009      	b.n	8008062 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	4413      	add	r3, r2
 8008054:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008058:	2200      	movs	r2, #0
 800805a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	3301      	adds	r3, #1
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008068:	d3f1      	bcc.n	800804e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2240      	movs	r2, #64	; 0x40
 800808e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3714      	adds	r7, #20
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d016      	beq.n	8008106 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10e      	bne.n	8008100 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80080e8:	1c59      	adds	r1, r3, #1
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	33de      	adds	r3, #222	; 0xde
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73fb      	strb	r3, [r7, #15]
 80080fe:	e004      	b.n	800810a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008100:	2302      	movs	r3, #2
 8008102:	73fb      	strb	r3, [r7, #15]
 8008104:	e001      	b.n	800810a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008106:	2302      	movs	r3, #2
 8008108:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800810a:	7bfb      	ldrb	r3, [r7, #15]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3714      	adds	r7, #20
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	460b      	mov	r3, r1
 8008122:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008124:	2300      	movs	r3, #0
 8008126:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800812e:	78fa      	ldrb	r2, [r7, #3]
 8008130:	429a      	cmp	r2, r3
 8008132:	d204      	bcs.n	800813e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	78fa      	ldrb	r2, [r7, #3]
 8008138:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800813c:	e001      	b.n	8008142 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800813e:	2302      	movs	r3, #2
 8008140:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008142:	7bfb      	ldrb	r3, [r7, #15]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3714      	adds	r7, #20
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008150:	b480      	push	{r7}
 8008152:	b087      	sub	sp, #28
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	4608      	mov	r0, r1
 800815a:	4611      	mov	r1, r2
 800815c:	461a      	mov	r2, r3
 800815e:	4603      	mov	r3, r0
 8008160:	70fb      	strb	r3, [r7, #3]
 8008162:	460b      	mov	r3, r1
 8008164:	70bb      	strb	r3, [r7, #2]
 8008166:	4613      	mov	r3, r2
 8008168:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800816a:	2300      	movs	r3, #0
 800816c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800816e:	2300      	movs	r3, #0
 8008170:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008178:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800817a:	e025      	b.n	80081c8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800817c:	7dfb      	ldrb	r3, [r7, #23]
 800817e:	221a      	movs	r2, #26
 8008180:	fb02 f303 	mul.w	r3, r2, r3
 8008184:	3308      	adds	r3, #8
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	4413      	add	r3, r2
 800818a:	3302      	adds	r3, #2
 800818c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	795b      	ldrb	r3, [r3, #5]
 8008192:	78fa      	ldrb	r2, [r7, #3]
 8008194:	429a      	cmp	r2, r3
 8008196:	d002      	beq.n	800819e <USBH_FindInterface+0x4e>
 8008198:	78fb      	ldrb	r3, [r7, #3]
 800819a:	2bff      	cmp	r3, #255	; 0xff
 800819c:	d111      	bne.n	80081c2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80081a2:	78ba      	ldrb	r2, [r7, #2]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d002      	beq.n	80081ae <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80081a8:	78bb      	ldrb	r3, [r7, #2]
 80081aa:	2bff      	cmp	r3, #255	; 0xff
 80081ac:	d109      	bne.n	80081c2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80081b2:	787a      	ldrb	r2, [r7, #1]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d002      	beq.n	80081be <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80081b8:	787b      	ldrb	r3, [r7, #1]
 80081ba:	2bff      	cmp	r3, #255	; 0xff
 80081bc:	d101      	bne.n	80081c2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80081be:	7dfb      	ldrb	r3, [r7, #23]
 80081c0:	e006      	b.n	80081d0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80081c2:	7dfb      	ldrb	r3, [r7, #23]
 80081c4:	3301      	adds	r3, #1
 80081c6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d9d6      	bls.n	800817c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80081ce:	23ff      	movs	r3, #255	; 0xff
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	371c      	adds	r7, #28
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f004 fcbb 	bl	800cb60 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80081ea:	2101      	movs	r1, #1
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f004 fdd2 	bl	800cd96 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b088      	sub	sp, #32
 8008200:	af04      	add	r7, sp, #16
 8008202:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008204:	2302      	movs	r3, #2
 8008206:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008208:	2300      	movs	r3, #0
 800820a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008212:	b2db      	uxtb	r3, r3
 8008214:	2b01      	cmp	r3, #1
 8008216:	d102      	bne.n	800821e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2203      	movs	r2, #3
 800821c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	b2db      	uxtb	r3, r3
 8008224:	2b0b      	cmp	r3, #11
 8008226:	f200 823c 	bhi.w	80086a2 <USBH_Process+0x4a6>
 800822a:	a201      	add	r2, pc, #4	; (adr r2, 8008230 <USBH_Process+0x34>)
 800822c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008230:	08008261 	.word	0x08008261
 8008234:	080082af 	.word	0x080082af
 8008238:	08008333 	.word	0x08008333
 800823c:	08008621 	.word	0x08008621
 8008240:	080086a3 	.word	0x080086a3
 8008244:	080083f3 	.word	0x080083f3
 8008248:	080085ab 	.word	0x080085ab
 800824c:	08008445 	.word	0x08008445
 8008250:	08008481 	.word	0x08008481
 8008254:	080084bb 	.word	0x080084bb
 8008258:	08008503 	.word	0x08008503
 800825c:	08008609 	.word	0x08008609
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008266:	b2db      	uxtb	r3, r3
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 821c 	beq.w	80086a6 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008274:	20c8      	movs	r0, #200	; 0xc8
 8008276:	f004 fdd8 	bl	800ce2a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f004 fccb 	bl	800cc16 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80082a4:	2200      	movs	r2, #0
 80082a6:	4619      	mov	r1, r3
 80082a8:	f001 fd24 	bl	8009cf4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80082ac:	e1fb      	b.n	80086a6 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d107      	bne.n	80082c8 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2202      	movs	r2, #2
 80082c4:	701a      	strb	r2, [r3, #0]
 80082c6:	e025      	b.n	8008314 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80082ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082d2:	d914      	bls.n	80082fe <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80082da:	3301      	adds	r3, #1
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80082ea:	2b03      	cmp	r3, #3
 80082ec:	d903      	bls.n	80082f6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	220d      	movs	r2, #13
 80082f2:	701a      	strb	r2, [r3, #0]
 80082f4:	e00e      	b.n	8008314 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	701a      	strb	r2, [r3, #0]
 80082fc:	e00a      	b.n	8008314 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008304:	f103 020a 	add.w	r2, r3, #10
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800830e:	200a      	movs	r0, #10
 8008310:	f004 fd8b 	bl	800ce2a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008328:	2200      	movs	r2, #0
 800832a:	4619      	mov	r1, r3
 800832c:	f001 fce2 	bl	8009cf4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008330:	e1c0      	b.n	80086b4 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008338:	2b00      	cmp	r3, #0
 800833a:	d005      	beq.n	8008348 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008342:	2104      	movs	r1, #4
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008348:	2064      	movs	r0, #100	; 0x64
 800834a:	f004 fd6e 	bl	800ce2a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f004 fc3c 	bl	800cbcc <USBH_LL_GetSpeed>
 8008354:	4603      	mov	r3, r0
 8008356:	461a      	mov	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2205      	movs	r2, #5
 8008362:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008364:	2100      	movs	r1, #0
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f001 fb21 	bl	80099ae <USBH_AllocPipe>
 800836c:	4603      	mov	r3, r0
 800836e:	461a      	mov	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008374:	2180      	movs	r1, #128	; 0x80
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f001 fb19 	bl	80099ae <USBH_AllocPipe>
 800837c:	4603      	mov	r3, r0
 800837e:	461a      	mov	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	7919      	ldrb	r1, [r3, #4]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008398:	b292      	uxth	r2, r2
 800839a:	9202      	str	r2, [sp, #8]
 800839c:	2200      	movs	r2, #0
 800839e:	9201      	str	r2, [sp, #4]
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	4603      	mov	r3, r0
 80083a4:	2280      	movs	r2, #128	; 0x80
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 fad2 	bl	8009950 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	7959      	ldrb	r1, [r3, #5]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80083c0:	b292      	uxth	r2, r2
 80083c2:	9202      	str	r2, [sp, #8]
 80083c4:	2200      	movs	r2, #0
 80083c6:	9201      	str	r2, [sp, #4]
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	4603      	mov	r3, r0
 80083cc:	2200      	movs	r2, #0
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f001 fabe 	bl	8009950 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80083e8:	2200      	movs	r2, #0
 80083ea:	4619      	mov	r1, r3
 80083ec:	f001 fc82 	bl	8009cf4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80083f0:	e160      	b.n	80086b4 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f964 	bl	80086c0 <USBH_HandleEnum>
 80083f8:	4603      	mov	r3, r0
 80083fa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80083fc:	7bbb      	ldrb	r3, [r7, #14]
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b00      	cmp	r3, #0
 8008402:	f040 8152 	bne.w	80086aa <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008414:	2b01      	cmp	r3, #1
 8008416:	d103      	bne.n	8008420 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2208      	movs	r2, #8
 800841c:	701a      	strb	r2, [r3, #0]
 800841e:	e002      	b.n	8008426 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2207      	movs	r2, #7
 8008424:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2205      	movs	r2, #5
 800842a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800843a:	2200      	movs	r2, #0
 800843c:	4619      	mov	r1, r3
 800843e:	f001 fc59 	bl	8009cf4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008442:	e132      	b.n	80086aa <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800844a:	2b00      	cmp	r3, #0
 800844c:	f000 812f 	beq.w	80086ae <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008456:	2101      	movs	r1, #1
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2208      	movs	r2, #8
 8008460:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2205      	movs	r2, #5
 8008466:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008476:	2200      	movs	r2, #0
 8008478:	4619      	mov	r1, r3
 800847a:	f001 fc3b 	bl	8009cf4 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800847e:	e116      	b.n	80086ae <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008486:	b29b      	uxth	r3, r3
 8008488:	4619      	mov	r1, r3
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fcf6 	bl	8008e7c <USBH_SetCfg>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d102      	bne.n	800849c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2209      	movs	r2, #9
 800849a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80084b0:	2200      	movs	r2, #0
 80084b2:	4619      	mov	r1, r3
 80084b4:	f001 fc1e 	bl	8009cf4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80084b8:	e0fc      	b.n	80086b4 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80084c0:	f003 0320 	and.w	r3, r3, #32
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00a      	beq.n	80084de <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80084c8:	2101      	movs	r1, #1
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fcf9 	bl	8008ec2 <USBH_SetFeature>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d106      	bne.n	80084e4 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	220a      	movs	r2, #10
 80084da:	701a      	strb	r2, [r3, #0]
 80084dc:	e002      	b.n	80084e4 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	220a      	movs	r2, #10
 80084e2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80084f8:	2200      	movs	r2, #0
 80084fa:	4619      	mov	r1, r3
 80084fc:	f001 fbfa 	bl	8009cf4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008500:	e0d8      	b.n	80086b4 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008508:	2b00      	cmp	r3, #0
 800850a:	d03f      	beq.n	800858c <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008514:	2300      	movs	r3, #0
 8008516:	73fb      	strb	r3, [r7, #15]
 8008518:	e016      	b.n	8008548 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800851a:	7bfa      	ldrb	r2, [r7, #15]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	32de      	adds	r2, #222	; 0xde
 8008520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008524:	791a      	ldrb	r2, [r3, #4]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800852c:	429a      	cmp	r2, r3
 800852e:	d108      	bne.n	8008542 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008530:	7bfa      	ldrb	r2, [r7, #15]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	32de      	adds	r2, #222	; 0xde
 8008536:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008540:	e005      	b.n	800854e <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008542:	7bfb      	ldrb	r3, [r7, #15]
 8008544:	3301      	adds	r3, #1
 8008546:	73fb      	strb	r3, [r7, #15]
 8008548:	7bfb      	ldrb	r3, [r7, #15]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d0e5      	beq.n	800851a <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008554:	2b00      	cmp	r3, #0
 8008556:	d016      	beq.n	8008586 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	4798      	blx	r3
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d109      	bne.n	800857e <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2206      	movs	r2, #6
 800856e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008576:	2103      	movs	r1, #3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	4798      	blx	r3
 800857c:	e006      	b.n	800858c <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	220d      	movs	r2, #13
 8008582:	701a      	strb	r2, [r3, #0]
 8008584:	e002      	b.n	800858c <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	220d      	movs	r2, #13
 800858a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2205      	movs	r2, #5
 8008590:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80085a0:	2200      	movs	r2, #0
 80085a2:	4619      	mov	r1, r3
 80085a4:	f001 fba6 	bl	8009cf4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80085a8:	e084      	b.n	80086b4 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d017      	beq.n	80085e4 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	4798      	blx	r3
 80085c0:	4603      	mov	r3, r0
 80085c2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80085c4:	7bbb      	ldrb	r3, [r7, #14]
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d103      	bne.n	80085d4 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	220b      	movs	r2, #11
 80085d0:	701a      	strb	r2, [r3, #0]
 80085d2:	e00a      	b.n	80085ea <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d106      	bne.n	80085ea <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	220d      	movs	r2, #13
 80085e0:	701a      	strb	r2, [r3, #0]
 80085e2:	e002      	b.n	80085ea <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	220d      	movs	r2, #13
 80085e8:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2205      	movs	r2, #5
 80085ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80085fe:	2200      	movs	r2, #0
 8008600:	4619      	mov	r1, r3
 8008602:	f001 fb77 	bl	8009cf4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008606:	e055      	b.n	80086b4 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800860e:	2b00      	cmp	r3, #0
 8008610:	d04f      	beq.n	80086b2 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008618:	695b      	ldr	r3, [r3, #20]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	4798      	blx	r3
      }
      break;
 800861e:	e048      	b.n	80086b2 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7ff fcf7 	bl	800801c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008634:	2b00      	cmp	r3, #0
 8008636:	d009      	beq.n	800864c <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008652:	2b00      	cmp	r3, #0
 8008654:	d005      	beq.n	8008662 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800865c:	2105      	movs	r1, #5
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b01      	cmp	r3, #1
 800866c:	d107      	bne.n	800867e <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f7ff fdb0 	bl	80081dc <USBH_Start>
 800867c:	e002      	b.n	8008684 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f004 fa6e 	bl	800cb60 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008698:	2200      	movs	r2, #0
 800869a:	4619      	mov	r1, r3
 800869c:	f001 fb2a 	bl	8009cf4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80086a0:	e008      	b.n	80086b4 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 80086a2:	bf00      	nop
 80086a4:	e006      	b.n	80086b4 <USBH_Process+0x4b8>
      break;
 80086a6:	bf00      	nop
 80086a8:	e004      	b.n	80086b4 <USBH_Process+0x4b8>
      break;
 80086aa:	bf00      	nop
 80086ac:	e002      	b.n	80086b4 <USBH_Process+0x4b8>
    break;
 80086ae:	bf00      	nop
 80086b0:	e000      	b.n	80086b4 <USBH_Process+0x4b8>
      break;
 80086b2:	bf00      	nop
  }
  return USBH_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop

080086c0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b088      	sub	sp, #32
 80086c4:	af04      	add	r7, sp, #16
 80086c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80086c8:	2301      	movs	r3, #1
 80086ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80086cc:	2301      	movs	r3, #1
 80086ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	785b      	ldrb	r3, [r3, #1]
 80086d4:	2b07      	cmp	r3, #7
 80086d6:	f200 8208 	bhi.w	8008aea <USBH_HandleEnum+0x42a>
 80086da:	a201      	add	r2, pc, #4	; (adr r2, 80086e0 <USBH_HandleEnum+0x20>)
 80086dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e0:	08008701 	.word	0x08008701
 80086e4:	080087bf 	.word	0x080087bf
 80086e8:	08008829 	.word	0x08008829
 80086ec:	080088b7 	.word	0x080088b7
 80086f0:	08008921 	.word	0x08008921
 80086f4:	08008991 	.word	0x08008991
 80086f8:	08008a2d 	.word	0x08008a2d
 80086fc:	08008aab 	.word	0x08008aab
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008700:	2108      	movs	r1, #8
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 faea 	bl	8008cdc <USBH_Get_DevDesc>
 8008708:	4603      	mov	r3, r0
 800870a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800870c:	7bbb      	ldrb	r3, [r7, #14]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d130      	bne.n	8008774 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	7919      	ldrb	r1, [r3, #4]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008736:	b292      	uxth	r2, r2
 8008738:	9202      	str	r2, [sp, #8]
 800873a:	2200      	movs	r2, #0
 800873c:	9201      	str	r2, [sp, #4]
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	4603      	mov	r3, r0
 8008742:	2280      	movs	r2, #128	; 0x80
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f001 f903 	bl	8009950 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	7959      	ldrb	r1, [r3, #5]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800875e:	b292      	uxth	r2, r2
 8008760:	9202      	str	r2, [sp, #8]
 8008762:	2200      	movs	r2, #0
 8008764:	9201      	str	r2, [sp, #4]
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	4603      	mov	r3, r0
 800876a:	2200      	movs	r2, #0
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f001 f8ef 	bl	8009950 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008772:	e1bc      	b.n	8008aee <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008774:	7bbb      	ldrb	r3, [r7, #14]
 8008776:	2b03      	cmp	r3, #3
 8008778:	f040 81b9 	bne.w	8008aee <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008782:	3301      	adds	r3, #1
 8008784:	b2da      	uxtb	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008792:	2b03      	cmp	r3, #3
 8008794:	d903      	bls.n	800879e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	220d      	movs	r2, #13
 800879a:	701a      	strb	r2, [r3, #0]
      break;
 800879c:	e1a7      	b.n	8008aee <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	795b      	ldrb	r3, [r3, #5]
 80087a2:	4619      	mov	r1, r3
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f001 f923 	bl	80099f0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	791b      	ldrb	r3, [r3, #4]
 80087ae:	4619      	mov	r1, r3
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f001 f91d 	bl	80099f0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	701a      	strb	r2, [r3, #0]
      break;
 80087bc:	e197      	b.n	8008aee <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80087be:	2112      	movs	r1, #18
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fa8b 	bl	8008cdc <USBH_Get_DevDesc>
 80087c6:	4603      	mov	r3, r0
 80087c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80087ca:	7bbb      	ldrb	r3, [r7, #14]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d103      	bne.n	80087d8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2202      	movs	r2, #2
 80087d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80087d6:	e18c      	b.n	8008af2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087d8:	7bbb      	ldrb	r3, [r7, #14]
 80087da:	2b03      	cmp	r3, #3
 80087dc:	f040 8189 	bne.w	8008af2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087e6:	3301      	adds	r3, #1
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087f6:	2b03      	cmp	r3, #3
 80087f8:	d903      	bls.n	8008802 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	220d      	movs	r2, #13
 80087fe:	701a      	strb	r2, [r3, #0]
      break;
 8008800:	e177      	b.n	8008af2 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	795b      	ldrb	r3, [r3, #5]
 8008806:	4619      	mov	r1, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f001 f8f1 	bl	80099f0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	791b      	ldrb	r3, [r3, #4]
 8008812:	4619      	mov	r1, r3
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f001 f8eb 	bl	80099f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	701a      	strb	r2, [r3, #0]
      break;
 8008826:	e164      	b.n	8008af2 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008828:	2101      	movs	r1, #1
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fb02 	bl	8008e34 <USBH_SetAddress>
 8008830:	4603      	mov	r3, r0
 8008832:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008834:	7bbb      	ldrb	r3, [r7, #14]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d132      	bne.n	80088a0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800883a:	2002      	movs	r0, #2
 800883c:	f004 faf5 	bl	800ce2a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2203      	movs	r2, #3
 800884c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	7919      	ldrb	r1, [r3, #4]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008862:	b292      	uxth	r2, r2
 8008864:	9202      	str	r2, [sp, #8]
 8008866:	2200      	movs	r2, #0
 8008868:	9201      	str	r2, [sp, #4]
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	4603      	mov	r3, r0
 800886e:	2280      	movs	r2, #128	; 0x80
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f001 f86d 	bl	8009950 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	7959      	ldrb	r1, [r3, #5]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800888a:	b292      	uxth	r2, r2
 800888c:	9202      	str	r2, [sp, #8]
 800888e:	2200      	movs	r2, #0
 8008890:	9201      	str	r2, [sp, #4]
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	4603      	mov	r3, r0
 8008896:	2200      	movs	r2, #0
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f001 f859 	bl	8009950 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800889e:	e12a      	b.n	8008af6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088a0:	7bbb      	ldrb	r3, [r7, #14]
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	f040 8127 	bne.w	8008af6 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	220d      	movs	r2, #13
 80088ac:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	705a      	strb	r2, [r3, #1]
      break;
 80088b4:	e11f      	b.n	8008af6 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80088b6:	2109      	movs	r1, #9
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 fa37 	bl	8008d2c <USBH_Get_CfgDesc>
 80088be:	4603      	mov	r3, r0
 80088c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80088c2:	7bbb      	ldrb	r3, [r7, #14]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d103      	bne.n	80088d0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2204      	movs	r2, #4
 80088cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80088ce:	e114      	b.n	8008afa <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088d0:	7bbb      	ldrb	r3, [r7, #14]
 80088d2:	2b03      	cmp	r3, #3
 80088d4:	f040 8111 	bne.w	8008afa <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80088de:	3301      	adds	r3, #1
 80088e0:	b2da      	uxtb	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80088ee:	2b03      	cmp	r3, #3
 80088f0:	d903      	bls.n	80088fa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	220d      	movs	r2, #13
 80088f6:	701a      	strb	r2, [r3, #0]
      break;
 80088f8:	e0ff      	b.n	8008afa <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	795b      	ldrb	r3, [r3, #5]
 80088fe:	4619      	mov	r1, r3
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f001 f875 	bl	80099f0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	791b      	ldrb	r3, [r3, #4]
 800890a:	4619      	mov	r1, r3
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f001 f86f 	bl	80099f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	701a      	strb	r2, [r3, #0]
      break;
 800891e:	e0ec      	b.n	8008afa <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008926:	4619      	mov	r1, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f9ff 	bl	8008d2c <USBH_Get_CfgDesc>
 800892e:	4603      	mov	r3, r0
 8008930:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008932:	7bbb      	ldrb	r3, [r7, #14]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d103      	bne.n	8008940 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2205      	movs	r2, #5
 800893c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800893e:	e0de      	b.n	8008afe <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008940:	7bbb      	ldrb	r3, [r7, #14]
 8008942:	2b03      	cmp	r3, #3
 8008944:	f040 80db 	bne.w	8008afe <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800894e:	3301      	adds	r3, #1
 8008950:	b2da      	uxtb	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800895e:	2b03      	cmp	r3, #3
 8008960:	d903      	bls.n	800896a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	220d      	movs	r2, #13
 8008966:	701a      	strb	r2, [r3, #0]
      break;
 8008968:	e0c9      	b.n	8008afe <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	795b      	ldrb	r3, [r3, #5]
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f001 f83d 	bl	80099f0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	791b      	ldrb	r3, [r3, #4]
 800897a:	4619      	mov	r1, r3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f001 f837 	bl	80099f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	701a      	strb	r2, [r3, #0]
      break;
 800898e:	e0b6      	b.n	8008afe <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008996:	2b00      	cmp	r3, #0
 8008998:	d036      	beq.n	8008a08 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80089a6:	23ff      	movs	r3, #255	; 0xff
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f9e3 	bl	8008d74 <USBH_Get_StringDesc>
 80089ae:	4603      	mov	r3, r0
 80089b0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80089b2:	7bbb      	ldrb	r3, [r7, #14]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d111      	bne.n	80089dc <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2206      	movs	r2, #6
 80089bc:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2205      	movs	r2, #5
 80089c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80089d2:	2200      	movs	r2, #0
 80089d4:	4619      	mov	r1, r3
 80089d6:	f001 f98d 	bl	8009cf4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80089da:	e092      	b.n	8008b02 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089dc:	7bbb      	ldrb	r3, [r7, #14]
 80089de:	2b03      	cmp	r3, #3
 80089e0:	f040 808f 	bne.w	8008b02 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2206      	movs	r2, #6
 80089e8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2205      	movs	r2, #5
 80089ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80089fe:	2200      	movs	r2, #0
 8008a00:	4619      	mov	r1, r3
 8008a02:	f001 f977 	bl	8009cf4 <osMessagePut>
      break;
 8008a06:	e07c      	b.n	8008b02 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2206      	movs	r2, #6
 8008a0c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2205      	movs	r2, #5
 8008a12:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008a22:	2200      	movs	r2, #0
 8008a24:	4619      	mov	r1, r3
 8008a26:	f001 f965 	bl	8009cf4 <osMessagePut>
      break;
 8008a2a:	e06a      	b.n	8008b02 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d027      	beq.n	8008a86 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008a42:	23ff      	movs	r3, #255	; 0xff
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f995 	bl	8008d74 <USBH_Get_StringDesc>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008a4e:	7bbb      	ldrb	r3, [r7, #14]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d103      	bne.n	8008a5c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2207      	movs	r2, #7
 8008a58:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008a5a:	e054      	b.n	8008b06 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a5c:	7bbb      	ldrb	r3, [r7, #14]
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	d151      	bne.n	8008b06 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2207      	movs	r2, #7
 8008a66:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2205      	movs	r2, #5
 8008a6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	4619      	mov	r1, r3
 8008a80:	f001 f938 	bl	8009cf4 <osMessagePut>
      break;
 8008a84:	e03f      	b.n	8008b06 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2207      	movs	r2, #7
 8008a8a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2205      	movs	r2, #5
 8008a90:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	f001 f926 	bl	8009cf4 <osMessagePut>
      break;
 8008aa8:	e02d      	b.n	8008b06 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d017      	beq.n	8008ae4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008ac0:	23ff      	movs	r3, #255	; 0xff
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f956 	bl	8008d74 <USBH_Get_StringDesc>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008acc:	7bbb      	ldrb	r3, [r7, #14]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d102      	bne.n	8008ad8 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008ad6:	e018      	b.n	8008b0a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ad8:	7bbb      	ldrb	r3, [r7, #14]
 8008ada:	2b03      	cmp	r3, #3
 8008adc:	d115      	bne.n	8008b0a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ae2:	e012      	b.n	8008b0a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ae8:	e00f      	b.n	8008b0a <USBH_HandleEnum+0x44a>

    default:
      break;
 8008aea:	bf00      	nop
 8008aec:	e00e      	b.n	8008b0c <USBH_HandleEnum+0x44c>
      break;
 8008aee:	bf00      	nop
 8008af0:	e00c      	b.n	8008b0c <USBH_HandleEnum+0x44c>
      break;
 8008af2:	bf00      	nop
 8008af4:	e00a      	b.n	8008b0c <USBH_HandleEnum+0x44c>
      break;
 8008af6:	bf00      	nop
 8008af8:	e008      	b.n	8008b0c <USBH_HandleEnum+0x44c>
      break;
 8008afa:	bf00      	nop
 8008afc:	e006      	b.n	8008b0c <USBH_HandleEnum+0x44c>
      break;
 8008afe:	bf00      	nop
 8008b00:	e004      	b.n	8008b0c <USBH_HandleEnum+0x44c>
      break;
 8008b02:	bf00      	nop
 8008b04:	e002      	b.n	8008b0c <USBH_HandleEnum+0x44c>
      break;
 8008b06:	bf00      	nop
 8008b08:	e000      	b.n	8008b0c <USBH_HandleEnum+0x44c>
      break;
 8008b0a:	bf00      	nop
  }
  return Status;
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop

08008b18 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008b2a:	bf00      	nop
 8008b2c:	370c      	adds	r7, #12
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b082      	sub	sp, #8
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008b44:	1c5a      	adds	r2, r3, #1
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 f804 	bl	8008b5a <USBH_HandleSof>
}
 8008b52:	bf00      	nop
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b082      	sub	sp, #8
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	2b0b      	cmp	r3, #11
 8008b6a:	d10a      	bne.n	8008b82 <USBH_HandleSof+0x28>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d005      	beq.n	8008b82 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	4798      	blx	r3
  }
}
 8008b82:	bf00      	nop
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b082      	sub	sp, #8
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2201      	movs	r2, #1
 8008b96:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008bae:	2200      	movs	r2, #0
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	f001 f89f 	bl	8009cf4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008bb6:	bf00      	nop
}
 8008bb8:	3708      	adds	r7, #8
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008bce:	bf00      	nop
}
 8008bd0:	370c      	adds	r7, #12
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr

08008bda <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b082      	sub	sp, #8
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008c0e:	2200      	movs	r2, #0
 8008c10:	4619      	mov	r1, r3
 8008c12:	f001 f86f 	bl	8009cf4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f003 ffa8 	bl	800cb96 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	791b      	ldrb	r3, [r3, #4]
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fecf 	bl	80099f0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	795b      	ldrb	r3, [r3, #5]
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fec9 	bl	80099f0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008c72:	2200      	movs	r2, #0
 8008c74:	4619      	mov	r1, r3
 8008c76:	f001 f83d 	bl	8009cf4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3708      	adds	r7, #8
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b086      	sub	sp, #24
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8008c92:	f107 030c 	add.w	r3, r7, #12
 8008c96:	f04f 32ff 	mov.w	r2, #4294967295
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f001 f86a 	bl	8009d74 <osMessageGet>
    if (event.status == osEventMessage)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2b10      	cmp	r3, #16
 8008ca4:	d1f2      	bne.n	8008c8c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7ff faa8 	bl	80081fc <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8008cac:	e7ee      	b.n	8008c8c <USBH_Process_OS+0x8>

08008cae <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b082      	sub	sp, #8
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008cca:	2200      	movs	r2, #0
 8008ccc:	4619      	mov	r1, r3
 8008cce:	f001 f811 	bl	8009cf4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3708      	adds	r7, #8
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b086      	sub	sp, #24
 8008ce0:	af02      	add	r7, sp, #8
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008cee:	78fb      	ldrb	r3, [r7, #3]
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	9300      	str	r3, [sp, #0]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008cfa:	2100      	movs	r1, #0
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f864 	bl	8008dca <USBH_GetDescriptor>
 8008d02:	4603      	mov	r3, r0
 8008d04:	73fb      	strb	r3, [r7, #15]
 8008d06:	7bfb      	ldrb	r3, [r7, #15]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10a      	bne.n	8008d22 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008d18:	78fa      	ldrb	r2, [r7, #3]
 8008d1a:	b292      	uxth	r2, r2
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	f000 f918 	bl	8008f52 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b086      	sub	sp, #24
 8008d30:	af02      	add	r7, sp, #8
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	460b      	mov	r3, r1
 8008d36:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	331c      	adds	r3, #28
 8008d3c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008d3e:	887b      	ldrh	r3, [r7, #2]
 8008d40:	9300      	str	r3, [sp, #0]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d48:	2100      	movs	r1, #0
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f83d 	bl	8008dca <USBH_GetDescriptor>
 8008d50:	4603      	mov	r3, r0
 8008d52:	72fb      	strb	r3, [r7, #11]
 8008d54:	7afb      	ldrb	r3, [r7, #11]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d107      	bne.n	8008d6a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008d60:	887a      	ldrh	r2, [r7, #2]
 8008d62:	68f9      	ldr	r1, [r7, #12]
 8008d64:	4618      	mov	r0, r3
 8008d66:	f000 f964 	bl	8009032 <USBH_ParseCfgDesc>
  }

  return status;
 8008d6a:	7afb      	ldrb	r3, [r7, #11]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b088      	sub	sp, #32
 8008d78:	af02      	add	r7, sp, #8
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	607a      	str	r2, [r7, #4]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	460b      	mov	r3, r1
 8008d82:	72fb      	strb	r3, [r7, #11]
 8008d84:	4613      	mov	r3, r2
 8008d86:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008d88:	7afb      	ldrb	r3, [r7, #11]
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008d90:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008d98:	893b      	ldrh	r3, [r7, #8]
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	2100      	movs	r1, #0
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f000 f812 	bl	8008dca <USBH_GetDescriptor>
 8008da6:	4603      	mov	r3, r0
 8008da8:	75fb      	strb	r3, [r7, #23]
 8008daa:	7dfb      	ldrb	r3, [r7, #23]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d107      	bne.n	8008dc0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008db6:	893a      	ldrh	r2, [r7, #8]
 8008db8:	6879      	ldr	r1, [r7, #4]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 fa37 	bl	800922e <USBH_ParseStringDesc>
  }

  return status;
 8008dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3718      	adds	r7, #24
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b084      	sub	sp, #16
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	60f8      	str	r0, [r7, #12]
 8008dd2:	607b      	str	r3, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	72fb      	strb	r3, [r7, #11]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	789b      	ldrb	r3, [r3, #2]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d11c      	bne.n	8008e1e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008de4:	7afb      	ldrb	r3, [r7, #11]
 8008de6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008dea:	b2da      	uxtb	r2, r3
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2206      	movs	r2, #6
 8008df4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	893a      	ldrh	r2, [r7, #8]
 8008dfa:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008dfc:	893b      	ldrh	r3, [r7, #8]
 8008dfe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008e02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e06:	d104      	bne.n	8008e12 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f240 4209 	movw	r2, #1033	; 0x409
 8008e0e:	829a      	strh	r2, [r3, #20]
 8008e10:	e002      	b.n	8008e18 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2200      	movs	r2, #0
 8008e16:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	8b3a      	ldrh	r2, [r7, #24]
 8008e1c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008e1e:	8b3b      	ldrh	r3, [r7, #24]
 8008e20:	461a      	mov	r2, r3
 8008e22:	6879      	ldr	r1, [r7, #4]
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f000 fa50 	bl	80092ca <USBH_CtlReq>
 8008e2a:	4603      	mov	r3, r0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	789b      	ldrb	r3, [r3, #2]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d10f      	bne.n	8008e68 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2205      	movs	r2, #5
 8008e52:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008e54:	78fb      	ldrb	r3, [r7, #3]
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008e68:	2200      	movs	r2, #0
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fa2c 	bl	80092ca <USBH_CtlReq>
 8008e72:	4603      	mov	r3, r0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	460b      	mov	r3, r1
 8008e86:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	789b      	ldrb	r3, [r3, #2]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d10e      	bne.n	8008eae <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2209      	movs	r2, #9
 8008e9a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	887a      	ldrh	r2, [r7, #2]
 8008ea0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008eae:	2200      	movs	r2, #0
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fa09 	bl	80092ca <USBH_CtlReq>
 8008eb8:	4603      	mov	r3, r0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3708      	adds	r7, #8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b082      	sub	sp, #8
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
 8008eca:	460b      	mov	r3, r1
 8008ecc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	789b      	ldrb	r3, [r3, #2]
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d10f      	bne.n	8008ef6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2203      	movs	r2, #3
 8008ee0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008ee2:	78fb      	ldrb	r3, [r7, #3]
 8008ee4:	b29a      	uxth	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	2100      	movs	r1, #0
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f9e5 	bl	80092ca <USBH_CtlReq>
 8008f00:	4603      	mov	r3, r0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3708      	adds	r7, #8
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b082      	sub	sp, #8
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
 8008f12:	460b      	mov	r3, r1
 8008f14:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	789b      	ldrb	r3, [r3, #2]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d10f      	bne.n	8008f3e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2202      	movs	r2, #2
 8008f22:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008f30:	78fb      	ldrb	r3, [r7, #3]
 8008f32:	b29a      	uxth	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008f3e:	2200      	movs	r2, #0
 8008f40:	2100      	movs	r1, #0
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f9c1 	bl	80092ca <USBH_CtlReq>
 8008f48:	4603      	mov	r3, r0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008f52:	b480      	push	{r7}
 8008f54:	b085      	sub	sp, #20
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	60f8      	str	r0, [r7, #12]
 8008f5a:	60b9      	str	r1, [r7, #8]
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	781a      	ldrb	r2, [r3, #0]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	785a      	ldrb	r2, [r3, #1]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	3302      	adds	r3, #2
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	3303      	adds	r3, #3
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	021b      	lsls	r3, r3, #8
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	4313      	orrs	r3, r2
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	791a      	ldrb	r2, [r3, #4]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	795a      	ldrb	r2, [r3, #5]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	799a      	ldrb	r2, [r3, #6]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	79da      	ldrb	r2, [r3, #7]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008fac:	88fb      	ldrh	r3, [r7, #6]
 8008fae:	2b08      	cmp	r3, #8
 8008fb0:	d939      	bls.n	8009026 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	3308      	adds	r3, #8
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	3309      	adds	r3, #9
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	021b      	lsls	r3, r3, #8
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	330a      	adds	r3, #10
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	330b      	adds	r3, #11
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	021b      	lsls	r3, r3, #8
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	330c      	adds	r3, #12
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	330d      	adds	r3, #13
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	021b      	lsls	r3, r3, #8
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	4313      	orrs	r3, r2
 8009000:	b29a      	uxth	r2, r3
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	7b9a      	ldrb	r2, [r3, #14]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	7bda      	ldrb	r2, [r3, #15]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	7c1a      	ldrb	r2, [r3, #16]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	7c5a      	ldrb	r2, [r3, #17]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	745a      	strb	r2, [r3, #17]
  }
}
 8009026:	bf00      	nop
 8009028:	3714      	adds	r7, #20
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr

08009032 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b08a      	sub	sp, #40	; 0x28
 8009036:	af00      	add	r7, sp, #0
 8009038:	60f8      	str	r0, [r7, #12]
 800903a:	60b9      	str	r1, [r7, #8]
 800903c:	4613      	mov	r3, r2
 800903e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009044:	2300      	movs	r3, #0
 8009046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800904a:	2300      	movs	r3, #0
 800904c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	781a      	ldrb	r2, [r3, #0]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	785a      	ldrb	r2, [r3, #1]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	3302      	adds	r3, #2
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	b29a      	uxth	r2, r3
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	3303      	adds	r3, #3
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	b29b      	uxth	r3, r3
 8009074:	021b      	lsls	r3, r3, #8
 8009076:	b29b      	uxth	r3, r3
 8009078:	4313      	orrs	r3, r2
 800907a:	b29a      	uxth	r2, r3
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	791a      	ldrb	r2, [r3, #4]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	795a      	ldrb	r2, [r3, #5]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	799a      	ldrb	r2, [r3, #6]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	79da      	ldrb	r2, [r3, #7]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	7a1a      	ldrb	r2, [r3, #8]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80090a8:	88fb      	ldrh	r3, [r7, #6]
 80090aa:	2b09      	cmp	r3, #9
 80090ac:	d95f      	bls.n	800916e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80090ae:	2309      	movs	r3, #9
 80090b0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80090b2:	2300      	movs	r3, #0
 80090b4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80090b6:	e051      	b.n	800915c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80090b8:	f107 0316 	add.w	r3, r7, #22
 80090bc:	4619      	mov	r1, r3
 80090be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090c0:	f000 f8e8 	bl	8009294 <USBH_GetNextDesc>
 80090c4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80090c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c8:	785b      	ldrb	r3, [r3, #1]
 80090ca:	2b04      	cmp	r3, #4
 80090cc:	d146      	bne.n	800915c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80090ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80090d2:	221a      	movs	r2, #26
 80090d4:	fb02 f303 	mul.w	r3, r2, r3
 80090d8:	3308      	adds	r3, #8
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	4413      	add	r3, r2
 80090de:	3302      	adds	r3, #2
 80090e0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80090e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090e4:	69f8      	ldr	r0, [r7, #28]
 80090e6:	f000 f846 	bl	8009176 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80090ea:	2300      	movs	r3, #0
 80090ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80090f0:	2300      	movs	r3, #0
 80090f2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80090f4:	e022      	b.n	800913c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80090f6:	f107 0316 	add.w	r3, r7, #22
 80090fa:	4619      	mov	r1, r3
 80090fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090fe:	f000 f8c9 	bl	8009294 <USBH_GetNextDesc>
 8009102:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009106:	785b      	ldrb	r3, [r3, #1]
 8009108:	2b05      	cmp	r3, #5
 800910a:	d117      	bne.n	800913c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800910c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009110:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009114:	3201      	adds	r2, #1
 8009116:	00d2      	lsls	r2, r2, #3
 8009118:	211a      	movs	r1, #26
 800911a:	fb01 f303 	mul.w	r3, r1, r3
 800911e:	4413      	add	r3, r2
 8009120:	3308      	adds	r3, #8
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	4413      	add	r3, r2
 8009126:	3304      	adds	r3, #4
 8009128:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800912a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800912c:	69b8      	ldr	r0, [r7, #24]
 800912e:	f000 f851 	bl	80091d4 <USBH_ParseEPDesc>
            ep_ix++;
 8009132:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009136:	3301      	adds	r3, #1
 8009138:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	791b      	ldrb	r3, [r3, #4]
 8009140:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009144:	429a      	cmp	r2, r3
 8009146:	d204      	bcs.n	8009152 <USBH_ParseCfgDesc+0x120>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	885a      	ldrh	r2, [r3, #2]
 800914c:	8afb      	ldrh	r3, [r7, #22]
 800914e:	429a      	cmp	r2, r3
 8009150:	d8d1      	bhi.n	80090f6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009152:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009156:	3301      	adds	r3, #1
 8009158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800915c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009160:	2b01      	cmp	r3, #1
 8009162:	d804      	bhi.n	800916e <USBH_ParseCfgDesc+0x13c>
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	885a      	ldrh	r2, [r3, #2]
 8009168:	8afb      	ldrh	r3, [r7, #22]
 800916a:	429a      	cmp	r2, r3
 800916c:	d8a4      	bhi.n	80090b8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800916e:	bf00      	nop
 8009170:	3728      	adds	r7, #40	; 0x28
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009176:	b480      	push	{r7}
 8009178:	b083      	sub	sp, #12
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
 800917e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	781a      	ldrb	r2, [r3, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	785a      	ldrb	r2, [r3, #1]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	789a      	ldrb	r2, [r3, #2]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	78da      	ldrb	r2, [r3, #3]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	791a      	ldrb	r2, [r3, #4]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	795a      	ldrb	r2, [r3, #5]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	799a      	ldrb	r2, [r3, #6]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	79da      	ldrb	r2, [r3, #7]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	7a1a      	ldrb	r2, [r3, #8]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	721a      	strb	r2, [r3, #8]
}
 80091c8:	bf00      	nop
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	781a      	ldrb	r2, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	785a      	ldrb	r2, [r3, #1]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	789a      	ldrb	r2, [r3, #2]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	78da      	ldrb	r2, [r3, #3]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	3304      	adds	r3, #4
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	b29a      	uxth	r2, r3
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	3305      	adds	r3, #5
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	b29b      	uxth	r3, r3
 800920e:	021b      	lsls	r3, r3, #8
 8009210:	b29b      	uxth	r3, r3
 8009212:	4313      	orrs	r3, r2
 8009214:	b29a      	uxth	r2, r3
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	799a      	ldrb	r2, [r3, #6]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	719a      	strb	r2, [r3, #6]
}
 8009222:	bf00      	nop
 8009224:	370c      	adds	r7, #12
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800922e:	b480      	push	{r7}
 8009230:	b087      	sub	sp, #28
 8009232:	af00      	add	r7, sp, #0
 8009234:	60f8      	str	r0, [r7, #12]
 8009236:	60b9      	str	r1, [r7, #8]
 8009238:	4613      	mov	r3, r2
 800923a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	3301      	adds	r3, #1
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	2b03      	cmp	r3, #3
 8009244:	d120      	bne.n	8009288 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	1e9a      	subs	r2, r3, #2
 800924c:	88fb      	ldrh	r3, [r7, #6]
 800924e:	4293      	cmp	r3, r2
 8009250:	bf28      	it	cs
 8009252:	4613      	movcs	r3, r2
 8009254:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	3302      	adds	r3, #2
 800925a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800925c:	2300      	movs	r3, #0
 800925e:	82fb      	strh	r3, [r7, #22]
 8009260:	e00b      	b.n	800927a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009262:	8afb      	ldrh	r3, [r7, #22]
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	4413      	add	r3, r2
 8009268:	781a      	ldrb	r2, [r3, #0]
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	3301      	adds	r3, #1
 8009272:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009274:	8afb      	ldrh	r3, [r7, #22]
 8009276:	3302      	adds	r3, #2
 8009278:	82fb      	strh	r3, [r7, #22]
 800927a:	8afa      	ldrh	r2, [r7, #22]
 800927c:	8abb      	ldrh	r3, [r7, #20]
 800927e:	429a      	cmp	r2, r3
 8009280:	d3ef      	bcc.n	8009262 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	2200      	movs	r2, #0
 8009286:	701a      	strb	r2, [r3, #0]
  }
}
 8009288:	bf00      	nop
 800928a:	371c      	adds	r7, #28
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	881a      	ldrh	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	4413      	add	r3, r2
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4413      	add	r3, r2
 80092ba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80092bc:	68fb      	ldr	r3, [r7, #12]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3714      	adds	r7, #20
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr

080092ca <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b086      	sub	sp, #24
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	60f8      	str	r0, [r7, #12]
 80092d2:	60b9      	str	r1, [r7, #8]
 80092d4:	4613      	mov	r3, r2
 80092d6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80092d8:	2301      	movs	r3, #1
 80092da:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	789b      	ldrb	r3, [r3, #2]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d002      	beq.n	80092ea <USBH_CtlReq+0x20>
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d01d      	beq.n	8009324 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80092e8:	e043      	b.n	8009372 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	88fa      	ldrh	r2, [r7, #6]
 80092f4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2201      	movs	r2, #1
 80092fa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2202      	movs	r2, #2
 8009300:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009302:	2301      	movs	r3, #1
 8009304:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2203      	movs	r2, #3
 800930a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800931a:	2200      	movs	r2, #0
 800931c:	4619      	mov	r1, r3
 800931e:	f000 fce9 	bl	8009cf4 <osMessagePut>
      break;
 8009322:	e026      	b.n	8009372 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f000 f829 	bl	800937c <USBH_HandleControl>
 800932a:	4603      	mov	r3, r0
 800932c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800932e:	7dfb      	ldrb	r3, [r7, #23]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d002      	beq.n	800933a <USBH_CtlReq+0x70>
 8009334:	7dfb      	ldrb	r3, [r7, #23]
 8009336:	2b03      	cmp	r3, #3
 8009338:	d106      	bne.n	8009348 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2201      	movs	r2, #1
 800933e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	761a      	strb	r2, [r3, #24]
 8009346:	e005      	b.n	8009354 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8009348:	7dfb      	ldrb	r3, [r7, #23]
 800934a:	2b02      	cmp	r3, #2
 800934c:	d102      	bne.n	8009354 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2201      	movs	r2, #1
 8009352:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2203      	movs	r2, #3
 8009358:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009368:	2200      	movs	r2, #0
 800936a:	4619      	mov	r1, r3
 800936c:	f000 fcc2 	bl	8009cf4 <osMessagePut>
      break;
 8009370:	bf00      	nop
  }
  return status;
 8009372:	7dfb      	ldrb	r3, [r7, #23]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3718      	adds	r7, #24
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b086      	sub	sp, #24
 8009380:	af02      	add	r7, sp, #8
 8009382:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009384:	2301      	movs	r3, #1
 8009386:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009388:	2300      	movs	r3, #0
 800938a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	7e1b      	ldrb	r3, [r3, #24]
 8009390:	3b01      	subs	r3, #1
 8009392:	2b0a      	cmp	r3, #10
 8009394:	f200 822b 	bhi.w	80097ee <USBH_HandleControl+0x472>
 8009398:	a201      	add	r2, pc, #4	; (adr r2, 80093a0 <USBH_HandleControl+0x24>)
 800939a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800939e:	bf00      	nop
 80093a0:	080093cd 	.word	0x080093cd
 80093a4:	080093e7 	.word	0x080093e7
 80093a8:	08009489 	.word	0x08009489
 80093ac:	080094af 	.word	0x080094af
 80093b0:	0800953b 	.word	0x0800953b
 80093b4:	08009567 	.word	0x08009567
 80093b8:	08009629 	.word	0x08009629
 80093bc:	0800964b 	.word	0x0800964b
 80093c0:	080096dd 	.word	0x080096dd
 80093c4:	08009705 	.word	0x08009705
 80093c8:	08009797 	.word	0x08009797
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f103 0110 	add.w	r1, r3, #16
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	795b      	ldrb	r3, [r3, #5]
 80093d6:	461a      	mov	r2, r3
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 fa19 	bl	8009810 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2202      	movs	r2, #2
 80093e2:	761a      	strb	r2, [r3, #24]
      break;
 80093e4:	e20e      	b.n	8009804 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	795b      	ldrb	r3, [r3, #5]
 80093ea:	4619      	mov	r1, r3
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f003 fcbf 	bl	800cd70 <USBH_LL_GetURBState>
 80093f2:	4603      	mov	r3, r0
 80093f4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d12c      	bne.n	8009456 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	7c1b      	ldrb	r3, [r3, #16]
 8009400:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009404:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	8adb      	ldrh	r3, [r3, #22]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00a      	beq.n	8009424 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800940e:	7b7b      	ldrb	r3, [r7, #13]
 8009410:	2b80      	cmp	r3, #128	; 0x80
 8009412:	d103      	bne.n	800941c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2203      	movs	r2, #3
 8009418:	761a      	strb	r2, [r3, #24]
 800941a:	e00d      	b.n	8009438 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2205      	movs	r2, #5
 8009420:	761a      	strb	r2, [r3, #24]
 8009422:	e009      	b.n	8009438 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8009424:	7b7b      	ldrb	r3, [r7, #13]
 8009426:	2b80      	cmp	r3, #128	; 0x80
 8009428:	d103      	bne.n	8009432 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2209      	movs	r2, #9
 800942e:	761a      	strb	r2, [r3, #24]
 8009430:	e002      	b.n	8009438 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2207      	movs	r2, #7
 8009436:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2203      	movs	r2, #3
 800943c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800944c:	2200      	movs	r2, #0
 800944e:	4619      	mov	r1, r3
 8009450:	f000 fc50 	bl	8009cf4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009454:	e1cd      	b.n	80097f2 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009456:	7bbb      	ldrb	r3, [r7, #14]
 8009458:	2b04      	cmp	r3, #4
 800945a:	d003      	beq.n	8009464 <USBH_HandleControl+0xe8>
 800945c:	7bbb      	ldrb	r3, [r7, #14]
 800945e:	2b02      	cmp	r3, #2
 8009460:	f040 81c7 	bne.w	80097f2 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	220b      	movs	r2, #11
 8009468:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2203      	movs	r2, #3
 800946e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800947e:	2200      	movs	r2, #0
 8009480:	4619      	mov	r1, r3
 8009482:	f000 fc37 	bl	8009cf4 <osMessagePut>
      break;
 8009486:	e1b4      	b.n	80097f2 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800948e:	b29a      	uxth	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6899      	ldr	r1, [r3, #8]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	899a      	ldrh	r2, [r3, #12]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	791b      	ldrb	r3, [r3, #4]
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 f9f4 	bl	800988e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2204      	movs	r2, #4
 80094aa:	761a      	strb	r2, [r3, #24]
      break;
 80094ac:	e1aa      	b.n	8009804 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	791b      	ldrb	r3, [r3, #4]
 80094b2:	4619      	mov	r1, r3
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f003 fc5b 	bl	800cd70 <USBH_LL_GetURBState>
 80094ba:	4603      	mov	r3, r0
 80094bc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80094be:	7bbb      	ldrb	r3, [r7, #14]
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d110      	bne.n	80094e6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2209      	movs	r2, #9
 80094c8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2203      	movs	r2, #3
 80094ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80094de:	2200      	movs	r2, #0
 80094e0:	4619      	mov	r1, r3
 80094e2:	f000 fc07 	bl	8009cf4 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80094e6:	7bbb      	ldrb	r3, [r7, #14]
 80094e8:	2b05      	cmp	r3, #5
 80094ea:	d110      	bne.n	800950e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80094ec:	2303      	movs	r3, #3
 80094ee:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2203      	movs	r2, #3
 80094f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009504:	2200      	movs	r2, #0
 8009506:	4619      	mov	r1, r3
 8009508:	f000 fbf4 	bl	8009cf4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800950c:	e173      	b.n	80097f6 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800950e:	7bbb      	ldrb	r3, [r7, #14]
 8009510:	2b04      	cmp	r3, #4
 8009512:	f040 8170 	bne.w	80097f6 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	220b      	movs	r2, #11
 800951a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2203      	movs	r2, #3
 8009520:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009530:	2200      	movs	r2, #0
 8009532:	4619      	mov	r1, r3
 8009534:	f000 fbde 	bl	8009cf4 <osMessagePut>
      break;
 8009538:	e15d      	b.n	80097f6 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6899      	ldr	r1, [r3, #8]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	899a      	ldrh	r2, [r3, #12]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	7958      	ldrb	r0, [r3, #5]
 8009546:	2301      	movs	r3, #1
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	4603      	mov	r3, r0
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f979 	bl	8009844 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009558:	b29a      	uxth	r2, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2206      	movs	r2, #6
 8009562:	761a      	strb	r2, [r3, #24]
      break;
 8009564:	e14e      	b.n	8009804 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	795b      	ldrb	r3, [r3, #5]
 800956a:	4619      	mov	r1, r3
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f003 fbff 	bl	800cd70 <USBH_LL_GetURBState>
 8009572:	4603      	mov	r3, r0
 8009574:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009576:	7bbb      	ldrb	r3, [r7, #14]
 8009578:	2b01      	cmp	r3, #1
 800957a:	d111      	bne.n	80095a0 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2207      	movs	r2, #7
 8009580:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2203      	movs	r2, #3
 8009586:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009596:	2200      	movs	r2, #0
 8009598:	4619      	mov	r1, r3
 800959a:	f000 fbab 	bl	8009cf4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800959e:	e12c      	b.n	80097fa <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 80095a0:	7bbb      	ldrb	r3, [r7, #14]
 80095a2:	2b05      	cmp	r3, #5
 80095a4:	d113      	bne.n	80095ce <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	220c      	movs	r2, #12
 80095aa:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80095ac:	2303      	movs	r3, #3
 80095ae:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2203      	movs	r2, #3
 80095b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80095c4:	2200      	movs	r2, #0
 80095c6:	4619      	mov	r1, r3
 80095c8:	f000 fb94 	bl	8009cf4 <osMessagePut>
      break;
 80095cc:	e115      	b.n	80097fa <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 80095ce:	7bbb      	ldrb	r3, [r7, #14]
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d111      	bne.n	80095f8 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2205      	movs	r2, #5
 80095d8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2203      	movs	r2, #3
 80095de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80095ee:	2200      	movs	r2, #0
 80095f0:	4619      	mov	r1, r3
 80095f2:	f000 fb7f 	bl	8009cf4 <osMessagePut>
      break;
 80095f6:	e100      	b.n	80097fa <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 80095f8:	7bbb      	ldrb	r3, [r7, #14]
 80095fa:	2b04      	cmp	r3, #4
 80095fc:	f040 80fd 	bne.w	80097fa <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	220b      	movs	r2, #11
 8009604:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009606:	2302      	movs	r3, #2
 8009608:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2203      	movs	r2, #3
 800960e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800961e:	2200      	movs	r2, #0
 8009620:	4619      	mov	r1, r3
 8009622:	f000 fb67 	bl	8009cf4 <osMessagePut>
      break;
 8009626:	e0e8      	b.n	80097fa <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	791b      	ldrb	r3, [r3, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	2100      	movs	r1, #0
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f92c 	bl	800988e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800963c:	b29a      	uxth	r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2208      	movs	r2, #8
 8009646:	761a      	strb	r2, [r3, #24]

      break;
 8009648:	e0dc      	b.n	8009804 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	791b      	ldrb	r3, [r3, #4]
 800964e:	4619      	mov	r1, r3
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f003 fb8d 	bl	800cd70 <USBH_LL_GetURBState>
 8009656:	4603      	mov	r3, r0
 8009658:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800965a:	7bbb      	ldrb	r3, [r7, #14]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d113      	bne.n	8009688 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	220d      	movs	r2, #13
 8009664:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009666:	2300      	movs	r3, #0
 8009668:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2203      	movs	r2, #3
 800966e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800967e:	2200      	movs	r2, #0
 8009680:	4619      	mov	r1, r3
 8009682:	f000 fb37 	bl	8009cf4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009686:	e0ba      	b.n	80097fe <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 8009688:	7bbb      	ldrb	r3, [r7, #14]
 800968a:	2b04      	cmp	r3, #4
 800968c:	d111      	bne.n	80096b2 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	220b      	movs	r2, #11
 8009692:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2203      	movs	r2, #3
 8009698:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80096a8:	2200      	movs	r2, #0
 80096aa:	4619      	mov	r1, r3
 80096ac:	f000 fb22 	bl	8009cf4 <osMessagePut>
      break;
 80096b0:	e0a5      	b.n	80097fe <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 80096b2:	7bbb      	ldrb	r3, [r7, #14]
 80096b4:	2b05      	cmp	r3, #5
 80096b6:	f040 80a2 	bne.w	80097fe <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 80096ba:	2303      	movs	r3, #3
 80096bc:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2203      	movs	r2, #3
 80096c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80096d2:	2200      	movs	r2, #0
 80096d4:	4619      	mov	r1, r3
 80096d6:	f000 fb0d 	bl	8009cf4 <osMessagePut>
      break;
 80096da:	e090      	b.n	80097fe <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	795a      	ldrb	r2, [r3, #5]
 80096e0:	2301      	movs	r3, #1
 80096e2:	9300      	str	r3, [sp, #0]
 80096e4:	4613      	mov	r3, r2
 80096e6:	2200      	movs	r2, #0
 80096e8:	2100      	movs	r1, #0
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 f8aa 	bl	8009844 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	220a      	movs	r2, #10
 8009700:	761a      	strb	r2, [r3, #24]
      break;
 8009702:	e07f      	b.n	8009804 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	795b      	ldrb	r3, [r3, #5]
 8009708:	4619      	mov	r1, r3
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f003 fb30 	bl	800cd70 <USBH_LL_GetURBState>
 8009710:	4603      	mov	r3, r0
 8009712:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009714:	7bbb      	ldrb	r3, [r7, #14]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d113      	bne.n	8009742 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	220d      	movs	r2, #13
 8009722:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2203      	movs	r2, #3
 8009728:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009738:	2200      	movs	r2, #0
 800973a:	4619      	mov	r1, r3
 800973c:	f000 fada 	bl	8009cf4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009740:	e05f      	b.n	8009802 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009742:	7bbb      	ldrb	r3, [r7, #14]
 8009744:	2b02      	cmp	r3, #2
 8009746:	d111      	bne.n	800976c <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2209      	movs	r2, #9
 800974c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2203      	movs	r2, #3
 8009752:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009762:	2200      	movs	r2, #0
 8009764:	4619      	mov	r1, r3
 8009766:	f000 fac5 	bl	8009cf4 <osMessagePut>
      break;
 800976a:	e04a      	b.n	8009802 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800976c:	7bbb      	ldrb	r3, [r7, #14]
 800976e:	2b04      	cmp	r3, #4
 8009770:	d147      	bne.n	8009802 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	220b      	movs	r2, #11
 8009776:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2203      	movs	r2, #3
 800977c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800978c:	2200      	movs	r2, #0
 800978e:	4619      	mov	r1, r3
 8009790:	f000 fab0 	bl	8009cf4 <osMessagePut>
      break;
 8009794:	e035      	b.n	8009802 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	7e5b      	ldrb	r3, [r3, #25]
 800979a:	3301      	adds	r3, #1
 800979c:	b2da      	uxtb	r2, r3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	765a      	strb	r2, [r3, #25]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	7e5b      	ldrb	r3, [r3, #25]
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d806      	bhi.n	80097b8 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2201      	movs	r2, #1
 80097ae:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80097b6:	e025      	b.n	8009804 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80097be:	2106      	movs	r1, #6
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	795b      	ldrb	r3, [r3, #5]
 80097ce:	4619      	mov	r1, r3
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 f90d 	bl	80099f0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	791b      	ldrb	r3, [r3, #4]
 80097da:	4619      	mov	r1, r3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 f907 	bl	80099f0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80097e8:	2302      	movs	r3, #2
 80097ea:	73fb      	strb	r3, [r7, #15]
      break;
 80097ec:	e00a      	b.n	8009804 <USBH_HandleControl+0x488>

    default:
      break;
 80097ee:	bf00      	nop
 80097f0:	e008      	b.n	8009804 <USBH_HandleControl+0x488>
      break;
 80097f2:	bf00      	nop
 80097f4:	e006      	b.n	8009804 <USBH_HandleControl+0x488>
      break;
 80097f6:	bf00      	nop
 80097f8:	e004      	b.n	8009804 <USBH_HandleControl+0x488>
      break;
 80097fa:	bf00      	nop
 80097fc:	e002      	b.n	8009804 <USBH_HandleControl+0x488>
      break;
 80097fe:	bf00      	nop
 8009800:	e000      	b.n	8009804 <USBH_HandleControl+0x488>
      break;
 8009802:	bf00      	nop
  }

  return status;
 8009804:	7bfb      	ldrb	r3, [r7, #15]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop

08009810 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b088      	sub	sp, #32
 8009814:	af04      	add	r7, sp, #16
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	4613      	mov	r3, r2
 800981c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800981e:	79f9      	ldrb	r1, [r7, #7]
 8009820:	2300      	movs	r3, #0
 8009822:	9303      	str	r3, [sp, #12]
 8009824:	2308      	movs	r3, #8
 8009826:	9302      	str	r3, [sp, #8]
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	9301      	str	r3, [sp, #4]
 800982c:	2300      	movs	r3, #0
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	2300      	movs	r3, #0
 8009832:	2200      	movs	r2, #0
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f003 fa6a 	bl	800cd0e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b088      	sub	sp, #32
 8009848:	af04      	add	r7, sp, #16
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	4611      	mov	r1, r2
 8009850:	461a      	mov	r2, r3
 8009852:	460b      	mov	r3, r1
 8009854:	80fb      	strh	r3, [r7, #6]
 8009856:	4613      	mov	r3, r2
 8009858:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009860:	2b00      	cmp	r3, #0
 8009862:	d001      	beq.n	8009868 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009864:	2300      	movs	r3, #0
 8009866:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009868:	7979      	ldrb	r1, [r7, #5]
 800986a:	7e3b      	ldrb	r3, [r7, #24]
 800986c:	9303      	str	r3, [sp, #12]
 800986e:	88fb      	ldrh	r3, [r7, #6]
 8009870:	9302      	str	r3, [sp, #8]
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	9301      	str	r3, [sp, #4]
 8009876:	2301      	movs	r3, #1
 8009878:	9300      	str	r3, [sp, #0]
 800987a:	2300      	movs	r3, #0
 800987c:	2200      	movs	r2, #0
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f003 fa45 	bl	800cd0e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b088      	sub	sp, #32
 8009892:	af04      	add	r7, sp, #16
 8009894:	60f8      	str	r0, [r7, #12]
 8009896:	60b9      	str	r1, [r7, #8]
 8009898:	4611      	mov	r1, r2
 800989a:	461a      	mov	r2, r3
 800989c:	460b      	mov	r3, r1
 800989e:	80fb      	strh	r3, [r7, #6]
 80098a0:	4613      	mov	r3, r2
 80098a2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80098a4:	7979      	ldrb	r1, [r7, #5]
 80098a6:	2300      	movs	r3, #0
 80098a8:	9303      	str	r3, [sp, #12]
 80098aa:	88fb      	ldrh	r3, [r7, #6]
 80098ac:	9302      	str	r3, [sp, #8]
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	9301      	str	r3, [sp, #4]
 80098b2:	2301      	movs	r3, #1
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	2300      	movs	r3, #0
 80098b8:	2201      	movs	r2, #1
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f003 fa27 	bl	800cd0e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80098c0:	2300      	movs	r3, #0

}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b088      	sub	sp, #32
 80098ce:	af04      	add	r7, sp, #16
 80098d0:	60f8      	str	r0, [r7, #12]
 80098d2:	60b9      	str	r1, [r7, #8]
 80098d4:	4611      	mov	r1, r2
 80098d6:	461a      	mov	r2, r3
 80098d8:	460b      	mov	r3, r1
 80098da:	80fb      	strh	r3, [r7, #6]
 80098dc:	4613      	mov	r3, r2
 80098de:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d001      	beq.n	80098ee <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80098ea:	2300      	movs	r3, #0
 80098ec:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80098ee:	7979      	ldrb	r1, [r7, #5]
 80098f0:	7e3b      	ldrb	r3, [r7, #24]
 80098f2:	9303      	str	r3, [sp, #12]
 80098f4:	88fb      	ldrh	r3, [r7, #6]
 80098f6:	9302      	str	r3, [sp, #8]
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	9301      	str	r3, [sp, #4]
 80098fc:	2301      	movs	r3, #1
 80098fe:	9300      	str	r3, [sp, #0]
 8009900:	2302      	movs	r3, #2
 8009902:	2200      	movs	r2, #0
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f003 fa02 	bl	800cd0e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b088      	sub	sp, #32
 8009918:	af04      	add	r7, sp, #16
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	4611      	mov	r1, r2
 8009920:	461a      	mov	r2, r3
 8009922:	460b      	mov	r3, r1
 8009924:	80fb      	strh	r3, [r7, #6]
 8009926:	4613      	mov	r3, r2
 8009928:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800992a:	7979      	ldrb	r1, [r7, #5]
 800992c:	2300      	movs	r3, #0
 800992e:	9303      	str	r3, [sp, #12]
 8009930:	88fb      	ldrh	r3, [r7, #6]
 8009932:	9302      	str	r3, [sp, #8]
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	9301      	str	r3, [sp, #4]
 8009938:	2301      	movs	r3, #1
 800993a:	9300      	str	r3, [sp, #0]
 800993c:	2302      	movs	r3, #2
 800993e:	2201      	movs	r2, #1
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f003 f9e4 	bl	800cd0e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3710      	adds	r7, #16
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b086      	sub	sp, #24
 8009954:	af04      	add	r7, sp, #16
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	4608      	mov	r0, r1
 800995a:	4611      	mov	r1, r2
 800995c:	461a      	mov	r2, r3
 800995e:	4603      	mov	r3, r0
 8009960:	70fb      	strb	r3, [r7, #3]
 8009962:	460b      	mov	r3, r1
 8009964:	70bb      	strb	r3, [r7, #2]
 8009966:	4613      	mov	r3, r2
 8009968:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800996a:	7878      	ldrb	r0, [r7, #1]
 800996c:	78ba      	ldrb	r2, [r7, #2]
 800996e:	78f9      	ldrb	r1, [r7, #3]
 8009970:	8b3b      	ldrh	r3, [r7, #24]
 8009972:	9302      	str	r3, [sp, #8]
 8009974:	7d3b      	ldrb	r3, [r7, #20]
 8009976:	9301      	str	r3, [sp, #4]
 8009978:	7c3b      	ldrb	r3, [r7, #16]
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	4603      	mov	r3, r0
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f003 f977 	bl	800cc72 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009984:	2300      	movs	r3, #0
}
 8009986:	4618      	mov	r0, r3
 8009988:	3708      	adds	r7, #8
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b082      	sub	sp, #8
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
 8009996:	460b      	mov	r3, r1
 8009998:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800999a:	78fb      	ldrb	r3, [r7, #3]
 800999c:	4619      	mov	r1, r3
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f003 f996 	bl	800ccd0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3708      	adds	r7, #8
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b084      	sub	sp, #16
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
 80099b6:	460b      	mov	r3, r1
 80099b8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 f836 	bl	8009a2c <USBH_GetFreePipe>
 80099c0:	4603      	mov	r3, r0
 80099c2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80099c4:	89fb      	ldrh	r3, [r7, #14]
 80099c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d00a      	beq.n	80099e4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80099ce:	78fa      	ldrb	r2, [r7, #3]
 80099d0:	89fb      	ldrh	r3, [r7, #14]
 80099d2:	f003 030f 	and.w	r3, r3, #15
 80099d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80099da:	6879      	ldr	r1, [r7, #4]
 80099dc:	33e0      	adds	r3, #224	; 0xe0
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	440b      	add	r3, r1
 80099e2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80099e4:	89fb      	ldrh	r3, [r7, #14]
 80099e6:	b2db      	uxtb	r3, r3
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3710      	adds	r7, #16
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	460b      	mov	r3, r1
 80099fa:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80099fc:	78fb      	ldrb	r3, [r7, #3]
 80099fe:	2b0a      	cmp	r3, #10
 8009a00:	d80d      	bhi.n	8009a1e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009a02:	78fb      	ldrb	r3, [r7, #3]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	33e0      	adds	r3, #224	; 0xe0
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4413      	add	r3, r2
 8009a0c:	685a      	ldr	r2, [r3, #4]
 8009a0e:	78fb      	ldrb	r3, [r7, #3]
 8009a10:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009a14:	6879      	ldr	r1, [r7, #4]
 8009a16:	33e0      	adds	r3, #224	; 0xe0
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	440b      	add	r3, r1
 8009a1c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b085      	sub	sp, #20
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009a34:	2300      	movs	r3, #0
 8009a36:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009a38:	2300      	movs	r3, #0
 8009a3a:	73fb      	strb	r3, [r7, #15]
 8009a3c:	e00f      	b.n	8009a5e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	33e0      	adds	r3, #224	; 0xe0
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	4413      	add	r3, r2
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d102      	bne.n	8009a58 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	e007      	b.n	8009a68 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009a58:	7bfb      	ldrb	r3, [r7, #15]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	73fb      	strb	r3, [r7, #15]
 8009a5e:	7bfb      	ldrb	r3, [r7, #15]
 8009a60:	2b0a      	cmp	r3, #10
 8009a62:	d9ec      	bls.n	8009a3e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009a64:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3714      	adds	r7, #20
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a86:	2b84      	cmp	r3, #132	; 0x84
 8009a88:	d005      	beq.n	8009a96 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009a8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	4413      	add	r3, r2
 8009a92:	3303      	adds	r3, #3
 8009a94:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009a96:	68fb      	ldr	r3, [r7, #12]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3714      	adds	r7, #20
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aaa:	f3ef 8305 	mrs	r3, IPSR
 8009aae:	607b      	str	r3, [r7, #4]
  return(result);
 8009ab0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	bf14      	ite	ne
 8009ab6:	2301      	movne	r3, #1
 8009ab8:	2300      	moveq	r3, #0
 8009aba:	b2db      	uxtb	r3, r3
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009acc:	f001 fc7c 	bl	800b3c8 <vTaskStartScheduler>
  
  return osOK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009ada:	f7ff ffe3 	bl	8009aa4 <inHandlerMode>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d003      	beq.n	8009aec <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009ae4:	f001 fd8a 	bl	800b5fc <xTaskGetTickCountFromISR>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	e002      	b.n	8009af2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009aec:	f001 fd76 	bl	800b5dc <xTaskGetTickCount>
 8009af0:	4603      	mov	r3, r0
  }
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009af6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009af8:	b089      	sub	sp, #36	; 0x24
 8009afa:	af04      	add	r7, sp, #16
 8009afc:	6078      	str	r0, [r7, #4]
 8009afe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	695b      	ldr	r3, [r3, #20]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d020      	beq.n	8009b4a <osThreadCreate+0x54>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	699b      	ldr	r3, [r3, #24]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d01c      	beq.n	8009b4a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	685c      	ldr	r4, [r3, #4]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681d      	ldr	r5, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	691e      	ldr	r6, [r3, #16]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7ff ffa6 	bl	8009a74 <makeFreeRtosPriority>
 8009b28:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	695b      	ldr	r3, [r3, #20]
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b32:	9202      	str	r2, [sp, #8]
 8009b34:	9301      	str	r3, [sp, #4]
 8009b36:	9100      	str	r1, [sp, #0]
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	4632      	mov	r2, r6
 8009b3c:	4629      	mov	r1, r5
 8009b3e:	4620      	mov	r0, r4
 8009b40:	f001 f967 	bl	800ae12 <xTaskCreateStatic>
 8009b44:	4603      	mov	r3, r0
 8009b46:	60fb      	str	r3, [r7, #12]
 8009b48:	e01c      	b.n	8009b84 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	685c      	ldr	r4, [r3, #4]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b56:	b29e      	uxth	r6, r3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7ff ff88 	bl	8009a74 <makeFreeRtosPriority>
 8009b64:	4602      	mov	r2, r0
 8009b66:	f107 030c 	add.w	r3, r7, #12
 8009b6a:	9301      	str	r3, [sp, #4]
 8009b6c:	9200      	str	r2, [sp, #0]
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	4632      	mov	r2, r6
 8009b72:	4629      	mov	r1, r5
 8009b74:	4620      	mov	r0, r4
 8009b76:	f001 f9a6 	bl	800aec6 <xTaskCreate>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d001      	beq.n	8009b84 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009b80:	2300      	movs	r3, #0
 8009b82:	e000      	b.n	8009b86 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009b84:	68fb      	ldr	r3, [r7, #12]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3714      	adds	r7, #20
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b8e <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b082      	sub	sp, #8
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f001 fada 	bl	800b150 <vTaskDelete>
  return osOK;
 8009b9c:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b084      	sub	sp, #16
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d001      	beq.n	8009bbc <osDelay+0x16>
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	e000      	b.n	8009bbe <osDelay+0x18>
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f001 fbce 	bl	800b360 <vTaskDelay>
  
  return osOK;
 8009bc4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b086      	sub	sp, #24
 8009bd2:	af02      	add	r7, sp, #8
 8009bd4:	6078      	str	r0, [r7, #4]
 8009bd6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d010      	beq.n	8009c02 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d10b      	bne.n	8009bfe <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	685a      	ldr	r2, [r3, #4]
 8009bea:	2303      	movs	r3, #3
 8009bec:	9300      	str	r3, [sp, #0]
 8009bee:	4613      	mov	r3, r2
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	2001      	movs	r0, #1
 8009bf6:	f000 fa63 	bl	800a0c0 <xQueueGenericCreateStatic>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	e016      	b.n	8009c2c <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	e014      	b.n	8009c2c <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d110      	bne.n	8009c2a <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8009c08:	2203      	movs	r2, #3
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	2001      	movs	r0, #1
 8009c0e:	f000 faca 	bl	800a1a6 <xQueueGenericCreate>
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d005      	beq.n	8009c26 <osSemaphoreCreate+0x58>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	2100      	movs	r1, #0
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	f000 fb55 	bl	800a2d0 <xQueueGenericSend>
      return sema;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	e000      	b.n	8009c2c <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009c2a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009c40:	2300      	movs	r3, #0
 8009c42:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009c44:	f7ff ff2e 	bl	8009aa4 <inHandlerMode>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d016      	beq.n	8009c7c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009c4e:	f107 0308 	add.w	r3, r7, #8
 8009c52:	4619      	mov	r1, r3
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fcc9 	bl	800a5ec <xQueueGiveFromISR>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d001      	beq.n	8009c64 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009c60:	23ff      	movs	r3, #255	; 0xff
 8009c62:	e017      	b.n	8009c94 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d013      	beq.n	8009c92 <osSemaphoreRelease+0x5e>
 8009c6a:	4b0c      	ldr	r3, [pc, #48]	; (8009c9c <osSemaphoreRelease+0x68>)
 8009c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c70:	601a      	str	r2, [r3, #0]
 8009c72:	f3bf 8f4f 	dsb	sy
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	e00a      	b.n	8009c92 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	2200      	movs	r2, #0
 8009c80:	2100      	movs	r1, #0
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 fb24 	bl	800a2d0 <xQueueGenericSend>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d001      	beq.n	8009c92 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009c8e:	23ff      	movs	r3, #255	; 0xff
 8009c90:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009c92:	68fb      	ldr	r3, [r7, #12]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	e000ed04 	.word	0xe000ed04

08009ca0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009ca0:	b590      	push	{r4, r7, lr}
 8009ca2:	b085      	sub	sp, #20
 8009ca4:	af02      	add	r7, sp, #8
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d012      	beq.n	8009cd8 <osMessageCreate+0x38>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00e      	beq.n	8009cd8 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6818      	ldr	r0, [r3, #0]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6859      	ldr	r1, [r3, #4]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	689a      	ldr	r2, [r3, #8]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	68dc      	ldr	r4, [r3, #12]
 8009cca:	2300      	movs	r3, #0
 8009ccc:	9300      	str	r3, [sp, #0]
 8009cce:	4623      	mov	r3, r4
 8009cd0:	f000 f9f6 	bl	800a0c0 <xQueueGenericCreateStatic>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	e008      	b.n	8009cea <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6818      	ldr	r0, [r3, #0]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	f000 fa5f 	bl	800a1a6 <xQueueGenericCreate>
 8009ce8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	370c      	adds	r7, #12
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd90      	pop	{r4, r7, pc}
	...

08009cf4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b086      	sub	sp, #24
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009d00:	2300      	movs	r3, #0
 8009d02:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d101      	bne.n	8009d12 <osMessagePut+0x1e>
    ticks = 1;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009d12:	f7ff fec7 	bl	8009aa4 <inHandlerMode>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d018      	beq.n	8009d4e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009d1c:	f107 0210 	add.w	r2, r7, #16
 8009d20:	f107 0108 	add.w	r1, r7, #8
 8009d24:	2300      	movs	r3, #0
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f000 fbcc 	bl	800a4c4 <xQueueGenericSendFromISR>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d001      	beq.n	8009d36 <osMessagePut+0x42>
      return osErrorOS;
 8009d32:	23ff      	movs	r3, #255	; 0xff
 8009d34:	e018      	b.n	8009d68 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d014      	beq.n	8009d66 <osMessagePut+0x72>
 8009d3c:	4b0c      	ldr	r3, [pc, #48]	; (8009d70 <osMessagePut+0x7c>)
 8009d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d42:	601a      	str	r2, [r3, #0]
 8009d44:	f3bf 8f4f 	dsb	sy
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	e00b      	b.n	8009d66 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009d4e:	f107 0108 	add.w	r1, r7, #8
 8009d52:	2300      	movs	r3, #0
 8009d54:	697a      	ldr	r2, [r7, #20]
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f000 faba 	bl	800a2d0 <xQueueGenericSend>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d001      	beq.n	8009d66 <osMessagePut+0x72>
      return osErrorOS;
 8009d62:	23ff      	movs	r3, #255	; 0xff
 8009d64:	e000      	b.n	8009d68 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009d66:	2300      	movs	r3, #0
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3718      	adds	r7, #24
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	e000ed04 	.word	0xe000ed04

08009d74 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009d74:	b590      	push	{r4, r7, lr}
 8009d76:	b08b      	sub	sp, #44	; 0x2c
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009d84:	2300      	movs	r3, #0
 8009d86:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d10a      	bne.n	8009da4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009d8e:	2380      	movs	r3, #128	; 0x80
 8009d90:	617b      	str	r3, [r7, #20]
    return event;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	461c      	mov	r4, r3
 8009d96:	f107 0314 	add.w	r3, r7, #20
 8009d9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009d9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009da2:	e054      	b.n	8009e4e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009da4:	2300      	movs	r3, #0
 8009da6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009da8:	2300      	movs	r3, #0
 8009daa:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db2:	d103      	bne.n	8009dbc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009db4:	f04f 33ff 	mov.w	r3, #4294967295
 8009db8:	627b      	str	r3, [r7, #36]	; 0x24
 8009dba:	e009      	b.n	8009dd0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d006      	beq.n	8009dd0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d101      	bne.n	8009dd0 <osMessageGet+0x5c>
      ticks = 1;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009dd0:	f7ff fe68 	bl	8009aa4 <inHandlerMode>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d01c      	beq.n	8009e14 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009dda:	f107 0220 	add.w	r2, r7, #32
 8009dde:	f107 0314 	add.w	r3, r7, #20
 8009de2:	3304      	adds	r3, #4
 8009de4:	4619      	mov	r1, r3
 8009de6:	68b8      	ldr	r0, [r7, #8]
 8009de8:	f000 fe6e 	bl	800aac8 <xQueueReceiveFromISR>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d102      	bne.n	8009df8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009df2:	2310      	movs	r3, #16
 8009df4:	617b      	str	r3, [r7, #20]
 8009df6:	e001      	b.n	8009dfc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d01d      	beq.n	8009e3e <osMessageGet+0xca>
 8009e02:	4b15      	ldr	r3, [pc, #84]	; (8009e58 <osMessageGet+0xe4>)
 8009e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e08:	601a      	str	r2, [r3, #0]
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	e014      	b.n	8009e3e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009e14:	f107 0314 	add.w	r3, r7, #20
 8009e18:	3304      	adds	r3, #4
 8009e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	68b8      	ldr	r0, [r7, #8]
 8009e20:	f000 fc6e 	bl	800a700 <xQueueReceive>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d102      	bne.n	8009e30 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009e2a:	2310      	movs	r3, #16
 8009e2c:	617b      	str	r3, [r7, #20]
 8009e2e:	e006      	b.n	8009e3e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d101      	bne.n	8009e3a <osMessageGet+0xc6>
 8009e36:	2300      	movs	r3, #0
 8009e38:	e000      	b.n	8009e3c <osMessageGet+0xc8>
 8009e3a:	2340      	movs	r3, #64	; 0x40
 8009e3c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	461c      	mov	r4, r3
 8009e42:	f107 0314 	add.w	r3, r7, #20
 8009e46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009e4e:	68f8      	ldr	r0, [r7, #12]
 8009e50:	372c      	adds	r7, #44	; 0x2c
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd90      	pop	{r4, r7, pc}
 8009e56:	bf00      	nop
 8009e58:	e000ed04 	.word	0xe000ed04

08009e5c <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d001      	beq.n	8009e74 <osDelayUntil+0x18>
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	e000      	b.n	8009e76 <osDelayUntil+0x1a>
 8009e74:	2301      	movs	r3, #1
 8009e76:	4619      	mov	r1, r3
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f001 f9f7 	bl	800b26c <vTaskDelayUntil>
  
  return osOK;
 8009e7e:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f103 0208 	add.w	r2, r3, #8
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f103 0208 	add.w	r2, r3, #8
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f103 0208 	add.w	r2, r3, #8
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009ebc:	bf00      	nop
 8009ebe:	370c      	adds	r7, #12
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009ed6:	bf00      	nop
 8009ed8:	370c      	adds	r7, #12
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr

08009ee2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ee2:	b480      	push	{r7}
 8009ee4:	b085      	sub	sp, #20
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
 8009eea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	68fa      	ldr	r2, [r7, #12]
 8009ef6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	689a      	ldr	r2, [r3, #8]
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	683a      	ldr	r2, [r7, #0]
 8009f0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	1c5a      	adds	r2, r3, #1
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	601a      	str	r2, [r3, #0]
}
 8009f1e:	bf00      	nop
 8009f20:	3714      	adds	r7, #20
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr

08009f2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f2a:	b480      	push	{r7}
 8009f2c:	b085      	sub	sp, #20
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
 8009f32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f40:	d103      	bne.n	8009f4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	60fb      	str	r3, [r7, #12]
 8009f48:	e00c      	b.n	8009f64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	3308      	adds	r3, #8
 8009f4e:	60fb      	str	r3, [r7, #12]
 8009f50:	e002      	b.n	8009f58 <vListInsert+0x2e>
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	60fb      	str	r3, [r7, #12]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	68ba      	ldr	r2, [r7, #8]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d2f6      	bcs.n	8009f52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	685a      	ldr	r2, [r3, #4]
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	683a      	ldr	r2, [r7, #0]
 8009f72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	683a      	ldr	r2, [r7, #0]
 8009f7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	1c5a      	adds	r2, r3, #1
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	601a      	str	r2, [r3, #0]
}
 8009f90:	bf00      	nop
 8009f92:	3714      	adds	r7, #20
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	6892      	ldr	r2, [r2, #8]
 8009fb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	6852      	ldr	r2, [r2, #4]
 8009fbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d103      	bne.n	8009fd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	689a      	ldr	r2, [r3, #8]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	1e5a      	subs	r2, r3, #1
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3714      	adds	r7, #20
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d109      	bne.n	800a018 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a008:	f383 8811 	msr	BASEPRI, r3
 800a00c:	f3bf 8f6f 	isb	sy
 800a010:	f3bf 8f4f 	dsb	sy
 800a014:	60bb      	str	r3, [r7, #8]
 800a016:	e7fe      	b.n	800a016 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800a018:	f002 f968 	bl	800c2ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a024:	68f9      	ldr	r1, [r7, #12]
 800a026:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a028:	fb01 f303 	mul.w	r3, r1, r3
 800a02c:	441a      	add	r2, r3
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2200      	movs	r2, #0
 800a036:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a048:	3b01      	subs	r3, #1
 800a04a:	68f9      	ldr	r1, [r7, #12]
 800a04c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a04e:	fb01 f303 	mul.w	r3, r1, r3
 800a052:	441a      	add	r2, r3
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	22ff      	movs	r2, #255	; 0xff
 800a05c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	22ff      	movs	r2, #255	; 0xff
 800a064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d114      	bne.n	800a098 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	691b      	ldr	r3, [r3, #16]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d01a      	beq.n	800a0ac <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	3310      	adds	r3, #16
 800a07a:	4618      	mov	r0, r3
 800a07c:	f001 fc22 	bl	800b8c4 <xTaskRemoveFromEventList>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d012      	beq.n	800a0ac <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a086:	4b0d      	ldr	r3, [pc, #52]	; (800a0bc <xQueueGenericReset+0xcc>)
 800a088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a08c:	601a      	str	r2, [r3, #0]
 800a08e:	f3bf 8f4f 	dsb	sy
 800a092:	f3bf 8f6f 	isb	sy
 800a096:	e009      	b.n	800a0ac <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	3310      	adds	r3, #16
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7ff fef3 	bl	8009e88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	3324      	adds	r3, #36	; 0x24
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7ff feee 	bl	8009e88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a0ac:	f002 f94c 	bl	800c348 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a0b0:	2301      	movs	r3, #1
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	e000ed04 	.word	0xe000ed04

0800a0c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b08e      	sub	sp, #56	; 0x38
 800a0c4:	af02      	add	r7, sp, #8
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	607a      	str	r2, [r7, #4]
 800a0cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d109      	bne.n	800a0e8 <xQueueGenericCreateStatic+0x28>
 800a0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d8:	f383 8811 	msr	BASEPRI, r3
 800a0dc:	f3bf 8f6f 	isb	sy
 800a0e0:	f3bf 8f4f 	dsb	sy
 800a0e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0e6:	e7fe      	b.n	800a0e6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d109      	bne.n	800a102 <xQueueGenericCreateStatic+0x42>
 800a0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f2:	f383 8811 	msr	BASEPRI, r3
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	627b      	str	r3, [r7, #36]	; 0x24
 800a100:	e7fe      	b.n	800a100 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d002      	beq.n	800a10e <xQueueGenericCreateStatic+0x4e>
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d001      	beq.n	800a112 <xQueueGenericCreateStatic+0x52>
 800a10e:	2301      	movs	r3, #1
 800a110:	e000      	b.n	800a114 <xQueueGenericCreateStatic+0x54>
 800a112:	2300      	movs	r3, #0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d109      	bne.n	800a12c <xQueueGenericCreateStatic+0x6c>
 800a118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	623b      	str	r3, [r7, #32]
 800a12a:	e7fe      	b.n	800a12a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d102      	bne.n	800a138 <xQueueGenericCreateStatic+0x78>
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d101      	bne.n	800a13c <xQueueGenericCreateStatic+0x7c>
 800a138:	2301      	movs	r3, #1
 800a13a:	e000      	b.n	800a13e <xQueueGenericCreateStatic+0x7e>
 800a13c:	2300      	movs	r3, #0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d109      	bne.n	800a156 <xQueueGenericCreateStatic+0x96>
 800a142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a146:	f383 8811 	msr	BASEPRI, r3
 800a14a:	f3bf 8f6f 	isb	sy
 800a14e:	f3bf 8f4f 	dsb	sy
 800a152:	61fb      	str	r3, [r7, #28]
 800a154:	e7fe      	b.n	800a154 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a156:	2350      	movs	r3, #80	; 0x50
 800a158:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	2b50      	cmp	r3, #80	; 0x50
 800a15e:	d009      	beq.n	800a174 <xQueueGenericCreateStatic+0xb4>
 800a160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a164:	f383 8811 	msr	BASEPRI, r3
 800a168:	f3bf 8f6f 	isb	sy
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	61bb      	str	r3, [r7, #24]
 800a172:	e7fe      	b.n	800a172 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a174:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d00d      	beq.n	800a19c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a182:	2201      	movs	r2, #1
 800a184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a188:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	4613      	mov	r3, r2
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	68b9      	ldr	r1, [r7, #8]
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f000 f844 	bl	800a224 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3730      	adds	r7, #48	; 0x30
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b08a      	sub	sp, #40	; 0x28
 800a1aa:	af02      	add	r7, sp, #8
 800a1ac:	60f8      	str	r0, [r7, #12]
 800a1ae:	60b9      	str	r1, [r7, #8]
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d109      	bne.n	800a1ce <xQueueGenericCreate+0x28>
 800a1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1be:	f383 8811 	msr	BASEPRI, r3
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	f3bf 8f4f 	dsb	sy
 800a1ca:	613b      	str	r3, [r7, #16]
 800a1cc:	e7fe      	b.n	800a1cc <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d102      	bne.n	800a1da <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	61fb      	str	r3, [r7, #28]
 800a1d8:	e004      	b.n	800a1e4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	68ba      	ldr	r2, [r7, #8]
 800a1de:	fb02 f303 	mul.w	r3, r2, r3
 800a1e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	3350      	adds	r3, #80	; 0x50
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f002 f999 	bl	800c520 <pvPortMalloc>
 800a1ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d011      	beq.n	800a21a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	3350      	adds	r3, #80	; 0x50
 800a1fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	2200      	movs	r2, #0
 800a204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a208:	79fa      	ldrb	r2, [r7, #7]
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	9300      	str	r3, [sp, #0]
 800a20e:	4613      	mov	r3, r2
 800a210:	697a      	ldr	r2, [r7, #20]
 800a212:	68b9      	ldr	r1, [r7, #8]
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f000 f805 	bl	800a224 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a21a:	69bb      	ldr	r3, [r7, #24]
	}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3720      	adds	r7, #32
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
 800a230:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d103      	bne.n	800a240 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	69ba      	ldr	r2, [r7, #24]
 800a23c:	601a      	str	r2, [r3, #0]
 800a23e:	e002      	b.n	800a246 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	68fa      	ldr	r2, [r7, #12]
 800a24a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a252:	2101      	movs	r1, #1
 800a254:	69b8      	ldr	r0, [r7, #24]
 800a256:	f7ff fecb 	bl	8009ff0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	78fa      	ldrb	r2, [r7, #3]
 800a25e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a262:	bf00      	nop
 800a264:	3710      	adds	r7, #16
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b082      	sub	sp, #8
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d00e      	beq.n	800a296 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a28a:	2300      	movs	r3, #0
 800a28c:	2200      	movs	r2, #0
 800a28e:	2100      	movs	r1, #0
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 f81d 	bl	800a2d0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a296:	bf00      	nop
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b086      	sub	sp, #24
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	617b      	str	r3, [r7, #20]
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a2b0:	79fb      	ldrb	r3, [r7, #7]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	6939      	ldr	r1, [r7, #16]
 800a2b6:	6978      	ldr	r0, [r7, #20]
 800a2b8:	f7ff ff75 	bl	800a1a6 <xQueueGenericCreate>
 800a2bc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f7ff ffd3 	bl	800a26a <prvInitialiseMutex>

		return xNewQueue;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
	}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3718      	adds	r7, #24
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
	...

0800a2d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b08e      	sub	sp, #56	; 0x38
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	607a      	str	r2, [r7, #4]
 800a2dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d109      	bne.n	800a300 <xQueueGenericSend+0x30>
 800a2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f0:	f383 8811 	msr	BASEPRI, r3
 800a2f4:	f3bf 8f6f 	isb	sy
 800a2f8:	f3bf 8f4f 	dsb	sy
 800a2fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2fe:	e7fe      	b.n	800a2fe <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d103      	bne.n	800a30e <xQueueGenericSend+0x3e>
 800a306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d101      	bne.n	800a312 <xQueueGenericSend+0x42>
 800a30e:	2301      	movs	r3, #1
 800a310:	e000      	b.n	800a314 <xQueueGenericSend+0x44>
 800a312:	2300      	movs	r3, #0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d109      	bne.n	800a32c <xQueueGenericSend+0x5c>
 800a318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31c:	f383 8811 	msr	BASEPRI, r3
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	627b      	str	r3, [r7, #36]	; 0x24
 800a32a:	e7fe      	b.n	800a32a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	2b02      	cmp	r3, #2
 800a330:	d103      	bne.n	800a33a <xQueueGenericSend+0x6a>
 800a332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a336:	2b01      	cmp	r3, #1
 800a338:	d101      	bne.n	800a33e <xQueueGenericSend+0x6e>
 800a33a:	2301      	movs	r3, #1
 800a33c:	e000      	b.n	800a340 <xQueueGenericSend+0x70>
 800a33e:	2300      	movs	r3, #0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d109      	bne.n	800a358 <xQueueGenericSend+0x88>
 800a344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a348:	f383 8811 	msr	BASEPRI, r3
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	623b      	str	r3, [r7, #32]
 800a356:	e7fe      	b.n	800a356 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a358:	f001 fc6a 	bl	800bc30 <xTaskGetSchedulerState>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d102      	bne.n	800a368 <xQueueGenericSend+0x98>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d101      	bne.n	800a36c <xQueueGenericSend+0x9c>
 800a368:	2301      	movs	r3, #1
 800a36a:	e000      	b.n	800a36e <xQueueGenericSend+0x9e>
 800a36c:	2300      	movs	r3, #0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d109      	bne.n	800a386 <xQueueGenericSend+0xb6>
 800a372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	61fb      	str	r3, [r7, #28]
 800a384:	e7fe      	b.n	800a384 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a386:	f001 ffb1 	bl	800c2ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a392:	429a      	cmp	r2, r3
 800a394:	d302      	bcc.n	800a39c <xQueueGenericSend+0xcc>
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	2b02      	cmp	r3, #2
 800a39a:	d129      	bne.n	800a3f0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a39c:	683a      	ldr	r2, [r7, #0]
 800a39e:	68b9      	ldr	r1, [r7, #8]
 800a3a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3a2:	f000 fc26 	bl	800abf2 <prvCopyDataToQueue>
 800a3a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d010      	beq.n	800a3d2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b2:	3324      	adds	r3, #36	; 0x24
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f001 fa85 	bl	800b8c4 <xTaskRemoveFromEventList>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d013      	beq.n	800a3e8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a3c0:	4b3f      	ldr	r3, [pc, #252]	; (800a4c0 <xQueueGenericSend+0x1f0>)
 800a3c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3c6:	601a      	str	r2, [r3, #0]
 800a3c8:	f3bf 8f4f 	dsb	sy
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	e00a      	b.n	800a3e8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d007      	beq.n	800a3e8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a3d8:	4b39      	ldr	r3, [pc, #228]	; (800a4c0 <xQueueGenericSend+0x1f0>)
 800a3da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3de:	601a      	str	r2, [r3, #0]
 800a3e0:	f3bf 8f4f 	dsb	sy
 800a3e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a3e8:	f001 ffae 	bl	800c348 <vPortExitCritical>
				return pdPASS;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e063      	b.n	800a4b8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d103      	bne.n	800a3fe <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3f6:	f001 ffa7 	bl	800c348 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	e05c      	b.n	800a4b8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a400:	2b00      	cmp	r3, #0
 800a402:	d106      	bne.n	800a412 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a404:	f107 0314 	add.w	r3, r7, #20
 800a408:	4618      	mov	r0, r3
 800a40a:	f001 fabd 	bl	800b988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a40e:	2301      	movs	r3, #1
 800a410:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a412:	f001 ff99 	bl	800c348 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a416:	f001 f837 	bl	800b488 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a41a:	f001 ff67 	bl	800c2ec <vPortEnterCritical>
 800a41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a420:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a424:	b25b      	sxtb	r3, r3
 800a426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a42a:	d103      	bne.n	800a434 <xQueueGenericSend+0x164>
 800a42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42e:	2200      	movs	r2, #0
 800a430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a436:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a43a:	b25b      	sxtb	r3, r3
 800a43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a440:	d103      	bne.n	800a44a <xQueueGenericSend+0x17a>
 800a442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a444:	2200      	movs	r2, #0
 800a446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a44a:	f001 ff7d 	bl	800c348 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a44e:	1d3a      	adds	r2, r7, #4
 800a450:	f107 0314 	add.w	r3, r7, #20
 800a454:	4611      	mov	r1, r2
 800a456:	4618      	mov	r0, r3
 800a458:	f001 faac 	bl	800b9b4 <xTaskCheckForTimeOut>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d124      	bne.n	800a4ac <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a462:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a464:	f000 fcbd 	bl	800ade2 <prvIsQueueFull>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d018      	beq.n	800a4a0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a470:	3310      	adds	r3, #16
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	4611      	mov	r1, r2
 800a476:	4618      	mov	r0, r3
 800a478:	f001 fa00 	bl	800b87c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a47c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a47e:	f000 fc48 	bl	800ad12 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a482:	f001 f80f 	bl	800b4a4 <xTaskResumeAll>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f47f af7c 	bne.w	800a386 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a48e:	4b0c      	ldr	r3, [pc, #48]	; (800a4c0 <xQueueGenericSend+0x1f0>)
 800a490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a494:	601a      	str	r2, [r3, #0]
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	f3bf 8f6f 	isb	sy
 800a49e:	e772      	b.n	800a386 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a4a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4a2:	f000 fc36 	bl	800ad12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4a6:	f000 fffd 	bl	800b4a4 <xTaskResumeAll>
 800a4aa:	e76c      	b.n	800a386 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a4ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4ae:	f000 fc30 	bl	800ad12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4b2:	f000 fff7 	bl	800b4a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a4b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3738      	adds	r7, #56	; 0x38
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	e000ed04 	.word	0xe000ed04

0800a4c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b08e      	sub	sp, #56	; 0x38
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	607a      	str	r2, [r7, #4]
 800a4d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d109      	bne.n	800a4f0 <xQueueGenericSendFromISR+0x2c>
 800a4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e0:	f383 8811 	msr	BASEPRI, r3
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	627b      	str	r3, [r7, #36]	; 0x24
 800a4ee:	e7fe      	b.n	800a4ee <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d103      	bne.n	800a4fe <xQueueGenericSendFromISR+0x3a>
 800a4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d101      	bne.n	800a502 <xQueueGenericSendFromISR+0x3e>
 800a4fe:	2301      	movs	r3, #1
 800a500:	e000      	b.n	800a504 <xQueueGenericSendFromISR+0x40>
 800a502:	2300      	movs	r3, #0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d109      	bne.n	800a51c <xQueueGenericSendFromISR+0x58>
 800a508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50c:	f383 8811 	msr	BASEPRI, r3
 800a510:	f3bf 8f6f 	isb	sy
 800a514:	f3bf 8f4f 	dsb	sy
 800a518:	623b      	str	r3, [r7, #32]
 800a51a:	e7fe      	b.n	800a51a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	2b02      	cmp	r3, #2
 800a520:	d103      	bne.n	800a52a <xQueueGenericSendFromISR+0x66>
 800a522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a526:	2b01      	cmp	r3, #1
 800a528:	d101      	bne.n	800a52e <xQueueGenericSendFromISR+0x6a>
 800a52a:	2301      	movs	r3, #1
 800a52c:	e000      	b.n	800a530 <xQueueGenericSendFromISR+0x6c>
 800a52e:	2300      	movs	r3, #0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d109      	bne.n	800a548 <xQueueGenericSendFromISR+0x84>
 800a534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a538:	f383 8811 	msr	BASEPRI, r3
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	61fb      	str	r3, [r7, #28]
 800a546:	e7fe      	b.n	800a546 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a548:	f001 ffac 	bl	800c4a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a54c:	f3ef 8211 	mrs	r2, BASEPRI
 800a550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a554:	f383 8811 	msr	BASEPRI, r3
 800a558:	f3bf 8f6f 	isb	sy
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	61ba      	str	r2, [r7, #24]
 800a562:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a564:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a566:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a570:	429a      	cmp	r2, r3
 800a572:	d302      	bcc.n	800a57a <xQueueGenericSendFromISR+0xb6>
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	2b02      	cmp	r3, #2
 800a578:	d12c      	bne.n	800a5d4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a580:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a584:	683a      	ldr	r2, [r7, #0]
 800a586:	68b9      	ldr	r1, [r7, #8]
 800a588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a58a:	f000 fb32 	bl	800abf2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a58e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a592:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a596:	d112      	bne.n	800a5be <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d016      	beq.n	800a5ce <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a2:	3324      	adds	r3, #36	; 0x24
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f001 f98d 	bl	800b8c4 <xTaskRemoveFromEventList>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d00e      	beq.n	800a5ce <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00b      	beq.n	800a5ce <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	601a      	str	r2, [r3, #0]
 800a5bc:	e007      	b.n	800a5ce <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a5be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	b25a      	sxtb	r2, r3
 800a5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a5d2:	e001      	b.n	800a5d8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	637b      	str	r3, [r7, #52]	; 0x34
 800a5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5da:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3738      	adds	r7, #56	; 0x38
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b08e      	sub	sp, #56	; 0x38
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d109      	bne.n	800a614 <xQueueGiveFromISR+0x28>
	__asm volatile
 800a600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a604:	f383 8811 	msr	BASEPRI, r3
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	623b      	str	r3, [r7, #32]
 800a612:	e7fe      	b.n	800a612 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d009      	beq.n	800a630 <xQueueGiveFromISR+0x44>
 800a61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a620:	f383 8811 	msr	BASEPRI, r3
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	f3bf 8f4f 	dsb	sy
 800a62c:	61fb      	str	r3, [r7, #28]
 800a62e:	e7fe      	b.n	800a62e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d103      	bne.n	800a640 <xQueueGiveFromISR+0x54>
 800a638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d101      	bne.n	800a644 <xQueueGiveFromISR+0x58>
 800a640:	2301      	movs	r3, #1
 800a642:	e000      	b.n	800a646 <xQueueGiveFromISR+0x5a>
 800a644:	2300      	movs	r3, #0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d109      	bne.n	800a65e <xQueueGiveFromISR+0x72>
 800a64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64e:	f383 8811 	msr	BASEPRI, r3
 800a652:	f3bf 8f6f 	isb	sy
 800a656:	f3bf 8f4f 	dsb	sy
 800a65a:	61bb      	str	r3, [r7, #24]
 800a65c:	e7fe      	b.n	800a65c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a65e:	f001 ff21 	bl	800c4a4 <vPortValidateInterruptPriority>
	__asm volatile
 800a662:	f3ef 8211 	mrs	r2, BASEPRI
 800a666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66a:	f383 8811 	msr	BASEPRI, r3
 800a66e:	f3bf 8f6f 	isb	sy
 800a672:	f3bf 8f4f 	dsb	sy
 800a676:	617a      	str	r2, [r7, #20]
 800a678:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a67a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a67c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a682:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a688:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d22b      	bcs.n	800a6e6 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a690:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69a:	1c5a      	adds	r2, r3, #1
 800a69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a6a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a8:	d112      	bne.n	800a6d0 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d016      	beq.n	800a6e0 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b4:	3324      	adds	r3, #36	; 0x24
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f001 f904 	bl	800b8c4 <xTaskRemoveFromEventList>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00e      	beq.n	800a6e0 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d00b      	beq.n	800a6e0 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	601a      	str	r2, [r3, #0]
 800a6ce:	e007      	b.n	800a6e0 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a6d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	b25a      	sxtb	r2, r3
 800a6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	637b      	str	r3, [r7, #52]	; 0x34
 800a6e4:	e001      	b.n	800a6ea <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	637b      	str	r3, [r7, #52]	; 0x34
 800a6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ec:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a6f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3738      	adds	r7, #56	; 0x38
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
	...

0800a700 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b08c      	sub	sp, #48	; 0x30
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a70c:	2300      	movs	r3, #0
 800a70e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a716:	2b00      	cmp	r3, #0
 800a718:	d109      	bne.n	800a72e <xQueueReceive+0x2e>
	__asm volatile
 800a71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71e:	f383 8811 	msr	BASEPRI, r3
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	f3bf 8f4f 	dsb	sy
 800a72a:	623b      	str	r3, [r7, #32]
 800a72c:	e7fe      	b.n	800a72c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d103      	bne.n	800a73c <xQueueReceive+0x3c>
 800a734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d101      	bne.n	800a740 <xQueueReceive+0x40>
 800a73c:	2301      	movs	r3, #1
 800a73e:	e000      	b.n	800a742 <xQueueReceive+0x42>
 800a740:	2300      	movs	r3, #0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d109      	bne.n	800a75a <xQueueReceive+0x5a>
 800a746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74a:	f383 8811 	msr	BASEPRI, r3
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	61fb      	str	r3, [r7, #28]
 800a758:	e7fe      	b.n	800a758 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a75a:	f001 fa69 	bl	800bc30 <xTaskGetSchedulerState>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d102      	bne.n	800a76a <xQueueReceive+0x6a>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d101      	bne.n	800a76e <xQueueReceive+0x6e>
 800a76a:	2301      	movs	r3, #1
 800a76c:	e000      	b.n	800a770 <xQueueReceive+0x70>
 800a76e:	2300      	movs	r3, #0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d109      	bne.n	800a788 <xQueueReceive+0x88>
 800a774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a778:	f383 8811 	msr	BASEPRI, r3
 800a77c:	f3bf 8f6f 	isb	sy
 800a780:	f3bf 8f4f 	dsb	sy
 800a784:	61bb      	str	r3, [r7, #24]
 800a786:	e7fe      	b.n	800a786 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a788:	f001 fdb0 	bl	800c2ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a790:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a794:	2b00      	cmp	r3, #0
 800a796:	d01f      	beq.n	800a7d8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a798:	68b9      	ldr	r1, [r7, #8]
 800a79a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a79c:	f000 fa93 	bl	800acc6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a2:	1e5a      	subs	r2, r3, #1
 800a7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7aa:	691b      	ldr	r3, [r3, #16]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00f      	beq.n	800a7d0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b2:	3310      	adds	r3, #16
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f001 f885 	bl	800b8c4 <xTaskRemoveFromEventList>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d007      	beq.n	800a7d0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a7c0:	4b3c      	ldr	r3, [pc, #240]	; (800a8b4 <xQueueReceive+0x1b4>)
 800a7c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7c6:	601a      	str	r2, [r3, #0]
 800a7c8:	f3bf 8f4f 	dsb	sy
 800a7cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a7d0:	f001 fdba 	bl	800c348 <vPortExitCritical>
				return pdPASS;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e069      	b.n	800a8ac <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d103      	bne.n	800a7e6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7de:	f001 fdb3 	bl	800c348 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	e062      	b.n	800a8ac <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d106      	bne.n	800a7fa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7ec:	f107 0310 	add.w	r3, r7, #16
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f001 f8c9 	bl	800b988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7fa:	f001 fda5 	bl	800c348 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7fe:	f000 fe43 	bl	800b488 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a802:	f001 fd73 	bl	800c2ec <vPortEnterCritical>
 800a806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a80c:	b25b      	sxtb	r3, r3
 800a80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a812:	d103      	bne.n	800a81c <xQueueReceive+0x11c>
 800a814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a816:	2200      	movs	r2, #0
 800a818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a822:	b25b      	sxtb	r3, r3
 800a824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a828:	d103      	bne.n	800a832 <xQueueReceive+0x132>
 800a82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82c:	2200      	movs	r2, #0
 800a82e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a832:	f001 fd89 	bl	800c348 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a836:	1d3a      	adds	r2, r7, #4
 800a838:	f107 0310 	add.w	r3, r7, #16
 800a83c:	4611      	mov	r1, r2
 800a83e:	4618      	mov	r0, r3
 800a840:	f001 f8b8 	bl	800b9b4 <xTaskCheckForTimeOut>
 800a844:	4603      	mov	r3, r0
 800a846:	2b00      	cmp	r3, #0
 800a848:	d123      	bne.n	800a892 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a84a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a84c:	f000 fab3 	bl	800adb6 <prvIsQueueEmpty>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d017      	beq.n	800a886 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a858:	3324      	adds	r3, #36	; 0x24
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	4611      	mov	r1, r2
 800a85e:	4618      	mov	r0, r3
 800a860:	f001 f80c 	bl	800b87c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a866:	f000 fa54 	bl	800ad12 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a86a:	f000 fe1b 	bl	800b4a4 <xTaskResumeAll>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d189      	bne.n	800a788 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800a874:	4b0f      	ldr	r3, [pc, #60]	; (800a8b4 <xQueueReceive+0x1b4>)
 800a876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a87a:	601a      	str	r2, [r3, #0]
 800a87c:	f3bf 8f4f 	dsb	sy
 800a880:	f3bf 8f6f 	isb	sy
 800a884:	e780      	b.n	800a788 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a888:	f000 fa43 	bl	800ad12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a88c:	f000 fe0a 	bl	800b4a4 <xTaskResumeAll>
 800a890:	e77a      	b.n	800a788 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a894:	f000 fa3d 	bl	800ad12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a898:	f000 fe04 	bl	800b4a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a89c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a89e:	f000 fa8a 	bl	800adb6 <prvIsQueueEmpty>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f43f af6f 	beq.w	800a788 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a8aa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3730      	adds	r7, #48	; 0x30
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	e000ed04 	.word	0xe000ed04

0800a8b8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b08e      	sub	sp, #56	; 0x38
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d109      	bne.n	800a8e8 <xQueueSemaphoreTake+0x30>
 800a8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d8:	f383 8811 	msr	BASEPRI, r3
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	f3bf 8f4f 	dsb	sy
 800a8e4:	623b      	str	r3, [r7, #32]
 800a8e6:	e7fe      	b.n	800a8e6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d009      	beq.n	800a904 <xQueueSemaphoreTake+0x4c>
 800a8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f4:	f383 8811 	msr	BASEPRI, r3
 800a8f8:	f3bf 8f6f 	isb	sy
 800a8fc:	f3bf 8f4f 	dsb	sy
 800a900:	61fb      	str	r3, [r7, #28]
 800a902:	e7fe      	b.n	800a902 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a904:	f001 f994 	bl	800bc30 <xTaskGetSchedulerState>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d102      	bne.n	800a914 <xQueueSemaphoreTake+0x5c>
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d101      	bne.n	800a918 <xQueueSemaphoreTake+0x60>
 800a914:	2301      	movs	r3, #1
 800a916:	e000      	b.n	800a91a <xQueueSemaphoreTake+0x62>
 800a918:	2300      	movs	r3, #0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d109      	bne.n	800a932 <xQueueSemaphoreTake+0x7a>
 800a91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a922:	f383 8811 	msr	BASEPRI, r3
 800a926:	f3bf 8f6f 	isb	sy
 800a92a:	f3bf 8f4f 	dsb	sy
 800a92e:	61bb      	str	r3, [r7, #24]
 800a930:	e7fe      	b.n	800a930 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a932:	f001 fcdb 	bl	800c2ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d024      	beq.n	800a98c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a944:	1e5a      	subs	r2, r3, #1
 800a946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a948:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d104      	bne.n	800a95c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a952:	f001 fb27 	bl	800bfa4 <pvTaskIncrementMutexHeldCount>
 800a956:	4602      	mov	r2, r0
 800a958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95e:	691b      	ldr	r3, [r3, #16]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d00f      	beq.n	800a984 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a966:	3310      	adds	r3, #16
 800a968:	4618      	mov	r0, r3
 800a96a:	f000 ffab 	bl	800b8c4 <xTaskRemoveFromEventList>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d007      	beq.n	800a984 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a974:	4b53      	ldr	r3, [pc, #332]	; (800aac4 <xQueueSemaphoreTake+0x20c>)
 800a976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a97a:	601a      	str	r2, [r3, #0]
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a984:	f001 fce0 	bl	800c348 <vPortExitCritical>
				return pdPASS;
 800a988:	2301      	movs	r3, #1
 800a98a:	e096      	b.n	800aaba <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d110      	bne.n	800a9b4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a994:	2b00      	cmp	r3, #0
 800a996:	d009      	beq.n	800a9ac <xQueueSemaphoreTake+0xf4>
 800a998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99c:	f383 8811 	msr	BASEPRI, r3
 800a9a0:	f3bf 8f6f 	isb	sy
 800a9a4:	f3bf 8f4f 	dsb	sy
 800a9a8:	617b      	str	r3, [r7, #20]
 800a9aa:	e7fe      	b.n	800a9aa <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a9ac:	f001 fccc 	bl	800c348 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	e082      	b.n	800aaba <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d106      	bne.n	800a9c8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9ba:	f107 030c 	add.w	r3, r7, #12
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f000 ffe2 	bl	800b988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9c8:	f001 fcbe 	bl	800c348 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9cc:	f000 fd5c 	bl	800b488 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9d0:	f001 fc8c 	bl	800c2ec <vPortEnterCritical>
 800a9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9da:	b25b      	sxtb	r3, r3
 800a9dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e0:	d103      	bne.n	800a9ea <xQueueSemaphoreTake+0x132>
 800a9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9f0:	b25b      	sxtb	r3, r3
 800a9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f6:	d103      	bne.n	800aa00 <xQueueSemaphoreTake+0x148>
 800a9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa00:	f001 fca2 	bl	800c348 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa04:	463a      	mov	r2, r7
 800aa06:	f107 030c 	add.w	r3, r7, #12
 800aa0a:	4611      	mov	r1, r2
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f000 ffd1 	bl	800b9b4 <xTaskCheckForTimeOut>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d132      	bne.n	800aa7e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa1a:	f000 f9cc 	bl	800adb6 <prvIsQueueEmpty>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d026      	beq.n	800aa72 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d109      	bne.n	800aa40 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800aa2c:	f001 fc5e 	bl	800c2ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa32:	689b      	ldr	r3, [r3, #8]
 800aa34:	4618      	mov	r0, r3
 800aa36:	f001 f919 	bl	800bc6c <xTaskPriorityInherit>
 800aa3a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800aa3c:	f001 fc84 	bl	800c348 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa42:	3324      	adds	r3, #36	; 0x24
 800aa44:	683a      	ldr	r2, [r7, #0]
 800aa46:	4611      	mov	r1, r2
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f000 ff17 	bl	800b87c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa50:	f000 f95f 	bl	800ad12 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa54:	f000 fd26 	bl	800b4a4 <xTaskResumeAll>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	f47f af69 	bne.w	800a932 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800aa60:	4b18      	ldr	r3, [pc, #96]	; (800aac4 <xQueueSemaphoreTake+0x20c>)
 800aa62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa66:	601a      	str	r2, [r3, #0]
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	f3bf 8f6f 	isb	sy
 800aa70:	e75f      	b.n	800a932 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800aa72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa74:	f000 f94d 	bl	800ad12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa78:	f000 fd14 	bl	800b4a4 <xTaskResumeAll>
 800aa7c:	e759      	b.n	800a932 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800aa7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa80:	f000 f947 	bl	800ad12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa84:	f000 fd0e 	bl	800b4a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa8a:	f000 f994 	bl	800adb6 <prvIsQueueEmpty>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f43f af4e 	beq.w	800a932 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aa96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d00d      	beq.n	800aab8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800aa9c:	f001 fc26 	bl	800c2ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aaa0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aaa2:	f000 f88e 	bl	800abc2 <prvGetDisinheritPriorityAfterTimeout>
 800aaa6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aaa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aaae:	4618      	mov	r0, r3
 800aab0:	f001 f9e0 	bl	800be74 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aab4:	f001 fc48 	bl	800c348 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aab8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3738      	adds	r7, #56	; 0x38
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	e000ed04 	.word	0xe000ed04

0800aac8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b08e      	sub	sp, #56	; 0x38
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d109      	bne.n	800aaf2 <xQueueReceiveFromISR+0x2a>
 800aade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	623b      	str	r3, [r7, #32]
 800aaf0:	e7fe      	b.n	800aaf0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d103      	bne.n	800ab00 <xQueueReceiveFromISR+0x38>
 800aaf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d101      	bne.n	800ab04 <xQueueReceiveFromISR+0x3c>
 800ab00:	2301      	movs	r3, #1
 800ab02:	e000      	b.n	800ab06 <xQueueReceiveFromISR+0x3e>
 800ab04:	2300      	movs	r3, #0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d109      	bne.n	800ab1e <xQueueReceiveFromISR+0x56>
 800ab0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0e:	f383 8811 	msr	BASEPRI, r3
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	61fb      	str	r3, [r7, #28]
 800ab1c:	e7fe      	b.n	800ab1c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab1e:	f001 fcc1 	bl	800c4a4 <vPortValidateInterruptPriority>
	__asm volatile
 800ab22:	f3ef 8211 	mrs	r2, BASEPRI
 800ab26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab2a:	f383 8811 	msr	BASEPRI, r3
 800ab2e:	f3bf 8f6f 	isb	sy
 800ab32:	f3bf 8f4f 	dsb	sy
 800ab36:	61ba      	str	r2, [r7, #24]
 800ab38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ab3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d02f      	beq.n	800abaa <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab54:	68b9      	ldr	r1, [r7, #8]
 800ab56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab58:	f000 f8b5 	bl	800acc6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5e:	1e5a      	subs	r2, r3, #1
 800ab60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab62:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ab64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab6c:	d112      	bne.n	800ab94 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab70:	691b      	ldr	r3, [r3, #16]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d016      	beq.n	800aba4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab78:	3310      	adds	r3, #16
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f000 fea2 	bl	800b8c4 <xTaskRemoveFromEventList>
 800ab80:	4603      	mov	r3, r0
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00e      	beq.n	800aba4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00b      	beq.n	800aba4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	601a      	str	r2, [r3, #0]
 800ab92:	e007      	b.n	800aba4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ab94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab98:	3301      	adds	r3, #1
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	b25a      	sxtb	r2, r3
 800ab9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800aba4:	2301      	movs	r3, #1
 800aba6:	637b      	str	r3, [r7, #52]	; 0x34
 800aba8:	e001      	b.n	800abae <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800abaa:	2300      	movs	r3, #0
 800abac:	637b      	str	r3, [r7, #52]	; 0x34
 800abae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3738      	adds	r7, #56	; 0x38
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800abc2:	b480      	push	{r7}
 800abc4:	b085      	sub	sp, #20
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d006      	beq.n	800abe0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f1c3 0307 	rsb	r3, r3, #7
 800abdc:	60fb      	str	r3, [r7, #12]
 800abde:	e001      	b.n	800abe4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800abe0:	2300      	movs	r3, #0
 800abe2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800abe4:	68fb      	ldr	r3, [r7, #12]
	}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3714      	adds	r7, #20
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr

0800abf2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b086      	sub	sp, #24
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	60f8      	str	r0, [r7, #12]
 800abfa:	60b9      	str	r1, [r7, #8]
 800abfc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800abfe:	2300      	movs	r3, #0
 800ac00:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac06:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d10d      	bne.n	800ac2c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d14d      	bne.n	800acb4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f001 f8a5 	bl	800bd6c <xTaskPriorityDisinherit>
 800ac22:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2200      	movs	r2, #0
 800ac28:	609a      	str	r2, [r3, #8]
 800ac2a:	e043      	b.n	800acb4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d119      	bne.n	800ac66 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	6858      	ldr	r0, [r3, #4]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	68b9      	ldr	r1, [r7, #8]
 800ac3e:	f002 f981 	bl	800cf44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	685a      	ldr	r2, [r3, #4]
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac4a:	441a      	add	r2, r3
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	685a      	ldr	r2, [r3, #4]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d32b      	bcc.n	800acb4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	605a      	str	r2, [r3, #4]
 800ac64:	e026      	b.n	800acb4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	68d8      	ldr	r0, [r3, #12]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac6e:	461a      	mov	r2, r3
 800ac70:	68b9      	ldr	r1, [r7, #8]
 800ac72:	f002 f967 	bl	800cf44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	68da      	ldr	r2, [r3, #12]
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac7e:	425b      	negs	r3, r3
 800ac80:	441a      	add	r2, r3
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	68da      	ldr	r2, [r3, #12]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d207      	bcs.n	800aca2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	689a      	ldr	r2, [r3, #8]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac9a:	425b      	negs	r3, r3
 800ac9c:	441a      	add	r2, r3
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	d105      	bne.n	800acb4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d002      	beq.n	800acb4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	3b01      	subs	r3, #1
 800acb2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	1c5a      	adds	r2, r3, #1
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800acbc:	697b      	ldr	r3, [r7, #20]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3718      	adds	r7, #24
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b082      	sub	sp, #8
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
 800acce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d018      	beq.n	800ad0a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	68da      	ldr	r2, [r3, #12]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ace0:	441a      	add	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	68da      	ldr	r2, [r3, #12]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	429a      	cmp	r2, r3
 800acf0:	d303      	bcc.n	800acfa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	68d9      	ldr	r1, [r3, #12]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad02:	461a      	mov	r2, r3
 800ad04:	6838      	ldr	r0, [r7, #0]
 800ad06:	f002 f91d 	bl	800cf44 <memcpy>
	}
}
 800ad0a:	bf00      	nop
 800ad0c:	3708      	adds	r7, #8
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b084      	sub	sp, #16
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ad1a:	f001 fae7 	bl	800c2ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad24:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad26:	e011      	b.n	800ad4c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d012      	beq.n	800ad56 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	3324      	adds	r3, #36	; 0x24
 800ad34:	4618      	mov	r0, r3
 800ad36:	f000 fdc5 	bl	800b8c4 <xTaskRemoveFromEventList>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d001      	beq.n	800ad44 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ad40:	f000 fe98 	bl	800ba74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ad44:	7bfb      	ldrb	r3, [r7, #15]
 800ad46:	3b01      	subs	r3, #1
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	dce9      	bgt.n	800ad28 <prvUnlockQueue+0x16>
 800ad54:	e000      	b.n	800ad58 <prvUnlockQueue+0x46>
					break;
 800ad56:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	22ff      	movs	r2, #255	; 0xff
 800ad5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ad60:	f001 faf2 	bl	800c348 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad64:	f001 fac2 	bl	800c2ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad6e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad70:	e011      	b.n	800ad96 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d012      	beq.n	800ada0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	3310      	adds	r3, #16
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f000 fda0 	bl	800b8c4 <xTaskRemoveFromEventList>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ad8a:	f000 fe73 	bl	800ba74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ad8e:	7bbb      	ldrb	r3, [r7, #14]
 800ad90:	3b01      	subs	r3, #1
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	dce9      	bgt.n	800ad72 <prvUnlockQueue+0x60>
 800ad9e:	e000      	b.n	800ada2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ada0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	22ff      	movs	r2, #255	; 0xff
 800ada6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800adaa:	f001 facd 	bl	800c348 <vPortExitCritical>
}
 800adae:	bf00      	nop
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b084      	sub	sp, #16
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800adbe:	f001 fa95 	bl	800c2ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d102      	bne.n	800add0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800adca:	2301      	movs	r3, #1
 800adcc:	60fb      	str	r3, [r7, #12]
 800adce:	e001      	b.n	800add4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800add0:	2300      	movs	r3, #0
 800add2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800add4:	f001 fab8 	bl	800c348 <vPortExitCritical>

	return xReturn;
 800add8:	68fb      	ldr	r3, [r7, #12]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b084      	sub	sp, #16
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800adea:	f001 fa7f 	bl	800c2ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d102      	bne.n	800ae00 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800adfa:	2301      	movs	r3, #1
 800adfc:	60fb      	str	r3, [r7, #12]
 800adfe:	e001      	b.n	800ae04 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ae00:	2300      	movs	r3, #0
 800ae02:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae04:	f001 faa0 	bl	800c348 <vPortExitCritical>

	return xReturn;
 800ae08:	68fb      	ldr	r3, [r7, #12]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b08e      	sub	sp, #56	; 0x38
 800ae16:	af04      	add	r7, sp, #16
 800ae18:	60f8      	str	r0, [r7, #12]
 800ae1a:	60b9      	str	r1, [r7, #8]
 800ae1c:	607a      	str	r2, [r7, #4]
 800ae1e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ae20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d109      	bne.n	800ae3a <xTaskCreateStatic+0x28>
	__asm volatile
 800ae26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae2a:	f383 8811 	msr	BASEPRI, r3
 800ae2e:	f3bf 8f6f 	isb	sy
 800ae32:	f3bf 8f4f 	dsb	sy
 800ae36:	623b      	str	r3, [r7, #32]
 800ae38:	e7fe      	b.n	800ae38 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800ae3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d109      	bne.n	800ae54 <xTaskCreateStatic+0x42>
 800ae40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae44:	f383 8811 	msr	BASEPRI, r3
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	61fb      	str	r3, [r7, #28]
 800ae52:	e7fe      	b.n	800ae52 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae54:	2360      	movs	r3, #96	; 0x60
 800ae56:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	2b60      	cmp	r3, #96	; 0x60
 800ae5c:	d009      	beq.n	800ae72 <xTaskCreateStatic+0x60>
 800ae5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	61bb      	str	r3, [r7, #24]
 800ae70:	e7fe      	b.n	800ae70 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ae72:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d01e      	beq.n	800aeb8 <xTaskCreateStatic+0xa6>
 800ae7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d01b      	beq.n	800aeb8 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae82:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae88:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8c:	2202      	movs	r2, #2
 800ae8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ae92:	2300      	movs	r3, #0
 800ae94:	9303      	str	r3, [sp, #12]
 800ae96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae98:	9302      	str	r3, [sp, #8]
 800ae9a:	f107 0314 	add.w	r3, r7, #20
 800ae9e:	9301      	str	r3, [sp, #4]
 800aea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea2:	9300      	str	r3, [sp, #0]
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	68b9      	ldr	r1, [r7, #8]
 800aeaa:	68f8      	ldr	r0, [r7, #12]
 800aeac:	f000 f850 	bl	800af50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aeb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aeb2:	f000 f8df 	bl	800b074 <prvAddNewTaskToReadyList>
 800aeb6:	e001      	b.n	800aebc <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aebc:	697b      	ldr	r3, [r7, #20]
	}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3728      	adds	r7, #40	; 0x28
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b08c      	sub	sp, #48	; 0x30
 800aeca:	af04      	add	r7, sp, #16
 800aecc:	60f8      	str	r0, [r7, #12]
 800aece:	60b9      	str	r1, [r7, #8]
 800aed0:	603b      	str	r3, [r7, #0]
 800aed2:	4613      	mov	r3, r2
 800aed4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aed6:	88fb      	ldrh	r3, [r7, #6]
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	4618      	mov	r0, r3
 800aedc:	f001 fb20 	bl	800c520 <pvPortMalloc>
 800aee0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d00e      	beq.n	800af06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aee8:	2060      	movs	r0, #96	; 0x60
 800aeea:	f001 fb19 	bl	800c520 <pvPortMalloc>
 800aeee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aef0:	69fb      	ldr	r3, [r7, #28]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d003      	beq.n	800aefe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aef6:	69fb      	ldr	r3, [r7, #28]
 800aef8:	697a      	ldr	r2, [r7, #20]
 800aefa:	631a      	str	r2, [r3, #48]	; 0x30
 800aefc:	e005      	b.n	800af0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aefe:	6978      	ldr	r0, [r7, #20]
 800af00:	f001 fbd0 	bl	800c6a4 <vPortFree>
 800af04:	e001      	b.n	800af0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800af06:	2300      	movs	r3, #0
 800af08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800af0a:	69fb      	ldr	r3, [r7, #28]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d017      	beq.n	800af40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800af10:	69fb      	ldr	r3, [r7, #28]
 800af12:	2200      	movs	r2, #0
 800af14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800af18:	88fa      	ldrh	r2, [r7, #6]
 800af1a:	2300      	movs	r3, #0
 800af1c:	9303      	str	r3, [sp, #12]
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	9302      	str	r3, [sp, #8]
 800af22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af24:	9301      	str	r3, [sp, #4]
 800af26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af28:	9300      	str	r3, [sp, #0]
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	68b9      	ldr	r1, [r7, #8]
 800af2e:	68f8      	ldr	r0, [r7, #12]
 800af30:	f000 f80e 	bl	800af50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af34:	69f8      	ldr	r0, [r7, #28]
 800af36:	f000 f89d 	bl	800b074 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af3a:	2301      	movs	r3, #1
 800af3c:	61bb      	str	r3, [r7, #24]
 800af3e:	e002      	b.n	800af46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af40:	f04f 33ff 	mov.w	r3, #4294967295
 800af44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af46:	69bb      	ldr	r3, [r7, #24]
	}
 800af48:	4618      	mov	r0, r3
 800af4a:	3720      	adds	r7, #32
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b088      	sub	sp, #32
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
 800af5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800af5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	461a      	mov	r2, r3
 800af68:	21a5      	movs	r1, #165	; 0xa5
 800af6a:	f001 fff6 	bl	800cf5a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800af78:	3b01      	subs	r3, #1
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	4413      	add	r3, r2
 800af7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	f023 0307 	bic.w	r3, r3, #7
 800af86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	f003 0307 	and.w	r3, r3, #7
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d009      	beq.n	800afa6 <prvInitialiseNewTask+0x56>
 800af92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af96:	f383 8811 	msr	BASEPRI, r3
 800af9a:	f3bf 8f6f 	isb	sy
 800af9e:	f3bf 8f4f 	dsb	sy
 800afa2:	617b      	str	r3, [r7, #20]
 800afa4:	e7fe      	b.n	800afa4 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d01f      	beq.n	800afec <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afac:	2300      	movs	r3, #0
 800afae:	61fb      	str	r3, [r7, #28]
 800afb0:	e012      	b.n	800afd8 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800afb2:	68ba      	ldr	r2, [r7, #8]
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	4413      	add	r3, r2
 800afb8:	7819      	ldrb	r1, [r3, #0]
 800afba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	4413      	add	r3, r2
 800afc0:	3334      	adds	r3, #52	; 0x34
 800afc2:	460a      	mov	r2, r1
 800afc4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800afc6:	68ba      	ldr	r2, [r7, #8]
 800afc8:	69fb      	ldr	r3, [r7, #28]
 800afca:	4413      	add	r3, r2
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d006      	beq.n	800afe0 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afd2:	69fb      	ldr	r3, [r7, #28]
 800afd4:	3301      	adds	r3, #1
 800afd6:	61fb      	str	r3, [r7, #28]
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	2b0f      	cmp	r3, #15
 800afdc:	d9e9      	bls.n	800afb2 <prvInitialiseNewTask+0x62>
 800afde:	e000      	b.n	800afe2 <prvInitialiseNewTask+0x92>
			{
				break;
 800afe0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800afe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe4:	2200      	movs	r2, #0
 800afe6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800afea:	e003      	b.n	800aff4 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800afec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afee:	2200      	movs	r2, #0
 800aff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff6:	2b06      	cmp	r3, #6
 800aff8:	d901      	bls.n	800affe <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800affa:	2306      	movs	r3, #6
 800affc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800affe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b002:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b008:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00c:	2200      	movs	r2, #0
 800b00e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b012:	3304      	adds	r3, #4
 800b014:	4618      	mov	r0, r3
 800b016:	f7fe ff57 	bl	8009ec8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01c:	3318      	adds	r3, #24
 800b01e:	4618      	mov	r0, r3
 800b020:	f7fe ff52 	bl	8009ec8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b028:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02c:	f1c3 0207 	rsb	r2, r3, #7
 800b030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b032:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b036:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b038:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800b03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03c:	2200      	movs	r2, #0
 800b03e:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b042:	2200      	movs	r2, #0
 800b044:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b048:	2200      	movs	r2, #0
 800b04a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b04e:	683a      	ldr	r2, [r7, #0]
 800b050:	68f9      	ldr	r1, [r7, #12]
 800b052:	69b8      	ldr	r0, [r7, #24]
 800b054:	f001 f820 	bl	800c098 <pxPortInitialiseStack>
 800b058:	4602      	mov	r2, r0
 800b05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b060:	2b00      	cmp	r3, #0
 800b062:	d002      	beq.n	800b06a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b068:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b06a:	bf00      	nop
 800b06c:	3720      	adds	r7, #32
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
	...

0800b074 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b07c:	f001 f936 	bl	800c2ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b080:	4b2c      	ldr	r3, [pc, #176]	; (800b134 <prvAddNewTaskToReadyList+0xc0>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	3301      	adds	r3, #1
 800b086:	4a2b      	ldr	r2, [pc, #172]	; (800b134 <prvAddNewTaskToReadyList+0xc0>)
 800b088:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b08a:	4b2b      	ldr	r3, [pc, #172]	; (800b138 <prvAddNewTaskToReadyList+0xc4>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d109      	bne.n	800b0a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b092:	4a29      	ldr	r2, [pc, #164]	; (800b138 <prvAddNewTaskToReadyList+0xc4>)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b098:	4b26      	ldr	r3, [pc, #152]	; (800b134 <prvAddNewTaskToReadyList+0xc0>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d110      	bne.n	800b0c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b0a0:	f000 fd0c 	bl	800babc <prvInitialiseTaskLists>
 800b0a4:	e00d      	b.n	800b0c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b0a6:	4b25      	ldr	r3, [pc, #148]	; (800b13c <prvAddNewTaskToReadyList+0xc8>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d109      	bne.n	800b0c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b0ae:	4b22      	ldr	r3, [pc, #136]	; (800b138 <prvAddNewTaskToReadyList+0xc4>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d802      	bhi.n	800b0c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b0bc:	4a1e      	ldr	r2, [pc, #120]	; (800b138 <prvAddNewTaskToReadyList+0xc4>)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b0c2:	4b1f      	ldr	r3, [pc, #124]	; (800b140 <prvAddNewTaskToReadyList+0xcc>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	4a1d      	ldr	r2, [pc, #116]	; (800b140 <prvAddNewTaskToReadyList+0xcc>)
 800b0ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b0cc:	4b1c      	ldr	r3, [pc, #112]	; (800b140 <prvAddNewTaskToReadyList+0xcc>)
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d8:	2201      	movs	r2, #1
 800b0da:	409a      	lsls	r2, r3
 800b0dc:	4b19      	ldr	r3, [pc, #100]	; (800b144 <prvAddNewTaskToReadyList+0xd0>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	4a18      	ldr	r2, [pc, #96]	; (800b144 <prvAddNewTaskToReadyList+0xd0>)
 800b0e4:	6013      	str	r3, [r2, #0]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ea:	4613      	mov	r3, r2
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	4413      	add	r3, r2
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	4a15      	ldr	r2, [pc, #84]	; (800b148 <prvAddNewTaskToReadyList+0xd4>)
 800b0f4:	441a      	add	r2, r3
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	3304      	adds	r3, #4
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	4610      	mov	r0, r2
 800b0fe:	f7fe fef0 	bl	8009ee2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b102:	f001 f921 	bl	800c348 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b106:	4b0d      	ldr	r3, [pc, #52]	; (800b13c <prvAddNewTaskToReadyList+0xc8>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00e      	beq.n	800b12c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b10e:	4b0a      	ldr	r3, [pc, #40]	; (800b138 <prvAddNewTaskToReadyList+0xc4>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b118:	429a      	cmp	r2, r3
 800b11a:	d207      	bcs.n	800b12c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b11c:	4b0b      	ldr	r3, [pc, #44]	; (800b14c <prvAddNewTaskToReadyList+0xd8>)
 800b11e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b122:	601a      	str	r2, [r3, #0]
 800b124:	f3bf 8f4f 	dsb	sy
 800b128:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b12c:	bf00      	nop
 800b12e:	3708      	adds	r7, #8
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}
 800b134:	20000418 	.word	0x20000418
 800b138:	20000318 	.word	0x20000318
 800b13c:	20000424 	.word	0x20000424
 800b140:	20000434 	.word	0x20000434
 800b144:	20000420 	.word	0x20000420
 800b148:	2000031c 	.word	0x2000031c
 800b14c:	e000ed04 	.word	0xe000ed04

0800b150 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b158:	f001 f8c8 	bl	800c2ec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d102      	bne.n	800b168 <vTaskDelete+0x18>
 800b162:	4b38      	ldr	r3, [pc, #224]	; (800b244 <vTaskDelete+0xf4>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	e000      	b.n	800b16a <vTaskDelete+0x1a>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	3304      	adds	r3, #4
 800b170:	4618      	mov	r0, r3
 800b172:	f7fe ff13 	bl	8009f9c <uxListRemove>
 800b176:	4603      	mov	r3, r0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d115      	bne.n	800b1a8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b180:	4931      	ldr	r1, [pc, #196]	; (800b248 <vTaskDelete+0xf8>)
 800b182:	4613      	mov	r3, r2
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	4413      	add	r3, r2
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	440b      	add	r3, r1
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d10a      	bne.n	800b1a8 <vTaskDelete+0x58>
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b196:	2201      	movs	r2, #1
 800b198:	fa02 f303 	lsl.w	r3, r2, r3
 800b19c:	43da      	mvns	r2, r3
 800b19e:	4b2b      	ldr	r3, [pc, #172]	; (800b24c <vTaskDelete+0xfc>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4013      	ands	r3, r2
 800b1a4:	4a29      	ldr	r2, [pc, #164]	; (800b24c <vTaskDelete+0xfc>)
 800b1a6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d004      	beq.n	800b1ba <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	3318      	adds	r3, #24
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7fe fef1 	bl	8009f9c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b1ba:	4b25      	ldr	r3, [pc, #148]	; (800b250 <vTaskDelete+0x100>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	4a23      	ldr	r2, [pc, #140]	; (800b250 <vTaskDelete+0x100>)
 800b1c2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b1c4:	4b1f      	ldr	r3, [pc, #124]	; (800b244 <vTaskDelete+0xf4>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	68fa      	ldr	r2, [r7, #12]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d10b      	bne.n	800b1e6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	3304      	adds	r3, #4
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	481f      	ldr	r0, [pc, #124]	; (800b254 <vTaskDelete+0x104>)
 800b1d6:	f7fe fe84 	bl	8009ee2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b1da:	4b1f      	ldr	r3, [pc, #124]	; (800b258 <vTaskDelete+0x108>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	4a1d      	ldr	r2, [pc, #116]	; (800b258 <vTaskDelete+0x108>)
 800b1e2:	6013      	str	r3, [r2, #0]
 800b1e4:	e009      	b.n	800b1fa <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b1e6:	4b1d      	ldr	r3, [pc, #116]	; (800b25c <vTaskDelete+0x10c>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	4a1b      	ldr	r2, [pc, #108]	; (800b25c <vTaskDelete+0x10c>)
 800b1ee:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	f000 fccf 	bl	800bb94 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b1f6:	f000 fcfb 	bl	800bbf0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800b1fa:	f001 f8a5 	bl	800c348 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b1fe:	4b18      	ldr	r3, [pc, #96]	; (800b260 <vTaskDelete+0x110>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d01a      	beq.n	800b23c <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 800b206:	4b0f      	ldr	r3, [pc, #60]	; (800b244 <vTaskDelete+0xf4>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68fa      	ldr	r2, [r7, #12]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d115      	bne.n	800b23c <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b210:	4b14      	ldr	r3, [pc, #80]	; (800b264 <vTaskDelete+0x114>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d009      	beq.n	800b22c <vTaskDelete+0xdc>
 800b218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21c:	f383 8811 	msr	BASEPRI, r3
 800b220:	f3bf 8f6f 	isb	sy
 800b224:	f3bf 8f4f 	dsb	sy
 800b228:	60bb      	str	r3, [r7, #8]
 800b22a:	e7fe      	b.n	800b22a <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 800b22c:	4b0e      	ldr	r3, [pc, #56]	; (800b268 <vTaskDelete+0x118>)
 800b22e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b232:	601a      	str	r2, [r3, #0]
 800b234:	f3bf 8f4f 	dsb	sy
 800b238:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b23c:	bf00      	nop
 800b23e:	3710      	adds	r7, #16
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	20000318 	.word	0x20000318
 800b248:	2000031c 	.word	0x2000031c
 800b24c:	20000420 	.word	0x20000420
 800b250:	20000434 	.word	0x20000434
 800b254:	200003ec 	.word	0x200003ec
 800b258:	20000400 	.word	0x20000400
 800b25c:	20000418 	.word	0x20000418
 800b260:	20000424 	.word	0x20000424
 800b264:	20000440 	.word	0x20000440
 800b268:	e000ed04 	.word	0xe000ed04

0800b26c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b08a      	sub	sp, #40	; 0x28
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b276:	2300      	movs	r3, #0
 800b278:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d109      	bne.n	800b294 <vTaskDelayUntil+0x28>
 800b280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b284:	f383 8811 	msr	BASEPRI, r3
 800b288:	f3bf 8f6f 	isb	sy
 800b28c:	f3bf 8f4f 	dsb	sy
 800b290:	617b      	str	r3, [r7, #20]
 800b292:	e7fe      	b.n	800b292 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d109      	bne.n	800b2ae <vTaskDelayUntil+0x42>
 800b29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29e:	f383 8811 	msr	BASEPRI, r3
 800b2a2:	f3bf 8f6f 	isb	sy
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	613b      	str	r3, [r7, #16]
 800b2ac:	e7fe      	b.n	800b2ac <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800b2ae:	4b29      	ldr	r3, [pc, #164]	; (800b354 <vTaskDelayUntil+0xe8>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d009      	beq.n	800b2ca <vTaskDelayUntil+0x5e>
 800b2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ba:	f383 8811 	msr	BASEPRI, r3
 800b2be:	f3bf 8f6f 	isb	sy
 800b2c2:	f3bf 8f4f 	dsb	sy
 800b2c6:	60fb      	str	r3, [r7, #12]
 800b2c8:	e7fe      	b.n	800b2c8 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800b2ca:	f000 f8dd 	bl	800b488 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b2ce:	4b22      	ldr	r3, [pc, #136]	; (800b358 <vTaskDelayUntil+0xec>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	683a      	ldr	r2, [r7, #0]
 800b2da:	4413      	add	r3, r2
 800b2dc:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	6a3a      	ldr	r2, [r7, #32]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d20b      	bcs.n	800b300 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	69fa      	ldr	r2, [r7, #28]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d211      	bcs.n	800b316 <vTaskDelayUntil+0xaa>
 800b2f2:	69fa      	ldr	r2, [r7, #28]
 800b2f4:	6a3b      	ldr	r3, [r7, #32]
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d90d      	bls.n	800b316 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	627b      	str	r3, [r7, #36]	; 0x24
 800b2fe:	e00a      	b.n	800b316 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	69fa      	ldr	r2, [r7, #28]
 800b306:	429a      	cmp	r2, r3
 800b308:	d303      	bcc.n	800b312 <vTaskDelayUntil+0xa6>
 800b30a:	69fa      	ldr	r2, [r7, #28]
 800b30c:	6a3b      	ldr	r3, [r7, #32]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d901      	bls.n	800b316 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800b312:	2301      	movs	r3, #1
 800b314:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	69fa      	ldr	r2, [r7, #28]
 800b31a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d006      	beq.n	800b330 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b322:	69fa      	ldr	r2, [r7, #28]
 800b324:	6a3b      	ldr	r3, [r7, #32]
 800b326:	1ad3      	subs	r3, r2, r3
 800b328:	2100      	movs	r1, #0
 800b32a:	4618      	mov	r0, r3
 800b32c:	f000 fe4e 	bl	800bfcc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b330:	f000 f8b8 	bl	800b4a4 <xTaskResumeAll>
 800b334:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d107      	bne.n	800b34c <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800b33c:	4b07      	ldr	r3, [pc, #28]	; (800b35c <vTaskDelayUntil+0xf0>)
 800b33e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b342:	601a      	str	r2, [r3, #0]
 800b344:	f3bf 8f4f 	dsb	sy
 800b348:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b34c:	bf00      	nop
 800b34e:	3728      	adds	r7, #40	; 0x28
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	20000440 	.word	0x20000440
 800b358:	2000041c 	.word	0x2000041c
 800b35c:	e000ed04 	.word	0xe000ed04

0800b360 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b368:	2300      	movs	r3, #0
 800b36a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d016      	beq.n	800b3a0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b372:	4b13      	ldr	r3, [pc, #76]	; (800b3c0 <vTaskDelay+0x60>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d009      	beq.n	800b38e <vTaskDelay+0x2e>
 800b37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37e:	f383 8811 	msr	BASEPRI, r3
 800b382:	f3bf 8f6f 	isb	sy
 800b386:	f3bf 8f4f 	dsb	sy
 800b38a:	60bb      	str	r3, [r7, #8]
 800b38c:	e7fe      	b.n	800b38c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b38e:	f000 f87b 	bl	800b488 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b392:	2100      	movs	r1, #0
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f000 fe19 	bl	800bfcc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b39a:	f000 f883 	bl	800b4a4 <xTaskResumeAll>
 800b39e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d107      	bne.n	800b3b6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b3a6:	4b07      	ldr	r3, [pc, #28]	; (800b3c4 <vTaskDelay+0x64>)
 800b3a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3ac:	601a      	str	r2, [r3, #0]
 800b3ae:	f3bf 8f4f 	dsb	sy
 800b3b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b3b6:	bf00      	nop
 800b3b8:	3710      	adds	r7, #16
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	20000440 	.word	0x20000440
 800b3c4:	e000ed04 	.word	0xe000ed04

0800b3c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b08a      	sub	sp, #40	; 0x28
 800b3cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b3d6:	463a      	mov	r2, r7
 800b3d8:	1d39      	adds	r1, r7, #4
 800b3da:	f107 0308 	add.w	r3, r7, #8
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7f5 f88e 	bl	8000500 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b3e4:	6839      	ldr	r1, [r7, #0]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	9202      	str	r2, [sp, #8]
 800b3ec:	9301      	str	r3, [sp, #4]
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	9300      	str	r3, [sp, #0]
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	460a      	mov	r2, r1
 800b3f6:	491e      	ldr	r1, [pc, #120]	; (800b470 <vTaskStartScheduler+0xa8>)
 800b3f8:	481e      	ldr	r0, [pc, #120]	; (800b474 <vTaskStartScheduler+0xac>)
 800b3fa:	f7ff fd0a 	bl	800ae12 <xTaskCreateStatic>
 800b3fe:	4602      	mov	r2, r0
 800b400:	4b1d      	ldr	r3, [pc, #116]	; (800b478 <vTaskStartScheduler+0xb0>)
 800b402:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b404:	4b1c      	ldr	r3, [pc, #112]	; (800b478 <vTaskStartScheduler+0xb0>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d002      	beq.n	800b412 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b40c:	2301      	movs	r3, #1
 800b40e:	617b      	str	r3, [r7, #20]
 800b410:	e001      	b.n	800b416 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b412:	2300      	movs	r3, #0
 800b414:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d117      	bne.n	800b44c <vTaskStartScheduler+0x84>
 800b41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b420:	f383 8811 	msr	BASEPRI, r3
 800b424:	f3bf 8f6f 	isb	sy
 800b428:	f3bf 8f4f 	dsb	sy
 800b42c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b42e:	4b13      	ldr	r3, [pc, #76]	; (800b47c <vTaskStartScheduler+0xb4>)
 800b430:	f04f 32ff 	mov.w	r2, #4294967295
 800b434:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b436:	4b12      	ldr	r3, [pc, #72]	; (800b480 <vTaskStartScheduler+0xb8>)
 800b438:	2201      	movs	r2, #1
 800b43a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b43c:	4b11      	ldr	r3, [pc, #68]	; (800b484 <vTaskStartScheduler+0xbc>)
 800b43e:	2200      	movs	r2, #0
 800b440:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b442:	f7f5 f84d 	bl	80004e0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b446:	f000 feb3 	bl	800c1b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b44a:	e00d      	b.n	800b468 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b452:	d109      	bne.n	800b468 <vTaskStartScheduler+0xa0>
 800b454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b458:	f383 8811 	msr	BASEPRI, r3
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	f3bf 8f4f 	dsb	sy
 800b464:	60fb      	str	r3, [r7, #12]
 800b466:	e7fe      	b.n	800b466 <vTaskStartScheduler+0x9e>
}
 800b468:	bf00      	nop
 800b46a:	3718      	adds	r7, #24
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	0800d730 	.word	0x0800d730
 800b474:	0800ba8d 	.word	0x0800ba8d
 800b478:	2000043c 	.word	0x2000043c
 800b47c:	20000438 	.word	0x20000438
 800b480:	20000424 	.word	0x20000424
 800b484:	2000041c 	.word	0x2000041c

0800b488 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b488:	b480      	push	{r7}
 800b48a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b48c:	4b04      	ldr	r3, [pc, #16]	; (800b4a0 <vTaskSuspendAll+0x18>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	3301      	adds	r3, #1
 800b492:	4a03      	ldr	r2, [pc, #12]	; (800b4a0 <vTaskSuspendAll+0x18>)
 800b494:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b496:	bf00      	nop
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr
 800b4a0:	20000440 	.word	0x20000440

0800b4a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b4b2:	4b41      	ldr	r3, [pc, #260]	; (800b5b8 <xTaskResumeAll+0x114>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d109      	bne.n	800b4ce <xTaskResumeAll+0x2a>
 800b4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4be:	f383 8811 	msr	BASEPRI, r3
 800b4c2:	f3bf 8f6f 	isb	sy
 800b4c6:	f3bf 8f4f 	dsb	sy
 800b4ca:	603b      	str	r3, [r7, #0]
 800b4cc:	e7fe      	b.n	800b4cc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b4ce:	f000 ff0d 	bl	800c2ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b4d2:	4b39      	ldr	r3, [pc, #228]	; (800b5b8 <xTaskResumeAll+0x114>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	4a37      	ldr	r2, [pc, #220]	; (800b5b8 <xTaskResumeAll+0x114>)
 800b4da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4dc:	4b36      	ldr	r3, [pc, #216]	; (800b5b8 <xTaskResumeAll+0x114>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d161      	bne.n	800b5a8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b4e4:	4b35      	ldr	r3, [pc, #212]	; (800b5bc <xTaskResumeAll+0x118>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d05d      	beq.n	800b5a8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b4ec:	e02e      	b.n	800b54c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4ee:	4b34      	ldr	r3, [pc, #208]	; (800b5c0 <xTaskResumeAll+0x11c>)
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	68db      	ldr	r3, [r3, #12]
 800b4f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	3318      	adds	r3, #24
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7fe fd4e 	bl	8009f9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	3304      	adds	r3, #4
 800b504:	4618      	mov	r0, r3
 800b506:	f7fe fd49 	bl	8009f9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b50e:	2201      	movs	r2, #1
 800b510:	409a      	lsls	r2, r3
 800b512:	4b2c      	ldr	r3, [pc, #176]	; (800b5c4 <xTaskResumeAll+0x120>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4313      	orrs	r3, r2
 800b518:	4a2a      	ldr	r2, [pc, #168]	; (800b5c4 <xTaskResumeAll+0x120>)
 800b51a:	6013      	str	r3, [r2, #0]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b520:	4613      	mov	r3, r2
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	4413      	add	r3, r2
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	4a27      	ldr	r2, [pc, #156]	; (800b5c8 <xTaskResumeAll+0x124>)
 800b52a:	441a      	add	r2, r3
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	3304      	adds	r3, #4
 800b530:	4619      	mov	r1, r3
 800b532:	4610      	mov	r0, r2
 800b534:	f7fe fcd5 	bl	8009ee2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b53c:	4b23      	ldr	r3, [pc, #140]	; (800b5cc <xTaskResumeAll+0x128>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b542:	429a      	cmp	r2, r3
 800b544:	d302      	bcc.n	800b54c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800b546:	4b22      	ldr	r3, [pc, #136]	; (800b5d0 <xTaskResumeAll+0x12c>)
 800b548:	2201      	movs	r2, #1
 800b54a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b54c:	4b1c      	ldr	r3, [pc, #112]	; (800b5c0 <xTaskResumeAll+0x11c>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d1cc      	bne.n	800b4ee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d001      	beq.n	800b55e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b55a:	f000 fb49 	bl	800bbf0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b55e:	4b1d      	ldr	r3, [pc, #116]	; (800b5d4 <xTaskResumeAll+0x130>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d010      	beq.n	800b58c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b56a:	f000 f859 	bl	800b620 <xTaskIncrementTick>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b00      	cmp	r3, #0
 800b572:	d002      	beq.n	800b57a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800b574:	4b16      	ldr	r3, [pc, #88]	; (800b5d0 <xTaskResumeAll+0x12c>)
 800b576:	2201      	movs	r2, #1
 800b578:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	3b01      	subs	r3, #1
 800b57e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d1f1      	bne.n	800b56a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800b586:	4b13      	ldr	r3, [pc, #76]	; (800b5d4 <xTaskResumeAll+0x130>)
 800b588:	2200      	movs	r2, #0
 800b58a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b58c:	4b10      	ldr	r3, [pc, #64]	; (800b5d0 <xTaskResumeAll+0x12c>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d009      	beq.n	800b5a8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b594:	2301      	movs	r3, #1
 800b596:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b598:	4b0f      	ldr	r3, [pc, #60]	; (800b5d8 <xTaskResumeAll+0x134>)
 800b59a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b59e:	601a      	str	r2, [r3, #0]
 800b5a0:	f3bf 8f4f 	dsb	sy
 800b5a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b5a8:	f000 fece 	bl	800c348 <vPortExitCritical>

	return xAlreadyYielded;
 800b5ac:	68bb      	ldr	r3, [r7, #8]
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	20000440 	.word	0x20000440
 800b5bc:	20000418 	.word	0x20000418
 800b5c0:	200003d8 	.word	0x200003d8
 800b5c4:	20000420 	.word	0x20000420
 800b5c8:	2000031c 	.word	0x2000031c
 800b5cc:	20000318 	.word	0x20000318
 800b5d0:	2000042c 	.word	0x2000042c
 800b5d4:	20000428 	.word	0x20000428
 800b5d8:	e000ed04 	.word	0xe000ed04

0800b5dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b5e2:	4b05      	ldr	r3, [pc, #20]	; (800b5f8 <xTaskGetTickCount+0x1c>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b5e8:	687b      	ldr	r3, [r7, #4]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	370c      	adds	r7, #12
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr
 800b5f6:	bf00      	nop
 800b5f8:	2000041c 	.word	0x2000041c

0800b5fc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b082      	sub	sp, #8
 800b600:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b602:	f000 ff4f 	bl	800c4a4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b606:	2300      	movs	r3, #0
 800b608:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b60a:	4b04      	ldr	r3, [pc, #16]	; (800b61c <xTaskGetTickCountFromISR+0x20>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b610:	683b      	ldr	r3, [r7, #0]
}
 800b612:	4618      	mov	r0, r3
 800b614:	3708      	adds	r7, #8
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	2000041c 	.word	0x2000041c

0800b620 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b086      	sub	sp, #24
 800b624:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b626:	2300      	movs	r3, #0
 800b628:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b62a:	4b4e      	ldr	r3, [pc, #312]	; (800b764 <xTaskIncrementTick+0x144>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	f040 8087 	bne.w	800b742 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b634:	4b4c      	ldr	r3, [pc, #304]	; (800b768 <xTaskIncrementTick+0x148>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	3301      	adds	r3, #1
 800b63a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b63c:	4a4a      	ldr	r2, [pc, #296]	; (800b768 <xTaskIncrementTick+0x148>)
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d11f      	bne.n	800b688 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b648:	4b48      	ldr	r3, [pc, #288]	; (800b76c <xTaskIncrementTick+0x14c>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d009      	beq.n	800b666 <xTaskIncrementTick+0x46>
 800b652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b656:	f383 8811 	msr	BASEPRI, r3
 800b65a:	f3bf 8f6f 	isb	sy
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	603b      	str	r3, [r7, #0]
 800b664:	e7fe      	b.n	800b664 <xTaskIncrementTick+0x44>
 800b666:	4b41      	ldr	r3, [pc, #260]	; (800b76c <xTaskIncrementTick+0x14c>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	60fb      	str	r3, [r7, #12]
 800b66c:	4b40      	ldr	r3, [pc, #256]	; (800b770 <xTaskIncrementTick+0x150>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a3e      	ldr	r2, [pc, #248]	; (800b76c <xTaskIncrementTick+0x14c>)
 800b672:	6013      	str	r3, [r2, #0]
 800b674:	4a3e      	ldr	r2, [pc, #248]	; (800b770 <xTaskIncrementTick+0x150>)
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	6013      	str	r3, [r2, #0]
 800b67a:	4b3e      	ldr	r3, [pc, #248]	; (800b774 <xTaskIncrementTick+0x154>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	3301      	adds	r3, #1
 800b680:	4a3c      	ldr	r2, [pc, #240]	; (800b774 <xTaskIncrementTick+0x154>)
 800b682:	6013      	str	r3, [r2, #0]
 800b684:	f000 fab4 	bl	800bbf0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b688:	4b3b      	ldr	r3, [pc, #236]	; (800b778 <xTaskIncrementTick+0x158>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	693a      	ldr	r2, [r7, #16]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d348      	bcc.n	800b724 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b692:	4b36      	ldr	r3, [pc, #216]	; (800b76c <xTaskIncrementTick+0x14c>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d104      	bne.n	800b6a6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b69c:	4b36      	ldr	r3, [pc, #216]	; (800b778 <xTaskIncrementTick+0x158>)
 800b69e:	f04f 32ff 	mov.w	r2, #4294967295
 800b6a2:	601a      	str	r2, [r3, #0]
					break;
 800b6a4:	e03e      	b.n	800b724 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6a6:	4b31      	ldr	r3, [pc, #196]	; (800b76c <xTaskIncrementTick+0x14c>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b6b6:	693a      	ldr	r2, [r7, #16]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d203      	bcs.n	800b6c6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b6be:	4a2e      	ldr	r2, [pc, #184]	; (800b778 <xTaskIncrementTick+0x158>)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b6c4:	e02e      	b.n	800b724 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	3304      	adds	r3, #4
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7fe fc66 	bl	8009f9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d004      	beq.n	800b6e2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	3318      	adds	r3, #24
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7fe fc5d 	bl	8009f9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	409a      	lsls	r2, r3
 800b6ea:	4b24      	ldr	r3, [pc, #144]	; (800b77c <xTaskIncrementTick+0x15c>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	4a22      	ldr	r2, [pc, #136]	; (800b77c <xTaskIncrementTick+0x15c>)
 800b6f2:	6013      	str	r3, [r2, #0]
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	4413      	add	r3, r2
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	4a1f      	ldr	r2, [pc, #124]	; (800b780 <xTaskIncrementTick+0x160>)
 800b702:	441a      	add	r2, r3
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	3304      	adds	r3, #4
 800b708:	4619      	mov	r1, r3
 800b70a:	4610      	mov	r0, r2
 800b70c:	f7fe fbe9 	bl	8009ee2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b714:	4b1b      	ldr	r3, [pc, #108]	; (800b784 <xTaskIncrementTick+0x164>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d3b9      	bcc.n	800b692 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b71e:	2301      	movs	r3, #1
 800b720:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b722:	e7b6      	b.n	800b692 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b724:	4b17      	ldr	r3, [pc, #92]	; (800b784 <xTaskIncrementTick+0x164>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b72a:	4915      	ldr	r1, [pc, #84]	; (800b780 <xTaskIncrementTick+0x160>)
 800b72c:	4613      	mov	r3, r2
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	4413      	add	r3, r2
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	440b      	add	r3, r1
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d907      	bls.n	800b74c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800b73c:	2301      	movs	r3, #1
 800b73e:	617b      	str	r3, [r7, #20]
 800b740:	e004      	b.n	800b74c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b742:	4b11      	ldr	r3, [pc, #68]	; (800b788 <xTaskIncrementTick+0x168>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	3301      	adds	r3, #1
 800b748:	4a0f      	ldr	r2, [pc, #60]	; (800b788 <xTaskIncrementTick+0x168>)
 800b74a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b74c:	4b0f      	ldr	r3, [pc, #60]	; (800b78c <xTaskIncrementTick+0x16c>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d001      	beq.n	800b758 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800b754:	2301      	movs	r3, #1
 800b756:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b758:	697b      	ldr	r3, [r7, #20]
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3718      	adds	r7, #24
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	20000440 	.word	0x20000440
 800b768:	2000041c 	.word	0x2000041c
 800b76c:	200003d0 	.word	0x200003d0
 800b770:	200003d4 	.word	0x200003d4
 800b774:	20000430 	.word	0x20000430
 800b778:	20000438 	.word	0x20000438
 800b77c:	20000420 	.word	0x20000420
 800b780:	2000031c 	.word	0x2000031c
 800b784:	20000318 	.word	0x20000318
 800b788:	20000428 	.word	0x20000428
 800b78c:	2000042c 	.word	0x2000042c

0800b790 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b086      	sub	sp, #24
 800b794:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b796:	4b32      	ldr	r3, [pc, #200]	; (800b860 <vTaskSwitchContext+0xd0>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d003      	beq.n	800b7a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b79e:	4b31      	ldr	r3, [pc, #196]	; (800b864 <vTaskSwitchContext+0xd4>)
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b7a4:	e057      	b.n	800b856 <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 800b7a6:	4b2f      	ldr	r3, [pc, #188]	; (800b864 <vTaskSwitchContext+0xd4>)
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b7ac:	f7f4 fe9f 	bl	80004ee <getRunTimeCounterValue>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	4b2d      	ldr	r3, [pc, #180]	; (800b868 <vTaskSwitchContext+0xd8>)
 800b7b4:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b7b6:	4b2c      	ldr	r3, [pc, #176]	; (800b868 <vTaskSwitchContext+0xd8>)
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	4b2c      	ldr	r3, [pc, #176]	; (800b86c <vTaskSwitchContext+0xdc>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d909      	bls.n	800b7d6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b7c2:	4b2b      	ldr	r3, [pc, #172]	; (800b870 <vTaskSwitchContext+0xe0>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b7c8:	4a27      	ldr	r2, [pc, #156]	; (800b868 <vTaskSwitchContext+0xd8>)
 800b7ca:	6810      	ldr	r0, [r2, #0]
 800b7cc:	4a27      	ldr	r2, [pc, #156]	; (800b86c <vTaskSwitchContext+0xdc>)
 800b7ce:	6812      	ldr	r2, [r2, #0]
 800b7d0:	1a82      	subs	r2, r0, r2
 800b7d2:	440a      	add	r2, r1
 800b7d4:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800b7d6:	4b24      	ldr	r3, [pc, #144]	; (800b868 <vTaskSwitchContext+0xd8>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a24      	ldr	r2, [pc, #144]	; (800b86c <vTaskSwitchContext+0xdc>)
 800b7dc:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7de:	4b25      	ldr	r3, [pc, #148]	; (800b874 <vTaskSwitchContext+0xe4>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	fab3 f383 	clz	r3, r3
 800b7ea:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b7ec:	7afb      	ldrb	r3, [r7, #11]
 800b7ee:	f1c3 031f 	rsb	r3, r3, #31
 800b7f2:	617b      	str	r3, [r7, #20]
 800b7f4:	4920      	ldr	r1, [pc, #128]	; (800b878 <vTaskSwitchContext+0xe8>)
 800b7f6:	697a      	ldr	r2, [r7, #20]
 800b7f8:	4613      	mov	r3, r2
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	4413      	add	r3, r2
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	440b      	add	r3, r1
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d109      	bne.n	800b81c <vTaskSwitchContext+0x8c>
	__asm volatile
 800b808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80c:	f383 8811 	msr	BASEPRI, r3
 800b810:	f3bf 8f6f 	isb	sy
 800b814:	f3bf 8f4f 	dsb	sy
 800b818:	607b      	str	r3, [r7, #4]
 800b81a:	e7fe      	b.n	800b81a <vTaskSwitchContext+0x8a>
 800b81c:	697a      	ldr	r2, [r7, #20]
 800b81e:	4613      	mov	r3, r2
 800b820:	009b      	lsls	r3, r3, #2
 800b822:	4413      	add	r3, r2
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	4a14      	ldr	r2, [pc, #80]	; (800b878 <vTaskSwitchContext+0xe8>)
 800b828:	4413      	add	r3, r2
 800b82a:	613b      	str	r3, [r7, #16]
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	685a      	ldr	r2, [r3, #4]
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	605a      	str	r2, [r3, #4]
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	685a      	ldr	r2, [r3, #4]
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	3308      	adds	r3, #8
 800b83e:	429a      	cmp	r2, r3
 800b840:	d104      	bne.n	800b84c <vTaskSwitchContext+0xbc>
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	685a      	ldr	r2, [r3, #4]
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	605a      	str	r2, [r3, #4]
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	4a07      	ldr	r2, [pc, #28]	; (800b870 <vTaskSwitchContext+0xe0>)
 800b854:	6013      	str	r3, [r2, #0]
}
 800b856:	bf00      	nop
 800b858:	3718      	adds	r7, #24
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	20000440 	.word	0x20000440
 800b864:	2000042c 	.word	0x2000042c
 800b868:	20000448 	.word	0x20000448
 800b86c:	20000444 	.word	0x20000444
 800b870:	20000318 	.word	0x20000318
 800b874:	20000420 	.word	0x20000420
 800b878:	2000031c 	.word	0x2000031c

0800b87c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d109      	bne.n	800b8a0 <vTaskPlaceOnEventList+0x24>
 800b88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b890:	f383 8811 	msr	BASEPRI, r3
 800b894:	f3bf 8f6f 	isb	sy
 800b898:	f3bf 8f4f 	dsb	sy
 800b89c:	60fb      	str	r3, [r7, #12]
 800b89e:	e7fe      	b.n	800b89e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8a0:	4b07      	ldr	r3, [pc, #28]	; (800b8c0 <vTaskPlaceOnEventList+0x44>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	3318      	adds	r3, #24
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f7fe fb3e 	bl	8009f2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b8ae:	2101      	movs	r1, #1
 800b8b0:	6838      	ldr	r0, [r7, #0]
 800b8b2:	f000 fb8b 	bl	800bfcc <prvAddCurrentTaskToDelayedList>
}
 800b8b6:	bf00      	nop
 800b8b8:	3710      	adds	r7, #16
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	20000318 	.word	0x20000318

0800b8c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b086      	sub	sp, #24
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d109      	bne.n	800b8ee <xTaskRemoveFromEventList+0x2a>
 800b8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8de:	f383 8811 	msr	BASEPRI, r3
 800b8e2:	f3bf 8f6f 	isb	sy
 800b8e6:	f3bf 8f4f 	dsb	sy
 800b8ea:	60fb      	str	r3, [r7, #12]
 800b8ec:	e7fe      	b.n	800b8ec <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	3318      	adds	r3, #24
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fe fb52 	bl	8009f9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8f8:	4b1d      	ldr	r3, [pc, #116]	; (800b970 <xTaskRemoveFromEventList+0xac>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d11c      	bne.n	800b93a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	3304      	adds	r3, #4
 800b904:	4618      	mov	r0, r3
 800b906:	f7fe fb49 	bl	8009f9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b90e:	2201      	movs	r2, #1
 800b910:	409a      	lsls	r2, r3
 800b912:	4b18      	ldr	r3, [pc, #96]	; (800b974 <xTaskRemoveFromEventList+0xb0>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4313      	orrs	r3, r2
 800b918:	4a16      	ldr	r2, [pc, #88]	; (800b974 <xTaskRemoveFromEventList+0xb0>)
 800b91a:	6013      	str	r3, [r2, #0]
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b920:	4613      	mov	r3, r2
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	4413      	add	r3, r2
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	4a13      	ldr	r2, [pc, #76]	; (800b978 <xTaskRemoveFromEventList+0xb4>)
 800b92a:	441a      	add	r2, r3
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	3304      	adds	r3, #4
 800b930:	4619      	mov	r1, r3
 800b932:	4610      	mov	r0, r2
 800b934:	f7fe fad5 	bl	8009ee2 <vListInsertEnd>
 800b938:	e005      	b.n	800b946 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	3318      	adds	r3, #24
 800b93e:	4619      	mov	r1, r3
 800b940:	480e      	ldr	r0, [pc, #56]	; (800b97c <xTaskRemoveFromEventList+0xb8>)
 800b942:	f7fe face 	bl	8009ee2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b94a:	4b0d      	ldr	r3, [pc, #52]	; (800b980 <xTaskRemoveFromEventList+0xbc>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b950:	429a      	cmp	r2, r3
 800b952:	d905      	bls.n	800b960 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b954:	2301      	movs	r3, #1
 800b956:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b958:	4b0a      	ldr	r3, [pc, #40]	; (800b984 <xTaskRemoveFromEventList+0xc0>)
 800b95a:	2201      	movs	r2, #1
 800b95c:	601a      	str	r2, [r3, #0]
 800b95e:	e001      	b.n	800b964 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800b960:	2300      	movs	r3, #0
 800b962:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b964:	697b      	ldr	r3, [r7, #20]
}
 800b966:	4618      	mov	r0, r3
 800b968:	3718      	adds	r7, #24
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	20000440 	.word	0x20000440
 800b974:	20000420 	.word	0x20000420
 800b978:	2000031c 	.word	0x2000031c
 800b97c:	200003d8 	.word	0x200003d8
 800b980:	20000318 	.word	0x20000318
 800b984:	2000042c 	.word	0x2000042c

0800b988 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b990:	4b06      	ldr	r3, [pc, #24]	; (800b9ac <vTaskInternalSetTimeOutState+0x24>)
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b998:	4b05      	ldr	r3, [pc, #20]	; (800b9b0 <vTaskInternalSetTimeOutState+0x28>)
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	605a      	str	r2, [r3, #4]
}
 800b9a0:	bf00      	nop
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr
 800b9ac:	20000430 	.word	0x20000430
 800b9b0:	2000041c 	.word	0x2000041c

0800b9b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b088      	sub	sp, #32
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d109      	bne.n	800b9d8 <xTaskCheckForTimeOut+0x24>
 800b9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c8:	f383 8811 	msr	BASEPRI, r3
 800b9cc:	f3bf 8f6f 	isb	sy
 800b9d0:	f3bf 8f4f 	dsb	sy
 800b9d4:	613b      	str	r3, [r7, #16]
 800b9d6:	e7fe      	b.n	800b9d6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d109      	bne.n	800b9f2 <xTaskCheckForTimeOut+0x3e>
 800b9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e2:	f383 8811 	msr	BASEPRI, r3
 800b9e6:	f3bf 8f6f 	isb	sy
 800b9ea:	f3bf 8f4f 	dsb	sy
 800b9ee:	60fb      	str	r3, [r7, #12]
 800b9f0:	e7fe      	b.n	800b9f0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800b9f2:	f000 fc7b 	bl	800c2ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b9f6:	4b1d      	ldr	r3, [pc, #116]	; (800ba6c <xTaskCheckForTimeOut+0xb8>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	69ba      	ldr	r2, [r7, #24]
 800ba02:	1ad3      	subs	r3, r2, r3
 800ba04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba0e:	d102      	bne.n	800ba16 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba10:	2300      	movs	r3, #0
 800ba12:	61fb      	str	r3, [r7, #28]
 800ba14:	e023      	b.n	800ba5e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	4b15      	ldr	r3, [pc, #84]	; (800ba70 <xTaskCheckForTimeOut+0xbc>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d007      	beq.n	800ba32 <xTaskCheckForTimeOut+0x7e>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	69ba      	ldr	r2, [r7, #24]
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d302      	bcc.n	800ba32 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	61fb      	str	r3, [r7, #28]
 800ba30:	e015      	b.n	800ba5e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	697a      	ldr	r2, [r7, #20]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d20b      	bcs.n	800ba54 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	1ad2      	subs	r2, r2, r3
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f7ff ff9d 	bl	800b988 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	61fb      	str	r3, [r7, #28]
 800ba52:	e004      	b.n	800ba5e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	2200      	movs	r2, #0
 800ba58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ba5e:	f000 fc73 	bl	800c348 <vPortExitCritical>

	return xReturn;
 800ba62:	69fb      	ldr	r3, [r7, #28]
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3720      	adds	r7, #32
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	2000041c 	.word	0x2000041c
 800ba70:	20000430 	.word	0x20000430

0800ba74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ba74:	b480      	push	{r7}
 800ba76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ba78:	4b03      	ldr	r3, [pc, #12]	; (800ba88 <vTaskMissedYield+0x14>)
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	601a      	str	r2, [r3, #0]
}
 800ba7e:	bf00      	nop
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr
 800ba88:	2000042c 	.word	0x2000042c

0800ba8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ba94:	f000 f852 	bl	800bb3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ba98:	4b06      	ldr	r3, [pc, #24]	; (800bab4 <prvIdleTask+0x28>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d9f9      	bls.n	800ba94 <prvIdleTask+0x8>
			{
				taskYIELD();
 800baa0:	4b05      	ldr	r3, [pc, #20]	; (800bab8 <prvIdleTask+0x2c>)
 800baa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baa6:	601a      	str	r2, [r3, #0]
 800baa8:	f3bf 8f4f 	dsb	sy
 800baac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bab0:	e7f0      	b.n	800ba94 <prvIdleTask+0x8>
 800bab2:	bf00      	nop
 800bab4:	2000031c 	.word	0x2000031c
 800bab8:	e000ed04 	.word	0xe000ed04

0800babc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bac2:	2300      	movs	r3, #0
 800bac4:	607b      	str	r3, [r7, #4]
 800bac6:	e00c      	b.n	800bae2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	4613      	mov	r3, r2
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	4413      	add	r3, r2
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	4a12      	ldr	r2, [pc, #72]	; (800bb1c <prvInitialiseTaskLists+0x60>)
 800bad4:	4413      	add	r3, r2
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7fe f9d6 	bl	8009e88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	3301      	adds	r3, #1
 800bae0:	607b      	str	r3, [r7, #4]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2b06      	cmp	r3, #6
 800bae6:	d9ef      	bls.n	800bac8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bae8:	480d      	ldr	r0, [pc, #52]	; (800bb20 <prvInitialiseTaskLists+0x64>)
 800baea:	f7fe f9cd 	bl	8009e88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800baee:	480d      	ldr	r0, [pc, #52]	; (800bb24 <prvInitialiseTaskLists+0x68>)
 800baf0:	f7fe f9ca 	bl	8009e88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800baf4:	480c      	ldr	r0, [pc, #48]	; (800bb28 <prvInitialiseTaskLists+0x6c>)
 800baf6:	f7fe f9c7 	bl	8009e88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bafa:	480c      	ldr	r0, [pc, #48]	; (800bb2c <prvInitialiseTaskLists+0x70>)
 800bafc:	f7fe f9c4 	bl	8009e88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb00:	480b      	ldr	r0, [pc, #44]	; (800bb30 <prvInitialiseTaskLists+0x74>)
 800bb02:	f7fe f9c1 	bl	8009e88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb06:	4b0b      	ldr	r3, [pc, #44]	; (800bb34 <prvInitialiseTaskLists+0x78>)
 800bb08:	4a05      	ldr	r2, [pc, #20]	; (800bb20 <prvInitialiseTaskLists+0x64>)
 800bb0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb0c:	4b0a      	ldr	r3, [pc, #40]	; (800bb38 <prvInitialiseTaskLists+0x7c>)
 800bb0e:	4a05      	ldr	r2, [pc, #20]	; (800bb24 <prvInitialiseTaskLists+0x68>)
 800bb10:	601a      	str	r2, [r3, #0]
}
 800bb12:	bf00      	nop
 800bb14:	3708      	adds	r7, #8
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop
 800bb1c:	2000031c 	.word	0x2000031c
 800bb20:	200003a8 	.word	0x200003a8
 800bb24:	200003bc 	.word	0x200003bc
 800bb28:	200003d8 	.word	0x200003d8
 800bb2c:	200003ec 	.word	0x200003ec
 800bb30:	20000404 	.word	0x20000404
 800bb34:	200003d0 	.word	0x200003d0
 800bb38:	200003d4 	.word	0x200003d4

0800bb3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b082      	sub	sp, #8
 800bb40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb42:	e019      	b.n	800bb78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bb44:	f000 fbd2 	bl	800c2ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb48:	4b0f      	ldr	r3, [pc, #60]	; (800bb88 <prvCheckTasksWaitingTermination+0x4c>)
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	3304      	adds	r3, #4
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7fe fa21 	bl	8009f9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bb5a:	4b0c      	ldr	r3, [pc, #48]	; (800bb8c <prvCheckTasksWaitingTermination+0x50>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	3b01      	subs	r3, #1
 800bb60:	4a0a      	ldr	r2, [pc, #40]	; (800bb8c <prvCheckTasksWaitingTermination+0x50>)
 800bb62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bb64:	4b0a      	ldr	r3, [pc, #40]	; (800bb90 <prvCheckTasksWaitingTermination+0x54>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	3b01      	subs	r3, #1
 800bb6a:	4a09      	ldr	r2, [pc, #36]	; (800bb90 <prvCheckTasksWaitingTermination+0x54>)
 800bb6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bb6e:	f000 fbeb 	bl	800c348 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 f80e 	bl	800bb94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb78:	4b05      	ldr	r3, [pc, #20]	; (800bb90 <prvCheckTasksWaitingTermination+0x54>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d1e1      	bne.n	800bb44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bb80:	bf00      	nop
 800bb82:	3708      	adds	r7, #8
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	200003ec 	.word	0x200003ec
 800bb8c:	20000418 	.word	0x20000418
 800bb90:	20000400 	.word	0x20000400

0800bb94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b084      	sub	sp, #16
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d108      	bne.n	800bbb8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f000 fd7a 	bl	800c6a4 <vPortFree>
				vPortFree( pxTCB );
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 fd77 	bl	800c6a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bbb6:	e017      	b.n	800bbe8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bbbe:	2b01      	cmp	r3, #1
 800bbc0:	d103      	bne.n	800bbca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 fd6e 	bl	800c6a4 <vPortFree>
	}
 800bbc8:	e00e      	b.n	800bbe8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bbd0:	2b02      	cmp	r3, #2
 800bbd2:	d009      	beq.n	800bbe8 <prvDeleteTCB+0x54>
 800bbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd8:	f383 8811 	msr	BASEPRI, r3
 800bbdc:	f3bf 8f6f 	isb	sy
 800bbe0:	f3bf 8f4f 	dsb	sy
 800bbe4:	60fb      	str	r3, [r7, #12]
 800bbe6:	e7fe      	b.n	800bbe6 <prvDeleteTCB+0x52>
	}
 800bbe8:	bf00      	nop
 800bbea:	3710      	adds	r7, #16
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbf6:	4b0c      	ldr	r3, [pc, #48]	; (800bc28 <prvResetNextTaskUnblockTime+0x38>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d104      	bne.n	800bc0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc00:	4b0a      	ldr	r3, [pc, #40]	; (800bc2c <prvResetNextTaskUnblockTime+0x3c>)
 800bc02:	f04f 32ff 	mov.w	r2, #4294967295
 800bc06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc08:	e008      	b.n	800bc1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc0a:	4b07      	ldr	r3, [pc, #28]	; (800bc28 <prvResetNextTaskUnblockTime+0x38>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	68db      	ldr	r3, [r3, #12]
 800bc12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	4a04      	ldr	r2, [pc, #16]	; (800bc2c <prvResetNextTaskUnblockTime+0x3c>)
 800bc1a:	6013      	str	r3, [r2, #0]
}
 800bc1c:	bf00      	nop
 800bc1e:	370c      	adds	r7, #12
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr
 800bc28:	200003d0 	.word	0x200003d0
 800bc2c:	20000438 	.word	0x20000438

0800bc30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc36:	4b0b      	ldr	r3, [pc, #44]	; (800bc64 <xTaskGetSchedulerState+0x34>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d102      	bne.n	800bc44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	607b      	str	r3, [r7, #4]
 800bc42:	e008      	b.n	800bc56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc44:	4b08      	ldr	r3, [pc, #32]	; (800bc68 <xTaskGetSchedulerState+0x38>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d102      	bne.n	800bc52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bc4c:	2302      	movs	r3, #2
 800bc4e:	607b      	str	r3, [r7, #4]
 800bc50:	e001      	b.n	800bc56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bc52:	2300      	movs	r3, #0
 800bc54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bc56:	687b      	ldr	r3, [r7, #4]
	}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	370c      	adds	r7, #12
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr
 800bc64:	20000424 	.word	0x20000424
 800bc68:	20000440 	.word	0x20000440

0800bc6c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d069      	beq.n	800bd56 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc86:	4b36      	ldr	r3, [pc, #216]	; (800bd60 <xTaskPriorityInherit+0xf4>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d259      	bcs.n	800bd44 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	699b      	ldr	r3, [r3, #24]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	db06      	blt.n	800bca6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc98:	4b31      	ldr	r3, [pc, #196]	; (800bd60 <xTaskPriorityInherit+0xf4>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc9e:	f1c3 0207 	rsb	r2, r3, #7
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	6959      	ldr	r1, [r3, #20]
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcae:	4613      	mov	r3, r2
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	4413      	add	r3, r2
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	4a2b      	ldr	r2, [pc, #172]	; (800bd64 <xTaskPriorityInherit+0xf8>)
 800bcb8:	4413      	add	r3, r2
 800bcba:	4299      	cmp	r1, r3
 800bcbc:	d13a      	bne.n	800bd34 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	3304      	adds	r3, #4
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7fe f96a 	bl	8009f9c <uxListRemove>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d115      	bne.n	800bcfa <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcd2:	4924      	ldr	r1, [pc, #144]	; (800bd64 <xTaskPriorityInherit+0xf8>)
 800bcd4:	4613      	mov	r3, r2
 800bcd6:	009b      	lsls	r3, r3, #2
 800bcd8:	4413      	add	r3, r2
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	440b      	add	r3, r1
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d10a      	bne.n	800bcfa <xTaskPriorityInherit+0x8e>
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce8:	2201      	movs	r2, #1
 800bcea:	fa02 f303 	lsl.w	r3, r2, r3
 800bcee:	43da      	mvns	r2, r3
 800bcf0:	4b1d      	ldr	r3, [pc, #116]	; (800bd68 <xTaskPriorityInherit+0xfc>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4013      	ands	r3, r2
 800bcf6:	4a1c      	ldr	r2, [pc, #112]	; (800bd68 <xTaskPriorityInherit+0xfc>)
 800bcf8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bcfa:	4b19      	ldr	r3, [pc, #100]	; (800bd60 <xTaskPriorityInherit+0xf4>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd08:	2201      	movs	r2, #1
 800bd0a:	409a      	lsls	r2, r3
 800bd0c:	4b16      	ldr	r3, [pc, #88]	; (800bd68 <xTaskPriorityInherit+0xfc>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4313      	orrs	r3, r2
 800bd12:	4a15      	ldr	r2, [pc, #84]	; (800bd68 <xTaskPriorityInherit+0xfc>)
 800bd14:	6013      	str	r3, [r2, #0]
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd1a:	4613      	mov	r3, r2
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	4413      	add	r3, r2
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	4a10      	ldr	r2, [pc, #64]	; (800bd64 <xTaskPriorityInherit+0xf8>)
 800bd24:	441a      	add	r2, r3
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	3304      	adds	r3, #4
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	4610      	mov	r0, r2
 800bd2e:	f7fe f8d8 	bl	8009ee2 <vListInsertEnd>
 800bd32:	e004      	b.n	800bd3e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bd34:	4b0a      	ldr	r3, [pc, #40]	; (800bd60 <xTaskPriorityInherit+0xf4>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	60fb      	str	r3, [r7, #12]
 800bd42:	e008      	b.n	800bd56 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd48:	4b05      	ldr	r3, [pc, #20]	; (800bd60 <xTaskPriorityInherit+0xf4>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d201      	bcs.n	800bd56 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bd52:	2301      	movs	r3, #1
 800bd54:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd56:	68fb      	ldr	r3, [r7, #12]
	}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3710      	adds	r7, #16
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	20000318 	.word	0x20000318
 800bd64:	2000031c 	.word	0x2000031c
 800bd68:	20000420 	.word	0x20000420

0800bd6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b086      	sub	sp, #24
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d06c      	beq.n	800be5c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bd82:	4b39      	ldr	r3, [pc, #228]	; (800be68 <xTaskPriorityDisinherit+0xfc>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	693a      	ldr	r2, [r7, #16]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d009      	beq.n	800bda0 <xTaskPriorityDisinherit+0x34>
 800bd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd90:	f383 8811 	msr	BASEPRI, r3
 800bd94:	f3bf 8f6f 	isb	sy
 800bd98:	f3bf 8f4f 	dsb	sy
 800bd9c:	60fb      	str	r3, [r7, #12]
 800bd9e:	e7fe      	b.n	800bd9e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d109      	bne.n	800bdbc <xTaskPriorityDisinherit+0x50>
 800bda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdac:	f383 8811 	msr	BASEPRI, r3
 800bdb0:	f3bf 8f6f 	isb	sy
 800bdb4:	f3bf 8f4f 	dsb	sy
 800bdb8:	60bb      	str	r3, [r7, #8]
 800bdba:	e7fe      	b.n	800bdba <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdc0:	1e5a      	subs	r2, r3, #1
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d044      	beq.n	800be5c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d140      	bne.n	800be5c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	3304      	adds	r3, #4
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7fe f8dc 	bl	8009f9c <uxListRemove>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d115      	bne.n	800be16 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdee:	491f      	ldr	r1, [pc, #124]	; (800be6c <xTaskPriorityDisinherit+0x100>)
 800bdf0:	4613      	mov	r3, r2
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	4413      	add	r3, r2
 800bdf6:	009b      	lsls	r3, r3, #2
 800bdf8:	440b      	add	r3, r1
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d10a      	bne.n	800be16 <xTaskPriorityDisinherit+0xaa>
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be04:	2201      	movs	r2, #1
 800be06:	fa02 f303 	lsl.w	r3, r2, r3
 800be0a:	43da      	mvns	r2, r3
 800be0c:	4b18      	ldr	r3, [pc, #96]	; (800be70 <xTaskPriorityDisinherit+0x104>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4013      	ands	r3, r2
 800be12:	4a17      	ldr	r2, [pc, #92]	; (800be70 <xTaskPriorityDisinherit+0x104>)
 800be14:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be22:	f1c3 0207 	rsb	r2, r3, #7
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be2e:	2201      	movs	r2, #1
 800be30:	409a      	lsls	r2, r3
 800be32:	4b0f      	ldr	r3, [pc, #60]	; (800be70 <xTaskPriorityDisinherit+0x104>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4313      	orrs	r3, r2
 800be38:	4a0d      	ldr	r2, [pc, #52]	; (800be70 <xTaskPriorityDisinherit+0x104>)
 800be3a:	6013      	str	r3, [r2, #0]
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be40:	4613      	mov	r3, r2
 800be42:	009b      	lsls	r3, r3, #2
 800be44:	4413      	add	r3, r2
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	4a08      	ldr	r2, [pc, #32]	; (800be6c <xTaskPriorityDisinherit+0x100>)
 800be4a:	441a      	add	r2, r3
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	3304      	adds	r3, #4
 800be50:	4619      	mov	r1, r3
 800be52:	4610      	mov	r0, r2
 800be54:	f7fe f845 	bl	8009ee2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800be58:	2301      	movs	r3, #1
 800be5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be5c:	697b      	ldr	r3, [r7, #20]
	}
 800be5e:	4618      	mov	r0, r3
 800be60:	3718      	adds	r7, #24
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	20000318 	.word	0x20000318
 800be6c:	2000031c 	.word	0x2000031c
 800be70:	20000420 	.word	0x20000420

0800be74 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800be74:	b580      	push	{r7, lr}
 800be76:	b088      	sub	sp, #32
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800be82:	2301      	movs	r3, #1
 800be84:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	f000 8081 	beq.w	800bf90 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800be8e:	69bb      	ldr	r3, [r7, #24]
 800be90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be92:	2b00      	cmp	r3, #0
 800be94:	d109      	bne.n	800beaa <vTaskPriorityDisinheritAfterTimeout+0x36>
 800be96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9a:	f383 8811 	msr	BASEPRI, r3
 800be9e:	f3bf 8f6f 	isb	sy
 800bea2:	f3bf 8f4f 	dsb	sy
 800bea6:	60fb      	str	r3, [r7, #12]
 800bea8:	e7fe      	b.n	800bea8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800beaa:	69bb      	ldr	r3, [r7, #24]
 800beac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800beae:	683a      	ldr	r2, [r7, #0]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d902      	bls.n	800beba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	61fb      	str	r3, [r7, #28]
 800beb8:	e002      	b.n	800bec0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800beba:	69bb      	ldr	r3, [r7, #24]
 800bebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bebe:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec4:	69fa      	ldr	r2, [r7, #28]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d062      	beq.n	800bf90 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bece:	697a      	ldr	r2, [r7, #20]
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d15d      	bne.n	800bf90 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bed4:	4b30      	ldr	r3, [pc, #192]	; (800bf98 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	69ba      	ldr	r2, [r7, #24]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d109      	bne.n	800bef2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800bede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee2:	f383 8811 	msr	BASEPRI, r3
 800bee6:	f3bf 8f6f 	isb	sy
 800beea:	f3bf 8f4f 	dsb	sy
 800beee:	60bb      	str	r3, [r7, #8]
 800bef0:	e7fe      	b.n	800bef0 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bef8:	69bb      	ldr	r3, [r7, #24]
 800befa:	69fa      	ldr	r2, [r7, #28]
 800befc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	699b      	ldr	r3, [r3, #24]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	db04      	blt.n	800bf10 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf06:	69fb      	ldr	r3, [r7, #28]
 800bf08:	f1c3 0207 	rsb	r2, r3, #7
 800bf0c:	69bb      	ldr	r3, [r7, #24]
 800bf0e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	6959      	ldr	r1, [r3, #20]
 800bf14:	693a      	ldr	r2, [r7, #16]
 800bf16:	4613      	mov	r3, r2
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	4413      	add	r3, r2
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	4a1f      	ldr	r2, [pc, #124]	; (800bf9c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800bf20:	4413      	add	r3, r2
 800bf22:	4299      	cmp	r1, r3
 800bf24:	d134      	bne.n	800bf90 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf26:	69bb      	ldr	r3, [r7, #24]
 800bf28:	3304      	adds	r3, #4
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7fe f836 	bl	8009f9c <uxListRemove>
 800bf30:	4603      	mov	r3, r0
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d115      	bne.n	800bf62 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf3a:	4918      	ldr	r1, [pc, #96]	; (800bf9c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	4413      	add	r3, r2
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	440b      	add	r3, r1
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d10a      	bne.n	800bf62 <vTaskPriorityDisinheritAfterTimeout+0xee>
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf50:	2201      	movs	r2, #1
 800bf52:	fa02 f303 	lsl.w	r3, r2, r3
 800bf56:	43da      	mvns	r2, r3
 800bf58:	4b11      	ldr	r3, [pc, #68]	; (800bfa0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4013      	ands	r3, r2
 800bf5e:	4a10      	ldr	r2, [pc, #64]	; (800bfa0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800bf60:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bf62:	69bb      	ldr	r3, [r7, #24]
 800bf64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf66:	2201      	movs	r2, #1
 800bf68:	409a      	lsls	r2, r3
 800bf6a:	4b0d      	ldr	r3, [pc, #52]	; (800bfa0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	4a0b      	ldr	r2, [pc, #44]	; (800bfa0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800bf72:	6013      	str	r3, [r2, #0]
 800bf74:	69bb      	ldr	r3, [r7, #24]
 800bf76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf78:	4613      	mov	r3, r2
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	4413      	add	r3, r2
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	4a06      	ldr	r2, [pc, #24]	; (800bf9c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800bf82:	441a      	add	r2, r3
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	3304      	adds	r3, #4
 800bf88:	4619      	mov	r1, r3
 800bf8a:	4610      	mov	r0, r2
 800bf8c:	f7fd ffa9 	bl	8009ee2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bf90:	bf00      	nop
 800bf92:	3720      	adds	r7, #32
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	20000318 	.word	0x20000318
 800bf9c:	2000031c 	.word	0x2000031c
 800bfa0:	20000420 	.word	0x20000420

0800bfa4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bfa4:	b480      	push	{r7}
 800bfa6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bfa8:	4b07      	ldr	r3, [pc, #28]	; (800bfc8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d004      	beq.n	800bfba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bfb0:	4b05      	ldr	r3, [pc, #20]	; (800bfc8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bfb6:	3201      	adds	r2, #1
 800bfb8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bfba:	4b03      	ldr	r3, [pc, #12]	; (800bfc8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
	}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr
 800bfc8:	20000318 	.word	0x20000318

0800bfcc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bfd6:	4b29      	ldr	r3, [pc, #164]	; (800c07c <prvAddCurrentTaskToDelayedList+0xb0>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfdc:	4b28      	ldr	r3, [pc, #160]	; (800c080 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	3304      	adds	r3, #4
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7fd ffda 	bl	8009f9c <uxListRemove>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d10b      	bne.n	800c006 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bfee:	4b24      	ldr	r3, [pc, #144]	; (800c080 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff4:	2201      	movs	r2, #1
 800bff6:	fa02 f303 	lsl.w	r3, r2, r3
 800bffa:	43da      	mvns	r2, r3
 800bffc:	4b21      	ldr	r3, [pc, #132]	; (800c084 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4013      	ands	r3, r2
 800c002:	4a20      	ldr	r2, [pc, #128]	; (800c084 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c004:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c00c:	d10a      	bne.n	800c024 <prvAddCurrentTaskToDelayedList+0x58>
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d007      	beq.n	800c024 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c014:	4b1a      	ldr	r3, [pc, #104]	; (800c080 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	3304      	adds	r3, #4
 800c01a:	4619      	mov	r1, r3
 800c01c:	481a      	ldr	r0, [pc, #104]	; (800c088 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c01e:	f7fd ff60 	bl	8009ee2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c022:	e026      	b.n	800c072 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c024:	68fa      	ldr	r2, [r7, #12]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	4413      	add	r3, r2
 800c02a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c02c:	4b14      	ldr	r3, [pc, #80]	; (800c080 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	68ba      	ldr	r2, [r7, #8]
 800c032:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c034:	68ba      	ldr	r2, [r7, #8]
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	429a      	cmp	r2, r3
 800c03a:	d209      	bcs.n	800c050 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c03c:	4b13      	ldr	r3, [pc, #76]	; (800c08c <prvAddCurrentTaskToDelayedList+0xc0>)
 800c03e:	681a      	ldr	r2, [r3, #0]
 800c040:	4b0f      	ldr	r3, [pc, #60]	; (800c080 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	3304      	adds	r3, #4
 800c046:	4619      	mov	r1, r3
 800c048:	4610      	mov	r0, r2
 800c04a:	f7fd ff6e 	bl	8009f2a <vListInsert>
}
 800c04e:	e010      	b.n	800c072 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c050:	4b0f      	ldr	r3, [pc, #60]	; (800c090 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	4b0a      	ldr	r3, [pc, #40]	; (800c080 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	3304      	adds	r3, #4
 800c05a:	4619      	mov	r1, r3
 800c05c:	4610      	mov	r0, r2
 800c05e:	f7fd ff64 	bl	8009f2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c062:	4b0c      	ldr	r3, [pc, #48]	; (800c094 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	68ba      	ldr	r2, [r7, #8]
 800c068:	429a      	cmp	r2, r3
 800c06a:	d202      	bcs.n	800c072 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c06c:	4a09      	ldr	r2, [pc, #36]	; (800c094 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	6013      	str	r3, [r2, #0]
}
 800c072:	bf00      	nop
 800c074:	3710      	adds	r7, #16
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	2000041c 	.word	0x2000041c
 800c080:	20000318 	.word	0x20000318
 800c084:	20000420 	.word	0x20000420
 800c088:	20000404 	.word	0x20000404
 800c08c:	200003d4 	.word	0x200003d4
 800c090:	200003d0 	.word	0x200003d0
 800c094:	20000438 	.word	0x20000438

0800c098 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c098:	b480      	push	{r7}
 800c09a:	b085      	sub	sp, #20
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	60b9      	str	r1, [r7, #8]
 800c0a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	3b04      	subs	r3, #4
 800c0a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c0b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	3b04      	subs	r3, #4
 800c0b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	f023 0201 	bic.w	r2, r3, #1
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	3b04      	subs	r3, #4
 800c0c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c0c8:	4a0c      	ldr	r2, [pc, #48]	; (800c0fc <pxPortInitialiseStack+0x64>)
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	3b14      	subs	r3, #20
 800c0d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	3b04      	subs	r3, #4
 800c0de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f06f 0202 	mvn.w	r2, #2
 800c0e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	3b20      	subs	r3, #32
 800c0ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3714      	adds	r7, #20
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr
 800c0fc:	0800c101 	.word	0x0800c101

0800c100 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c100:	b480      	push	{r7}
 800c102:	b085      	sub	sp, #20
 800c104:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c106:	2300      	movs	r3, #0
 800c108:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c10a:	4b11      	ldr	r3, [pc, #68]	; (800c150 <prvTaskExitError+0x50>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c112:	d009      	beq.n	800c128 <prvTaskExitError+0x28>
 800c114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c118:	f383 8811 	msr	BASEPRI, r3
 800c11c:	f3bf 8f6f 	isb	sy
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	60fb      	str	r3, [r7, #12]
 800c126:	e7fe      	b.n	800c126 <prvTaskExitError+0x26>
 800c128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12c:	f383 8811 	msr	BASEPRI, r3
 800c130:	f3bf 8f6f 	isb	sy
 800c134:	f3bf 8f4f 	dsb	sy
 800c138:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c13a:	bf00      	nop
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d0fc      	beq.n	800c13c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c142:	bf00      	nop
 800c144:	3714      	adds	r7, #20
 800c146:	46bd      	mov	sp, r7
 800c148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14c:	4770      	bx	lr
 800c14e:	bf00      	nop
 800c150:	2000002c 	.word	0x2000002c
	...

0800c160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c160:	4b07      	ldr	r3, [pc, #28]	; (800c180 <pxCurrentTCBConst2>)
 800c162:	6819      	ldr	r1, [r3, #0]
 800c164:	6808      	ldr	r0, [r1, #0]
 800c166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c16a:	f380 8809 	msr	PSP, r0
 800c16e:	f3bf 8f6f 	isb	sy
 800c172:	f04f 0000 	mov.w	r0, #0
 800c176:	f380 8811 	msr	BASEPRI, r0
 800c17a:	4770      	bx	lr
 800c17c:	f3af 8000 	nop.w

0800c180 <pxCurrentTCBConst2>:
 800c180:	20000318 	.word	0x20000318
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c184:	bf00      	nop
 800c186:	bf00      	nop

0800c188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c188:	4808      	ldr	r0, [pc, #32]	; (800c1ac <prvPortStartFirstTask+0x24>)
 800c18a:	6800      	ldr	r0, [r0, #0]
 800c18c:	6800      	ldr	r0, [r0, #0]
 800c18e:	f380 8808 	msr	MSP, r0
 800c192:	f04f 0000 	mov.w	r0, #0
 800c196:	f380 8814 	msr	CONTROL, r0
 800c19a:	b662      	cpsie	i
 800c19c:	b661      	cpsie	f
 800c19e:	f3bf 8f4f 	dsb	sy
 800c1a2:	f3bf 8f6f 	isb	sy
 800c1a6:	df00      	svc	0
 800c1a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c1aa:	bf00      	nop
 800c1ac:	e000ed08 	.word	0xe000ed08

0800c1b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b086      	sub	sp, #24
 800c1b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c1b6:	4b44      	ldr	r3, [pc, #272]	; (800c2c8 <xPortStartScheduler+0x118>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4a44      	ldr	r2, [pc, #272]	; (800c2cc <xPortStartScheduler+0x11c>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d109      	bne.n	800c1d4 <xPortStartScheduler+0x24>
 800c1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	613b      	str	r3, [r7, #16]
 800c1d2:	e7fe      	b.n	800c1d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c1d4:	4b3c      	ldr	r3, [pc, #240]	; (800c2c8 <xPortStartScheduler+0x118>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a3d      	ldr	r2, [pc, #244]	; (800c2d0 <xPortStartScheduler+0x120>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d109      	bne.n	800c1f2 <xPortStartScheduler+0x42>
 800c1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e2:	f383 8811 	msr	BASEPRI, r3
 800c1e6:	f3bf 8f6f 	isb	sy
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	60fb      	str	r3, [r7, #12]
 800c1f0:	e7fe      	b.n	800c1f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c1f2:	4b38      	ldr	r3, [pc, #224]	; (800c2d4 <xPortStartScheduler+0x124>)
 800c1f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	22ff      	movs	r2, #255	; 0xff
 800c202:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c20c:	78fb      	ldrb	r3, [r7, #3]
 800c20e:	b2db      	uxtb	r3, r3
 800c210:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c214:	b2da      	uxtb	r2, r3
 800c216:	4b30      	ldr	r3, [pc, #192]	; (800c2d8 <xPortStartScheduler+0x128>)
 800c218:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c21a:	4b30      	ldr	r3, [pc, #192]	; (800c2dc <xPortStartScheduler+0x12c>)
 800c21c:	2207      	movs	r2, #7
 800c21e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c220:	e009      	b.n	800c236 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800c222:	4b2e      	ldr	r3, [pc, #184]	; (800c2dc <xPortStartScheduler+0x12c>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	3b01      	subs	r3, #1
 800c228:	4a2c      	ldr	r2, [pc, #176]	; (800c2dc <xPortStartScheduler+0x12c>)
 800c22a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c22c:	78fb      	ldrb	r3, [r7, #3]
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	005b      	lsls	r3, r3, #1
 800c232:	b2db      	uxtb	r3, r3
 800c234:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c236:	78fb      	ldrb	r3, [r7, #3]
 800c238:	b2db      	uxtb	r3, r3
 800c23a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c23e:	2b80      	cmp	r3, #128	; 0x80
 800c240:	d0ef      	beq.n	800c222 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c242:	4b26      	ldr	r3, [pc, #152]	; (800c2dc <xPortStartScheduler+0x12c>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f1c3 0307 	rsb	r3, r3, #7
 800c24a:	2b04      	cmp	r3, #4
 800c24c:	d009      	beq.n	800c262 <xPortStartScheduler+0xb2>
 800c24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c252:	f383 8811 	msr	BASEPRI, r3
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	60bb      	str	r3, [r7, #8]
 800c260:	e7fe      	b.n	800c260 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c262:	4b1e      	ldr	r3, [pc, #120]	; (800c2dc <xPortStartScheduler+0x12c>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	021b      	lsls	r3, r3, #8
 800c268:	4a1c      	ldr	r2, [pc, #112]	; (800c2dc <xPortStartScheduler+0x12c>)
 800c26a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c26c:	4b1b      	ldr	r3, [pc, #108]	; (800c2dc <xPortStartScheduler+0x12c>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c274:	4a19      	ldr	r2, [pc, #100]	; (800c2dc <xPortStartScheduler+0x12c>)
 800c276:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	b2da      	uxtb	r2, r3
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c280:	4b17      	ldr	r3, [pc, #92]	; (800c2e0 <xPortStartScheduler+0x130>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a16      	ldr	r2, [pc, #88]	; (800c2e0 <xPortStartScheduler+0x130>)
 800c286:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c28a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c28c:	4b14      	ldr	r3, [pc, #80]	; (800c2e0 <xPortStartScheduler+0x130>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a13      	ldr	r2, [pc, #76]	; (800c2e0 <xPortStartScheduler+0x130>)
 800c292:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c296:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c298:	f000 f8d6 	bl	800c448 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c29c:	4b11      	ldr	r3, [pc, #68]	; (800c2e4 <xPortStartScheduler+0x134>)
 800c29e:	2200      	movs	r2, #0
 800c2a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c2a2:	f000 f8f5 	bl	800c490 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c2a6:	4b10      	ldr	r3, [pc, #64]	; (800c2e8 <xPortStartScheduler+0x138>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a0f      	ldr	r2, [pc, #60]	; (800c2e8 <xPortStartScheduler+0x138>)
 800c2ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c2b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c2b2:	f7ff ff69 	bl	800c188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c2b6:	f7ff fa6b 	bl	800b790 <vTaskSwitchContext>
	prvTaskExitError();
 800c2ba:	f7ff ff21 	bl	800c100 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c2be:	2300      	movs	r3, #0
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3718      	adds	r7, #24
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	e000ed00 	.word	0xe000ed00
 800c2cc:	410fc271 	.word	0x410fc271
 800c2d0:	410fc270 	.word	0x410fc270
 800c2d4:	e000e400 	.word	0xe000e400
 800c2d8:	2000044c 	.word	0x2000044c
 800c2dc:	20000450 	.word	0x20000450
 800c2e0:	e000ed20 	.word	0xe000ed20
 800c2e4:	2000002c 	.word	0x2000002c
 800c2e8:	e000ef34 	.word	0xe000ef34

0800c2ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f6:	f383 8811 	msr	BASEPRI, r3
 800c2fa:	f3bf 8f6f 	isb	sy
 800c2fe:	f3bf 8f4f 	dsb	sy
 800c302:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c304:	4b0e      	ldr	r3, [pc, #56]	; (800c340 <vPortEnterCritical+0x54>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	3301      	adds	r3, #1
 800c30a:	4a0d      	ldr	r2, [pc, #52]	; (800c340 <vPortEnterCritical+0x54>)
 800c30c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c30e:	4b0c      	ldr	r3, [pc, #48]	; (800c340 <vPortEnterCritical+0x54>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	2b01      	cmp	r3, #1
 800c314:	d10e      	bne.n	800c334 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c316:	4b0b      	ldr	r3, [pc, #44]	; (800c344 <vPortEnterCritical+0x58>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d009      	beq.n	800c334 <vPortEnterCritical+0x48>
 800c320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c324:	f383 8811 	msr	BASEPRI, r3
 800c328:	f3bf 8f6f 	isb	sy
 800c32c:	f3bf 8f4f 	dsb	sy
 800c330:	603b      	str	r3, [r7, #0]
 800c332:	e7fe      	b.n	800c332 <vPortEnterCritical+0x46>
	}
}
 800c334:	bf00      	nop
 800c336:	370c      	adds	r7, #12
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr
 800c340:	2000002c 	.word	0x2000002c
 800c344:	e000ed04 	.word	0xe000ed04

0800c348 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c34e:	4b11      	ldr	r3, [pc, #68]	; (800c394 <vPortExitCritical+0x4c>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d109      	bne.n	800c36a <vPortExitCritical+0x22>
 800c356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c35a:	f383 8811 	msr	BASEPRI, r3
 800c35e:	f3bf 8f6f 	isb	sy
 800c362:	f3bf 8f4f 	dsb	sy
 800c366:	607b      	str	r3, [r7, #4]
 800c368:	e7fe      	b.n	800c368 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800c36a:	4b0a      	ldr	r3, [pc, #40]	; (800c394 <vPortExitCritical+0x4c>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	3b01      	subs	r3, #1
 800c370:	4a08      	ldr	r2, [pc, #32]	; (800c394 <vPortExitCritical+0x4c>)
 800c372:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c374:	4b07      	ldr	r3, [pc, #28]	; (800c394 <vPortExitCritical+0x4c>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d104      	bne.n	800c386 <vPortExitCritical+0x3e>
 800c37c:	2300      	movs	r3, #0
 800c37e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c386:	bf00      	nop
 800c388:	370c      	adds	r7, #12
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop
 800c394:	2000002c 	.word	0x2000002c
	...

0800c3a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c3a0:	f3ef 8009 	mrs	r0, PSP
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	4b15      	ldr	r3, [pc, #84]	; (800c400 <pxCurrentTCBConst>)
 800c3aa:	681a      	ldr	r2, [r3, #0]
 800c3ac:	f01e 0f10 	tst.w	lr, #16
 800c3b0:	bf08      	it	eq
 800c3b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c3b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ba:	6010      	str	r0, [r2, #0]
 800c3bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c3c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c3c4:	f380 8811 	msr	BASEPRI, r0
 800c3c8:	f3bf 8f4f 	dsb	sy
 800c3cc:	f3bf 8f6f 	isb	sy
 800c3d0:	f7ff f9de 	bl	800b790 <vTaskSwitchContext>
 800c3d4:	f04f 0000 	mov.w	r0, #0
 800c3d8:	f380 8811 	msr	BASEPRI, r0
 800c3dc:	bc09      	pop	{r0, r3}
 800c3de:	6819      	ldr	r1, [r3, #0]
 800c3e0:	6808      	ldr	r0, [r1, #0]
 800c3e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e6:	f01e 0f10 	tst.w	lr, #16
 800c3ea:	bf08      	it	eq
 800c3ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c3f0:	f380 8809 	msr	PSP, r0
 800c3f4:	f3bf 8f6f 	isb	sy
 800c3f8:	4770      	bx	lr
 800c3fa:	bf00      	nop
 800c3fc:	f3af 8000 	nop.w

0800c400 <pxCurrentTCBConst>:
 800c400:	20000318 	.word	0x20000318
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c404:	bf00      	nop
 800c406:	bf00      	nop

0800c408 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
	__asm volatile
 800c40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c412:	f383 8811 	msr	BASEPRI, r3
 800c416:	f3bf 8f6f 	isb	sy
 800c41a:	f3bf 8f4f 	dsb	sy
 800c41e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c420:	f7ff f8fe 	bl	800b620 <xTaskIncrementTick>
 800c424:	4603      	mov	r3, r0
 800c426:	2b00      	cmp	r3, #0
 800c428:	d003      	beq.n	800c432 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c42a:	4b06      	ldr	r3, [pc, #24]	; (800c444 <SysTick_Handler+0x3c>)
 800c42c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c430:	601a      	str	r2, [r3, #0]
 800c432:	2300      	movs	r3, #0
 800c434:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c43c:	bf00      	nop
 800c43e:	3708      	adds	r7, #8
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	e000ed04 	.word	0xe000ed04

0800c448 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c448:	b480      	push	{r7}
 800c44a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c44c:	4b0b      	ldr	r3, [pc, #44]	; (800c47c <vPortSetupTimerInterrupt+0x34>)
 800c44e:	2200      	movs	r2, #0
 800c450:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c452:	4b0b      	ldr	r3, [pc, #44]	; (800c480 <vPortSetupTimerInterrupt+0x38>)
 800c454:	2200      	movs	r2, #0
 800c456:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c458:	4b0a      	ldr	r3, [pc, #40]	; (800c484 <vPortSetupTimerInterrupt+0x3c>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a0a      	ldr	r2, [pc, #40]	; (800c488 <vPortSetupTimerInterrupt+0x40>)
 800c45e:	fba2 2303 	umull	r2, r3, r2, r3
 800c462:	099b      	lsrs	r3, r3, #6
 800c464:	4a09      	ldr	r2, [pc, #36]	; (800c48c <vPortSetupTimerInterrupt+0x44>)
 800c466:	3b01      	subs	r3, #1
 800c468:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c46a:	4b04      	ldr	r3, [pc, #16]	; (800c47c <vPortSetupTimerInterrupt+0x34>)
 800c46c:	2207      	movs	r2, #7
 800c46e:	601a      	str	r2, [r3, #0]
}
 800c470:	bf00      	nop
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr
 800c47a:	bf00      	nop
 800c47c:	e000e010 	.word	0xe000e010
 800c480:	e000e018 	.word	0xe000e018
 800c484:	20000000 	.word	0x20000000
 800c488:	10624dd3 	.word	0x10624dd3
 800c48c:	e000e014 	.word	0xe000e014

0800c490 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c490:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c4a0 <vPortEnableVFP+0x10>
 800c494:	6801      	ldr	r1, [r0, #0]
 800c496:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c49a:	6001      	str	r1, [r0, #0]
 800c49c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c49e:	bf00      	nop
 800c4a0:	e000ed88 	.word	0xe000ed88

0800c4a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b085      	sub	sp, #20
 800c4a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c4aa:	f3ef 8305 	mrs	r3, IPSR
 800c4ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	2b0f      	cmp	r3, #15
 800c4b4:	d913      	bls.n	800c4de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c4b6:	4a16      	ldr	r2, [pc, #88]	; (800c510 <vPortValidateInterruptPriority+0x6c>)
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	4413      	add	r3, r2
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c4c0:	4b14      	ldr	r3, [pc, #80]	; (800c514 <vPortValidateInterruptPriority+0x70>)
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	7afa      	ldrb	r2, [r7, #11]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d209      	bcs.n	800c4de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800c4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ce:	f383 8811 	msr	BASEPRI, r3
 800c4d2:	f3bf 8f6f 	isb	sy
 800c4d6:	f3bf 8f4f 	dsb	sy
 800c4da:	607b      	str	r3, [r7, #4]
 800c4dc:	e7fe      	b.n	800c4dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c4de:	4b0e      	ldr	r3, [pc, #56]	; (800c518 <vPortValidateInterruptPriority+0x74>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c4e6:	4b0d      	ldr	r3, [pc, #52]	; (800c51c <vPortValidateInterruptPriority+0x78>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d909      	bls.n	800c502 <vPortValidateInterruptPriority+0x5e>
 800c4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f2:	f383 8811 	msr	BASEPRI, r3
 800c4f6:	f3bf 8f6f 	isb	sy
 800c4fa:	f3bf 8f4f 	dsb	sy
 800c4fe:	603b      	str	r3, [r7, #0]
 800c500:	e7fe      	b.n	800c500 <vPortValidateInterruptPriority+0x5c>
	}
 800c502:	bf00      	nop
 800c504:	3714      	adds	r7, #20
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr
 800c50e:	bf00      	nop
 800c510:	e000e3f0 	.word	0xe000e3f0
 800c514:	2000044c 	.word	0x2000044c
 800c518:	e000ed0c 	.word	0xe000ed0c
 800c51c:	20000450 	.word	0x20000450

0800c520 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b08a      	sub	sp, #40	; 0x28
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c528:	2300      	movs	r3, #0
 800c52a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c52c:	f7fe ffac 	bl	800b488 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c530:	4b57      	ldr	r3, [pc, #348]	; (800c690 <pvPortMalloc+0x170>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d101      	bne.n	800c53c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c538:	f000 f90c 	bl	800c754 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c53c:	4b55      	ldr	r3, [pc, #340]	; (800c694 <pvPortMalloc+0x174>)
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	4013      	ands	r3, r2
 800c544:	2b00      	cmp	r3, #0
 800c546:	f040 808c 	bne.w	800c662 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d01c      	beq.n	800c58a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800c550:	2208      	movs	r2, #8
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	4413      	add	r3, r2
 800c556:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f003 0307 	and.w	r3, r3, #7
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d013      	beq.n	800c58a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f023 0307 	bic.w	r3, r3, #7
 800c568:	3308      	adds	r3, #8
 800c56a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f003 0307 	and.w	r3, r3, #7
 800c572:	2b00      	cmp	r3, #0
 800c574:	d009      	beq.n	800c58a <pvPortMalloc+0x6a>
 800c576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c57a:	f383 8811 	msr	BASEPRI, r3
 800c57e:	f3bf 8f6f 	isb	sy
 800c582:	f3bf 8f4f 	dsb	sy
 800c586:	617b      	str	r3, [r7, #20]
 800c588:	e7fe      	b.n	800c588 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d068      	beq.n	800c662 <pvPortMalloc+0x142>
 800c590:	4b41      	ldr	r3, [pc, #260]	; (800c698 <pvPortMalloc+0x178>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	429a      	cmp	r2, r3
 800c598:	d863      	bhi.n	800c662 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c59a:	4b40      	ldr	r3, [pc, #256]	; (800c69c <pvPortMalloc+0x17c>)
 800c59c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c59e:	4b3f      	ldr	r3, [pc, #252]	; (800c69c <pvPortMalloc+0x17c>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5a4:	e004      	b.n	800c5b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800c5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	687a      	ldr	r2, [r7, #4]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d903      	bls.n	800c5c2 <pvPortMalloc+0xa2>
 800c5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d1f1      	bne.n	800c5a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c5c2:	4b33      	ldr	r3, [pc, #204]	; (800c690 <pvPortMalloc+0x170>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d04a      	beq.n	800c662 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c5cc:	6a3b      	ldr	r3, [r7, #32]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	2208      	movs	r2, #8
 800c5d2:	4413      	add	r3, r2
 800c5d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	6a3b      	ldr	r3, [r7, #32]
 800c5dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e0:	685a      	ldr	r2, [r3, #4]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	1ad2      	subs	r2, r2, r3
 800c5e6:	2308      	movs	r3, #8
 800c5e8:	005b      	lsls	r3, r3, #1
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d91e      	bls.n	800c62c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c5ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	4413      	add	r3, r2
 800c5f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5f6:	69bb      	ldr	r3, [r7, #24]
 800c5f8:	f003 0307 	and.w	r3, r3, #7
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d009      	beq.n	800c614 <pvPortMalloc+0xf4>
 800c600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c604:	f383 8811 	msr	BASEPRI, r3
 800c608:	f3bf 8f6f 	isb	sy
 800c60c:	f3bf 8f4f 	dsb	sy
 800c610:	613b      	str	r3, [r7, #16]
 800c612:	e7fe      	b.n	800c612 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c616:	685a      	ldr	r2, [r3, #4]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	1ad2      	subs	r2, r2, r3
 800c61c:	69bb      	ldr	r3, [r7, #24]
 800c61e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c626:	69b8      	ldr	r0, [r7, #24]
 800c628:	f000 f8f6 	bl	800c818 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c62c:	4b1a      	ldr	r3, [pc, #104]	; (800c698 <pvPortMalloc+0x178>)
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c632:	685b      	ldr	r3, [r3, #4]
 800c634:	1ad3      	subs	r3, r2, r3
 800c636:	4a18      	ldr	r2, [pc, #96]	; (800c698 <pvPortMalloc+0x178>)
 800c638:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c63a:	4b17      	ldr	r3, [pc, #92]	; (800c698 <pvPortMalloc+0x178>)
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	4b18      	ldr	r3, [pc, #96]	; (800c6a0 <pvPortMalloc+0x180>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	429a      	cmp	r2, r3
 800c644:	d203      	bcs.n	800c64e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c646:	4b14      	ldr	r3, [pc, #80]	; (800c698 <pvPortMalloc+0x178>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4a15      	ldr	r2, [pc, #84]	; (800c6a0 <pvPortMalloc+0x180>)
 800c64c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c650:	685a      	ldr	r2, [r3, #4]
 800c652:	4b10      	ldr	r3, [pc, #64]	; (800c694 <pvPortMalloc+0x174>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	431a      	orrs	r2, r3
 800c658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65e:	2200      	movs	r2, #0
 800c660:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c662:	f7fe ff1f 	bl	800b4a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	f003 0307 	and.w	r3, r3, #7
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d009      	beq.n	800c684 <pvPortMalloc+0x164>
 800c670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c674:	f383 8811 	msr	BASEPRI, r3
 800c678:	f3bf 8f6f 	isb	sy
 800c67c:	f3bf 8f4f 	dsb	sy
 800c680:	60fb      	str	r3, [r7, #12]
 800c682:	e7fe      	b.n	800c682 <pvPortMalloc+0x162>
	return pvReturn;
 800c684:	69fb      	ldr	r3, [r7, #28]
}
 800c686:	4618      	mov	r0, r3
 800c688:	3728      	adds	r7, #40	; 0x28
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	bf00      	nop
 800c690:	2000405c 	.word	0x2000405c
 800c694:	20004068 	.word	0x20004068
 800c698:	20004060 	.word	0x20004060
 800c69c:	20004054 	.word	0x20004054
 800c6a0:	20004064 	.word	0x20004064

0800c6a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b086      	sub	sp, #24
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d046      	beq.n	800c744 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c6b6:	2308      	movs	r3, #8
 800c6b8:	425b      	negs	r3, r3
 800c6ba:	697a      	ldr	r2, [r7, #20]
 800c6bc:	4413      	add	r3, r2
 800c6be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	685a      	ldr	r2, [r3, #4]
 800c6c8:	4b20      	ldr	r3, [pc, #128]	; (800c74c <vPortFree+0xa8>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	4013      	ands	r3, r2
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d109      	bne.n	800c6e6 <vPortFree+0x42>
 800c6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d6:	f383 8811 	msr	BASEPRI, r3
 800c6da:	f3bf 8f6f 	isb	sy
 800c6de:	f3bf 8f4f 	dsb	sy
 800c6e2:	60fb      	str	r3, [r7, #12]
 800c6e4:	e7fe      	b.n	800c6e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d009      	beq.n	800c702 <vPortFree+0x5e>
 800c6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f2:	f383 8811 	msr	BASEPRI, r3
 800c6f6:	f3bf 8f6f 	isb	sy
 800c6fa:	f3bf 8f4f 	dsb	sy
 800c6fe:	60bb      	str	r3, [r7, #8]
 800c700:	e7fe      	b.n	800c700 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	685a      	ldr	r2, [r3, #4]
 800c706:	4b11      	ldr	r3, [pc, #68]	; (800c74c <vPortFree+0xa8>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4013      	ands	r3, r2
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d019      	beq.n	800c744 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d115      	bne.n	800c744 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	685a      	ldr	r2, [r3, #4]
 800c71c:	4b0b      	ldr	r3, [pc, #44]	; (800c74c <vPortFree+0xa8>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	43db      	mvns	r3, r3
 800c722:	401a      	ands	r2, r3
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c728:	f7fe feae 	bl	800b488 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	685a      	ldr	r2, [r3, #4]
 800c730:	4b07      	ldr	r3, [pc, #28]	; (800c750 <vPortFree+0xac>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4413      	add	r3, r2
 800c736:	4a06      	ldr	r2, [pc, #24]	; (800c750 <vPortFree+0xac>)
 800c738:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c73a:	6938      	ldr	r0, [r7, #16]
 800c73c:	f000 f86c 	bl	800c818 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c740:	f7fe feb0 	bl	800b4a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c744:	bf00      	nop
 800c746:	3718      	adds	r7, #24
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}
 800c74c:	20004068 	.word	0x20004068
 800c750:	20004060 	.word	0x20004060

0800c754 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c754:	b480      	push	{r7}
 800c756:	b085      	sub	sp, #20
 800c758:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c75a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c75e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c760:	4b27      	ldr	r3, [pc, #156]	; (800c800 <prvHeapInit+0xac>)
 800c762:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f003 0307 	and.w	r3, r3, #7
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d00c      	beq.n	800c788 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	3307      	adds	r3, #7
 800c772:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f023 0307 	bic.w	r3, r3, #7
 800c77a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c77c:	68ba      	ldr	r2, [r7, #8]
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	1ad3      	subs	r3, r2, r3
 800c782:	4a1f      	ldr	r2, [pc, #124]	; (800c800 <prvHeapInit+0xac>)
 800c784:	4413      	add	r3, r2
 800c786:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c78c:	4a1d      	ldr	r2, [pc, #116]	; (800c804 <prvHeapInit+0xb0>)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c792:	4b1c      	ldr	r3, [pc, #112]	; (800c804 <prvHeapInit+0xb0>)
 800c794:	2200      	movs	r2, #0
 800c796:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	68ba      	ldr	r2, [r7, #8]
 800c79c:	4413      	add	r3, r2
 800c79e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c7a0:	2208      	movs	r2, #8
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	1a9b      	subs	r3, r3, r2
 800c7a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f023 0307 	bic.w	r3, r3, #7
 800c7ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	4a15      	ldr	r2, [pc, #84]	; (800c808 <prvHeapInit+0xb4>)
 800c7b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c7b6:	4b14      	ldr	r3, [pc, #80]	; (800c808 <prvHeapInit+0xb4>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c7be:	4b12      	ldr	r3, [pc, #72]	; (800c808 <prvHeapInit+0xb4>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	68fa      	ldr	r2, [r7, #12]
 800c7ce:	1ad2      	subs	r2, r2, r3
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c7d4:	4b0c      	ldr	r3, [pc, #48]	; (800c808 <prvHeapInit+0xb4>)
 800c7d6:	681a      	ldr	r2, [r3, #0]
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	4a0a      	ldr	r2, [pc, #40]	; (800c80c <prvHeapInit+0xb8>)
 800c7e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	4a09      	ldr	r2, [pc, #36]	; (800c810 <prvHeapInit+0xbc>)
 800c7ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c7ec:	4b09      	ldr	r3, [pc, #36]	; (800c814 <prvHeapInit+0xc0>)
 800c7ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c7f2:	601a      	str	r2, [r3, #0]
}
 800c7f4:	bf00      	nop
 800c7f6:	3714      	adds	r7, #20
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr
 800c800:	20000454 	.word	0x20000454
 800c804:	20004054 	.word	0x20004054
 800c808:	2000405c 	.word	0x2000405c
 800c80c:	20004064 	.word	0x20004064
 800c810:	20004060 	.word	0x20004060
 800c814:	20004068 	.word	0x20004068

0800c818 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c818:	b480      	push	{r7}
 800c81a:	b085      	sub	sp, #20
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c820:	4b28      	ldr	r3, [pc, #160]	; (800c8c4 <prvInsertBlockIntoFreeList+0xac>)
 800c822:	60fb      	str	r3, [r7, #12]
 800c824:	e002      	b.n	800c82c <prvInsertBlockIntoFreeList+0x14>
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	60fb      	str	r3, [r7, #12]
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	687a      	ldr	r2, [r7, #4]
 800c832:	429a      	cmp	r2, r3
 800c834:	d8f7      	bhi.n	800c826 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	68ba      	ldr	r2, [r7, #8]
 800c840:	4413      	add	r3, r2
 800c842:	687a      	ldr	r2, [r7, #4]
 800c844:	429a      	cmp	r2, r3
 800c846:	d108      	bne.n	800c85a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	685a      	ldr	r2, [r3, #4]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	441a      	add	r2, r3
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	685b      	ldr	r3, [r3, #4]
 800c862:	68ba      	ldr	r2, [r7, #8]
 800c864:	441a      	add	r2, r3
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d118      	bne.n	800c8a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	4b15      	ldr	r3, [pc, #84]	; (800c8c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	429a      	cmp	r2, r3
 800c878:	d00d      	beq.n	800c896 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	685a      	ldr	r2, [r3, #4]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	685b      	ldr	r3, [r3, #4]
 800c884:	441a      	add	r2, r3
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	681a      	ldr	r2, [r3, #0]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	601a      	str	r2, [r3, #0]
 800c894:	e008      	b.n	800c8a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c896:	4b0c      	ldr	r3, [pc, #48]	; (800c8c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c898:	681a      	ldr	r2, [r3, #0]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	601a      	str	r2, [r3, #0]
 800c89e:	e003      	b.n	800c8a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c8a8:	68fa      	ldr	r2, [r7, #12]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d002      	beq.n	800c8b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8b6:	bf00      	nop
 800c8b8:	3714      	adds	r7, #20
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr
 800c8c2:	bf00      	nop
 800c8c4:	20004054 	.word	0x20004054
 800c8c8:	2000405c 	.word	0x2000405c

0800c8cc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	490e      	ldr	r1, [pc, #56]	; (800c90c <MX_USB_HOST_Init+0x40>)
 800c8d4:	480e      	ldr	r0, [pc, #56]	; (800c910 <MX_USB_HOST_Init+0x44>)
 800c8d6:	f7fb fb3f 	bl	8007f58 <USBH_Init>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d001      	beq.n	800c8e4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c8e0:	f7f5 f80d 	bl	80018fe <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c8e4:	490b      	ldr	r1, [pc, #44]	; (800c914 <MX_USB_HOST_Init+0x48>)
 800c8e6:	480a      	ldr	r0, [pc, #40]	; (800c910 <MX_USB_HOST_Init+0x44>)
 800c8e8:	f7fb fbec 	bl	80080c4 <USBH_RegisterClass>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d001      	beq.n	800c8f6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c8f2:	f7f5 f804 	bl	80018fe <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c8f6:	4806      	ldr	r0, [pc, #24]	; (800c910 <MX_USB_HOST_Init+0x44>)
 800c8f8:	f7fb fc70 	bl	80081dc <USBH_Start>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d001      	beq.n	800c906 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c902:	f7f4 fffc 	bl	80018fe <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c906:	bf00      	nop
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	0800c919 	.word	0x0800c919
 800c910:	200042c4 	.word	0x200042c4
 800c914:	2000000c 	.word	0x2000000c

0800c918 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	460b      	mov	r3, r1
 800c922:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c924:	78fb      	ldrb	r3, [r7, #3]
 800c926:	3b01      	subs	r3, #1
 800c928:	2b04      	cmp	r3, #4
 800c92a:	d819      	bhi.n	800c960 <USBH_UserProcess+0x48>
 800c92c:	a201      	add	r2, pc, #4	; (adr r2, 800c934 <USBH_UserProcess+0x1c>)
 800c92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c932:	bf00      	nop
 800c934:	0800c961 	.word	0x0800c961
 800c938:	0800c951 	.word	0x0800c951
 800c93c:	0800c961 	.word	0x0800c961
 800c940:	0800c959 	.word	0x0800c959
 800c944:	0800c949 	.word	0x0800c949
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c948:	4b09      	ldr	r3, [pc, #36]	; (800c970 <USBH_UserProcess+0x58>)
 800c94a:	2203      	movs	r2, #3
 800c94c:	701a      	strb	r2, [r3, #0]
  break;
 800c94e:	e008      	b.n	800c962 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c950:	4b07      	ldr	r3, [pc, #28]	; (800c970 <USBH_UserProcess+0x58>)
 800c952:	2202      	movs	r2, #2
 800c954:	701a      	strb	r2, [r3, #0]
  break;
 800c956:	e004      	b.n	800c962 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c958:	4b05      	ldr	r3, [pc, #20]	; (800c970 <USBH_UserProcess+0x58>)
 800c95a:	2201      	movs	r2, #1
 800c95c:	701a      	strb	r2, [r3, #0]
  break;
 800c95e:	e000      	b.n	800c962 <USBH_UserProcess+0x4a>

  default:
  break;
 800c960:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c962:	bf00      	nop
 800c964:	370c      	adds	r7, #12
 800c966:	46bd      	mov	sp, r7
 800c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96c:	4770      	bx	lr
 800c96e:	bf00      	nop
 800c970:	2000406c 	.word	0x2000406c

0800c974 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b08a      	sub	sp, #40	; 0x28
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c97c:	f107 0314 	add.w	r3, r7, #20
 800c980:	2200      	movs	r2, #0
 800c982:	601a      	str	r2, [r3, #0]
 800c984:	605a      	str	r2, [r3, #4]
 800c986:	609a      	str	r2, [r3, #8]
 800c988:	60da      	str	r2, [r3, #12]
 800c98a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c994:	d147      	bne.n	800ca26 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c996:	2300      	movs	r3, #0
 800c998:	613b      	str	r3, [r7, #16]
 800c99a:	4b25      	ldr	r3, [pc, #148]	; (800ca30 <HAL_HCD_MspInit+0xbc>)
 800c99c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c99e:	4a24      	ldr	r2, [pc, #144]	; (800ca30 <HAL_HCD_MspInit+0xbc>)
 800c9a0:	f043 0301 	orr.w	r3, r3, #1
 800c9a4:	6313      	str	r3, [r2, #48]	; 0x30
 800c9a6:	4b22      	ldr	r3, [pc, #136]	; (800ca30 <HAL_HCD_MspInit+0xbc>)
 800c9a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9aa:	f003 0301 	and.w	r3, r3, #1
 800c9ae:	613b      	str	r3, [r7, #16]
 800c9b0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c9b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c9c0:	f107 0314 	add.w	r3, r7, #20
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	481b      	ldr	r0, [pc, #108]	; (800ca34 <HAL_HCD_MspInit+0xc0>)
 800c9c8:	f7f5 fbb0 	bl	800212c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c9cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c9d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9d2:	2302      	movs	r3, #2
 800c9d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c9de:	230a      	movs	r3, #10
 800c9e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c9e2:	f107 0314 	add.w	r3, r7, #20
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	4812      	ldr	r0, [pc, #72]	; (800ca34 <HAL_HCD_MspInit+0xc0>)
 800c9ea:	f7f5 fb9f 	bl	800212c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c9ee:	4b10      	ldr	r3, [pc, #64]	; (800ca30 <HAL_HCD_MspInit+0xbc>)
 800c9f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9f2:	4a0f      	ldr	r2, [pc, #60]	; (800ca30 <HAL_HCD_MspInit+0xbc>)
 800c9f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9f8:	6353      	str	r3, [r2, #52]	; 0x34
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	60fb      	str	r3, [r7, #12]
 800c9fe:	4b0c      	ldr	r3, [pc, #48]	; (800ca30 <HAL_HCD_MspInit+0xbc>)
 800ca00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca02:	4a0b      	ldr	r2, [pc, #44]	; (800ca30 <HAL_HCD_MspInit+0xbc>)
 800ca04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ca08:	6453      	str	r3, [r2, #68]	; 0x44
 800ca0a:	4b09      	ldr	r3, [pc, #36]	; (800ca30 <HAL_HCD_MspInit+0xbc>)
 800ca0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca12:	60fb      	str	r3, [r7, #12]
 800ca14:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ca16:	2200      	movs	r2, #0
 800ca18:	2100      	movs	r1, #0
 800ca1a:	2043      	movs	r0, #67	; 0x43
 800ca1c:	f7f5 fb2c 	bl	8002078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ca20:	2043      	movs	r0, #67	; 0x43
 800ca22:	f7f5 fb45 	bl	80020b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ca26:	bf00      	nop
 800ca28:	3728      	adds	r7, #40	; 0x28
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	40023800 	.word	0x40023800
 800ca34:	40020000 	.word	0x40020000

0800ca38 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7fc f875 	bl	8008b36 <USBH_LL_IncTimer>
}
 800ca4c:	bf00      	nop
 800ca4e:	3708      	adds	r7, #8
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7fc f8b9 	bl	8008bda <USBH_LL_Connect>
}
 800ca68:	bf00      	nop
 800ca6a:	3708      	adds	r7, #8
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b082      	sub	sp, #8
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7fc f8ce 	bl	8008c20 <USBH_LL_Disconnect>
}
 800ca84:	bf00      	nop
 800ca86:	3708      	adds	r7, #8
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	460b      	mov	r3, r1
 800ca96:	70fb      	strb	r3, [r7, #3]
 800ca98:	4613      	mov	r3, r2
 800ca9a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7fc f903 	bl	8008cae <USBH_LL_NotifyURBChange>
#endif
}
 800caa8:	bf00      	nop
 800caaa:	3708      	adds	r7, #8
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b082      	sub	sp, #8
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7fc f863 	bl	8008b8a <USBH_LL_PortEnabled>
}
 800cac4:	bf00      	nop
 800cac6:	3708      	adds	r7, #8
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cada:	4618      	mov	r0, r3
 800cadc:	f7fc f86f 	bl	8008bbe <USBH_LL_PortDisabled>
}
 800cae0:	bf00      	nop
 800cae2:	3708      	adds	r7, #8
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d12a      	bne.n	800cb50 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800cafa:	4a18      	ldr	r2, [pc, #96]	; (800cb5c <USBH_LL_Init+0x74>)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	4a15      	ldr	r2, [pc, #84]	; (800cb5c <USBH_LL_Init+0x74>)
 800cb06:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cb0a:	4b14      	ldr	r3, [pc, #80]	; (800cb5c <USBH_LL_Init+0x74>)
 800cb0c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cb10:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800cb12:	4b12      	ldr	r3, [pc, #72]	; (800cb5c <USBH_LL_Init+0x74>)
 800cb14:	2208      	movs	r2, #8
 800cb16:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800cb18:	4b10      	ldr	r3, [pc, #64]	; (800cb5c <USBH_LL_Init+0x74>)
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cb1e:	4b0f      	ldr	r3, [pc, #60]	; (800cb5c <USBH_LL_Init+0x74>)
 800cb20:	2200      	movs	r2, #0
 800cb22:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800cb24:	4b0d      	ldr	r3, [pc, #52]	; (800cb5c <USBH_LL_Init+0x74>)
 800cb26:	2202      	movs	r2, #2
 800cb28:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cb2a:	4b0c      	ldr	r3, [pc, #48]	; (800cb5c <USBH_LL_Init+0x74>)
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800cb30:	480a      	ldr	r0, [pc, #40]	; (800cb5c <USBH_LL_Init+0x74>)
 800cb32:	f7f5 fcd2 	bl	80024da <HAL_HCD_Init>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d001      	beq.n	800cb40 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800cb3c:	f7f4 fedf 	bl	80018fe <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800cb40:	4806      	ldr	r0, [pc, #24]	; (800cb5c <USBH_LL_Init+0x74>)
 800cb42:	f7f6 f8d5 	bl	8002cf0 <HAL_HCD_GetCurrentFrame>
 800cb46:	4603      	mov	r3, r0
 800cb48:	4619      	mov	r1, r3
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f7fb ffe4 	bl	8008b18 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cb50:	2300      	movs	r3, #0
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3708      	adds	r7, #8
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	200046a8 	.word	0x200046a8

0800cb60 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b084      	sub	sp, #16
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cb76:	4618      	mov	r0, r3
 800cb78:	f7f6 f842 	bl	8002c00 <HAL_HCD_Start>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cb80:	7bfb      	ldrb	r3, [r7, #15]
 800cb82:	4618      	mov	r0, r3
 800cb84:	f000 f95c 	bl	800ce40 <USBH_Get_USB_Status>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3710      	adds	r7, #16
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}

0800cb96 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800cb96:	b580      	push	{r7, lr}
 800cb98:	b084      	sub	sp, #16
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cba2:	2300      	movs	r3, #0
 800cba4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cbac:	4618      	mov	r0, r3
 800cbae:	f7f6 f84a 	bl	8002c46 <HAL_HCD_Stop>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cbb6:	7bfb      	ldrb	r3, [r7, #15]
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f000 f941 	bl	800ce40 <USBH_Get_USB_Status>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3710      	adds	r7, #16
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b084      	sub	sp, #16
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7f6 f894 	bl	8002d0c <HAL_HCD_GetCurrentSpeed>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b01      	cmp	r3, #1
 800cbe8:	d007      	beq.n	800cbfa <USBH_LL_GetSpeed+0x2e>
 800cbea:	2b01      	cmp	r3, #1
 800cbec:	d302      	bcc.n	800cbf4 <USBH_LL_GetSpeed+0x28>
 800cbee:	2b02      	cmp	r3, #2
 800cbf0:	d006      	beq.n	800cc00 <USBH_LL_GetSpeed+0x34>
 800cbf2:	e008      	b.n	800cc06 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	73fb      	strb	r3, [r7, #15]
    break;
 800cbf8:	e008      	b.n	800cc0c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	73fb      	strb	r3, [r7, #15]
    break;
 800cbfe:	e005      	b.n	800cc0c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cc00:	2302      	movs	r3, #2
 800cc02:	73fb      	strb	r3, [r7, #15]
    break;
 800cc04:	e002      	b.n	800cc0c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800cc06:	2301      	movs	r3, #1
 800cc08:	73fb      	strb	r3, [r7, #15]
    break;
 800cc0a:	bf00      	nop
  }
  return  speed;
 800cc0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3710      	adds	r7, #16
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}

0800cc16 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800cc16:	b580      	push	{r7, lr}
 800cc18:	b084      	sub	sp, #16
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cc22:	2300      	movs	r3, #0
 800cc24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7f6 f827 	bl	8002c80 <HAL_HCD_ResetPort>
 800cc32:	4603      	mov	r3, r0
 800cc34:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cc36:	7bfb      	ldrb	r3, [r7, #15]
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f000 f901 	bl	800ce40 <USBH_Get_USB_Status>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc42:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3710      	adds	r7, #16
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	460b      	mov	r3, r1
 800cc56:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc5e:	78fa      	ldrb	r2, [r7, #3]
 800cc60:	4611      	mov	r1, r2
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7f6 f82f 	bl	8002cc6 <HAL_HCD_HC_GetXferCount>
 800cc68:	4603      	mov	r3, r0
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3708      	adds	r7, #8
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}

0800cc72 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cc72:	b590      	push	{r4, r7, lr}
 800cc74:	b089      	sub	sp, #36	; 0x24
 800cc76:	af04      	add	r7, sp, #16
 800cc78:	6078      	str	r0, [r7, #4]
 800cc7a:	4608      	mov	r0, r1
 800cc7c:	4611      	mov	r1, r2
 800cc7e:	461a      	mov	r2, r3
 800cc80:	4603      	mov	r3, r0
 800cc82:	70fb      	strb	r3, [r7, #3]
 800cc84:	460b      	mov	r3, r1
 800cc86:	70bb      	strb	r3, [r7, #2]
 800cc88:	4613      	mov	r3, r2
 800cc8a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cc90:	2300      	movs	r3, #0
 800cc92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cc9a:	787c      	ldrb	r4, [r7, #1]
 800cc9c:	78ba      	ldrb	r2, [r7, #2]
 800cc9e:	78f9      	ldrb	r1, [r7, #3]
 800cca0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cca2:	9302      	str	r3, [sp, #8]
 800cca4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cca8:	9301      	str	r3, [sp, #4]
 800ccaa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ccae:	9300      	str	r3, [sp, #0]
 800ccb0:	4623      	mov	r3, r4
 800ccb2:	f7f5 fc74 	bl	800259e <HAL_HCD_HC_Init>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ccba:	7bfb      	ldrb	r3, [r7, #15]
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f000 f8bf 	bl	800ce40 <USBH_Get_USB_Status>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccc6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3714      	adds	r7, #20
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd90      	pop	{r4, r7, pc}

0800ccd0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	460b      	mov	r3, r1
 800ccda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cce0:	2300      	movs	r3, #0
 800cce2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ccea:	78fa      	ldrb	r2, [r7, #3]
 800ccec:	4611      	mov	r1, r2
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f7f5 fced 	bl	80026ce <HAL_HCD_HC_Halt>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ccf8:	7bfb      	ldrb	r3, [r7, #15]
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f000 f8a0 	bl	800ce40 <USBH_Get_USB_Status>
 800cd00:	4603      	mov	r3, r0
 800cd02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd04:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3710      	adds	r7, #16
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}

0800cd0e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cd0e:	b590      	push	{r4, r7, lr}
 800cd10:	b089      	sub	sp, #36	; 0x24
 800cd12:	af04      	add	r7, sp, #16
 800cd14:	6078      	str	r0, [r7, #4]
 800cd16:	4608      	mov	r0, r1
 800cd18:	4611      	mov	r1, r2
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	70fb      	strb	r3, [r7, #3]
 800cd20:	460b      	mov	r3, r1
 800cd22:	70bb      	strb	r3, [r7, #2]
 800cd24:	4613      	mov	r3, r2
 800cd26:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cd36:	787c      	ldrb	r4, [r7, #1]
 800cd38:	78ba      	ldrb	r2, [r7, #2]
 800cd3a:	78f9      	ldrb	r1, [r7, #3]
 800cd3c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cd40:	9303      	str	r3, [sp, #12]
 800cd42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cd44:	9302      	str	r3, [sp, #8]
 800cd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd48:	9301      	str	r3, [sp, #4]
 800cd4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd4e:	9300      	str	r3, [sp, #0]
 800cd50:	4623      	mov	r3, r4
 800cd52:	f7f5 fcdf 	bl	8002714 <HAL_HCD_HC_SubmitRequest>
 800cd56:	4603      	mov	r3, r0
 800cd58:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800cd5a:	7bfb      	ldrb	r3, [r7, #15]
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f000 f86f 	bl	800ce40 <USBH_Get_USB_Status>
 800cd62:	4603      	mov	r3, r0
 800cd64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd66:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3714      	adds	r7, #20
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd90      	pop	{r4, r7, pc}

0800cd70 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b082      	sub	sp, #8
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	460b      	mov	r3, r1
 800cd7a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cd82:	78fa      	ldrb	r2, [r7, #3]
 800cd84:	4611      	mov	r1, r2
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7f5 ff88 	bl	8002c9c <HAL_HCD_HC_GetURBState>
 800cd8c:	4603      	mov	r3, r0
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3708      	adds	r7, #8
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b082      	sub	sp, #8
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
 800cd9e:	460b      	mov	r3, r1
 800cda0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d103      	bne.n	800cdb4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800cdac:	78fb      	ldrb	r3, [r7, #3]
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f000 f872 	bl	800ce98 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cdb4:	20c8      	movs	r0, #200	; 0xc8
 800cdb6:	f7f5 f863 	bl	8001e80 <HAL_Delay>
  return USBH_OK;
 800cdba:	2300      	movs	r3, #0
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3708      	adds	r7, #8
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b085      	sub	sp, #20
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	460b      	mov	r3, r1
 800cdce:	70fb      	strb	r3, [r7, #3]
 800cdd0:	4613      	mov	r3, r2
 800cdd2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cdda:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cddc:	78fa      	ldrb	r2, [r7, #3]
 800cdde:	68f9      	ldr	r1, [r7, #12]
 800cde0:	4613      	mov	r3, r2
 800cde2:	009b      	lsls	r3, r3, #2
 800cde4:	4413      	add	r3, r2
 800cde6:	00db      	lsls	r3, r3, #3
 800cde8:	440b      	add	r3, r1
 800cdea:	333b      	adds	r3, #59	; 0x3b
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d00a      	beq.n	800ce08 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800cdf2:	78fa      	ldrb	r2, [r7, #3]
 800cdf4:	68f9      	ldr	r1, [r7, #12]
 800cdf6:	4613      	mov	r3, r2
 800cdf8:	009b      	lsls	r3, r3, #2
 800cdfa:	4413      	add	r3, r2
 800cdfc:	00db      	lsls	r3, r3, #3
 800cdfe:	440b      	add	r3, r1
 800ce00:	3350      	adds	r3, #80	; 0x50
 800ce02:	78ba      	ldrb	r2, [r7, #2]
 800ce04:	701a      	strb	r2, [r3, #0]
 800ce06:	e009      	b.n	800ce1c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ce08:	78fa      	ldrb	r2, [r7, #3]
 800ce0a:	68f9      	ldr	r1, [r7, #12]
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	009b      	lsls	r3, r3, #2
 800ce10:	4413      	add	r3, r2
 800ce12:	00db      	lsls	r3, r3, #3
 800ce14:	440b      	add	r3, r1
 800ce16:	3351      	adds	r3, #81	; 0x51
 800ce18:	78ba      	ldrb	r2, [r7, #2]
 800ce1a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ce1c:	2300      	movs	r3, #0
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3714      	adds	r7, #20
 800ce22:	46bd      	mov	sp, r7
 800ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce28:	4770      	bx	lr

0800ce2a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ce2a:	b580      	push	{r7, lr}
 800ce2c:	b082      	sub	sp, #8
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f7f5 f824 	bl	8001e80 <HAL_Delay>
}
 800ce38:	bf00      	nop
 800ce3a:	3708      	adds	r7, #8
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b085      	sub	sp, #20
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	4603      	mov	r3, r0
 800ce48:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ce4e:	79fb      	ldrb	r3, [r7, #7]
 800ce50:	2b03      	cmp	r3, #3
 800ce52:	d817      	bhi.n	800ce84 <USBH_Get_USB_Status+0x44>
 800ce54:	a201      	add	r2, pc, #4	; (adr r2, 800ce5c <USBH_Get_USB_Status+0x1c>)
 800ce56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce5a:	bf00      	nop
 800ce5c:	0800ce6d 	.word	0x0800ce6d
 800ce60:	0800ce73 	.word	0x0800ce73
 800ce64:	0800ce79 	.word	0x0800ce79
 800ce68:	0800ce7f 	.word	0x0800ce7f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce70:	e00b      	b.n	800ce8a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ce72:	2302      	movs	r3, #2
 800ce74:	73fb      	strb	r3, [r7, #15]
    break;
 800ce76:	e008      	b.n	800ce8a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ce78:	2301      	movs	r3, #1
 800ce7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce7c:	e005      	b.n	800ce8a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ce7e:	2302      	movs	r3, #2
 800ce80:	73fb      	strb	r3, [r7, #15]
    break;
 800ce82:	e002      	b.n	800ce8a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ce84:	2302      	movs	r3, #2
 800ce86:	73fb      	strb	r3, [r7, #15]
    break;
 800ce88:	bf00      	nop
  }
  return usb_status;
 800ce8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3714      	adds	r7, #20
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b084      	sub	sp, #16
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	4603      	mov	r3, r0
 800cea0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800cea2:	79fb      	ldrb	r3, [r7, #7]
 800cea4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800cea6:	79fb      	ldrb	r3, [r7, #7]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d102      	bne.n	800ceb2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ceac:	2301      	movs	r3, #1
 800ceae:	73fb      	strb	r3, [r7, #15]
 800ceb0:	e001      	b.n	800ceb6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ceb6:	7bfb      	ldrb	r3, [r7, #15]
 800ceb8:	461a      	mov	r2, r3
 800ceba:	2101      	movs	r1, #1
 800cebc:	4803      	ldr	r0, [pc, #12]	; (800cecc <MX_DriverVbusFS+0x34>)
 800cebe:	f7f5 facf 	bl	8002460 <HAL_GPIO_WritePin>
}
 800cec2:	bf00      	nop
 800cec4:	3710      	adds	r7, #16
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	bf00      	nop
 800cecc:	40020800 	.word	0x40020800

0800ced0 <__errno>:
 800ced0:	4b01      	ldr	r3, [pc, #4]	; (800ced8 <__errno+0x8>)
 800ced2:	6818      	ldr	r0, [r3, #0]
 800ced4:	4770      	bx	lr
 800ced6:	bf00      	nop
 800ced8:	20000030 	.word	0x20000030

0800cedc <__libc_init_array>:
 800cedc:	b570      	push	{r4, r5, r6, lr}
 800cede:	4e0d      	ldr	r6, [pc, #52]	; (800cf14 <__libc_init_array+0x38>)
 800cee0:	4c0d      	ldr	r4, [pc, #52]	; (800cf18 <__libc_init_array+0x3c>)
 800cee2:	1ba4      	subs	r4, r4, r6
 800cee4:	10a4      	asrs	r4, r4, #2
 800cee6:	2500      	movs	r5, #0
 800cee8:	42a5      	cmp	r5, r4
 800ceea:	d109      	bne.n	800cf00 <__libc_init_array+0x24>
 800ceec:	4e0b      	ldr	r6, [pc, #44]	; (800cf1c <__libc_init_array+0x40>)
 800ceee:	4c0c      	ldr	r4, [pc, #48]	; (800cf20 <__libc_init_array+0x44>)
 800cef0:	f000 f8f6 	bl	800d0e0 <_init>
 800cef4:	1ba4      	subs	r4, r4, r6
 800cef6:	10a4      	asrs	r4, r4, #2
 800cef8:	2500      	movs	r5, #0
 800cefa:	42a5      	cmp	r5, r4
 800cefc:	d105      	bne.n	800cf0a <__libc_init_array+0x2e>
 800cefe:	bd70      	pop	{r4, r5, r6, pc}
 800cf00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cf04:	4798      	blx	r3
 800cf06:	3501      	adds	r5, #1
 800cf08:	e7ee      	b.n	800cee8 <__libc_init_array+0xc>
 800cf0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cf0e:	4798      	blx	r3
 800cf10:	3501      	adds	r5, #1
 800cf12:	e7f2      	b.n	800cefa <__libc_init_array+0x1e>
 800cf14:	0800d780 	.word	0x0800d780
 800cf18:	0800d780 	.word	0x0800d780
 800cf1c:	0800d780 	.word	0x0800d780
 800cf20:	0800d784 	.word	0x0800d784

0800cf24 <malloc>:
 800cf24:	4b02      	ldr	r3, [pc, #8]	; (800cf30 <malloc+0xc>)
 800cf26:	4601      	mov	r1, r0
 800cf28:	6818      	ldr	r0, [r3, #0]
 800cf2a:	f000 b86d 	b.w	800d008 <_malloc_r>
 800cf2e:	bf00      	nop
 800cf30:	20000030 	.word	0x20000030

0800cf34 <free>:
 800cf34:	4b02      	ldr	r3, [pc, #8]	; (800cf40 <free+0xc>)
 800cf36:	4601      	mov	r1, r0
 800cf38:	6818      	ldr	r0, [r3, #0]
 800cf3a:	f000 b817 	b.w	800cf6c <_free_r>
 800cf3e:	bf00      	nop
 800cf40:	20000030 	.word	0x20000030

0800cf44 <memcpy>:
 800cf44:	b510      	push	{r4, lr}
 800cf46:	1e43      	subs	r3, r0, #1
 800cf48:	440a      	add	r2, r1
 800cf4a:	4291      	cmp	r1, r2
 800cf4c:	d100      	bne.n	800cf50 <memcpy+0xc>
 800cf4e:	bd10      	pop	{r4, pc}
 800cf50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf54:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf58:	e7f7      	b.n	800cf4a <memcpy+0x6>

0800cf5a <memset>:
 800cf5a:	4402      	add	r2, r0
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d100      	bne.n	800cf64 <memset+0xa>
 800cf62:	4770      	bx	lr
 800cf64:	f803 1b01 	strb.w	r1, [r3], #1
 800cf68:	e7f9      	b.n	800cf5e <memset+0x4>
	...

0800cf6c <_free_r>:
 800cf6c:	b538      	push	{r3, r4, r5, lr}
 800cf6e:	4605      	mov	r5, r0
 800cf70:	2900      	cmp	r1, #0
 800cf72:	d045      	beq.n	800d000 <_free_r+0x94>
 800cf74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf78:	1f0c      	subs	r4, r1, #4
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	bfb8      	it	lt
 800cf7e:	18e4      	addlt	r4, r4, r3
 800cf80:	f000 f8ac 	bl	800d0dc <__malloc_lock>
 800cf84:	4a1f      	ldr	r2, [pc, #124]	; (800d004 <_free_r+0x98>)
 800cf86:	6813      	ldr	r3, [r2, #0]
 800cf88:	4610      	mov	r0, r2
 800cf8a:	b933      	cbnz	r3, 800cf9a <_free_r+0x2e>
 800cf8c:	6063      	str	r3, [r4, #4]
 800cf8e:	6014      	str	r4, [r2, #0]
 800cf90:	4628      	mov	r0, r5
 800cf92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf96:	f000 b8a2 	b.w	800d0de <__malloc_unlock>
 800cf9a:	42a3      	cmp	r3, r4
 800cf9c:	d90c      	bls.n	800cfb8 <_free_r+0x4c>
 800cf9e:	6821      	ldr	r1, [r4, #0]
 800cfa0:	1862      	adds	r2, r4, r1
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	bf04      	itt	eq
 800cfa6:	681a      	ldreq	r2, [r3, #0]
 800cfa8:	685b      	ldreq	r3, [r3, #4]
 800cfaa:	6063      	str	r3, [r4, #4]
 800cfac:	bf04      	itt	eq
 800cfae:	1852      	addeq	r2, r2, r1
 800cfb0:	6022      	streq	r2, [r4, #0]
 800cfb2:	6004      	str	r4, [r0, #0]
 800cfb4:	e7ec      	b.n	800cf90 <_free_r+0x24>
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	685a      	ldr	r2, [r3, #4]
 800cfba:	b10a      	cbz	r2, 800cfc0 <_free_r+0x54>
 800cfbc:	42a2      	cmp	r2, r4
 800cfbe:	d9fa      	bls.n	800cfb6 <_free_r+0x4a>
 800cfc0:	6819      	ldr	r1, [r3, #0]
 800cfc2:	1858      	adds	r0, r3, r1
 800cfc4:	42a0      	cmp	r0, r4
 800cfc6:	d10b      	bne.n	800cfe0 <_free_r+0x74>
 800cfc8:	6820      	ldr	r0, [r4, #0]
 800cfca:	4401      	add	r1, r0
 800cfcc:	1858      	adds	r0, r3, r1
 800cfce:	4282      	cmp	r2, r0
 800cfd0:	6019      	str	r1, [r3, #0]
 800cfd2:	d1dd      	bne.n	800cf90 <_free_r+0x24>
 800cfd4:	6810      	ldr	r0, [r2, #0]
 800cfd6:	6852      	ldr	r2, [r2, #4]
 800cfd8:	605a      	str	r2, [r3, #4]
 800cfda:	4401      	add	r1, r0
 800cfdc:	6019      	str	r1, [r3, #0]
 800cfde:	e7d7      	b.n	800cf90 <_free_r+0x24>
 800cfe0:	d902      	bls.n	800cfe8 <_free_r+0x7c>
 800cfe2:	230c      	movs	r3, #12
 800cfe4:	602b      	str	r3, [r5, #0]
 800cfe6:	e7d3      	b.n	800cf90 <_free_r+0x24>
 800cfe8:	6820      	ldr	r0, [r4, #0]
 800cfea:	1821      	adds	r1, r4, r0
 800cfec:	428a      	cmp	r2, r1
 800cfee:	bf04      	itt	eq
 800cff0:	6811      	ldreq	r1, [r2, #0]
 800cff2:	6852      	ldreq	r2, [r2, #4]
 800cff4:	6062      	str	r2, [r4, #4]
 800cff6:	bf04      	itt	eq
 800cff8:	1809      	addeq	r1, r1, r0
 800cffa:	6021      	streq	r1, [r4, #0]
 800cffc:	605c      	str	r4, [r3, #4]
 800cffe:	e7c7      	b.n	800cf90 <_free_r+0x24>
 800d000:	bd38      	pop	{r3, r4, r5, pc}
 800d002:	bf00      	nop
 800d004:	20004070 	.word	0x20004070

0800d008 <_malloc_r>:
 800d008:	b570      	push	{r4, r5, r6, lr}
 800d00a:	1ccd      	adds	r5, r1, #3
 800d00c:	f025 0503 	bic.w	r5, r5, #3
 800d010:	3508      	adds	r5, #8
 800d012:	2d0c      	cmp	r5, #12
 800d014:	bf38      	it	cc
 800d016:	250c      	movcc	r5, #12
 800d018:	2d00      	cmp	r5, #0
 800d01a:	4606      	mov	r6, r0
 800d01c:	db01      	blt.n	800d022 <_malloc_r+0x1a>
 800d01e:	42a9      	cmp	r1, r5
 800d020:	d903      	bls.n	800d02a <_malloc_r+0x22>
 800d022:	230c      	movs	r3, #12
 800d024:	6033      	str	r3, [r6, #0]
 800d026:	2000      	movs	r0, #0
 800d028:	bd70      	pop	{r4, r5, r6, pc}
 800d02a:	f000 f857 	bl	800d0dc <__malloc_lock>
 800d02e:	4a21      	ldr	r2, [pc, #132]	; (800d0b4 <_malloc_r+0xac>)
 800d030:	6814      	ldr	r4, [r2, #0]
 800d032:	4621      	mov	r1, r4
 800d034:	b991      	cbnz	r1, 800d05c <_malloc_r+0x54>
 800d036:	4c20      	ldr	r4, [pc, #128]	; (800d0b8 <_malloc_r+0xb0>)
 800d038:	6823      	ldr	r3, [r4, #0]
 800d03a:	b91b      	cbnz	r3, 800d044 <_malloc_r+0x3c>
 800d03c:	4630      	mov	r0, r6
 800d03e:	f000 f83d 	bl	800d0bc <_sbrk_r>
 800d042:	6020      	str	r0, [r4, #0]
 800d044:	4629      	mov	r1, r5
 800d046:	4630      	mov	r0, r6
 800d048:	f000 f838 	bl	800d0bc <_sbrk_r>
 800d04c:	1c43      	adds	r3, r0, #1
 800d04e:	d124      	bne.n	800d09a <_malloc_r+0x92>
 800d050:	230c      	movs	r3, #12
 800d052:	6033      	str	r3, [r6, #0]
 800d054:	4630      	mov	r0, r6
 800d056:	f000 f842 	bl	800d0de <__malloc_unlock>
 800d05a:	e7e4      	b.n	800d026 <_malloc_r+0x1e>
 800d05c:	680b      	ldr	r3, [r1, #0]
 800d05e:	1b5b      	subs	r3, r3, r5
 800d060:	d418      	bmi.n	800d094 <_malloc_r+0x8c>
 800d062:	2b0b      	cmp	r3, #11
 800d064:	d90f      	bls.n	800d086 <_malloc_r+0x7e>
 800d066:	600b      	str	r3, [r1, #0]
 800d068:	50cd      	str	r5, [r1, r3]
 800d06a:	18cc      	adds	r4, r1, r3
 800d06c:	4630      	mov	r0, r6
 800d06e:	f000 f836 	bl	800d0de <__malloc_unlock>
 800d072:	f104 000b 	add.w	r0, r4, #11
 800d076:	1d23      	adds	r3, r4, #4
 800d078:	f020 0007 	bic.w	r0, r0, #7
 800d07c:	1ac3      	subs	r3, r0, r3
 800d07e:	d0d3      	beq.n	800d028 <_malloc_r+0x20>
 800d080:	425a      	negs	r2, r3
 800d082:	50e2      	str	r2, [r4, r3]
 800d084:	e7d0      	b.n	800d028 <_malloc_r+0x20>
 800d086:	428c      	cmp	r4, r1
 800d088:	684b      	ldr	r3, [r1, #4]
 800d08a:	bf16      	itet	ne
 800d08c:	6063      	strne	r3, [r4, #4]
 800d08e:	6013      	streq	r3, [r2, #0]
 800d090:	460c      	movne	r4, r1
 800d092:	e7eb      	b.n	800d06c <_malloc_r+0x64>
 800d094:	460c      	mov	r4, r1
 800d096:	6849      	ldr	r1, [r1, #4]
 800d098:	e7cc      	b.n	800d034 <_malloc_r+0x2c>
 800d09a:	1cc4      	adds	r4, r0, #3
 800d09c:	f024 0403 	bic.w	r4, r4, #3
 800d0a0:	42a0      	cmp	r0, r4
 800d0a2:	d005      	beq.n	800d0b0 <_malloc_r+0xa8>
 800d0a4:	1a21      	subs	r1, r4, r0
 800d0a6:	4630      	mov	r0, r6
 800d0a8:	f000 f808 	bl	800d0bc <_sbrk_r>
 800d0ac:	3001      	adds	r0, #1
 800d0ae:	d0cf      	beq.n	800d050 <_malloc_r+0x48>
 800d0b0:	6025      	str	r5, [r4, #0]
 800d0b2:	e7db      	b.n	800d06c <_malloc_r+0x64>
 800d0b4:	20004070 	.word	0x20004070
 800d0b8:	20004074 	.word	0x20004074

0800d0bc <_sbrk_r>:
 800d0bc:	b538      	push	{r3, r4, r5, lr}
 800d0be:	4c06      	ldr	r4, [pc, #24]	; (800d0d8 <_sbrk_r+0x1c>)
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	4605      	mov	r5, r0
 800d0c4:	4608      	mov	r0, r1
 800d0c6:	6023      	str	r3, [r4, #0]
 800d0c8:	f7f4 fe22 	bl	8001d10 <_sbrk>
 800d0cc:	1c43      	adds	r3, r0, #1
 800d0ce:	d102      	bne.n	800d0d6 <_sbrk_r+0x1a>
 800d0d0:	6823      	ldr	r3, [r4, #0]
 800d0d2:	b103      	cbz	r3, 800d0d6 <_sbrk_r+0x1a>
 800d0d4:	602b      	str	r3, [r5, #0]
 800d0d6:	bd38      	pop	{r3, r4, r5, pc}
 800d0d8:	2000496c 	.word	0x2000496c

0800d0dc <__malloc_lock>:
 800d0dc:	4770      	bx	lr

0800d0de <__malloc_unlock>:
 800d0de:	4770      	bx	lr

0800d0e0 <_init>:
 800d0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0e2:	bf00      	nop
 800d0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0e6:	bc08      	pop	{r3}
 800d0e8:	469e      	mov	lr, r3
 800d0ea:	4770      	bx	lr

0800d0ec <_fini>:
 800d0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ee:	bf00      	nop
 800d0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0f2:	bc08      	pop	{r3}
 800d0f4:	469e      	mov	lr, r3
 800d0f6:	4770      	bx	lr
